{"ts":1349401544292,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1349401593355,"patch":[[{"diffs":[[1,"10-4-12:\n    Added fileOps/fileOperator.js\n        Implemented the file output code (takes in a string and generates a file that is then presentyed for download)"]],"start1":0,"start2":0,"length1":0,"length2":161}]],"length":161,"saved":false}
{"ts":1349401818220,"patch":[[{"diffs":[[0,"rator.js"],[1,":"],[0,"\n       "]],"start1":34,"start2":34,"length1":16,"length2":17},{"diffs":[[0,"sent"],[-1,"y"],[0,"ed f"]],"start1":141,"start2":141,"length1":9,"length2":8},{"diffs":[[0,"ownload)"],[1,"\n        Implemented the drag and drop feature as well as a basic file Input analyzer.\n    TODO:\n        Pin down the rubixCube.js data structure and have the input be converted to that.\n    Notes:\n        The output of the first half can be formatted as JSON in a txt file.\n        For the table we can use a number to represent the key using the binary form."]],"start1":153,"start2":153,"length1":8,"length2":368}]],"length":521,"saved":false}
{"ts":1349401885574,"patch":[[{"diffs":[[0,"ary form"],[-1,"."],[1,"(hashing might be nice, but I'm not sure if that structure exosts in javascript)"]],"start1":512,"start2":512,"length1":9,"length2":88}]],"length":600,"saved":false}
{"ts":1349401888864,"patch":[[{"diffs":[[0,"ary form"],[1,"\n            "],[0,"(hashing"]],"start1":512,"start2":512,"length1":16,"length2":29}]],"length":613,"saved":false}
{"ts":1349401902840,"patch":[[{"diffs":[[1,"John Dunham "],[0,"10-4-12:"]],"start1":0,"start2":0,"length1":8,"length2":20}]],"length":625,"saved":false}
