{"ts":1350167525600,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1350167560345,"patch":[[{"diffs":[[1,"\r\n$(document).ready(function() {\r\n    \r\n});"]],"start1":0,"start2":0,"length1":0,"length2":43}]],"length":43,"saved":false}
{"ts":1350169536656,"patch":[[{"diffs":[[0,"   \r\n});"],[1,"\r\n\r\nfunction TableGenerator() {}\r\n\r\n\r\n\r\nfunction CubeHeuristics() {}\r\n\r\nCubeHeuristics.goalState = RubixState.initWithGoalState();\r\n\r\nCubeHeuristics.heuristic = function(rubixState)\r\n{\r\n    return Math.max(CubeHeuristics.manhattanDistanceOfSides(),\r\n                    CubeHeuristics.manhattanDistanceOfCorners());\r\n};\r\n\r\n/* \r\n\r\nNote if a corner cubie is in the right position but the faces are wrong, it will\r\ntake at least 2 moves to right it. 3 moves for sides.\r\n\r\n*/\r\n\r\nCubeHeuristics.manhattanDistanceOfSides = function(rubixState)\r\n{\r\n    var sum = 0;\r\n    \r\n    \r\n    \r\n    return sum / 4;\r\n};\r\n\r\nCubeHeuristics.manhattanDistanceOfCorners = function(rubixState)\r\n{\r\n    var sum = 0;\r\n    \r\n    \r\n    \r\n    return sum / 4;\r\n};\r\n\r\nCubeHeuristics.adjacentFaces"]],"start1":35,"start2":35,"length1":8,"length2":773}]],"length":808,"saved":false}
{"ts":1350170032520,"patch":[[{"diffs":[[0,"\n\r\n/* \r\n"],[-1,"\r\n"],[0,"Note if "]],"start1":363,"start2":363,"length1":18,"length2":16},{"diffs":[[0,"sides.\r\n"],[-1,"\r\n"],[0,"*/\r\n\r\nCu"]],"start1":500,"start2":500,"length1":18,"length2":16},{"diffs":[[0,"ics."],[-1,"adjacentFaces"],[1,"farCorners = {\r\n    0  : 14,\r\n    2  : 12,\r\n    5  : 19,\r\n    7  : 17,\r\n    12 : 2,\r\n    14 : 0,\r\n    17 : 7,\r\n    19 : 5\r\n};\r\n\r\nCubeHeuristics.farSides = {\r\n    1  : [],\r\n    3  : [],\r\n    5  : [],\r\n    6  : [],\r\n    8  : [],\r\n    9  : [],\r\n    10 : [],\r\n    11 : [],\r\n    13 : [],\r\n    15 : [],\r\n    16 : [],\r\n    18 : []\r\n};"]],"start1":787,"start2":787,"length1":17,"length2":331}]],"length":1118,"saved":false}
{"ts":1350171511732,"patch":[[{"diffs":[[0,"sum / 4;\r\n};\r\n\r\n"],[1,"/**\r\n * A map defining the far corner of the given corner (i.e. the corner it will\r\n * take 2 moves to reach).\r\n */\r\n"],[0,"CubeHeuristics.f"]],"start1":760,"start2":760,"length1":32,"length2":149},{"diffs":[[0,"\r\n\r\n"],[-1,"CubeHeuristics.farSides = {\r\n    1  : [],\r\n    3  : ["],[1,"/**\r\n * A map defining the far sides of the given side (i.e. the sides it will\r\n * take 2 moves to reach).\r\n */\r\nCubeHeuristics.farSides = {\r\n    1  : [16, 15, 13, 10, 9],\r\n    3  : [10, 13, 16, 18, 11"],[0,"],\r\n    "],[-1,"5"],[1,"4"],[0,"  : ["],[-1,"],\r\n    6  : [],\r\n    8  : [],\r\n    9  : [],\r\n    10 : [],\r\n    11 : [],\r\n    13 : [],\r\n    15 : ["],[1,"8, 18, 15, 9, 13],\r\n    6  : [15, 8, 18, 11, 16],\r\n    8  : [13, 16, 10, 4, 6],\r\n    9  : [1, 4, 11, 18, 16],\r\n    10 : [1, 3, 8, 15, 18],\r\n    11 : [3, 6, 9, 13, 15],\r\n    13 : [3, 8, 1, 4, 11],\r\n    15 : [1, 11, 4, 10, 6"],[0,"],\r\n"]],"start1":1033,"start2":1033,"length1":173,"length2":445},{"diffs":[[0,"  16 : ["],[1,"6, 9, 3, 8, 1"],[0,"],\r\n    "]],"start1":1480,"start2":1480,"length1":16,"length2":29},{"diffs":[[0,"  18 : ["],[1,"4, 10, 6, 9, 3"],[0,"]\r\n};"]],"start1":1507,"start2":1507,"length1":13,"length2":27}]],"length":1534,"saved":false}
{"ts":1350171553420,"patch":[[{"diffs":[[0,"moves to reach)."],[1," They are not in any particular order."],[0,"\r\n */\r\nCubeHeuri"]],"start1":1127,"start2":1127,"length1":32,"length2":70}]],"length":1572,"saved":false}
{"ts":1350171937936,"patch":[[{"diffs":[[0,") {}\r\n\r\n"],[1,"// TODO"],[0,"\r\n\r\nfunc"]],"start1":71,"start2":71,"length1":16,"length2":23},{"diffs":[[0,"= 0;\r\n    \r\n    "],[1,"// TODO"],[0,"\r\n    \r\n    retu"]],"start1":600,"start2":600,"length1":32,"length2":39},{"diffs":[[0,"\r\n    \r\n    "],[1,"// TODO"],[0,"\r\n    \r\n    "]],"start1":743,"start2":743,"length1":24,"length2":31}]],"length":1593,"saved":false}
{"ts":1350173022848,"patch":[[{"diffs":[[0,"sum = 0;\r\n    \r\n"],[1,"    var sum = 0, testCubieIndex, goalCubieIndex;\r\n    \r\n    for (var index in rubixState)\r\n    {\r\n        testCubieIndex = \r\n    }\r\n    \r\n"],[0,"    // TODO\r\n   "]],"start1":735,"start2":735,"length1":32,"length2":170}]],"length":1731,"saved":false}
{"ts":1350173039867,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"    var sum = 0;\r\n    \r\n"],[0,"    "]],"start1":723,"start2":723,"length1":32,"length2":8}]],"length":1707,"saved":false}
{"ts":1350173295857,"patch":[[{"diffs":[[0," 0, "],[-1,"testCubieIndex, goalCubie"],[1,"goal"],[0,"Inde"]],"start1":740,"start2":740,"length1":33,"length2":12},{"diffs":[[0,"bixState"],[1,".cubies"],[0,")\r\n    {"]],"start1":786,"start2":786,"length1":16,"length2":23},{"diffs":[[0,"    "],[-1,"testCubieIndex = "],[1,"goalIndex = CubeHeuristics.goalState.findCubie(rubixState.cubies[index]);\r\n        \r\n        if (CubeHeuristics.farCorners[index] === goalIndex)\r\n            sum += 2;\r\n        else\r\n            sum += 1;"],[0,"\r\n  "]],"start1":815,"start2":815,"length1":25,"length2":212},{"diffs":[[0,"   \r\n    // TODO"],[1," - orientation."],[0,"\r\n    \r\n    retu"]],"start1":1033,"start2":1033,"length1":32,"length2":47}]],"length":1895,"saved":false}
{"ts":1350173310106,"patch":[[{"diffs":[[0,"entation"],[-1,"."],[0,"\r\n    \r\n"]],"start1":1055,"start2":1055,"length1":17,"length2":16}]],"length":1894,"saved":false}
{"ts":1350173351925,"patch":[[{"diffs":[[0,"es)\r\n    {\r\n"],[1,"        if (rubixState.cubies[index].isSide())\r\n            continue;\r\n        \r\n"],[0,"        goal"]],"start1":799,"start2":799,"length1":24,"length2":105}]],"length":1975,"saved":false}
{"ts":1350173398939,"patch":[[{"diffs":[[0," sum = 0"],[1,", goalIndex"],[0,";\r\n    \r"]],"start1":595,"start2":595,"length1":16,"length2":27},{"diffs":[[0,"  \r\n    "],[-1,"// TODO"],[1,"for (var index in rubixState.cubies)\r\n    {\r\n        if (rubixState.cubies[index].isCorner())\r\n            continue;\r\n        \r\n        goalIndex = CubeHeuristics.goalState.findCubie(rubixState.cubies[index]);\r\n        \r\n        // TODO\r\n    }\r\n    \r\n    // TODO - orientation"],[0,"\r\n    \r\n"]],"start1":619,"start2":619,"length1":23,"length2":292}]],"length":2255,"saved":false}
{"ts":1350173646306,"patch":[[{"diffs":[[0,"DO - orientation"],[1," - I think if the orientation doesn't match, it is still\r\n    //   admissible to assume 1 extra move is needed if it distance away is only 1."],[0,"\r\n    \r\n    retu"]],"start1":1408,"start2":1408,"length1":32,"length2":173}]],"length":2396,"saved":false}
{"ts":1350173662311,"patch":[[{"diffs":[[0,"entation"],[1," - I think if the orientation doesn't match, it is still\r\n    //   admissible to assume 1 extra move is needed if it distance away is only 1."],[0,"\r\n    \r\n"]],"start1":895,"start2":895,"length1":16,"length2":157}]],"length":2537,"saved":false}
{"ts":1350173697294,"patch":[[{"diffs":[[0," is needed if it"],[1,"s"],[0," distance away i"]],"start1":1003,"start2":1003,"length1":32,"length2":33},{"diffs":[[0,"ed if it"],[1,"s"],[0," distanc"]],"start1":1674,"start2":1674,"length1":16,"length2":17}]],"length":2539,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350221677759,"patch":[[{"diffs":[[0,"    else"],[1," if (index !== goalIndex)"],[0,"\r\n      "]],"start1":1495,"start2":1495,"length1":16,"length2":41}]],"length":2564,"saved":false}
{"ts":1350222130457,"patch":[[{"diffs":[[0," for (var index "],[-1,"in"],[1,"= 0; index <"],[0," rubixState.cubi"]],"start1":1187,"start2":1187,"length1":34,"length2":44},{"diffs":[[0,"ubixState.cubies"],[1,".length; index++"],[0,")\r\n    {\r\n      "]],"start1":1217,"start2":1217,"length1":32,"length2":48},{"diffs":[[0,"x]);\r\n        \r\n"],[1,"        // If it's a far corner, need at least 2 moves to correct it's position.\r\n"],[0,"        if (Cube"]],"start1":1417,"start2":1417,"length1":32,"length2":114},{"diffs":[[0," += 2;\r\n"],[1,"        // Otherwise, if it's not already in the correct position.\r\n"],[0,"        "]],"start1":1591,"start2":1591,"length1":16,"length2":84}]],"length":2740,"saved":false}
{"ts":1350222530745,"patch":[[{"diffs":[[0,"istance away is "],[-1,"only"],[1,"less than"],[0," 1.\r\n    \r\n    r"]],"start1":1022,"start2":1022,"length1":36,"length2":41},{"diffs":[[0," is "],[-1,"only"],[1,"less than"],[0," 1.\r"]],"start1":1903,"start2":1903,"length1":12,"length2":17}]],"length":2750,"saved":false}
{"ts":1350223039562,"patch":[[{"diffs":[[0,"r index "],[-1,"in"],[1,"= 0; index <"],[0," rubixSt"]],"start1":634,"start2":634,"length1":18,"length2":28},{"diffs":[[0,"e.cubies"],[1,".length; index++"],[0,")\r\n    {"]],"start1":664,"start2":664,"length1":16,"length2":32},{"diffs":[[0,"        "],[-1,"// TODO"],[1,"for ("],[0,"\r\n    }\r"]],"start1":874,"start2":874,"length1":23,"length2":21}]],"length":2774,"saved":false}
{"ts":1350223212780,"patch":[[{"diffs":[[0,"ar sum = 0, "],[-1,"goalIndex"],[1,"moves = 0, goalIndex, farSides"],[0,";\r\n    \r\n   "]],"start1":593,"start2":593,"length1":33,"length2":54},{"diffs":[[0,"    "],[-1,"\r\n        for ("],[1,"farSides = CubeHeuristics.farSides[index];\r\n        moves = 1;\r\n        \r\n        for (var jndex = 0; jndex < farSides.length; jndex++)\r\n        {\r\n            if (farSides[jndex] === goalIndex)\r\n            {\r\n                moves++;\r\n                break;\r\n            }\r\n        }"],[0,"\r\n  "]],"start1":889,"start2":889,"length1":23,"length2":293}]],"length":3065,"saved":false}
{"ts":1350223503902,"patch":[[{"diffs":[[0,"    "],[-1,"moves = 1;\r\n        \r\n        for (var jndex = 0; jndex < farSides.length; jndex++)\r\n        {"],[1,"\r\n        // If it's a far side, need at least 2 moves to correct it's position."],[0,"\r\n  "]],"start1":941,"start2":941,"length1":102,"length2":88},{"diffs":[[0,"n.\r\n        "],[-1,"    "],[0,"if (farSides"]],"start1":1023,"start2":1023,"length1":28,"length2":24},{"diffs":[[0,"ides"],[-1,"[j"],[1,".i"],[0,"ndex"],[-1,"] === "],[1,"Of("],[0,"goal"]],"start1":1043,"start2":1043,"length1":20,"length2":17},{"diffs":[[0,"dexOf(goalIndex)"],[1," !== -1)"],[0,"\r\n            {\r"]],"start1":1050,"start2":1050,"length1":32,"length2":40},{"diffs":[[0,"            "],[-1,"{"],[1,"sum += 2;"],[0,"\r\n          "]],"start1":1076,"start2":1076,"length1":25,"length2":33},{"diffs":[[0,"    "],[-1,"        moves++;\r\n                break;"],[1,"// Otherwise, if it's not already in the correct position.\r\n        else if (index !== goalIndex)"],[0,"\r\n  "]],"start1":1103,"start2":1103,"length1":48,"length2":105},{"diffs":[[0,"    "],[-1,"}\r\n        }"],[1,"sum += 1;"],[0,"\r\n  "]],"start1":1214,"start2":1214,"length1":20,"length2":17},{"diffs":[[0,"s less than 1.\r\n"],[1,"    //   Also, the only way to do this, at least from what I can see it to perform\r\n    //   the rotation to correct it's position, then determine if the orientation is correct.\r\n"],[0,"    \r\n    return"]],"start1":1400,"start2":1400,"length1":32,"length2":211},{"diffs":[[0,"n - "],[-1,"I think if the orientation doesn't match, it is still\r\n    //   admissible to assume 1 extra move is needed if its distance away is less than 1."],[1,"See above"],[0,"\r\n  "]],"start1":2314,"start2":2314,"length1":152,"length2":17}]],"length":3158,"saved":false}
{"ts":1350223668652,"patch":[[{"diffs":[[0," {\r\n    "],[1,"TableGenerator.generate();"],[0,"\r\n});\r\n\r"]],"start1":30,"start2":30,"length1":16,"length2":42},{"diffs":[[0,") {}\r\n\r\n"],[1,"TableGenerator.generate = function()\r\n{\r\n    var rubix = RubixState.initWithGoalState();\r\n    //console.log(rubix.toString(true));\r\n    rubix.rotate(RubixState.faces.top, 1);\r\n    //console.log(rubix.toString(true));\r\n    \r\n    console.log(CubeHeuristics.heuristic(rubix));\r\n};\r\n\r\n"],[0,"// TODO\r"]],"start1":97,"start2":97,"length1":16,"length2":297},{"diffs":[[0,"= 0,"],[-1," moves = 0,"],[0," goa"]],"start1":907,"start2":907,"length1":19,"length2":8}]],"length":3454,"saved":false}
{"ts":1350223735933,"patch":[[{"diffs":[[0,"OfSides("],[1,"rubixState"],[0,"),\r\n    "]],"start1":595,"start2":595,"length1":16,"length2":26},{"diffs":[[0,"Corners("],[1,"rubixState"],[0,"));\r\n};\r"]],"start1":671,"start2":671,"length1":16,"length2":26}]],"length":3474,"saved":false}
{"ts":1350223973425,"patch":[[{"diffs":[[0,"ndex++)\r\n    {\r\n"],[1,"        console.log(rubixState)\r\n"],[0,"        if (rubi"]],"start1":1019,"start2":1019,"length1":32,"length2":65}]],"length":3507,"saved":false}
{"ts":1350223974301,"patch":[[{"diffs":[[0,"ixState)"],[1,";"],[0,"\r\n      "]],"start1":1058,"start2":1058,"length1":16,"length2":17}]],"length":3508,"saved":false}
{"ts":1350224083877,"patch":[[{"diffs":[[0,"s.top, 1);\r\n"],[1,"    rubix.rotate(RubixState.faces.bottom, 1);\r\n"],[0,"    //consol"]],"start1":269,"start2":269,"length1":24,"length2":71}]],"length":3555,"saved":false}
{"ts":1350224100325,"patch":[[{"diffs":[[0,"ottom, 1);\r\n"],[1,"    rubix.rotate(RubixState.faces.left, 2);\r\n"],[0,"    //consol"]],"start1":316,"start2":316,"length1":24,"length2":69}]],"length":3600,"saved":false}
{"ts":1350224105510,"patch":[[{"diffs":[[0,"ces."],[-1,"lef"],[1,"fron"],[0,"t, 2"]],"start1":358,"start2":358,"length1":11,"length2":12}]],"length":3601,"saved":false}
{"ts":1350224121035,"patch":[[{"diffs":[[0,"front, 2);\r\n"],[1,"    rubix.rotate(RubixState.faces.bottom, 2);\r\n"],[0,"    //consol"]],"start1":362,"start2":362,"length1":24,"length2":71}]],"length":3648,"saved":false}
{"ts":1350224308358,"patch":[[{"diffs":[[0,"ottom, 2);\r\n"],[1,"    rubix.rotate(RubixState.faces.back, 3);\r\n"],[0,"    //consol"]],"start1":409,"start2":409,"length1":24,"length2":69}]],"length":3693,"saved":false}
{"ts":1350224328359,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(rubixState);\r\n"],[0,"    "]],"start1":1216,"start2":1216,"length1":42,"length2":8}]],"length":3659,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350226475065,"patch":[[{"diffs":[[0,"    "],[-1,"//console.log(rubix.toString(true));"],[0,"\r\n  "]],"start1":195,"start2":195,"length1":44,"length2":8},{"diffs":[[0,");\r\n    "],[-1,"//"],[1,"console.log(CubeHeuristics.goalState.toString(true));\r\n    "],[0,"console."]],"start1":426,"start2":426,"length1":18,"length2":75}]],"length":3680,"saved":false}
{"ts":1350226483356,"patch":[[{"diffs":[[0,"x = "],[-1,"RubixState.initWithG"],[1,"CubeHeuristics.g"],[0,"oalState"],[1,".copy"],[0,"();\r"]],"start1":158,"start2":158,"length1":36,"length2":37}]],"length":3681,"saved":false}
{"ts":1350226506126,"patch":[[{"diffs":[[0,"tate"],[-1,".copy()"],[0,";\r\n "]],"start1":182,"start2":182,"length1":15,"length2":8}]],"length":3674,"saved":false}
{"ts":1350226533377,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    \r\n    console.log(CubeHeuristics.heuristic(rubix));\r\n"],[0,"};\r\n"]],"start1":519,"start2":519,"length1":65,"length2":8}]],"length":3617,"saved":false}
{"ts":1350226540649,"patch":[[{"diffs":[[0,"x = "],[-1,"CubeHeuristics.g"],[1,"RubixState.initWithG"],[0,"oalState"],[1,"()"],[0,";\r\n    "],[1,"//console.log(rubix.toString(true));"],[0,"\r\n  "]],"start1":158,"start2":158,"length1":39,"length2":81},{"diffs":[[0,".back, 3);\r\n    "],[1,"//"],[0,"console.log(Cube"]],"start1":454,"start2":454,"length1":32,"length2":34},{"diffs":[[0,"log("],[-1,"CubeHeuristics.goalState"],[1,"rubix"],[0,".toS"]],"start1":480,"start2":480,"length1":32,"length2":13},{"diffs":[[0,"ng(true));\r\n"],[1,"    \r\n"],[0,"    console."]],"start1":496,"start2":496,"length1":24,"length2":30},{"diffs":[[0,"ole.log("],[-1,"rubix.toString(true"],[1,"CubeHeuristics.heuristic(rubix"],[0,"));\r\n};\r"]],"start1":522,"start2":522,"length1":35,"length2":46}]],"length":3659,"saved":false}
{"ts":1350226548648,"patch":[[{"diffs":[[0,".back, 3);\r\n    "],[-1,"//"],[0,"console.log(rubi"]],"start1":454,"start2":454,"length1":34,"length2":32}]],"length":3657,"saved":false}
{"ts":1350226587018,"patch":[[{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"console."]],"start1":191,"start2":191,"length1":18,"length2":16}]],"length":3655,"saved":false}
{"ts":1350226617716,"patch":[[{"diffs":[[0,"ottom, 2);\r\n    "],[1,"//"],[0,"rubix.rotate(Rub"]],"start1":407,"start2":407,"length1":32,"length2":34}]],"length":3657,"saved":false}
{"ts":1350226633118,"patch":[[{"diffs":[[0,"s.top, 1);\r\n    "],[1,"//"],[0,"rubix.rotate(Rub"]],"start1":267,"start2":267,"length1":32,"length2":34},{"diffs":[[0,"ottom, 1);\r\n    "],[1,"//"],[0,"rubix.rotate(Rub"]],"start1":316,"start2":316,"length1":32,"length2":34},{"diffs":[[0,"front, 2);\r\n    "],[1,"//"],[0,"rubix.rotate(Rub"]],"start1":364,"start2":364,"length1":32,"length2":34}]],"length":3663,"saved":false}
{"ts":1350226640483,"patch":[[{"diffs":[[0,"es.top, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":266,"start2":266,"length1":17,"length2":17}]],"length":3663,"saved":false}
{"ts":1350226645100,"patch":[[{"diffs":[[0,"es.top, "],[-1,"2"],[1,"3"],[0,");\r\n    "]],"start1":266,"start2":266,"length1":17,"length2":17}]],"length":3663,"saved":false}
{"ts":1350226652871,"patch":[[{"diffs":[[0,"ces."],[-1,"top"],[1,"back"],[0,", 3)"]],"start1":265,"start2":265,"length1":11,"length2":12}]],"length":3664,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350233631038,"patch":[[{"diffs":[[0,"x = "],[-1,"RubixState.initWithG"],[1,"CubeHeuristics.g"],[0,"oalState"],[1,".copy"],[0,"();\r"]],"start1":158,"start2":158,"length1":36,"length2":37},{"diffs":[[0,"    "],[-1,"console.log(rubix.toString(true));"],[0,"\r\n    "],[1,"//"],[0,"rubi"]],"start1":196,"start2":196,"length1":48,"length2":16},{"diffs":[[0,"    "],[-1,"//rubix.rotate(RubixState.faces.bottom, 1);\r\n    //rubix.rotate(RubixState.faces.front, 2);\r\n    //rubix.rotate(RubixState.faces.bottom, 2);\r\n    //rubix.rotate(RubixState.faces.back, 3"],[1,"\r\n    console.log(CubeHeuristics.goalState.toString(true)"],[0,");\r\n"]],"start1":249,"start2":249,"length1":193,"length2":65}]],"length":3505,"saved":false}
{"ts":1350233640392,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"//"],[0,"rubix.ro"]],"start1":198,"start2":198,"length1":18,"length2":16}]],"length":3503,"saved":false}
{"ts":1350233820016,"patch":[[{"diffs":[[0,"ces."],[-1,"back, 3"],[1,"top, 1"],[0,");\r\n"]],"start1":232,"start2":232,"length1":15,"length2":14}]],"length":3502,"saved":false}
{"ts":1350234389065,"patch":[[{"diffs":[[0,"     sum += 1;\r\n"],[1,"            \r\n        if (sum < 2)\r\n        {\r\n            \r\n        }\r\n"],[0,"    }\r\n    \r\n   "]],"start1":1557,"start2":1557,"length1":32,"length2":104}]],"length":3574,"saved":false}
{"ts":1350234401670,"patch":[[{"diffs":[[0," {\r\n            "],[1,"\"\";"],[0,"\r\n        }\r\n   "]],"start1":1616,"start2":1616,"length1":32,"length2":35}]],"length":3577,"saved":false}
{"ts":1350234783106,"patch":[[{"diffs":[[0,"   var sum = 0, "],[-1,""],[0,""],[1,"moves = 0, "],[0,"goalIndex, farSi"]],"start1":944,"start2":944,"length1":32,"length2":43},{"diffs":[[0,"nue;\r\n        \r\n"],[1,"        moves = 0;\r\n"],[0,"        goalInde"]],"start1":1141,"start2":1141,"length1":32,"length2":52},{"diffs":[[0,"1)\r\n            "],[-1,"sum +"],[1,"moves "],[0,"= 2;\r\n        //"]],"start1":1447,"start2":1447,"length1":37,"length2":38},{"diffs":[[0,"x)\r\n            "],[-1,"sum +"],[1,"moves "],[0,"= 1;\r\n          "]],"start1":1578,"start2":1578,"length1":37,"length2":38},{"diffs":[[0,"if ("],[-1,"sum < 2)\r\n        {\r\n            \"\";\r\n        }"],[1,"moves === 0)\r\n        {\r\n            if (!rubixState.cubies[index].equals(CubeHeuristics.goalState))\r\n                moves += 3;\r\n        }\r\n        else if (moves === 1)\r\n        {\r\n            // Rotate to correct position and check orientation.\r\n        }\r\n        \r\n        sum += moves;"],[0,"\r\n  "]],"start1":1628,"start2":1628,"length1":55,"length2":300},{"diffs":[[0,"ar sum = 0, "],[-1,""],[0,""],[1,"moves = 0, "],[0,"goalIndex;\r\n"]],"start1":2399,"start2":2399,"length1":24,"length2":35},{"diffs":[[0,"tinue;\r\n        "],[-1,""],[0,""],[1,"\r\n        moves = 0"],[0,"\r\n        goalIn"]],"start1":2578,"start2":2578,"length1":32,"length2":51}]],"length":3885,"saved":false}
{"ts":1350234783907,"patch":[[{"diffs":[[0,"oves = 0"],[1,";"],[0,"\r\n      "]],"start1":2605,"start2":2605,"length1":16,"length2":17}]],"length":3886,"saved":false}
{"ts":1350234811339,"patch":[[{"diffs":[[0,"        "],[-1,"sum +"],[1,"moves "],[0,"= 2;\r\n  "]],"start1":2856,"start2":2856,"length1":21,"length2":22},{"diffs":[[0,"goalIndex)\r\n    "],[1,"        moves = 1;\r\n            \r\n"],[0,"        sum += 1"]],"start1":2971,"start2":2971,"length1":32,"length2":66},{"diffs":[[0," sum += "],[-1,"1"],[1,"moves"],[0,";\r\n    }"]],"start1":3028,"start2":3028,"length1":17,"length2":21}]],"length":3925,"saved":false}
{"ts":1350234864994,"patch":[[{"diffs":[[0,"s = 1;\r\n        "],[1,"\r\n"],[0,"    "],[1,"    // Check orientation"],[0,"\r\n        if (mo"]],"start1":1598,"start2":1598,"length1":36,"length2":62},{"diffs":[[0,"1;\r\n        "],[1,"\r\n        // Check orientation\r\n        if (moves === 0)\r\n        {\r\n            \r\n        }\r\n        else if (moves === 1)\r\n        {\r\n            \r\n        }\r\n    "],[0,"    \r\n      "]],"start1":3029,"start2":3029,"length1":24,"length2":189}]],"length":4116,"saved":false}
{"ts":1350234923433,"patch":[[{"diffs":[[0,"an see i"],[-1,"t"],[1,"s"],[0," to perf"]],"start1":2201,"start2":2201,"length1":17,"length2":17},{"diffs":[[0," {\r\n            "],[1,"if (!rubixState.cubies[index].equals(CubeHeuristics.goalState))\r\n                moves += 3;"],[0,"\r\n        }\r\n   "]],"start1":3106,"start2":3106,"length1":32,"length2":124}]],"length":4208,"saved":false}
{"ts":1350234931167,"patch":[[{"diffs":[[0," {\r\n            "],[1,"// Rotate to correct position and check orientation."],[0,"\r\n        }\r\n   "]],"start1":3265,"start2":3265,"length1":32,"length2":84}]],"length":4260,"saved":false}
{"ts":1350234993749,"patch":[[{"diffs":[[0,"       moves += "],[-1,"3"],[1,"2"],[0,";\r\n        }\r\n  "]],"start1":3196,"start2":3196,"length1":33,"length2":33}]],"length":4260,"saved":false}
{"ts":1350235046063,"patch":[[{"diffs":[[0,"ristics."],[-1,"heuristic"],[1,"manhattanDistanceOfSides(rubix));\r\n    console.log(CubeHeuristics.manhattanDistanceOfCorners"],[0,"(rubix))"]],"start1":380,"start2":380,"length1":25,"length2":108}]],"length":4343,"saved":false}
{"ts":1350235072467,"patch":[[{"diffs":[[0," 0)\r\n        {\r\n"],[1,"            console.log(rubixState.cubies[index].equals(CubeHeuristics.goalState));\r\n"],[0,"            if ("]],"start1":1750,"start2":1750,"length1":32,"length2":117}]],"length":4428,"saved":false}
{"ts":1350235297439,"patch":[[{"diffs":[[0,"cs.goalState"],[1,"[index]"],[0,"));\r\n       "]],"start1":1834,"start2":1834,"length1":24,"length2":31},{"diffs":[[0,"istics.goalState"],[1,"[index]"],[0,"))\r\n            "]],"start1":1915,"start2":1915,"length1":32,"length2":39}]],"length":4442,"saved":false}
{"ts":1350238512325,"patch":[[{"diffs":[[0,"  \r\n    "],[1,"//"],[0,"rubix.ro"]],"start1":198,"start2":198,"length1":16,"length2":18}]],"length":4444,"saved":false}
{"ts":1350238545795,"patch":[[{"diffs":[[0,"istics.goalState"],[1,".cubies"],[0,"[index]));\r\n    "]],"start1":1832,"start2":1832,"length1":32,"length2":39},{"diffs":[[0,"oalState"],[1,".cubies"],[0,"[index])"]],"start1":1932,"start2":1932,"length1":16,"length2":23}]],"length":4458,"saved":false}
{"ts":1350238592258,"patch":[[{"diffs":[[0,"oalState"],[1,".cubies[index]"],[0,"))\r\n    "]],"start1":3373,"start2":3373,"length1":16,"length2":30}]],"length":4472,"saved":false}
{"ts":1350238628431,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"//"],[0,"rubix.ro"]],"start1":198,"start2":198,"length1":18,"length2":16}]],"length":4470,"saved":false}
{"ts":1350238637967,"patch":[[{"diffs":[[0,"es.top, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":233,"start2":233,"length1":17,"length2":17}]],"length":4470,"saved":false}
{"ts":1350238649547,"patch":[[{"diffs":[[0,"s.top, 2);\r\n"],[1,"    rubix.rotate(RubixState.faces.front, 2);\r\n"],[0,"    \r\n    co"]],"start1":234,"start2":234,"length1":24,"length2":70}]],"length":4516,"saved":false}
{"ts":1350238734658,"patch":[[{"diffs":[[0,"ces."],[-1,"top, 2"],[1,"right, 3"],[0,");\r\n"]],"start1":232,"start2":232,"length1":14,"length2":16},{"diffs":[[0,".front, "],[-1,"2"],[1,"3);\r\n    rubix.rotate(RubixState.faces.top, 3"],[0,");\r\n    "]],"start1":281,"start2":281,"length1":17,"length2":61}]],"length":4562,"saved":false}
{"ts":1350238772368,"patch":[[{"diffs":[[0," {\r\n"],[-1,"            console.log(rubixState.cubies[index].equals(CubeHeuristics.goalState.cubies[index]));\r\n"],[0,"    "]],"start1":1854,"start2":1854,"length1":107,"length2":8}]],"length":4463,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350312499806,"patch":[[{"diffs":[[0,"TODO"],[-1,"\r\n\r\nfunction CubeHeuristics() {}\r\n\r\nCubeHeuristics.goalState = RubixState.initWithGoalState();\r\n\r\nCubeHeuristics.heuristic = function(rubixState)\r\n{\r\n    return Math.max(CubeHeuristics.manhattanDistanceOfSides(rubixState),\r\n                    CubeHeuristics.manhattanDistanceOfCorners(rubixState));\r\n};\r\n\r\n/* \r\nNote if a corner cubie is in the right position but the faces are wrong, it will\r\ntake at least 2 moves to right it. 3 moves for sides.\r\n*/\r\n\r\nCubeHeuristics.manhattanDistanceOfSides = function(rubixState)\r\n{\r\n    var sum = 0, moves = 0, goalIndex, farSides;\r\n    \r\n    for (var index = 0; index < rubixState.cubies.length; index++)\r\n    {\r\n        if (rubixState.cubies[index].isCorner())\r\n            continue;\r\n        \r\n        moves = 0;\r\n        goalIndex = CubeHeuristics.goalState.findCubie(rubixState.cubies[index]);\r\n        farSides = CubeHeuristics.farSides[index];\r\n        \r\n        // If it's a far side, need at least 2 moves to correct it's position.\r\n        if (farSides.indexOf(goalIndex) !== -1)\r\n            moves = 2;\r\n        // Otherwise, if it's not already in the correct position.\r\n        else if (index !== goalIndex)\r\n            moves = 1;\r\n        \r\n        // Check orientation\r\n        if (moves === 0)\r\n        {\r\n            if (!rubixState.cubies[index].equals(CubeHeuristics.goalState.cubies[index]))\r\n                moves += 3;\r\n        }\r\n        else if (moves === 1)\r\n        {\r\n            // Rotate to correct position and check orientation.\r\n        }\r\n        \r\n        sum += moves;\r\n    }\r\n    \r\n    // TODO - orientation - I think if the orientation doesn't match, it is still\r\n    //   admissible to assume 1 extra move is needed if its distance away is less than 1.\r\n    //   Also, the only way to do this, at least from what I can see is to perform\r\n    //   the rotation to correct it's position, then determine if the orientation is correct.\r\n    \r\n    return sum / 4;\r\n};\r\n\r\nCubeHeuristics.manhattanDistanceOfCorners = function(rubixState)\r\n{\r\n    var sum = 0, moves = 0, goalIndex;\r\n    \r\n    for (var index = 0; index < rubixState.cubies.length; index++)\r\n    {\r\n        if (rubixState.cubies[index].isSide())\r\n            continue;\r\n        \r\n        moves = 0;\r\n        goalIndex = CubeHeuristics.goalState.findCubie(rubixState.cubies[index]);\r\n        \r\n        // If it's a far corner, need at least 2 moves to correct it's position.\r\n        if (CubeHeuristics.farCorners[index] === goalIndex)\r\n            moves = 2;\r\n        // Otherwise, if it's not already in the correct position.\r\n        else if (index !== goalIndex)\r\n            moves = 1;\r\n        \r\n        // Check orientation\r\n        if (moves === 0)\r\n        {\r\n            if (!rubixState.cubies[index].equals(CubeHeuristics.goalState.cubies[index]))\r\n                moves += 2;\r\n        }\r\n        else if (moves === 1)\r\n        {\r\n            // Rotate to correct position and check orientation.\r\n        }\r\n        \r\n        sum += moves;\r\n    }\r\n    \r\n    // TODO - orientation - See above\r\n    \r\n    return sum / 4;\r\n};\r\n\r\n/**\r\n * A map defining the far corner of the given corner (i.e. the corner it will\r\n * take 2 moves to reach).\r\n */\r\nCubeHeuristics.farCorners = {\r\n    0  : 14,\r\n    2  : 12,\r\n    5  : 19,\r\n    7  : 17,\r\n    12 : 2,\r\n    14 : 0,\r\n    17 : 7,\r\n    19 : 5\r\n};\r\n\r\n/**\r\n * A map defining the far sides of the given side (i.e. the sides it will\r\n * take 2 moves to reach). They are not in any particular order.\r\n */\r\nCubeHeuristics.farSides = {\r\n    1  : [16, 15, 13, 10, 9],\r\n    3  : [10, 13, 16, 18, 11],\r\n    4  : [8, 18, 15, 9, 13],\r\n    6  : [15, 8, 18, 11, 16],\r\n    8  : [13, 16, 10, 4, 6],\r\n    9  : [1, 4, 11, 18, 16],\r\n    10 : [1, 3, 8, 15, 18],\r\n    11 : [3, 6, 9, 13, 15],\r\n    13 : [3, 8, 1, 4, 11],\r\n    15 : [1, 11, 4, 10, 6],\r\n    16 : [6, 9, 3, 8, 1],\r\n    18 : [4, 10, 6, 9, 3]\r\n};"]],"start1":592,"start2":592,"length1":3871,"length2":4}]],"length":596,"saved":false}
{"ts":1350314589960,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    rubix.rotate(RubixState.faces.right, 3);\r\n"],[0,"    "]],"start1":198,"start2":198,"length1":54,"length2":8},{"diffs":[[0,".front, "],[-1,"3"],[1,"1"],[0,");\r\n    "]],"start1":235,"start2":235,"length1":17,"length2":17},{"diffs":[[0,"op, "],[-1,"3"],[1,"1"],[0,");\r\n"]],"start1":283,"start2":283,"length1":9,"length2":9}]],"length":550,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350315968279,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"//"],[0,"rubix.rotate"]],"start1":194,"start2":194,"length1":24,"length2":26},{"diffs":[[0,");\r\n    "],[1,"//"],[0,"rubix.ro"]],"start1":246,"start2":246,"length1":16,"length2":18},{"diffs":[[0,"s(rubix)"],[-1,");\r\n    console.log("],[1," + \":\" + \r\n                "],[0,"CubeHeur"]],"start1":461,"start2":461,"length1":36,"length2":43},{"diffs":[[0,"bix));\r\n"],[1,"    console.log(CubeHeuristics.heuristic(rubix));\r\n"],[0,"};\r\n\r\n//"]],"start1":540,"start2":540,"length1":16,"length2":67}]],"length":612,"saved":false}
{"ts":1350316214877,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[-1,"//"],[0,"rubix.rotate"]],"start1":194,"start2":194,"length1":26,"length2":24},{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"rubix.ro"]],"start1":244,"start2":244,"length1":18,"length2":16},{"diffs":[[0,"ces."],[-1,"top, 1"],[1,"front, 3"],[0,");\r\n"]],"start1":278,"start2":278,"length1":14,"length2":16}]],"length":610,"saved":false}
{"ts":1350316242847,"patch":[[{"diffs":[[0,"front, 3);\r\n"],[1,"    rubix.rotate(RubixState.faces.right, 3);\r\n    rubix.rotate(RubixState.faces.right, 1);\r\n"],[0,"    \r\n    co"]],"start1":282,"start2":282,"length1":24,"length2":116}]],"length":702,"saved":false}
{"ts":1350316973415,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"//"],[0,"rubix.rotate"]],"start1":194,"start2":194,"length1":24,"length2":26},{"diffs":[[0,"front, 1);\r\n    "],[1,"//"],[0,"rubix.rotate(Rub"]],"start1":238,"start2":238,"length1":32,"length2":34},{"diffs":[[0,"front, 3);\r\n    "],[1,"//"],[0,"rubix.rotate(Rub"]],"start1":286,"start2":286,"length1":32,"length2":34},{"diffs":[[0,");\r\n    "],[1,"//"],[0,"rubix.ro"]],"start1":342,"start2":342,"length1":16,"length2":18},{"diffs":[[0,"ght, 1);\r\n    \r\n"],[1,"    console.log(JSON.stringify(rubix) === JSON.stringify(CubeHeuristics.goalState))\r\n    \r\n"],[0,"    console.log("]],"start1":384,"start2":384,"length1":32,"length2":123}]],"length":801,"saved":false}
{"ts":1350317013766,"patch":[[{"diffs":[[0,"ringify("],[-1,"r"],[1,"R"],[0,"ubix"],[1,"State.initWithGoalState()"],[0,") === JS"]],"start1":423,"start2":423,"length1":21,"length2":46}]],"length":826,"saved":false}
{"ts":1350317040439,"patch":[[{"diffs":[[0,"ify("],[-1,"R"],[1,"r"],[0,"ubix"],[-1,"State.initWithGoalState()"],[0,") =="]],"start1":427,"start2":427,"length1":38,"length2":13}]],"length":801,"saved":false}
{"ts":1350317049943,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[-1,"//"],[0,"rubix.rotate"]],"start1":194,"start2":194,"length1":26,"length2":24},{"diffs":[[0,"front, 1);\r\n    "],[-1,"//"],[0,"rubix.rotate(Rub"]],"start1":236,"start2":236,"length1":34,"length2":32},{"diffs":[[0,"front, 3);\r\n    "],[-1,"//"],[0,"rubix.rotate(Rub"]],"start1":282,"start2":282,"length1":34,"length2":32},{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"rubix.ro"]],"start1":336,"start2":336,"length1":18,"length2":16}]],"length":793,"saved":false}
{"ts":1350318786577,"patch":[[{"diffs":[[0,"y();\r\n    \r\n"],[1,"    var rots =Math.floor(Math.random() * 4);\r\n    console.log(rots);\r\n    \r\n"],[0,"    rubix.ro"]],"start1":190,"start2":190,"length1":24,"length2":100}]],"length":869,"saved":false}
{"ts":1350318814473,"patch":[[{"diffs":[[0,") * "],[-1,"4"],[1,"3 + 1"],[0,");\r\n"]],"start1":239,"start2":239,"length1":9,"length2":13}]],"length":873,"saved":false}
{"ts":1350318906932,"patch":[[{"diffs":[[0,"y();\r\n    \r\n"],[1,"    var face = Math.floor(Math.random() * 5);\r\n"],[0,"    var rots"]],"start1":190,"start2":190,"length1":24,"length2":71},{"diffs":[[0,"r rots ="],[1," "],[0,"Math.flo"]],"start1":255,"start2":255,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"console.log(rots);"],[1,"\r\n    for (var i = 0; i < 18; i++)\r\n    {\r\n        \r\n        \r\n        face = Math.floor(Math.random() * 5);\r\n        rots = Math.floor(Math.random() * 3 + 1);\r\n    }"],[0,"\r\n  "]],"start1":300,"start2":300,"length1":26,"length2":174}]],"length":1069,"saved":false}
{"ts":1350318915846,"patch":[[{"diffs":[[0,"Math.random() * "],[-1,"5"],[1,"6"],[0,");\r\n    var rots"]],"start1":228,"start2":228,"length1":33,"length2":33},{"diffs":[[0,") * "],[-1,"5"],[1,"6"],[0,");\r\n"]],"start1":405,"start2":405,"length1":9,"length2":9}]],"length":1069,"saved":false}
{"ts":1350318933613,"patch":[[{"diffs":[[0," < 1"],[-1,"8"],[1,"00"],[0,"; i+"]],"start1":327,"start2":327,"length1":9,"length2":10},{"diffs":[[0,"\n    {\r\n        "],[1,"rubix.rotate(face, rots);"],[0,"\r\n        \r\n    "]],"start1":340,"start2":340,"length1":32,"length2":57}]],"length":1095,"saved":false}
{"ts":1350318945633,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    rubix.rotate(RubixState.faces.front, 1);\r\n    rubix.rotate(RubixState.faces.front, 3);\r\n    rubix.rotate(RubixState.faces.right, 3);\r\n    rubix.rotate(RubixState.faces.right, 1);\r\n    \r\n    console.log(JSON.stringify(rubix) === JSON.stringify(CubeHeuristics.goalState))\r\n    \r\n"],[0,"    "]],"start1":500,"start2":500,"length1":289,"length2":8}]],"length":814,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350322707642,"patch":[[{"diffs":[[0,"i < "],[-1,"100"],[1,"5"],[0,"; i+"]],"start1":326,"start2":326,"length1":11,"length2":9}]],"length":812,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350405530379,"patch":[[{"diffs":[[0,"x = "],[-1,"CubeHeuristics.g"],[1,"RubixState.createWithG"],[0,"oalState"],[-1,".copy"],[0,"();\r"]],"start1":158,"start2":158,"length1":37,"length2":38}]],"length":813,"saved":false}
{"ts":1350405649506,"patch":[[{"diffs":[[0,"    "],[-1,"r"],[1,"R"],[0,"ubix"],[1,"State"],[0,".rotate("],[1,"rubix, "],[0,"face"]],"start1":351,"start2":351,"length1":21,"length2":33}]],"length":825,"saved":false}
{"ts":1350406773507,"patch":[[{"diffs":[[0,"    console.log("],[1,"RubixState.toString("],[0,"CubeHeuristics.g"]],"start1":515,"start2":515,"length1":32,"length2":52},{"diffs":[[0,"oalState"],[-1,".toString(true"],[0,"));\r\n   "]],"start1":567,"start2":567,"length1":30,"length2":16},{"diffs":[[0,"ole.log("],[-1,"r"],[1,"R"],[0,"ubix"],[1,"State"],[0,".toStrin"]],"start1":588,"start2":588,"length1":21,"length2":26},{"diffs":[[0,"ing("],[-1,"t"],[0,"ru"],[-1,"e"],[1,"bix"],[0,"));\r"]],"start1":612,"start2":612,"length1":12,"length2":13},{"diffs":[[0,"x));\r\n    \r\n    "],[1,"//"],[0,"console.log(Cube"]],"start1":620,"start2":620,"length1":32,"length2":34},{"diffs":[[0,"\":\" + \r\n    "],[1,"//"],[0,"            "]],"start1":699,"start2":699,"length1":24,"length2":26},{"diffs":[[0,"s(rubix));\r\n    "],[1,"//"],[0,"console.log(Cube"]],"start1":765,"start2":765,"length1":32,"length2":34}]],"length":843,"saved":false}
{"ts":1350407650307,"patch":[[{"diffs":[[0,"e();\r\n    \r\n"],[1,"//"],[0,"    var face"]],"start1":191,"start2":191,"length1":24,"length2":26},{"diffs":[[0,"om() * 6);\r\n"],[1,"//"],[0,"    var rots"]],"start1":240,"start2":240,"length1":24,"length2":26},{"diffs":[[0," 1);\r\n    \r\n"],[1,"//"],[0,"    for (var"]],"start1":299,"start2":299,"length1":24,"length2":26},{"diffs":[[0,"+)\r\n"],[1,"//"],[0,"    {\r\n"],[1,"//"],[0,"    "]],"start1":342,"start2":342,"length1":15,"length2":19},{"diffs":[[0,"ce, rots);\r\n"],[1,"//"],[0,"        \r\n  "]],"start1":392,"start2":392,"length1":24,"length2":26},{"diffs":[[0,"//        \r\n"],[1,"//"],[0,"        face"]],"start1":404,"start2":404,"length1":24,"length2":26},{"diffs":[[0,"om() * 6);\r\n"],[1,"//"],[0,"        rots"]],"start1":453,"start2":453,"length1":24,"length2":26},{"diffs":[[0,");\r\n"],[1,"//"],[0,"    }\r"],[1,"\n\r\n    \r"],[0,"\n   "]],"start1":514,"start2":514,"length1":14,"length2":24}]],"length":869,"saved":false}
{"ts":1350407669449,"patch":[[{"diffs":[[0,"   }\r\n\r\n    "],[1,"RubixState.rotate(rubix, 2, 1);"],[0,"\r\n    \r\n    "]],"start1":521,"start2":521,"length1":24,"length2":55}]],"length":900,"saved":false}
{"ts":1350408031647,"patch":[[{"diffs":[[0,"bix, 2, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":900,"saved":false}
{"ts":1350408039187,"patch":[[{"diffs":[[0,"bix, 2, "],[-1,"2"],[1,"1"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":900,"saved":false}
{"ts":1350413934298,"patch":[[{"diffs":[[0,"ix, "],[-1,"2"],[1,"0"],[0,", 1)"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":900,"saved":false}
{"ts":1350414107312,"patch":[[{"diffs":[[0,"ix, 0, 1);\r\n"],[1,"        RubixState.rotate(rubix, 2, 1);\r\n\r\n"],[0,"    \r\n    co"]],"start1":554,"start2":554,"length1":24,"length2":67}]],"length":943,"saved":false}
{"ts":1350414963087,"patch":[[{"diffs":[[0,"ix, "],[-1,"2"],[1,"1"],[0,", 1)"]],"start1":595,"start2":595,"length1":9,"length2":9}]],"length":943,"saved":false}
{"ts":1350415020209,"patch":[[{"diffs":[[0,"0, 1);\r\n        "],[1,"//"],[0,"RubixState.rotat"]],"start1":558,"start2":558,"length1":32,"length2":34}]],"length":945,"saved":false}
{"ts":1350415041120,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"0"],[1,"1"],[0,", 1);\r\n "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350415072588,"patch":[[{"diffs":[[0,"tate(rubix, "],[-1,"1"],[1,"2"],[0,", 1);\r\n     "]],"start1":546,"start2":546,"length1":25,"length2":25}]],"length":945,"saved":false}
{"ts":1350415104348,"patch":[[{"diffs":[[0,"ix, "],[-1,"2"],[1,"0"],[0,", 1)"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350415127461,"patch":[[{"diffs":[[0,"bix, 0, "],[-1,"1"],[1,"3"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350415152645,"patch":[[{"diffs":[[0,"ix, "],[-1,"0, 3"],[1,"5, 1"],[0,");\r\n"]],"start1":554,"start2":554,"length1":12,"length2":12}]],"length":945,"saved":false}
{"ts":1350415719659,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"5"],[1,"0"],[0,", 1);\r\n "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416294526,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"0"],[1,"1"],[0,", 1);\r\n "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416322292,"patch":[[{"diffs":[[0,"tate(rubix, "],[-1,"1"],[1,"2"],[0,", 1);\r\n     "]],"start1":546,"start2":546,"length1":25,"length2":25}]],"length":945,"saved":false}
{"ts":1350416348827,"patch":[[{"diffs":[[0,"ix, "],[-1,"2"],[1,"3"],[0,", 1)"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416370348,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"3"],[1,"4"],[0,", 1);\r\n "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416462753,"patch":[[{"diffs":[[0,"ix, "],[-1,"4"],[1,"5"],[0,", 1)"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416493712,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"5"],[1,"0"],[0,", 1);\r\n "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416495310,"patch":[[{"diffs":[[0,"bix, 0, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416514201,"patch":[[{"diffs":[[0," 0, "],[-1,"2"],[1,"3"],[0,");\r\n"]],"start1":557,"start2":557,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416534447,"patch":[[{"diffs":[[0,"ix, "],[-1,"0, 3"],[1,"1, 2"],[0,");\r\n"]],"start1":554,"start2":554,"length1":12,"length2":12}]],"length":945,"saved":false}
{"ts":1350416552619,"patch":[[{"diffs":[[0," 1, "],[-1,"2"],[1,"3"],[0,");\r\n"]],"start1":557,"start2":557,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416578747,"patch":[[{"diffs":[[0,"ix, "],[-1,"1, 3"],[1,"2, 1"],[0,");\r\n"]],"start1":554,"start2":554,"length1":12,"length2":12}]],"length":945,"saved":false}
{"ts":1350416592800,"patch":[[{"diffs":[[0,"bix, 2, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416605928,"patch":[[{"diffs":[[0,"bix, 2, "],[-1,"2"],[1,"3"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416625879,"patch":[[{"diffs":[[0,"ix, "],[-1,"2, 3"],[1,"3, 1"],[0,");\r\n"]],"start1":554,"start2":554,"length1":12,"length2":12}]],"length":945,"saved":false}
{"ts":1350416643626,"patch":[[{"diffs":[[0,"bix, 3, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416679337,"patch":[[{"diffs":[[0," 3, "],[-1,"2"],[1,"3"],[0,");\r\n"]],"start1":557,"start2":557,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416691852,"patch":[[{"diffs":[[0,"bix, 3, "],[-1,"3"],[1,"1"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416706525,"patch":[[{"diffs":[[0,"bix, 3, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416716742,"patch":[[{"diffs":[[0," 3, "],[-1,"2"],[1,"3"],[0,");\r\n"]],"start1":557,"start2":557,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416726311,"patch":[[{"diffs":[[0,"ix, "],[-1,"3, 3"],[1,"5, 1"],[0,");\r\n"]],"start1":554,"start2":554,"length1":12,"length2":12}]],"length":945,"saved":false}
{"ts":1350416747463,"patch":[[{"diffs":[[0,"bix, 5, "],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":945,"saved":false}
{"ts":1350416770416,"patch":[[{"diffs":[[0," 5, "],[-1,"2"],[1,"3"],[0,");\r\n"]],"start1":557,"start2":557,"length1":9,"length2":9}]],"length":945,"saved":false}
{"ts":1350416834510,"patch":[[{"diffs":[[0,"ix, "],[-1,"5, "],[1,"4,"],[0,"3);\r"]],"start1":554,"start2":554,"length1":11,"length2":10}]],"length":944,"saved":false}
{"ts":1350416869042,"patch":[[{"diffs":[[0,"ubix, 4,"],[-1,"3"],[1,"2"],[0,");\r\n    "]],"start1":552,"start2":552,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350416896673,"patch":[[{"diffs":[[0,", 4,"],[-1,"2"],[1,"1"],[0,");\r\n"]],"start1":556,"start2":556,"length1":9,"length2":9}]],"length":944,"saved":false}
{"ts":1350416936859,"patch":[[{"diffs":[[0,"ubix, 4,"],[-1,"1"],[1,"2"],[0,");\r\n    "]],"start1":552,"start2":552,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350416948135,"patch":[[{"diffs":[[0,", 4,"],[-1,"2"],[1,"1"],[0,");\r\n"]],"start1":556,"start2":556,"length1":9,"length2":9}]],"length":944,"saved":false}
{"ts":1350417012533,"patch":[[{"diffs":[[0,"ubix, 4,"],[-1,"1"],[1,"3"],[0,");\r\n    "]],"start1":552,"start2":552,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350417404739,"patch":[[{"diffs":[[0,"ix, "],[-1,"4"],[1,"0"],[0,",3);"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":944,"saved":false}
{"ts":1350417509176,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"0"],[1,"4"],[0,",3);\r\n  "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350417530957,"patch":[[{"diffs":[[0,"ix, "],[-1,"4"],[1,"5"],[0,",3);"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":944,"saved":false}
{"ts":1350417543482,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"5"],[1,"4"],[0,",3);\r\n  "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350417546561,"patch":[[{"diffs":[[0,"ubix, 4,"],[-1,"3"],[1,"1"],[0,");\r\n    "]],"start1":552,"start2":552,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350417773968,"patch":[[{"diffs":[[0,"ix, "],[-1,"4"],[1,"3"],[0,",1);"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":944,"saved":false}
{"ts":1350417790362,"patch":[[{"diffs":[[0,"ix, "],[-1,"3,1"],[1,"4,3"],[0,");\r\n"]],"start1":554,"start2":554,"length1":11,"length2":11}]],"length":944,"saved":false}
{"ts":1350417989579,"patch":[[{"diffs":[[0,"ubix, 4,"],[-1,"3"],[1,"1"],[0,");\r\n    "]],"start1":552,"start2":552,"length1":17,"length2":17}]],"length":944,"saved":false}
{"ts":1350417999364,"patch":[[{"diffs":[[0,"ix, "],[-1,"4"],[1,"0"],[0,",1);"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":944,"saved":false}
{"ts":1350418159386,"patch":[[{"diffs":[[0,");\r\n    "],[-1,"    //"],[0,"RubixSta"]],"start1":561,"start2":561,"length1":22,"length2":16}]],"length":938,"saved":false}
{"ts":1350418237193,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"1"],[1,"2"],[0,", 1);\r\n\r"]],"start1":586,"start2":586,"length1":17,"length2":17}]],"length":938,"saved":false}
{"ts":1350418321569,"patch":[[{"diffs":[[0,"ix, "],[-1,"2"],[1,"5"],[0,", 1)"]],"start1":590,"start2":590,"length1":9,"length2":9}]],"length":938,"saved":false}
{"ts":1350418382775,"patch":[[{"diffs":[[0,"ix, "],[-1,"0,1"],[1,"1,0"],[0,");\r\n"]],"start1":554,"start2":554,"length1":11,"length2":11},{"diffs":[[0,"ubix, 5,"],[-1," "],[0,"1);\r\n\r\n "]],"start1":588,"start2":588,"length1":17,"length2":16}]],"length":937,"saved":false}
{"ts":1350418552250,"patch":[[{"diffs":[[0,"bix, 1,0);\r\n"],[1,"    console.log(RubixState.toString(rubix));\r\n\r\n"],[0,"    RubixSta"]],"start1":553,"start2":553,"length1":24,"length2":72}]],"length":985,"saved":false}
{"ts":1350418603920,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"1"],[1,"4"],[0,",0);\r\n  "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":985,"saved":false}
{"ts":1350418667273,"patch":[[{"diffs":[[0,"bix, 4,0);\r\n    "],[1,"//"],[0,"console.log(Rubi"]],"start1":553,"start2":553,"length1":32,"length2":34},{"diffs":[[0,"rubix));\r\n\r\n    "],[1,"//"],[0,"RubixState.rotat"]],"start1":603,"start2":603,"length1":32,"length2":34}]],"length":989,"saved":false}
{"ts":1350418681810,"patch":[[{"diffs":[[0,"ix, "],[-1,"4"],[1,"1"],[0,",0);"]],"start1":554,"start2":554,"length1":9,"length2":9}]],"length":989,"saved":false}
{"ts":1350418934004,"patch":[[{"diffs":[[0,"ubix, 1,"],[-1,"0"],[1,"1"],[0,");\r\n    "]],"start1":552,"start2":552,"length1":17,"length2":17}]],"length":989,"saved":false}
{"ts":1350418943445,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"1"],[1,"0"],[0,",1);\r\n  "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":989,"saved":false}
{"ts":1350418952769,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[-1,"//"],[0,"RubixSta"]],"start1":611,"start2":611,"length1":18,"length2":16}]],"length":987,"saved":false}
{"ts":1350419641412,"patch":[[{"diffs":[[0,"rubix));\r\n\r\n    "],[1,"/"],[0,"RubixState.rotat"]],"start1":603,"start2":603,"length1":32,"length2":33}]],"length":988,"saved":false}
{"ts":1350419642829,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[1,"/"],[0,"/RubixSt"]],"start1":611,"start2":611,"length1":16,"length2":17}]],"length":989,"saved":false}
{"ts":1350419712244,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[-1,"//"],[0,"RubixSta"]],"start1":611,"start2":611,"length1":18,"length2":16}]],"length":987,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350426750742,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"0"],[1,"2"],[0,",1);\r\n  "]],"start1":550,"start2":550,"length1":17,"length2":17},{"diffs":[[0,"rubix));\r\n\r\n    "],[1,"//"],[0,"RubixState.rotat"]],"start1":603,"start2":603,"length1":32,"length2":34}]],"length":989,"saved":false}
{"ts":1350437069487,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[-1,"//"],[0,"RubixSta"]],"start1":611,"start2":611,"length1":18,"length2":16},{"diffs":[[0,"x));\r\n    \r\n"],[1,"    console.log(RubixState.hash(CubeHeuristics.goalState);\r\n    \r\n"],[0,"    //consol"]],"start1":764,"start2":764,"length1":24,"length2":90}]],"length":1053,"saved":false}
{"ts":1350437073617,"patch":[[{"diffs":[[0,"alState)"],[1,")"],[0,";\r\n    \r"]],"start1":825,"start2":825,"length1":16,"length2":17}]],"length":1054,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350438867270,"patch":[[{"diffs":[[0,"rubix));\r\n\r\n    "],[1,"//"],[0,"RubixState.rotat"]],"start1":603,"start2":603,"length1":32,"length2":34}]],"length":1056,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350440217326,"patch":[[{"diffs":[[0,"g(rubix));\r\n"],[-1,"    "],[0,"\r\n    consol"]],"start1":760,"start2":760,"length1":28,"length2":24},{"diffs":[[0,"log("],[-1,"RubixState.hash(CubeHeuristics.goalState));\r\n    "],[1,"CubeHeuristics.manhattanDistanceOfCorners(rubix));"],[0,"\r\n  "]],"start1":786,"start2":786,"length1":57,"length2":58}]],"length":1053,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350441705196,"patch":[[{"diffs":[[0,"   }\r\n\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":521,"start2":521,"length1":24,"length2":26}]],"length":1055,"saved":false}
{"ts":1350441787495,"patch":[[{"diffs":[[0,"\n//    }\r\n\r\n    "],[-1,"//"],[0,"RubixState.rotat"]],"start1":517,"start2":517,"length1":34,"length2":32}]],"length":1053,"saved":false}
{"ts":1350441885675,"patch":[[{"diffs":[[0,"ix, "],[-1,"2,"],[1,"3, 3);\r\n    RubixState.rotate(rubix, 4, "],[0,"1);\r"]],"start1":554,"start2":554,"length1":10,"length2":48}]],"length":1091,"saved":false}
{"ts":1350445441190,"patch":[[{"diffs":[[0,"s(rubix));\r\n    "],[-1,"//"],[0,"console.log(Cube"]],"start1":868,"start2":868,"length1":34,"length2":32},{"diffs":[[0,"ceOf"],[-1,"Sid"],[1,"TopEdges(rubix) + \":\" + \r\n                CubeHeuristics.manhattanDistanceOfBottomEdg"],[0,"es(r"]],"start1":926,"start2":926,"length1":11,"length2":93},{"diffs":[[0,"+ \r\n    "],[-1,"//"],[0,"        "]],"start1":1031,"start2":1031,"length1":18,"length2":16}]],"length":1169,"saved":false}
{"ts":1350445761820,"patch":[[{"diffs":[[0,"   }\r\n\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":521,"start2":521,"length1":24,"length2":26},{"diffs":[[0,"3, 3);\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":560,"start2":560,"length1":24,"length2":26}]],"length":1173,"saved":false}
{"ts":1350446077052,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"    console.log(CubeHeuristics.manhattanDistanceOfCorners(rubix));\r\n"],[0,"    "]],"start1":812,"start2":812,"length1":76,"length2":8}]],"length":1105,"saved":false}
{"ts":1350446951438,"patch":[[{"diffs":[[0,"\n//    }\r\n\r\n    "],[-1,"//"],[0,"RubixState.rotat"]],"start1":517,"start2":517,"length1":34,"length2":32}]],"length":1103,"saved":false}
{"ts":1350447836700,"patch":[[{"diffs":[[0,"bix, 3, "],[-1,"3"],[1,"1"],[0,");\r\n    "]],"start1":553,"start2":553,"length1":17,"length2":17}]],"length":1103,"saved":false}
{"ts":1350448526749,"patch":[[{"diffs":[[0,"   }\r\n\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":521,"start2":521,"length1":24,"length2":26}]],"length":1105,"saved":false}
{"ts":1350448532711,"patch":[[{"diffs":[[0,"\n//    }\r\n\r\n    "],[-1,"//"],[0,"RubixState.rotat"]],"start1":517,"start2":517,"length1":34,"length2":32}]],"length":1103,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350481496534,"patch":[[{"diffs":[[0,"   }\r\n\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":521,"start2":521,"length1":24,"length2":26}]],"length":1105,"saved":false}
{"ts":1350481982995,"patch":[[{"diffs":[[0,"\n//    }\r\n\r\n    "],[-1,"//"],[0,"RubixState.rotat"]],"start1":517,"start2":517,"length1":34,"length2":32}]],"length":1103,"saved":false}
{"ts":1350481997033,"patch":[[{"diffs":[[0,"(rubix, "],[-1,"3"],[1,"2"],[0,", 1);\r\n "]],"start1":550,"start2":550,"length1":17,"length2":17}]],"length":1103,"saved":false}
{"ts":1350482170216,"patch":[[{"diffs":[[0,"   }\r\n\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":521,"start2":521,"length1":24,"length2":26}]],"length":1105,"saved":false}
{"ts":1350482198519,"patch":[[{"diffs":[[0,"\n//    }\r\n\r\n    "],[-1,"//"],[0,"RubixState.rotat"]],"start1":517,"start2":517,"length1":34,"length2":32}]],"length":1103,"saved":false}
{"ts":1350485678067,"patch":[[{"diffs":[[0,"    console.log("],[1,"//"],[0,"CubeHeuristics.m"]],"start1":814,"start2":814,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"CubeHeuristics.m"]],"start1":892,"start2":892,"length1":32,"length2":34}]],"length":1107,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350486670309,"patch":[[{"diffs":[[0,"ole.log("],[-1,"//"],[0,"CubeHeur"]],"start1":822,"start2":822,"length1":18,"length2":16},{"diffs":[[0,"        "],[-1,"//"],[0,"CubeHeur"]],"start1":898,"start2":898,"length1":18,"length2":16}]],"length":1103,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350489959401,"patch":[[{"diffs":[[0,"e();\r\n    \r\n"],[-1,"//"],[0,"    var face"]],"start1":191,"start2":191,"length1":26,"length2":24},{"diffs":[[0,"om() * 6);\r\n"],[-1,"//"],[0,"    var rots"]],"start1":238,"start2":238,"length1":26,"length2":24},{"diffs":[[0," 1);\r\n    \r\n"],[-1,"//"],[0,"    for (var"]],"start1":295,"start2":295,"length1":26,"length2":24},{"diffs":[[0,"i < "],[-1,"5"],[1,"0"],[0,"; i++)\r\n"],[-1,"//"],[0,"    {\r\n"],[-1,"//"],[0,"    "]],"start1":327,"start2":327,"length1":28,"length2":24},{"diffs":[[0,"ce, rots);\r\n"],[-1,"//"],[0,"        \r\n//"]],"start1":382,"start2":382,"length1":26,"length2":24},{"diffs":[[0,"      \r\n"],[-1,"//"],[0,"        "]],"start1":396,"start2":396,"length1":18,"length2":16},{"diffs":[[0,"om() * 6);\r\n"],[-1,"//"],[0,"        rots"]],"start1":439,"start2":439,"length1":26,"length2":24},{"diffs":[[0," + 1);\r\n"],[-1,"//"],[0,"    }\r\n\r"]],"start1":494,"start2":494,"length1":18,"length2":16},{"diffs":[[0,"   }\r\n\r\n    "],[1,"//"],[0,"RubixState.r"]],"start1":503,"start2":503,"length1":24,"length2":26},{"diffs":[[0,"ix, "],[-1,"2, 1"],[1,"3, 3"],[0,");\r\n"]],"start1":538,"start2":538,"length1":12,"length2":12},{"diffs":[[0,"bix, 4, "],[-1,"1"],[1,"3);\r\n    //RubixState.rotate(rubix, 2, 3"],[0,");\r\n    "]],"start1":576,"start2":576,"length1":17,"length2":56},{"diffs":[[0,"ceOf"],[-1,"TopEdges(rubix) + \":\" + \r\n                CubeHeuristics.manhattanDistanceOfBottom"],[1,"All"],[0,"Edge"]],"start1":883,"start2":883,"length1":90,"length2":11}]],"length":1047,"saved":false}
{"ts":1350489964486,"patch":[[{"diffs":[[0," 0; i < "],[1,"10"],[0,"0; i++)\r"]],"start1":323,"start2":323,"length1":16,"length2":18}]],"length":1049,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350526751210,"patch":[[{"diffs":[[0,"    "],[-1,"TableGenerator.generate("],[1,"FileOperator.init();\r\n    \r\n    FileOperator.presentForDownload(\"TEST\""],[0,");\r\n"]],"start1":34,"start2":34,"length1":32,"length2":78},{"diffs":[[0,"\n{\r\n"],[1,""],[0,"    "],[-1,"var rubix = RubixState.createWithGoalState();\r\n    \r\n    var face = Math.floor(Math.random() * 6);\r\n    var rots = Math.floor(Math.random() * 3 + 1);\r\n    \r\n    for (var i = 0; i < 100; i++)\r\n    {\r\n        RubixState.rotate(rubix, face, rots);\r\n        \r\n        face = Math.floor(Math.random() * 6);\r\n        rots = Math.floor(Math.random() * 3 + 1);\r\n    }\r\n\r\n    //RubixState.rotate(rubix, 3, 3);\r\n    //RubixState.rotate(rubix, 4, 3);\r\n    //RubixState.rotate(rubix, 2, 3);\r\n    //console.log(RubixState.toString(rubix));\r\n\r\n    //RubixState.rotate(rubix, 5,1);\r\n\r\n    \r\n    console.log(RubixState.toString(CubeHeuristics.goalState));\r\n    console.log(RubixState.toString(rubix));\r\n\r\n    console.log(CubeHeuristics.manhattanDistanceOfAllEdges(rubix) + \":\" + \r\n                CubeHeuristics.manhattanDistanceOfCorners(rubix));\r\n    //console.log(CubeHeuristics.heuristic(rubix));"],[0,"\r\n};"]],"start1":188,"start2":188,"length1":896,"length2":12}]],"length":211,"saved":false}
{"ts":1350526861961,"patch":[[{"diffs":[[0,"perator."],[1,"operator."],[0,"presentF"]],"start1":75,"start2":75,"length1":16,"length2":25}]],"length":220,"saved":false}
{"ts":1350526911092,"patch":[[{"diffs":[[0," {\r\n"],[-1,"    FileOperator.init();\r\n    \r\n"],[0,"    "]],"start1":30,"start2":30,"length1":40,"length2":8}]],"length":188,"saved":false}
{"ts":1350527064111,"patch":[[{"diffs":[[0,"    "],[-1,"FileOperator.o"],[1,"setTimeout(function() {\r\n        FileO"],[0,"pera"]],"start1":34,"start2":34,"length1":22,"length2":46},{"diffs":[[0,"EST\");\r\n"],[1,"    }, 1000);\r\n"],[0,"});\r\n\r\nf"]],"start1":105,"start2":105,"length1":16,"length2":31}]],"length":227,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350528274774,"patch":[[{"diffs":[[0,"nction() {\r\n"],[1,"    FileOperator.init();\r\n    \r\n"],[0,"    setTimeo"]],"start1":22,"start2":22,"length1":24,"length2":56},{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"function BreadthSearch()\r\n{\r\n    this.frontier = new Queue();\r\n}\r\n\r\nBreadthSearch.prototype.search = function(initialState)\r\n{\r\n    var initialNode = new RubixNode(initialState);\r\n    \r\n    this.frontier.enqueue(RubixNode.getSuccessors(initialN\r\n};\r\n\r\n"],[0,"// TODO"]],"start1":244,"start2":244,"length1":15,"length2":267}]],"length":511,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350528357567,"patch":[[{"diffs":[[0,"    "],[-1,"this.frontier.enqueue("],[1,"var successors = "],[0,"Rubi"]],"start1":438,"start2":438,"length1":30,"length2":25},{"diffs":[[0,"initialN"],[1,"ode);\r\n    \r\n    for (index in successors)\r\n        this.frontier.enqueue(successors[index]);"],[0,"\r\n};\r\n\r\n"]],"start1":483,"start2":483,"length1":16,"length2":109}]],"length":599,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350582567343,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n};\r\n\r\nfunction BreadthSearch()\r\n{\r\n    this.frontier = new Queue();\r\n}\r\n\r\nBreadthSearch.prototype.search = function(initi"],[1,"var initialNode = new RubixNode(RubixState.createWithGo"],[0,"alState"],[-1,")\r\n{"],[1,"());"],[0,"\r\n  "]],"start1":240,"start2":240,"length1":142,"length2":74},{"diffs":[[0,"    var "],[-1,"initialN"],[1,"n"],[0,"ode"],[1,"s"],[0," ="],[-1," new"],[0," RubixNo"]],"start1":312,"start2":312,"length1":33,"length2":23},{"diffs":[[0,"Node"],[-1,"(initialState);\r\n    \r\n    var successors = RubixNode.getSuccessors(initialNode);\r\n    \r\n    for (index in successors)\r\n        this.frontier.enqueue(successors[index]"],[1,".getSuccessors(initialNode), successors, index;\r\n    \r\n    var cornerData = new Uint8Array(), edgeTopData = \"\", edgeBottomData + \"\";\r\n    \r\n    do \r\n    {\r\n        for (index = 0; index < nodes.length; index++)\r\n        {\r\n            cornerData[RubixState.hash(nodes[index].rubixState, RubixState.corners)] = CubeHeuristics.manhattanDistanceOfCorners();\r\n        }\r\n        \r\n    } while (false"],[0,");\r\n"]],"start1":333,"start2":333,"length1":175,"length2":403}]],"length":749,"saved":false}
{"ts":1350582712182,"patch":[[{"diffs":[[0,"alse);\r\n"],[1,"    \r\n    FileOperator.presentForDownload(cornerData);\r\n"],[0,"};\r\n\r\n//"]],"start1":728,"start2":728,"length1":16,"length2":72}]],"length":805,"saved":false}
{"ts":1350582721079,"patch":[[{"diffs":[[0,"\n   "],[-1," FileOperator.init();\r\n    \r\n    setTimeout(function() {\r\n        FileOperator.presentForDownload(\"TEST\");\r\n    }, 1000"],[1,"TableGenerator.generate("],[0,");\r\n"]],"start1":33,"start2":33,"length1":127,"length2":32}]],"length":710,"saved":false}
{"ts":1350582758283,"patch":[[{"diffs":[[0,"tomData "],[-1,"+"],[1,"="],[0," \"\";\r\n  "]],"start1":361,"start2":361,"length1":17,"length2":17}]],"length":710,"saved":false}
{"ts":1350582846908,"patch":[[{"diffs":[[0,"Corners("],[1,"nodes[index].rubixState"],[0,");\r\n    "]],"start1":586,"start2":586,"length1":16,"length2":39}]],"length":733,"saved":false}
{"ts":1350582852818,"patch":[[{"diffs":[[0,"ers)] = "],[1,"\r\n                "],[0,"CubeHeur"]],"start1":544,"start2":544,"length1":16,"length2":34}]],"length":751,"saved":false}
{"ts":1350582880265,"patch":[[{"diffs":[[0," \"\";\r\n    \r\n"],[1,"    console.log(nodes);\r\n    \r\n"],[0,"    do \r\n   "]],"start1":370,"start2":370,"length1":24,"length2":55}]],"length":782,"saved":false}
{"ts":1350582901140,"patch":[[{"diffs":[[0,"se);\r\n    \r\n"],[1,"    console.log(cornerData);\r\n"],[0,"    FileOper"]],"start1":707,"start2":707,"length1":24,"length2":54}]],"length":812,"saved":false}
{"ts":1350582904086,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    console.log(nodes);\r\n    \r\n"],[0,"    "]],"start1":378,"start2":378,"length1":39,"length2":8}]],"length":781,"saved":false}
{"ts":1350583149492,"patch":[[{"diffs":[[0,"bixState);\r\n"],[1,"            console.log(cornerData);\r\n"],[0,"        }\r\n "]],"start1":627,"start2":627,"length1":24,"length2":62},{"diffs":[[0,"  \r\n"],[-1,"    console.log(cornerData);\r\n"],[0,"    "]],"start1":722,"start2":722,"length1":38,"length2":8}]],"length":789,"saved":false}
{"ts":1350583153818,"patch":[[{"diffs":[[0,"t8Array("],[1,"50"],[0,"), edgeT"]],"start1":325,"start2":325,"length1":16,"length2":18}]],"length":791,"saved":false}
{"ts":1350583168361,"patch":[[{"diffs":[[0,"d(cornerData"],[1,".toString()"],[0,");\r\n};\r\n\r\n//"]],"start1":762,"start2":762,"length1":24,"length2":35}]],"length":802,"saved":false}
{"ts":1350583189729,"patch":[[{"diffs":[[0,"rnerData"],[1,".toString()"],[0,");\r\n    "]],"start1":667,"start2":667,"length1":16,"length2":27}]],"length":813,"saved":false}
{"ts":1350583259161,"patch":[[{"diffs":[[0,"log("],[-1,"cornerData.toString()"],[0,");\r\n"],[1,""],[0,"    "]],"start1":661,"start2":661,"length1":33,"length2":12},{"diffs":[[0,"se);\r\n    \r\n"],[1,"    var data = \"\"\r\n    \r\n    for (index = 0; index < cornerData.length; index++)\r\n        data += cornerData[index];\r\n    \r\n"],[0,"    FileOper"]],"start1":706,"start2":706,"length1":24,"length2":148},{"diffs":[[0,"oad("],[-1,"cornerData.toString()"],[1,"data"],[0,");\r\n"]],"start1":874,"start2":874,"length1":29,"length2":12}]],"length":899,"saved":false}
{"ts":1350583267004,"patch":[[{"diffs":[[0,"ata = \"\""],[1,";"],[0,"\r\n    \r\n"]],"start1":727,"start2":727,"length1":16,"length2":17}]],"length":900,"saved":false}
{"ts":1350583277429,"patch":[[{"diffs":[[0,"ex];\r\n    \r\n"],[1,"    console.log(data);\r\n    \r\n"],[0,"    FileOper"]],"start1":831,"start2":831,"length1":24,"length2":54}]],"length":930,"saved":false}
{"ts":1350583290162,"patch":[[{"diffs":[[0,"ownload("],[-1,"data"],[1,"\"TEST\""],[0,");\r\n};\r\n"]],"start1":901,"start2":901,"length1":20,"length2":22}]],"length":932,"saved":false}
{"ts":1350583308643,"patch":[[{"diffs":[[0,"oad("],[-1,"\"TEST\""],[1,"data"],[0,");\r\n"]],"start1":905,"start2":905,"length1":14,"length2":12}]],"length":930,"saved":false}
{"ts":1350583332252,"patch":[[{"diffs":[[0,"on() {\r\n"],[1,"    FileOperator.init();\r\n "],[0,"   Table"]],"start1":26,"start2":26,"length1":16,"length2":43}]],"length":957,"saved":false}
{"ts":1350583417038,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState.toString(nodes[index].rubixState)"],[0,");\r\n    "]],"start1":684,"start2":684,"length1":16,"length2":60}]],"length":1001,"saved":false}
{"ts":1350583438629,"patch":[[{"diffs":[[0,"log("],[-1,"RubixState.toString"],[1,"CubeHeuristics.manhattanDistanceOfCorners"],[0,"(nod"]],"start1":688,"start2":688,"length1":27,"length2":49},{"diffs":[[0,"ixState)"],[-1,")"],[0,";\r\n     "]],"start1":750,"start2":750,"length1":17,"length2":16}]],"length":1022,"saved":false}
{"ts":1350583448688,"patch":[[{"diffs":[[0,"dex].rubixState)"],[1,")"],[0,";\r\n        }\r\n  "]],"start1":742,"start2":742,"length1":32,"length2":33}]],"length":1023,"saved":false}
{"ts":1350583483362,"patch":[[{"diffs":[[0,"ata["],[-1,"RubixState.hash(nodes[index].rubixState, RubixState.corners)"],[1,"0"],[0,"] = "]],"start1":513,"start2":513,"length1":68,"length2":9},{"diffs":[[0,"log("],[-1,"CubeHeuristics.manhattanDistanceOfCorners"],[1,"RubixState.hash"],[0,"(nod"]],"start1":629,"start2":629,"length1":49,"length2":23},{"diffs":[[0,"bixState"],[1,", RubixState.corners"],[0,"));\r\n   "]],"start1":664,"start2":664,"length1":16,"length2":36}]],"length":958,"saved":false}
{"ts":1350583766007,"patch":[[{"diffs":[[0,"        "],[-1,"console.log"],[1,"\r\n            if"],[0,"(RubixSt"]],"start1":613,"start2":613,"length1":27,"length2":32},{"diffs":[[0,"corners)"],[1," == 1218728489)\r\n                console.log(RubixState.toString(nodes[index].rubixState"],[0,");\r\n    "]],"start1":690,"start2":690,"length1":16,"length2":104}]],"length":1051,"saved":false}
{"ts":1350583774195,"patch":[[{"diffs":[[0,"dex].rubixState)"],[1,")"],[0,";\r\n        }\r\n  "]],"start1":771,"start2":771,"length1":32,"length2":33}]],"length":1052,"saved":false}
{"ts":1350584024422,"patch":[[{"diffs":[[0,"    "],[-1,"if"],[1,"console.log"],[0,"(Rub"]],"start1":631,"start2":631,"length1":10,"length2":19},{"diffs":[[0,"ers)"],[-1," == 1218728489)\r\n                console.log(RubixState.toString(nodes[index].rubixState)"],[0,");\r\n"]],"start1":703,"start2":703,"length1":97,"length2":8}]],"length":972,"saved":false}
{"ts":1350584158941,"patch":[[{"diffs":[[0,");\r\n    "],[1,"//"],[0,"TableGen"]],"start1":56,"start2":56,"length1":16,"length2":18}]],"length":974,"saved":false}
{"ts":1350584459241,"patch":[[{"diffs":[[0,"corners));\r\n"],[1,"            console.log(RubixState.toString(nodes[index].rubixState);\r\n"],[0,"        }\r\n "]],"start1":701,"start2":701,"length1":24,"length2":95}]],"length":1045,"saved":false}
{"ts":1350584461531,"patch":[[{"diffs":[[0,"dex].rubixState)"],[1,")"],[0,";\r\n        }\r\n  "]],"start1":765,"start2":765,"length1":32,"length2":33}]],"length":1046,"saved":false}
{"ts":1350584794635,"patch":[[{"diffs":[[0,"index < "],[1,"1/*"],[0,"nodes.le"]],"start1":453,"start2":453,"length1":16,"length2":19},{"diffs":[[0,"nodes.length"],[1,"*/"],[0,"; index++)\r\n"]],"start1":464,"start2":464,"length1":24,"length2":26}]],"length":1051,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350659366789,"patch":[[{"diffs":[[1,"\r\n$(document).ready(function() {\r\n    FileOperator.init();\r\n    //TableGenerator.generate();\r\n});\r\n\r\nfunction TableGenerator() {}\r\n\r\nTableGenerator.generate = function()\r\n{\r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n    var goalHash = RubixState.hashCode(initialNode.rubixState);\r\n    \r\n    var nodes = RubixNode.getSuccessors(initialNode), successors, index;\r\n    \r\n    var cornerData = new Uint8Array(50), edgeTopData = \"\", edgeBottomData = \"\";\r\n    \r\n    do \r\n    {\r\n        for (index = 0; index < 1/*nodes.length*/; index++)\r\n        {\r\n            cornerData[0] = \r\n                CubeHeuristics.manhattanDistanceOfCorners(nodes[index].rubixState);\r\n            \r\n            console.log(RubixState.hashCode(nodes[index].rubixState, RubixState.corners) - goalHash);\r\n            console.log(RubixState.toString(nodes[index].rubixState));\r\n        }\r\n        \r\n    } while (false);\r\n    \r\n    var data = \"\";\r\n    \r\n    for (index = 0; index < cornerData.length; index++)\r\n        data += cornerData[index];\r\n    \r\n    console.log(data);\r\n    \r\n    FileOperator.presentForDownload(data);\r\n};\r\n\r\n// TODO"]],"start1":0,"start2":0,"length1":0,"length2":1137}]],"length":1137,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350659438243,"patch":[[{"diffs":[[0,"    var "],[-1,"g"],[1,"cornerG"],[0,"oalHash "]],"start1":246,"start2":246,"length1":17,"length2":23},{"diffs":[[0,"lNode.rubixState"],[1,", RubixState.corners"],[0,");\r\n    \r\n    va"]],"start1":297,"start2":297,"length1":32,"length2":52}]],"length":1163,"saved":false}
{"ts":1350659456439,"patch":[[{"diffs":[[0,"ners) - "],[-1,"g"],[1,"cornerG"],[0,"oalHash)"]],"start1":810,"start2":810,"length1":17,"length2":23}]],"length":1169,"saved":false}
{"ts":1350659584298,"patch":[[{"diffs":[[0,"    console.log("],[1,"cornerGoalHash - "],[0,"RubixState.hashC"]],"start1":735,"start2":735,"length1":32,"length2":49},{"diffs":[[0,"ers)"],[-1," - cornerGoalHash"],[0,");\r\n"]],"start1":828,"start2":828,"length1":25,"length2":8}]],"length":1169,"saved":false}
{"ts":1350659802617,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    var cornerGoalHash = RubixState.hashCode(initialNode.rubixState, RubixState.corners);\r\n"],[0,"    "]],"start1":242,"start2":242,"length1":99,"length2":8},{"diffs":[[0,"log("],[-1,"cornerGoalHash - "],[0,"Rubi"]],"start1":656,"start2":656,"length1":25,"length2":8},{"diffs":[[0,");\r\n            "],[1,"//"],[0,"console.log(Rubi"]],"start1":724,"start2":724,"length1":32,"length2":34}]],"length":1063,"saved":false}
{"ts":1350659888981,"patch":[[{"diffs":[[0,"x < "],[-1,"1/*"],[0,"node"]],"start1":463,"start2":463,"length1":11,"length2":8},{"diffs":[[0,"ngth"],[-1,"*/"],[0,"; in"]],"start1":475,"start2":475,"length1":10,"length2":8},{"diffs":[[0,"(false);\r\n    \r\n"],[1,"    /*\r\n"],[0,"    var data = \""]],"start1":830,"start2":830,"length1":32,"length2":40},{"diffs":[[0,"data);\r\n"],[1,"    */\r\n"],[0,"};\r\n\r\n//"]],"start1":1045,"start2":1045,"length1":16,"length2":24}]],"length":1074,"saved":false}
{"ts":1350660338446,"patch":[[{"diffs":[[0,"corners)"],[1," % 100000000"],[0,");\r\n    "]],"start1":711,"start2":711,"length1":16,"length2":28}]],"length":1086,"saved":false}
{"ts":1350669365916,"patch":[[{"diffs":[[0,".corners"],[1,"7"],[0,") % 1000"]],"start1":710,"start2":710,"length1":16,"length2":17}]],"length":1087,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350742874714,"patch":[[{"diffs":[[0,"tor."],[-1,"generate = function()\r\n{"],[1,"cornerDatabase = null;\r\nTableGenerator.edgesTopDatabase = null;\r\nTableGenerator.edgesBottomDatabase = null;\r\n\r\n\r\nTableGenerator.generate = function()\r\n{\r\n    TableGenerator.cornerDatabase = new Uint8Array(new ArrayBuffer(88179840));\r\n    "],[0,"\r\n  "]],"start1":144,"start2":144,"length1":32,"length2":246},{"diffs":[[0,"  */"],[-1,"\r\n};\r\n\r\n// TODO\r\n$(document).ready(function() {\r\n    FileOperator.init();\r\n    //TableGenerator.generate();\r\n});\r\n\r\nfunction TableGenerator() {}\r\n\r\nTableGenerator.generate = function()\r\n{\r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n    var nodes = RubixNode.getSuccessors(initialNode), successors, index;\r\n    \r\n    var cornerData = new Uint8Array(50), edgeTopData = \"\", edgeBottomData = \"\";\r\n    \r\n    do \r\n    {\r\n        for (index = 0; index < 1/*nodes.length*/; index++)\r\n        {\r\n            cornerData[0] = \r\n                CubeHeuristics.manhattanDistanceOfCorners(nodes[index].rubixState);\r\n            \r\n            console.log(RubixState.hash(nodes[index].rubixState, RubixState.corners));\r\n            console.log(RubixState.toString(nodes[index].rubixState));\r\n        }\r\n        \r\n    } while (false);\r\n    \r\n    var data = \"\";\r\n    \r\n    for (index = 0; index < cornerData.length; index++)\r\n        data += cornerData[index];\r\n    \r\n    console.log(data);\r\n    \r\n    FileOperator.presentForDownload(data);"],[0,""],[1,""],[0,"\r\n};"]],"start1":1282,"start2":1282,"length1":1059,"length2":8}]],"length":1301,"saved":false}
{"ts":1350742898230,"patch":[[{"diffs":[[0,"8179840));\r\n"],[1,"    TableGenerator.edgesTopDatabase = new Uint8Array(new ArrayBuffer(88179840));\r\n    TableGenerator.edgesBottomDatabase = new Uint8Array(new ArrayBuffer(88179840));\r\n"],[0,"    \r\n    va"]],"start1":370,"start2":370,"length1":24,"length2":191}]],"length":1468,"saved":false}
{"ts":1350744448176,"patch":[[{"diffs":[[0,"    "],[-1,"TableGenerator.corn"],[1,"var db = new Patt"],[0,"er"],[1,"n"],[0,"Database"],[-1," = new Uint8Array(new ArrayBuffer(88179840));\r\n    TableGenerator.edgesTopDatabase = new Uint8Array(new ArrayBuffer(88179840));\r\n    TableGenerator.edgesBottomDatabase = new Uint8Array(new ArrayBuffer(88179840"],[1,"(16);\r\n    \r\n    db.set(1, 2);\r\n    console.log(db.get(1"],[0,"));\r"]],"start1":302,"start2":302,"length1":246,"length2":92},{"diffs":[[0,"get(1));\r\n    \r\n"],[1,"    /*\r\n"],[0,"    var initialN"]],"start1":385,"start2":385,"length1":32,"length2":40}]],"length":1322,"saved":false}
{"ts":1350744764336,"patch":[[{"diffs":[[0,"(1, "],[-1,"2"],[1,"10"],[0,");\r\n"]],"start1":357,"start2":357,"length1":9,"length2":10}]],"length":1323,"saved":false}
{"ts":1350744782419,"patch":[[{"diffs":[[0,"et(1, 10);\r\n"],[1,"    db.set(0, 11);\r\n"],[0,"    console."]],"start1":355,"start2":355,"length1":24,"length2":44}]],"length":1343,"saved":false}
{"ts":1350744793300,"patch":[[{"diffs":[[0,"b.get(1));\r\n"],[1,"    console.log(db.get(0));\r\n"],[0,"    \r\n    /*"]],"start1":404,"start2":404,"length1":24,"length2":53}]],"length":1372,"saved":false}
{"ts":1350745125039,"patch":[[{"diffs":[[0,"set(0, 1"],[-1,"1"],[1,"5"],[0,");\r\n    "]],"start1":374,"start2":374,"length1":17,"length2":17}]],"length":1372,"saved":false}
{"ts":1350745132897,"patch":[[{"diffs":[[0,"set(1, 1"],[-1,"0"],[0,");\r\n    "]],"start1":354,"start2":354,"length1":17,"length2":16}]],"length":1371,"saved":false}
{"ts":1350745148038,"patch":[[{"diffs":[[0,"et(0, 15);\r\n"],[1,"    db.set(1, 15);\r\n"],[0,"    console."]],"start1":374,"start2":374,"length1":24,"length2":44}]],"length":1391,"saved":false}
{"ts":1350745155293,"patch":[[{"diffs":[[0,"set(1, 1"],[-1,"5"],[1,"2"],[0,");\r\n    "]],"start1":393,"start2":393,"length1":17,"length2":17}]],"length":1391,"saved":false}
{"ts":1350746804858,"patch":[[{"diffs":[[0,"ull;\r\n\r\n"],[-1,"\r\n"],[0,"TableGen"]],"start1":251,"start2":251,"length1":18,"length2":16},{"diffs":[[0,")\r\n{"],[-1,"\r\n    var db = new PatternDatabase(16);\r\n    \r\n    db.set(1, 1);\r\n    db.set(0, 15);\r\n    db.set(1, 12);\r\n    console.log(db.get(1));\r\n    console.log(db.get(0));\r\n    \r\n    /*"],[1,"    "],[0,"\r\n  "]],"start1":294,"start2":294,"length1":184,"length2":12}]],"length":1217,"saved":false}
{"ts":1350746826820,"patch":[[{"diffs":[[0," = null;\r\n\r\n"],[1,"\r\n"],[0,"TableGenerat"]],"start1":247,"start2":247,"length1":24,"length2":26},{"diffs":[[0,"ion()\r\n{"],[1,"\r\n"],[0,"    "],[1,"var db = new PatternDatabase(16);\r\n    \r\n    db.set(1, 1);\r\n    db.set(0, 15);\r\n    console.log(db.toString());\r\n    \r\n    /*"],[0,"\r\n    va"]],"start1":292,"start2":292,"length1":20,"length2":147}]],"length":1346,"saved":false}
{"ts":1350746851987,"patch":[[{"diffs":[[0,"ole.log("],[1,"\":\" + "],[0,"db.toStr"]],"start1":394,"start2":394,"length1":16,"length2":22},{"diffs":[[0,"String()"],[1," + \":\""],[0,");\r\n    "]],"start1":413,"start2":413,"length1":16,"length2":22}]],"length":1358,"saved":false}
{"ts":1350746957747,"patch":[[{"diffs":[[0,"set(1, 1"],[1,"5"],[0,");\r\n    "]],"start1":354,"start2":354,"length1":16,"length2":17}]],"length":1359,"saved":false}
{"ts":1350746981790,"patch":[[{"diffs":[[0,"et(0, 15);\r\n"],[1,"    console.log(db.entries);\r\n"],[0,"    console."]],"start1":375,"start2":375,"length1":24,"length2":54}]],"length":1389,"saved":false}
{"ts":1350747242070,"patch":[[{"diffs":[[0,"log("],[-1,"db.entries);\r\n    console.log(\":\" + db.toString() + \":\""],[1,"\":\" + db.toString() + \":\");\r\n    FileOperator.presentForDownload(db"],[0,");\r\n"]],"start1":399,"start2":399,"length1":63,"length2":75}]],"length":1401,"saved":false}
{"ts":1350748033833,"patch":[[{"diffs":[[0," db."],[-1,"set(1, 15);\r\n    db.set(0, 15);"],[1,"loadFromFile(\"../tables/test.txt\");\r\n    \r\n    console.log(db.entries);\r\n    "],[0,"\r\n  "]],"start1":350,"start2":350,"length1":39,"length2":85},{"diffs":[[0,");\r\n"],[-1,"    FileOperator.presentForDownload(db);\r\n"],[0,"    "]],"start1":474,"start2":474,"length1":50,"length2":8}]],"length":1405,"saved":false}
{"ts":1350748208876,"patch":[[{"diffs":[[0,"le(\""],[-1,"../"],[0,"tabl"]],"start1":364,"start2":364,"length1":11,"length2":8}]],"length":1402,"saved":false}
{"ts":1350748602006,"patch":[[{"diffs":[[0,"  \r\n    "],[1,"//"],[0,"db.loadF"]],"start1":343,"start2":343,"length1":16,"length2":18},{"diffs":[[0,"t.txt\");\r\n    \r\n"],[1,"    db.loadFromString(\"i\");\r\n    \r\n"],[0,"    console.log("]],"start1":380,"start2":380,"length1":32,"length2":67},{"diffs":[[0,".entries);\r\n"],[-1,"    \r\n"],[0,"    console."]],"start1":449,"start2":449,"length1":30,"length2":24}]],"length":1433,"saved":false}
{"ts":1350748671869,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"//"],[0,"db.loadF"]],"start1":343,"start2":343,"length1":18,"length2":16},{"diffs":[[0,"t\");\r\n    \r\n    "],[1,"//"],[0,"db.loadFromStrin"]],"start1":382,"start2":382,"length1":32,"length2":34}]],"length":1433,"saved":false}
{"ts":1350749394654,"patch":[[{"diffs":[[0," + \":\");\r\n    \r\n"],[1,"    console.log(\"-----\");\r\n    \r\n    var db2 = new PatternDatabase(16);\r\n    \r\n    db2.set(0, 15);\r\n    db2.set(1, 15);\r\n    \r\n    console.log(db2.entries);\r\n    console.log(\":\" + db2.toString() + \":\");\r\n    \r\n    \r\n"],[0,"    /*\r\n    var "]],"start1":496,"start2":496,"length1":32,"length2":248}]],"length":1649,"saved":false}
{"ts":1350749630720,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n    console.log(db.entries);"],[1,"var index;\r\n    \r\n    for(index = 0; index < db.entries.length; index++)\r\n        console.log(db.entries[index].toString(2));\r\n    "],[0,"\r\n  "]],"start1":425,"start2":425,"length1":38,"length2":139},{"diffs":[[0,"(1, 15);\r\n    \r\n"],[1,"    for(index = 0; index < db2.entries.length; index++)\r\n    "],[0,"    console.log("]],"start1":724,"start2":724,"length1":32,"length2":93},{"diffs":[[0,".entries"],[1,"[index].toString(2)"],[0,");\r\n    "]],"start1":820,"start2":820,"length1":16,"length2":35}]],"length":1830,"saved":false}
{"ts":1350750279780,"patch":[[{"diffs":[[0,".cornerD"],[-1,""],[1,"bSize = 88179840;\r\nTableGenerator.edgeDbSize = 42577920;\r\n\r\nTableGenerator.cornerD"],[0,"atabase "]],"start1":147,"start2":147,"length1":16,"length2":98},{"diffs":[[0,"var "],[-1,"db = new PatternDatabase(16);\r\n    \r\n    db.loadFromFile(\"tables/test.txt\");\r\n    \r\n    //db.loadFromString(\"i\");\r\n    var index;\r\n    \r\n    for(index = 0; index < db.entries.length; index++)\r\n        console.log(db.entries[index].toString(2));\r\n    \r\n    console.log(\":\" + db.toString() + \":\");\r\n    \r\n    console.log(\"-----\");\r\n    \r\n    var db2 = new PatternDatabase(16);\r\n    \r\n    db2.set(0, 15);\r\n    db2.set(1, 15);\r\n    \r\n    for(index = 0; index < db2.entries.length; index++)\r\n        console.log(db2.entries[index].toString(2));\r\n    console.log(\":\" + db2.toString() + \":\");\r\n    \r\n    \r\n    /*\r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n    \r\n    var nodes = RubixNode.getSuccessors(initialNode), successors, index;\r\n    \r\n    var cornerData = new Uint8Array(50), edgeTopData = \"\", edgeBottomData = \"\""],[1,"initialNode = new RubixNode(RubixState.createWithGoalState());\r\n    \r\n    var nodes = RubixNode.getSuccessors(initialNode), successors, index;\r\n    \r\n    TableGenerator.cornerDatabase = new PatternDatabase(TableGenerator.cornerDbSize);\r\n//    TableGenerator.edgesTopDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n//    TableGenerator.edgesBottomDatabase = new PatternDatabase(TableGenerator.edgeDbSize)"],[0,";\r\n "]],"start1":388,"start2":388,"length1":851,"length2":423},{"diffs":[[0,"    "],[-1,"cornerData[0] = \r\n                CubeHeuristics.manhattanDistanceOfCorners(nodes[index].rubixState);"],[0,"\r\n  "]],"start1":907,"start2":907,"length1":109,"length2":8},{"diffs":[[0,");\r\n"],[-1,"    \r\n    /*\r\n    var data = \"\";\r\n    \r\n    for (index = 0; index < cornerData.length; index++)\r\n        data += cornerData[index];\r\n    \r\n    console.log(data);\r\n    \r\n    FileOperator.presentForDownload(data);\r\n    */\r\n"],[0,"};\r\n"]],"start1":1145,"start2":1145,"length1":229,"length2":8}]],"length":1162,"saved":false}
{"ts":1350750496126,"patch":[[{"diffs":[[0," {\r\n"],[-1,"            \r\n            \r\n"],[0,"    "]],"start1":895,"start2":895,"length1":36,"length2":8}]],"length":1134,"saved":false}
{"ts":1350750561987,"patch":[[{"diffs":[[0,"s, index"],[1,", key"],[0,";\r\n    \r"]],"start1":525,"start2":525,"length1":16,"length2":21},{"diffs":[[0,"        "],[-1,"console.log"],[1,"key = "],[0,"(RubixSt"]],"start1":908,"start2":908,"length1":27,"length2":22},{"diffs":[[0,") % "],[-1,"100000000"],[1,"TableGenerator.cornerDbSize"],[0,");\r\n"]],"start1":987,"start2":987,"length1":17,"length2":35}]],"length":1152,"saved":false}
{"ts":1350750620140,"patch":[[{"diffs":[[0,"bSize = "],[1,"20//"],[0,"88179840"]],"start1":155,"start2":155,"length1":16,"length2":20},{"diffs":[[0,"  key = "],[-1,"("],[0,"RubixSta"]],"start1":918,"start2":918,"length1":17,"length2":16},{"diffs":[[0,"cornerDbSize"],[-1,")"],[0,";\r\n         "]],"start1":1009,"start2":1009,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"//console.log(RubixState.toString(nodes[index].rubixState));"],[0,"\r\n  "]],"start1":1032,"start2":1032,"length1":68,"length2":8}]],"length":1094,"saved":false}
{"ts":1350750765709,"patch":[[{"diffs":[[0,"          \r\n"],[1,"            // Do not replace existing value as that with effect an inadmissible heuristic.\r\n            if (TableGenerator.cornerDatabase.get(key) === 0)\r\n                TableGenerator.cornerDatabase.set(key, nodes[index].depth);\r\n"],[0,"        }\r\n "]],"start1":1026,"start2":1026,"length1":24,"length2":257}]],"length":1327,"saved":false}
{"ts":1350750769561,"patch":[[{"diffs":[[0," that wi"],[-1,"th"],[1,"ll"],[0," effect "]],"start1":1085,"start2":1085,"length1":18,"length2":18}]],"length":1327,"saved":false}
{"ts":1350751089703,"patch":[[{"diffs":[[0,"rs, "],[-1,"index, k"],[1,"depth, index;\r\n    var cornerskey, edgesTopKey, edgesBottomK"],[0,"ey;\r"]],"start1":528,"start2":528,"length1":16,"length2":68},{"diffs":[[0,"    "],[-1,"do "],[1,"for (depth = 1; depth <= 11; depth++)\r\n    {\r\n        successors = []"],[0,"\r\n    "],[-1,"{"],[1,"    "],[0,"\r\n  "]],"start1":877,"start2":877,"length1":18,"length2":87},{"diffs":[[0,"        "],[1,"corners"],[0,"key = Ru"]],"start1":1033,"start2":1033,"length1":16,"length2":23},{"diffs":[[0,"ase.get("],[1,"corners"],[0,"key) ==="]],"start1":1301,"start2":1301,"length1":16,"length2":23},{"diffs":[[0,"ase.set("],[1,"corners"],[0,"key, nod"]],"start1":1371,"start2":1371,"length1":16,"length2":23},{"diffs":[[0,"        "],[1,"   "],[-1,"}"],[1," "],[0,"\r\n      "]],"start1":1413,"start2":1413,"length1":17,"length2":20},{"diffs":[[0,"    "],[-1,"\r\n    } while (false);"],[1,"    successors = successors.concat(nodes[index].getSuccessors());\r\n        }\r\n        \r\n        nodes = successors.slice(0);\r\n    }"],[0,"\r\n};"]],"start1":1431,"start2":1431,"length1":30,"length2":139}]],"length":1581,"saved":false}
{"ts":1350751102089,"patch":[[{"diffs":[[0,"\r\n            \r\n"],[1,"            // TODO - edges\r\n            \r\n"],[0,"            succ"]],"start1":1411,"start2":1411,"length1":32,"length2":75}]],"length":1624,"saved":false}
{"ts":1350751119836,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"nodes = "]],"start1":1566,"start2":1566,"length1":16,"length2":18},{"diffs":[[0,".slice(0);\r\n"],[1,"        nodes = [];\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":1594,"start2":1594,"length1":24,"length2":45}]],"length":1647,"saved":false}
{"ts":1350751132338,"patch":[[{"diffs":[[0,"\r\n};"],[-1,"\r\n\r\n// TODO"]],"start1":1632,"start2":1632,"length1":15,"length2":4}]],"length":1636,"saved":false}
{"ts":1350751202663,"patch":[[{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    for (var i = 0; i < TableGenerator.cornerDatabase.entries.length; i++)\r\n        console.log(TableGenerator.cornerDatabase.entries[i].toString(2));\r\n"],[0,"};"]],"start1":1626,"start2":1626,"length1":10,"length2":168}]],"length":1794,"saved":false}
{"ts":1350751220744,"patch":[[{"diffs":[[0,"bSize = "],[1,"3"],[0,"2"],[-1,"0"],[0,"//881798"]],"start1":155,"start2":155,"length1":18,"length2":18}]],"length":1794,"saved":false}
{"ts":1350751294074,"patch":[[{"diffs":[[0,".concat("],[-1,"nodes[index]"],[1,"RubixNode"],[0,".getSucc"]],"start1":1505,"start2":1505,"length1":28,"length2":25},{"diffs":[[0,"cessors("],[1,"nodes[index]"],[0,"));\r\n   "]],"start1":1529,"start2":1529,"length1":16,"length2":28}]],"length":1803,"saved":false}
{"ts":1350751349611,"patch":[[{"diffs":[[0,"bSize;\r\n"],[1,"            console.log(\"K:\" + cornerskey);\r\n"],[0,"        "]],"start1":1144,"start2":1144,"length1":16,"length2":61}]],"length":1848,"saved":false}
{"ts":1350751361283,"patch":[[{"diffs":[[0," var corners"],[-1,"k"],[1,"K"],[0,"ey, edgesTop"]],"start1":550,"start2":550,"length1":25,"length2":25},{"diffs":[[0," corners"],[-1,"k"],[1,"K"],[0,"ey = Rub"]],"start1":1040,"start2":1040,"length1":17,"length2":17},{"diffs":[[0," corners"],[-1,"k"],[1,"K"],[0,"ey);\r\n  "]],"start1":1182,"start2":1182,"length1":17,"length2":17},{"diffs":[[0,"(corners"],[-1,"k"],[1,"K"],[0,"ey) === "]],"start1":1353,"start2":1353,"length1":17,"length2":17},{"diffs":[[0,"ners"],[-1,"k"],[1,"K"],[0,"ey, "]],"start1":1427,"start2":1427,"length1":9,"length2":9}]],"length":1848,"saved":false}
{"ts":1350751402384,"patch":[[{"diffs":[[0," <= "],[-1,"11"],[1,"2/*11*/"],[0,"; de"]],"start1":902,"start2":902,"length1":10,"length2":15},{"diffs":[[0,"        "],[-1,"//"],[0,"nodes = "]],"start1":1625,"start2":1625,"length1":18,"length2":16},{"diffs":[[0,");\r\n"],[-1,"        nodes = [];\r\n"],[0,"    "]],"start1":1659,"start2":1659,"length1":29,"length2":8}]],"length":1830,"saved":false}
{"ts":1350751445583,"patch":[[{"diffs":[[0,"bSize;\r\n"],[1,"            console.log(\"H:\" + RubixState.hashCode(nodes[index].rubixState, RubixState.corners7));\r\n"],[0,"        "]],"start1":1149,"start2":1149,"length1":16,"length2":116}]],"length":1930,"saved":false}
{"ts":1350751472933,"patch":[[{"diffs":[[0,"e = "],[-1,"32"],[1,"1024"],[0,"//88"]],"start1":159,"start2":159,"length1":10,"length2":12}]],"length":1932,"saved":false}
{"ts":1350751514887,"patch":[[{"diffs":[[0,"e = "],[-1,"1024//"],[0,"8817"]],"start1":159,"start2":159,"length1":14,"length2":8},{"diffs":[[0," <= "],[-1,"2/*11*/"],[1,"11"],[0,"; de"]],"start1":898,"start2":898,"length1":15,"length2":10}]],"length":1921,"saved":false}
{"ts":1350751545995,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"for (var i = 0; i < TableGenerator.cornerDatabase.entries.length; i++)\r\n        console.log"],[1,"\r\n    FileOperator.presentForDownload"],[0,"(Tab"]],"start1":1761,"start2":1761,"length1":105,"length2":49},{"diffs":[[0,"base"],[-1,".entries[i].toString(2)"],[0,");\r\n"]],"start1":1832,"start2":1832,"length1":31,"length2":8}]],"length":1842,"saved":false}
{"ts":1350751580705,"patch":[[{"diffs":[[0,".slice(0);\r\n"],[1,"        \r\n        console.log(\"Depth: \" + depth);\r\n"],[0,"    }\r\n     "]],"start1":1742,"start2":1742,"length1":24,"length2":75}]],"length":1893,"saved":false}
{"ts":1350751723397,"patch":[[{"diffs":[[0,"e;\r\n            "],[1,"//"],[0,"console.log(\"H:\""]],"start1":1144,"start2":1144,"length1":32,"length2":34},{"diffs":[[0,");\r\n            "],[1,"//"],[0,"console.log(\"K:\""]],"start1":1246,"start2":1246,"length1":32,"length2":34}]],"length":1897,"saved":false}
{"ts":1350751829025,"patch":[[{"diffs":[[0,"[index]));\r\n"],[1,"            \r\n            if (nodes.length % 10000 === 0)\r\n                console.log(nodes.length);\r\n"],[0,"        }\r\n "]],"start1":1687,"start2":1687,"length1":24,"length2":127}]],"length":2000,"saved":false}
{"ts":1350751841728,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"Nodes: \" + "],[0,"nodes.le"]],"start1":1778,"start2":1778,"length1":16,"length2":28}]],"length":2012,"saved":false}
{"ts":1350751864728,"patch":[[{"diffs":[[0,"if ("],[-1,"nodes.length"],[1,"index"],[0," % 1000"],[-1,"0"],[0," ==="]],"start1":1725,"start2":1725,"length1":28,"length2":20},{"diffs":[[0,"es: \" + "],[-1,"nodes.length"],[1,"index"],[0,");\r\n    "]],"start1":1782,"start2":1782,"length1":28,"length2":21}]],"length":1997,"saved":false}
{"ts":1350751868792,"patch":[[{"diffs":[[0,"og(\"Node"],[-1,"s"],[0,": \" + in"]],"start1":1775,"start2":1775,"length1":17,"length2":16}]],"length":1996,"saved":false}
{"ts":1350752057786,"patch":[[{"diffs":[[0,"le.log(\""],[1,"Depth: \" + depth + \"  "],[0,"Node: \" "]],"start1":1771,"start2":1771,"length1":16,"length2":38},{"diffs":[[0,");\r\n"],[-1,"        \r\n        console.log(\"Depth: \" + depth);\r\n"],[0,"    "]],"start1":1875,"start2":1875,"length1":59,"length2":8}]],"length":1967,"saved":false}
{"ts":1350752064937,"patch":[[{"diffs":[[0,"ors = []"],[1,";"],[0,"\r\n      "]],"start1":938,"start2":938,"length1":16,"length2":17}]],"length":1968,"saved":false}
{"ts":1350752119652,"patch":[[{"diffs":[[0," <= "],[-1,"11"],[1,"3"],[0,"; de"]],"start1":898,"start2":898,"length1":10,"length2":9}]],"length":1967,"saved":false}
{"ts":1350752159846,"patch":[[{"diffs":[[0,"x % "],[-1,"100"],[1,"25"],[0,"0 =="]],"start1":1733,"start2":1733,"length1":11,"length2":10}]],"length":1966,"saved":false}
{"ts":1350752346056,"patch":[[{"diffs":[[0,"\r\n      "],[-1,"  "],[1,"\r\n    console.log(TableGenerator.cornerDatabase.toString());"],[0,"\r\n    "],[1,"//"],[0,"FileOper"]],"start1":1883,"start2":1883,"length1":24,"length2":84}]],"length":2026,"saved":false}
{"ts":1350752373463,"patch":[[{"diffs":[[0,"[index]));\r\n"],[1,"            nodes[index].parent = undefined;\r\n"],[0,"            "]],"start1":1687,"start2":1687,"length1":24,"length2":70}]],"length":2072,"saved":false}
{"ts":1350752393039,"patch":[[{"diffs":[[0,"t = "],[-1,"undefined"],[1,"null"],[0,";\r\n "]],"start1":1729,"start2":1729,"length1":17,"length2":12}]],"length":2067,"saved":false}
{"ts":1350752494156,"patch":[[{"diffs":[[0,"    }\r\n     "],[-1," "],[1,"\r\n    console.log(\"Encoding...\");"],[0,"\r\n    consol"]],"start1":1919,"start2":1919,"length1":25,"length2":57},{"diffs":[[0,"ole.log("],[1,"\"Length: \" + "],[0,"TableGen"]],"start1":1974,"start2":1974,"length1":16,"length2":29},{"diffs":[[0,"String()"],[1,".length"],[0,");\r\n    "]],"start1":2027,"start2":2027,"length1":16,"length2":23}]],"length":2119,"saved":false}
{"ts":1350752547234,"patch":[[{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"FileOper"]],"start1":2042,"start2":2042,"length1":18,"length2":16}]],"length":2117,"saved":false}
{"ts":1350752940349,"patch":[[{"diffs":[[0," <= "],[-1,"3"],[1,"2"],[0,"; de"]],"start1":898,"start2":898,"length1":9,"length2":9}]],"length":2117,"saved":false}
{"ts":1350752989356,"patch":[[{"diffs":[[0,"ngth);\r\n    "],[1,"//"],[0,"FileOperator"]],"start1":2038,"start2":2038,"length1":24,"length2":26}]],"length":2119,"saved":false}
{"ts":1350753030789,"patch":[[{"diffs":[[0,"\n    }\r\n    "],[-1," "],[0,"\r\n"],[1,""],[0,"    console."]],"start1":1918,"start2":1918,"length1":27,"length2":26},{"diffs":[[0,"    "],[-1,"console.log(\"Length: \" +"],[1,"var strDb ="],[0," Tab"]],"start1":1965,"start2":1965,"length1":32,"length2":19},{"diffs":[[0,"String()"],[-1,".length"],[1,";\r\n    console.log(\"Length: \" + strDb.length);\r\n    $('body').html(strDb"],[0,");\r\n    "]],"start1":2013,"start2":2013,"length1":23,"length2":88}]],"length":2170,"saved":false}
{"ts":1350753200064,"patch":[[{"diffs":[[0,"    "],[-1,"$('body').html(strDb"],[1,"console.log(strDb.substr(0, 50"],[0,");\r\n"]],"start1":2069,"start2":2069,"length1":28,"length2":38}]],"length":2180,"saved":false}
{"ts":1350753204644,"patch":[[{"diffs":[[0,"r(0, 50)"],[1,")"],[0,";\r\n    /"]],"start1":2096,"start2":2096,"length1":16,"length2":17}]],"length":2181,"saved":false}
{"ts":1350753277502,"patch":[[{"diffs":[[0,"b.length);\r\n    "],[1,"//"],[0,"console.log(strD"]],"start1":2057,"start2":2057,"length1":32,"length2":34},{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"FileOper"]],"start1":2106,"start2":2106,"length1":18,"length2":16}]],"length":2181,"saved":false}
{"ts":1350753370744,"patch":[[{"diffs":[[0,"bSize = "],[1,"2048 //"],[0,"88179840"]],"start1":155,"start2":155,"length1":16,"length2":23}]],"length":2188,"saved":false}
{"ts":1350753493930,"patch":[[{"diffs":[[0," 50));\r\n    "],[1,"//"],[0,"FileOperator"]],"start1":2109,"start2":2109,"length1":24,"length2":26}]],"length":2190,"saved":false}
{"ts":1350753517960,"patch":[[{"diffs":[[0,"oad("],[-1,"TableGenerator.cornerDatabase"],[1,"strDb"],[0,");\r\n"]],"start1":2151,"start2":2151,"length1":37,"length2":13}]],"length":2166,"saved":false}
{"ts":1350753525609,"patch":[[{"diffs":[[0,"e = "],[-1,"2048 //"],[0,"8817"]],"start1":159,"start2":159,"length1":15,"length2":8}]],"length":2159,"saved":false}
{"ts":1350753530968,"patch":[[{"diffs":[[0,"epth <= "],[-1,"2"],[1,"11"],[0,"; depth+"]],"start1":894,"start2":894,"length1":17,"length2":18}]],"length":2160,"saved":false}
{"ts":1350755657409,"patch":[[{"diffs":[[0,"x % 250 === 0)\r\n"],[1,"            {\r\n"],[0,"                "]],"start1":1775,"start2":1775,"length1":32,"length2":47},{"diffs":[[0," + index"],[-1,");"],[1," + \"  Successors: \" + successors.length);\r\n            }"],[0,"\r\n      "]],"start1":1864,"start2":1864,"length1":18,"length2":72}]],"length":2229,"saved":false}
{"ts":1350771507395,"patch":[[{"diffs":[[0,"n()\r\n{\r\n"],[1,"    TableGenerator.cornerDatabase = new PatternDatabase(TableGenerator.cornerDbSize);\r\n//    TableGenerator.edgesTopDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n//    TableGenerator.edgesBottomDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n\r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n};\r\n\r\nTableGenerator.generateDLS = function(node)\r\n{\r\n    var cornersKey = RubixState.hashCode(nodes[index].rubixState, RubixState.corners7) % TableGenerator.cornerDbSize;\r\n    var tableValue = TableGenerator.cornerDatabase.get(cornersKey);\r\n    \r\n    if (tableValue === 0 || node.depth < tableValue)\r\n        TableGenerator.cornerDatabase.set(cornersKey, nodes[index].depth);\r\n    \r\n    if (node.depth === 11)\r\n        return;\r\n    \r\n    var successors = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < successors.length; index++)\r\n    {\r\n        \r\n    }\r\n};\r\n\r\nTableGenerator.generateBreadth = function()\r\n{\r\n"],[0,"    var "]],"start1":376,"start2":376,"length1":16,"length2":991}]],"length":3204,"saved":false}
{"ts":1350771535446,"patch":[[{"diffs":[[0," {\r\n        "],[1,"TableGenerator.generateDLS(successors[index]);"],[0,"\r\n    }\r\n};\r"]],"start1":1284,"start2":1284,"length1":24,"length2":70}]],"length":3250,"saved":false}
{"ts":1350771619396,"patch":[[{"diffs":[[0,"te());\r\n"],[1,"    \r\n    TableGenerator.generateDLS(initialNode);\r\n"],[0,"};\r\n\r\nTa"]],"start1":718,"start2":718,"length1":16,"length2":68},{"diffs":[[0,"    var "],[-1,"t"],[1,"cornerT"],[0,"ableValu"]],"start1":951,"start2":951,"length1":17,"length2":23},{"diffs":[[0,"    if ("],[-1,"t"],[1,"cornerT"],[0,"ableValu"]],"start1":1032,"start2":1032,"length1":17,"length2":23},{"diffs":[[0,"depth < "],[-1,"t"],[1,"cornerT"],[0,"ableValu"]],"start1":1071,"start2":1071,"length1":17,"length2":23}]],"length":3320,"saved":false}
{"ts":1350771643159,"patch":[[{"diffs":[[0,"  var corner"],[1,"s"],[0,"TableValue ="]],"start1":953,"start2":953,"length1":24,"length2":25},{"diffs":[[0,"  if (corner"],[1,"s"],[0,"TableValue ="]],"start1":1035,"start2":1035,"length1":24,"length2":25},{"diffs":[[0,"< corner"],[1,"s"],[0,"TableVal"]],"start1":1079,"start2":1079,"length1":16,"length2":17},{"diffs":[[0,"ersKey, node"],[-1,"s[index]"],[0,".depth);\r\n  "]],"start1":1147,"start2":1147,"length1":32,"length2":24}]],"length":3315,"saved":false}
{"ts":1350771749366,"patch":[[{"diffs":[[0,"ashCode(node"],[-1,"s[index]"],[0,".rubixState,"]],"start1":865,"start2":865,"length1":32,"length2":24},{"diffs":[[0,"ndex++)\r\n    {\r\n"],[1,"        successors[index].parent = null;\r\n"],[0,"        TableGen"]],"start1":1329,"start2":1329,"length1":32,"length2":74}]],"length":3349,"saved":false}
{"ts":1350771895290,"patch":[[{"diffs":[[0,"ull;\r\n\r\n"],[1,"TableGenerator.nodesGenerated = 0;\r\n"],[0,"\r\nTableG"]],"start1":333,"start2":333,"length1":16,"length2":52},{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    TableGenerator.nodesGenerated++;\r\n    \r\n    if (TableGenerator.nodesGenerated % 1000 === 0)\r\n        console.log(\"Nodes: \" + TableGenerator.nodesGenerated);\r\n"],[0,"};\r\n\r\nTa"]],"start1":1478,"start2":1478,"length1":16,"length2":184}]],"length":3553,"saved":false}
{"ts":1350771903248,"patch":[[{"diffs":[[0,"tialNode);\r\n"],[1,"    \r\n    console.log(\"DONE!\");\r\n"],[0,"};\r\n\r\nTableG"]],"start1":802,"start2":802,"length1":24,"length2":57}]],"length":3586,"saved":false}
{"ts":1350777713110,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    TableGenerator.nodesGenerated++;\r\n    \r\n"],[0,"    "]],"start1":1521,"start2":1521,"length1":52,"length2":8},{"diffs":[[0,"enerated"],[1,"++"],[0," % 1000 "]],"start1":1554,"start2":1554,"length1":16,"length2":18}]],"length":3544,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350825745813,"patch":[[{"diffs":[[0,"ar cornersKey = "],[1,"0;//"],[0,"RubixState.hashC"]],"start1":906,"start2":906,"length1":32,"length2":36}]],"length":3548,"saved":false}
{"ts":1350825814605,"patch":[[{"diffs":[[0,"y = "],[-1,"0;//"],[0,"Rubi"]],"start1":918,"start2":918,"length1":12,"length2":8},{"diffs":[[0,"Value = "],[1,"1;//"],[0,"TableGen"]],"start1":1032,"start2":1032,"length1":16,"length2":20}]],"length":3548,"saved":false}
{"ts":1350825825393,"patch":[[{"diffs":[[0,"\r\n    \r\n    if ("],[1,"++"],[0,"TableGenerator.n"]],"start1":1521,"start2":1521,"length1":32,"length2":34},{"diffs":[[0,"enerated"],[-1,"++"],[0," % 1000 "]],"start1":1560,"start2":1560,"length1":18,"length2":16}]],"length":3548,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350847798109,"patch":[[{"diffs":[[0,"ction()\r\n{\r\n"],[1,"    var str = \"\";\r\n    \r\n    for (var i = 0; i < 10000; i++)\r\n        str += \"a\";\r\n    \r\n    FileOperator.presentForDownload(a);\r\n    \r\n    return; // temp\r\n    \r\n"],[0,"    TableGen"]],"start1":408,"start2":408,"length1":24,"length2":187}]],"length":3711,"saved":false}
{"ts":1350847820468,"patch":[[{"diffs":[[0,"ownload("],[-1,"a"],[1,"str"],[0,");\r\n    "]],"start1":537,"start2":537,"length1":17,"length2":19}]],"length":3713,"saved":false}
{"ts":1350847861066,"patch":[[{"diffs":[[0,"i < 1000"],[-1,"0"],[0,"; i++)\r\n"]],"start1":465,"start2":465,"length1":17,"length2":16}]],"length":3712,"saved":false}
{"ts":1350848197760,"patch":[[{"diffs":[[0,"i < 1000"],[1,"0"],[0,"; i++)\r\n"]],"start1":465,"start2":465,"length1":16,"length2":17}]],"length":3713,"saved":false}
{"ts":1350848319200,"patch":[[{"diffs":[[0," < 10000"],[1,"0"],[0,"; i++)\r\n"]],"start1":466,"start2":466,"length1":16,"length2":17}]],"length":3714,"saved":false}
{"ts":1350848360907,"patch":[[{"diffs":[[0,"< 100000"],[1,"0"],[0,"; i++)\r\n"]],"start1":467,"start2":467,"length1":16,"length2":17}]],"length":3715,"saved":false}
{"ts":1350848363612,"patch":[[{"diffs":[[0,"< 100000"],[-1,"0"],[0,"; i++)\r\n"]],"start1":467,"start2":467,"length1":17,"length2":16}]],"length":3714,"saved":false}
{"ts":1350848379767,"patch":[[{"diffs":[[0," += "],[-1,"\"a\""],[1,"String.fromCharCode(i % 256)"],[0,";\r\n "]],"start1":494,"start2":494,"length1":11,"length2":36}]],"length":3739,"saved":false}
{"ts":1350848419880,"patch":[[{"diffs":[[0,"< 100000"],[1,"0"],[0,"; i++)\r\n"]],"start1":467,"start2":467,"length1":16,"length2":17}]],"length":3740,"saved":false}
{"ts":1350848472653,"patch":[[{"diffs":[[0," 0; i < "],[-1,"1"],[1,"22"],[0,"000000; "]],"start1":461,"start2":461,"length1":17,"length2":18}]],"length":3741,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350848755708,"patch":[[{"diffs":[[0,")\r\n{"],[-1,"\r\n    var str = \"\";\r\n    \r\n    for (var i = 0; i < 22000000; i++)\r\n        str += String.fromCharCode(i % 256);\r\n    \r\n    FileOperator.presentForDownload(str);\r\n    \r\n    return; // temp\r\n"],[0,"    "]],"start1":414,"start2":414,"length1":197,"length2":8}]],"length":3552,"saved":false}
{"ts":1350848847713,"patch":[[{"diffs":[[0,"cornerDbSize);\r\n"],[-1,"//"],[0,"    TableGenerat"]],"start1":495,"start2":495,"length1":34,"length2":32},{"diffs":[[0,"r.edgeDbSize);\r\n"],[-1,"//"],[0,"    TableGenerat"]],"start1":582,"start2":582,"length1":34,"length2":32}]],"length":3548,"saved":false}
{"ts":1350848876977,"patch":[[{"diffs":[[0,"e = "],[-1,"1;//"],[0,"Tabl"]],"start1":1036,"start2":1036,"length1":12,"length2":8}]],"length":3544,"saved":false}
{"ts":1350849134005,"patch":[[{"diffs":[[0,"    var "],[-1,"cornersK"],[1,"key, value;\r\n    \r\n    // Corners\r\n    k"],[0,"ey = Rub"]],"start1":901,"start2":901,"length1":24,"length2":56},{"diffs":[[0,"  va"],[-1,"r cornersTableValue ="],[1,"lue = TableGenerator.cornerDatabase.get(key);\r\n    \r\n    if (key === 0 || node.depth < value)\r\n       "],[0," Tab"]],"start1":1046,"start2":1046,"length1":29,"length2":110},{"diffs":[[0,"ase."],[-1,"get(cornersKey);\r\n    \r\n    if (cornersTableValue === 0 || node.depth < cornersTableValue)"],[1,"set(key, node.depth);\r\n    \r\n    // Edges top\r\n    key = RubixState.hashCode(node.rubixState, RubixState.edgesTop) % TableGenerator.edgeDbSize;\r\n    value = TableGenerator.edgesTopDatabase.get(key);\r\n    \r\n    if (key === 0 || node.depth < value)\r\n        TableGenerator.edgesTopDatabase.set(key, node.depth);"],[0,"\r\n    "],[1,"\r\n"],[0,"    "],[-1,"TableGenerator.corner"],[1,"// Edges Bottom\r\n    key = RubixState.hashCode(node.rubixState, RubixState.edgesBottom) % TableGenerator.edgeDbSize;\r\n    value = TableGenerator.edgesBottom"],[0,"Data"]],"start1":1179,"start2":1179,"length1":129,"length2":485},{"diffs":[[0,"tomDatabase."],[-1,"set(cornersK"],[1,"get(key);\r\n    \r\n    if (key === 0 || node.depth < value)\r\n        TableGenerator.edgesBottomDatabase.set(k"],[0,"ey, node.dep"]],"start1":1657,"start2":1657,"length1":36,"length2":131},{"diffs":[[0,".depth);\r\n    \r\n"],[1,"    \r\n"],[0,"    if (node.dep"]],"start1":1784,"start2":1784,"length1":32,"length2":38}]],"length":4114,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350871869926,"patch":[[{"diffs":[[0,"n(node)\r\n{\r\n"],[1,"    console.log($(\r\n    \r\n"],[0,"    var key,"]],"start1":889,"start2":889,"length1":24,"length2":50},{"diffs":[[0,");\r\n    \r\n    \r\n"],[1,"    // Base case\r\n"],[0,"    if (node.dep"]],"start1":1816,"start2":1816,"length1":32,"length2":50}]],"length":4158,"saved":false}
{"ts":1350871883168,"patch":[[{"diffs":[[0,"e.log($("],[1,"\"#haltGeneration\")[0].checked);"],[0,"\r\n    \r\n"]],"start1":911,"start2":911,"length1":16,"length2":47}]],"length":4189,"saved":false}
{"ts":1350871887346,"patch":[[{"diffs":[[0,".checked);\r\n    "],[1,"return;"],[0,"\r\n    var key, v"]],"start1":940,"start2":940,"length1":32,"length2":39}]],"length":4196,"saved":false}
{"ts":1350871894821,"patch":[[{"diffs":[[0,"cked);\r\n    "],[-1,"return;"],[0,"\r\n    var ke"]],"start1":944,"start2":944,"length1":31,"length2":24}]],"length":4189,"saved":false}
{"ts":1350871923635,"patch":[[{"diffs":[[0,".checked);\r\n    "],[1,"return;"],[0,"\r\n    var key, v"]],"start1":940,"start2":940,"length1":32,"length2":39}]],"length":4196,"saved":false}
{"ts":1350871941292,"patch":[[{"diffs":[[0,"    "],[-1,"if (++TableGenerator.nodesGenerated % 1000 === 0)\r\n        console.log(\"Nodes: \" + TableGenerator.nodesGenerated"],[1,"console.log(\"Node\""],[0,");\r\n"]],"start1":2177,"start2":2177,"length1":120,"length2":26}]],"length":4102,"saved":false}
{"ts":1350871950272,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"TableGenerator.nodesGenerated = 0;\r\n\r\n"],[0,"Tabl"]],"start1":337,"start2":337,"length1":46,"length2":8}]],"length":4064,"saved":false}
{"ts":1350871979430,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"console.log"],[1,"if"],[0,"($(\"#hal"]],"start1":859,"start2":859,"length1":27,"length2":18},{"diffs":[[0,".checked);\r\n"],[1,"        console.log(\"HI\");\r\n"],[0,"    return;\r"]],"start1":893,"start2":893,"length1":24,"length2":52}]],"length":4083,"saved":false}
{"ts":1350872023646,"patch":[[{"diffs":[[0,"log("],[-1,"\"HI\""],[1,"$(\"#haltGeneration\")[0].checked"],[0,");\r\n"]],"start1":921,"start2":921,"length1":12,"length2":39}]],"length":4110,"saved":false}
{"ts":1350872033854,"patch":[[{"diffs":[[0,"Generation\")[0]."],[-1,"checked"],[1,"value"],[0,");\r\n    return;\r"]],"start1":933,"start2":933,"length1":39,"length2":37}]],"length":4108,"saved":false}
{"ts":1350872059195,"patch":[[{"diffs":[[0,".checked"],[1," === 'true'"],[0,");\r\n    "]],"start1":893,"start2":893,"length1":16,"length2":27}]],"length":4119,"saved":false}
{"ts":1350872091439,"patch":[[{"diffs":[[0,"on\")"],[-1,"[0].value"],[1,".attr('checked')"],[0,");\r\n"]],"start1":952,"start2":952,"length1":17,"length2":24}]],"length":4126,"saved":false}
{"ts":1350872094447,"patch":[[{"diffs":[[0,"cked"],[-1," === 'true'"],[0,");\r\n"]],"start1":897,"start2":897,"length1":19,"length2":8}]],"length":4115,"saved":false}
{"ts":1350872120128,"patch":[[{"diffs":[[0,"on\")"],[-1,"[0]."],[1,".attr('"],[0,"checked"],[1,"')"],[0,");\r\n"]],"start1":886,"start2":886,"length1":19,"length2":24},{"diffs":[[0,"    "],[-1,"console.log($(\"#haltGeneration\").attr('checked'));\r\n    return;"],[1,"return;\r\n    \r\n    "],[0,"\r\n  "]],"start1":914,"start2":914,"length1":71,"length2":27}]],"length":4076,"saved":false}
{"ts":1350872121790,"patch":[[{"diffs":[[0,"urn;\r\n    \r\n"],[-1,"    \r\n"],[0,"    var key,"]],"start1":921,"start2":921,"length1":30,"length2":24}]],"length":4070,"saved":false}
{"ts":1350872141499,"patch":[[{"diffs":[[0,"\r\n    if"],[1," "],[0,"($(\"#hal"]],"start1":861,"start2":861,"length1":16,"length2":17}]],"length":4071,"saved":false}
{"ts":1350872219700,"patch":[[{"diffs":[[0,"tor."],[-1,"generate = function()\r\n{"],[1,"haltCheck = null;\r\n\r\nTableGenerator.generate = function()\r\n{   \r\n    TableGenerator.haltCheck = $(\"#haltGeneration\");\r\n"],[0,"    "]],"start1":352,"start2":352,"length1":32,"length2":127},{"diffs":[[0,"    if ("],[-1,"$(\"#haltGeneration\")"],[1,"TableGenerator.haltCheck"],[0,".attr('c"]],"start1":958,"start2":958,"length1":36,"length2":40}]],"length":4170,"saved":false}
{"ts":1350872230042,"patch":[[{"diffs":[[0,"altCheck"],[1,"box"],[0," = null;"]],"start1":357,"start2":357,"length1":16,"length2":19},{"diffs":[[0,"altCheck"],[1,"box"],[0," = $(\"#h"]],"start1":444,"start2":444,"length1":16,"length2":19},{"diffs":[[0,"altCheck"],[1,"box"],[0,".attr('c"]],"start1":988,"start2":988,"length1":16,"length2":19}]],"length":4179,"saved":false}
{"ts":1350872320016,"patch":[[{"diffs":[[0,"ttr("],[-1,"'"],[1,"\""],[0,"checked"],[-1,"'"],[1,"\""],[0,"));\r"]],"start1":1001,"start2":1001,"length1":17,"length2":17}]],"length":4179,"saved":false}
{"ts":1350872407216,"patch":[[{"diffs":[[0,"/ Edges "],[-1,"t"],[1,"T"],[0,"op\r\n    "]],"start1":1358,"start2":1358,"length1":17,"length2":17}]],"length":4179,"saved":false}
{"ts":1350872484185,"patch":[[{"diffs":[[0,"alNode);\r\n    \r\n"],[1,"    FileOperator.presentForDownload(TableGenerator.cornerDatabase, \"cornersTable.txt\");\r\n    FileOperator.presentForDownload(TableGenerator.edgesTopDatabase, \"edgesTopTable.txt\");\r\n    FileOperator.presentForDownload(TableGenerator.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    \r\n"],[0,"    console.log("]],"start1":867,"start2":867,"length1":32,"length2":317}]],"length":4464,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350912918598,"patch":[[{"diffs":[[0,"on()\r\n{   \r\n    "],[-1,""],[0,""],[1,"console.log(\"HERE!\");\r\n    \r\n    "],[0,"TableGenerator.h"]],"start1":412,"start2":412,"length1":32,"length2":65},{"diffs":[[0,"cornerDbSize);\r\n"],[1,"//"],[0,"    TableGenerat"]],"start1":591,"start2":591,"length1":32,"length2":34},{"diffs":[[0,"geDbSize);\r\n"],[1,"//"],[0,"    TableGen"]],"start1":684,"start2":684,"length1":24,"length2":26},{"diffs":[[0,"rsTable.txt\");\r\n"],[1,"//"],[0,"    FileOperator"]],"start1":993,"start2":993,"length1":32,"length2":34},{"diffs":[[0,"ble.txt\");\r\n"],[1,"//"],[0,"    FileOper"]],"start1":1091,"start2":1091,"length1":24,"length2":26},{"diffs":[[0,"ion(node)\r\n{"],[-1,"\r\n"],[1,"    \r\n//"],[0,"    if (Tabl"]],"start1":1276,"start2":1276,"length1":26,"length2":32},{"diffs":[[0,"hecked\"));\r\n"],[1,"//"],[0,"        retu"]],"start1":1339,"start2":1339,"length1":24,"length2":26},{"diffs":[[0,"ey);\r\n    \r\n    "],[-1,"if (key"],[1,"return;\r\n    \r\n    if (value"],[0," === 0 || node.d"]],"start1":1566,"start2":1566,"length1":39,"length2":60},{"diffs":[[0," (value === 0 ||"],[1," value >"],[0," node.depth < va"]],"start1":1603,"start2":1603,"length1":32,"length2":40},{"diffs":[[0,"> node.depth"],[-1," < value"],[0,")\r\n        T"]],"start1":1626,"start2":1626,"length1":32,"length2":24},{"diffs":[[0,"de.depth);\r\n    "],[1,"else // State already enumerated\r\n        return;\r\n/*  "],[0,"\r\n    // Edges T"]],"start1":1690,"start2":1690,"length1":32,"length2":87},{"diffs":[[0,"\r\n    \r\n    if ("],[-1,"key"],[1,"value"],[0," === 0 || node.d"]],"start1":1932,"start2":1932,"length1":35,"length2":37},{"diffs":[[0," (value === 0 ||"],[1," value >"],[0," node.depth < va"]],"start1":1946,"start2":1946,"length1":32,"length2":40},{"diffs":[[0,"> node.depth"],[-1," < value"],[0,")\r\n        T"]],"start1":1969,"start2":1969,"length1":32,"length2":24},{"diffs":[[0,"    if ("],[-1,"key"],[1,"value"],[0," === 0 |"]],"start1":2239,"start2":2239,"length1":19,"length2":21},{"diffs":[[0,"=== 0 ||"],[1," value >"],[0," node.de"]],"start1":2253,"start2":2253,"length1":16,"length2":24},{"diffs":[[0,"epth"],[-1," < value"],[0,")\r\n "]],"start1":2276,"start2":2276,"length1":16,"length2":8},{"diffs":[[0,", node.depth);\r\n"],[1,"*/"],[0,"    \r\n    \r\n    "]],"start1":2333,"start2":2333,"length1":32,"length2":34},{"diffs":[[0,"    \r\n    \r\n"],[1,"    console.log(\"Node\");\r\n    \r\n"],[0,"    // Base "]],"start1":2351,"start2":2351,"length1":24,"length2":56},{"diffs":[[0," }\r\n"],[-1,"    \r\n    console.log(\"Node\");\r\n"],[0,"};\r\n"]],"start1":2692,"start2":2692,"length1":40,"length2":8},{"diffs":[[0,"sKey"],[-1,", edgesTopKey, edgesBottomKey"],[0,""],[1,""],[0,";\r\n "]],"start1":2923,"start2":2923,"length1":37,"length2":8},{"diffs":[[0,"Size"],[-1,";\r\n            //console.log(\"H:\" + RubixState.hashCode(nodes[index].rubixState, RubixState.corners7));\r\n            //console.log(\"K:\" + cornersKey)"],[0,""],[1,""],[0,";\r\n "]],"start1":3479,"start2":3479,"length1":157,"length2":8}]],"length":4417,"saved":false}
{"ts":1350912945917,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    console.log(\"HERE!\");"],[0,"\r\n  "]],"start1":420,"start2":420,"length1":33,"length2":8},{"diffs":[[0,"eration\");\r\n    "],[1,"console.log(\"HERE!\");"],[0,"\r\n    TableGener"]],"start1":477,"start2":477,"length1":32,"length2":53}]],"length":4413,"saved":false}
{"ts":1350912963660,"patch":[[{"diffs":[[0,")\r\n{"],[-1,"   \r\n\r\n"],[0,"    "]],"start1":415,"start2":415,"length1":15,"length2":8},{"diffs":[[0,"    "],[-1,"console.log(\"HERE!\");"],[0,"\r\n  "]],"start1":482,"start2":482,"length1":29,"length2":8},{"diffs":[[0,"Size);\r\n"],[1,"    console.log(\"HERE!\");"],[0,"\r\n    va"]],"start1":748,"start2":748,"length1":16,"length2":41}]],"length":4410,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350923138606,"patch":[[{"diffs":[[0,"tor."],[-1,"haltCheckbox = null"],[1,"depth = 2"],[0,";\r\n\r"]],"start1":352,"start2":352,"length1":27,"length2":17},{"diffs":[[0,"    "],[-1,"\r\n    TableGenerator.haltCheckbox = $(\"#haltGeneration\");\r\n   "],[0," \r\n "]],"start1":409,"start2":409,"length1":70,"length2":8},{"diffs":[[0,"    "],[-1,"console.log(\"HERE!\");"],[0,"\r\n  "]],"start1":684,"start2":684,"length1":29,"length2":8},{"diffs":[[0,"tialNode);\r\n"],[-1,"    "],[0,"\r\n    FileOp"]],"start1":802,"start2":802,"length1":28,"length2":24},{"diffs":[[0,"base"],[-1,", \"cornersTable.txt\""],[0,");\r\n"]],"start1":877,"start2":877,"length1":28,"length2":8},{"diffs":[[0,")\r\n{"],[-1,"    \r\n//    if (TableGenerator.haltCheckbox.attr(\"checked\"));\r\n//        return;\r\n    "],[0,"\r\n  "]],"start1":1160,"start2":1160,"length1":94,"length2":8},{"diffs":[[0,"\r\n    \r\n"],[-1,"    return;\r\n    \r\n"],[0,"    if ("]],"start1":1360,"start2":1360,"length1":35,"length2":16},{"diffs":[[0,"\r\n*/    \r\n    \r\n"],[-1,""],[0,"    "],[1,"//"],[0,"console.log(\"Nod"]],"start1":2118,"start2":2118,"length1":36,"length2":38}]],"length":4190,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351014118213,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[-1,""],[0,""],[1,"TableGenerator.generateBreadth();\r\n    \r\n    /*\r\n    "],[0,"var initialN"]],"start1":682,"start2":682,"length1":24,"length2":77},{"diffs":[[0,"ble.txt\");\r\n"],[1,"    */\r\n"],[0,"    \r\n    co"]],"start1":1120,"start2":1120,"length1":24,"length2":32},{"diffs":[[0,"ccessors"],[1," = []"],[0,", depth,"]],"start1":2718,"start2":2718,"length1":16,"length2":21},{"diffs":[[0,"    var "],[-1,"cornersKey"],[1,"key, value"],[0,";\r\n    \r"]],"start1":2748,"start2":2748,"length1":26,"length2":26},{"diffs":[[0,"   {"],[-1,"\r\n        successors = [];\r\n"],[0,""],[1,""],[0,"    "]],"start1":3093,"start2":3093,"length1":36,"length2":8},{"diffs":[[0,"        "],[-1,"cornersK"],[1,"k"],[0,"ey = Rub"]],"start1":3178,"start2":3178,"length1":24,"length2":17},{"diffs":[[0,"nerDbSize;\r\n"],[1,"            value = TableGenerator.cornerDatabase.get(key);\r\n"],[0,"            "]],"start1":3278,"start2":3278,"length1":24,"length2":85},{"diffs":[[0,"if ("],[-1,"TableGenerator.cornerDatabase.get(cornersKey) === 0"],[1,"value === 0 || value > nodes[index].depth"],[0,")\r\n "]],"start1":3470,"start2":3470,"length1":59,"length2":49},{"diffs":[[0,"set("],[-1,"cornersK"],[1,"k"],[0,"ey, "]],"start1":3564,"start2":3564,"length1":16,"length2":9},{"diffs":[[0,"x].depth);\r\n"],[1,"            else // State already enumerated\r\n                continue;\r\n"],[0,"            "]],"start1":3583,"start2":3583,"length1":24,"length2":97},{"diffs":[[0,"slice(0)"],[-1,""],[0,""],[1,";\r\n        successors.length = 0"],[0,";\r\n    }"]],"start1":4087,"start2":4087,"length1":16,"length2":48}]],"length":4370,"saved":false}
{"ts":1351014138928,"patch":[[{"diffs":[[0,"gth = 0;"],[1," // Clear array"],[0,"\r\n    }\r"]],"start1":4120,"start2":4120,"length1":16,"length2":31}]],"length":4385,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351033190302,"patch":[[{"diffs":[[0,"bixState"],[-1,", RubixState.corners7)"],[1,");//"],[0," % Table"]],"start1":3227,"start2":3227,"length1":38,"length2":20},{"diffs":[[0,"nerDbSize;\r\n"],[1,"            console.log(key);\r\n"],[0,"            "]],"start1":3260,"start2":3260,"length1":24,"length2":55},{"diffs":[[0,"    "],[-1,"nodes[index].parent = null"],[1,"RubixNode.wipeBadChain(nodes[index])"],[0,";\r\n "]],"start1":3830,"start2":3830,"length1":34,"length2":44}]],"length":4408,"saved":false}
{"ts":1351033218031,"patch":[[{"diffs":[[0,"State.hashCo"],[-1,"de"],[1,"rners"],[0,"(nodes[index"]],"start1":3197,"start2":3197,"length1":26,"length2":29}]],"length":4411,"saved":false}
{"ts":1351033294211,"patch":[[{"diffs":[[0,"e;\r\n"],[-1,"            console.log(key);\r\n"],[0,"    "]],"start1":3271,"start2":3271,"length1":39,"length2":8}]],"length":4380,"saved":false}
{"ts":1351033355242,"patch":[[{"diffs":[[0,";\r\n    }\r\n};\r\n\r\n"],[1,"var temphashes = [];\r\n\r\n"],[0,"TableGenerator.g"]],"start1":2520,"start2":2520,"length1":32,"length2":56},{"diffs":[[0,"nerDbSize;\r\n"],[1,"            if(temphashes.indexOf(key) !== -1)\r\n                console.log(\"HASH ERROR\");\r\n            temphashes.push(key);\r\n"],[0,"            "]],"start1":3287,"start2":3287,"length1":24,"length2":151}]],"length":4531,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351033422849,"patch":[[{"diffs":[[0,"epth <= "],[-1,"1"],[0,"1; depth"]],"start1":3094,"start2":3094,"length1":17,"length2":16}]],"length":4530,"saved":false}
{"ts":1351033439837,"patch":[[{"diffs":[[0,"epth <= "],[-1,"1"],[1,"2"],[0,"; depth+"]],"start1":3094,"start2":3094,"length1":17,"length2":17}]],"length":4530,"saved":false}
{"ts":1351033449973,"patch":[[{"diffs":[[0,"epth <= "],[-1,"2"],[1,"3"],[0,"; depth+"]],"start1":3094,"start2":3094,"length1":17,"length2":17}]],"length":4530,"saved":false}
{"ts":1351033521794,"patch":[[{"diffs":[[0,"\n    }\r\n    "],[1,"console.log(temphashes);"],[0,"\r\n    consol"]],"start1":4289,"start2":4289,"length1":24,"length2":48}]],"length":4554,"saved":false}
{"ts":1351033602472,"patch":[[{"diffs":[[0,"        "],[1,"value = TableGenerator.cornerDatabase.get(key);\r\n            \r\n            console.log(value);\r\n            \r\n            //"],[0,"if(temph"]],"start1":3302,"start2":3302,"length1":16,"length2":140},{"diffs":[[0,"1)\r\n            "],[1,"//"],[0,"    console.log("]],"start1":3466,"start2":3466,"length1":32,"length2":34},{"diffs":[[0,");\r\n"],[-1,"            value = TableGenerator.cornerDatabase.get(key);\r\n"],[0,"    "]],"start1":3547,"start2":3547,"length1":69,"length2":8},{"diffs":[[0,"    "],[-1,"console.log(temphashes);"],[0,"\r\n  "]],"start1":4362,"start2":4362,"length1":32,"length2":8}]],"length":4595,"saved":false}
{"ts":1351033648233,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"if(temph"]],"start1":3424,"start2":3424,"length1":18,"length2":16},{"diffs":[[0,"        "],[-1,"//"],[0,"    cons"]],"start1":3472,"start2":3472,"length1":18,"length2":16}]],"length":4591,"saved":false}
{"ts":1351033746016,"patch":[[{"diffs":[[0,"hes = []"],[1,", tempkey"],[0,";\r\n\r\nTab"]],"start1":2547,"start2":2547,"length1":16,"length2":25},{"diffs":[[0,"    "],[-1,"console.log(value);\r\n            "],[1,"tempKeyI = temphashes.indexOf(key)"],[0,"\r\n  "]],"start1":3390,"start2":3390,"length1":41,"length2":42},{"diffs":[[0," if(temp"],[-1,"hashes.indexOf(key)"],[1,"KeyI"],[0," !== -1)"]],"start1":3441,"start2":3441,"length1":35,"length2":20},{"diffs":[[0,"log("],[-1,"\"HASH ERROR\");"],[1,"key + \":\" + temphashes[tempKeyI]);\r\n                "],[0,"\r\n  "]],"start1":3487,"start2":3487,"length1":22,"length2":60}]],"length":4624,"saved":false}
{"ts":1351033771097,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"            tempKeyI = temphashes.indexOf(key)\r\n            if(tempKeyI !== -1)\r\n                console.log(key + \":\" + temphashes[tempKeyI]);\r\n                \r\n            temphashes.push(key);\r\n            \r\n"],[0,"    "]],"start1":3378,"start2":3378,"length1":220,"length2":8},{"diffs":[[0," continue;\r\n"],[1,"                \r\n            tempKeyI = temphashes.indexOf(key)\r\n            if(tempKeyI !== -1)\r\n                console.log(key + \":\" + temphashes[tempKeyI]);\r\n                \r\n            temphashes.push(key);\r\n"],[0,"            "]],"start1":3673,"start2":3673,"length1":24,"length2":240}]],"length":4628,"saved":false}
{"ts":1351033810568,"patch":[[{"diffs":[[0," <= "],[-1,"3"],[1,"5"],[0,"; de"]],"start1":3107,"start2":3107,"length1":9,"length2":9}]],"length":4628,"saved":false}
{"ts":1351033954213,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"var temphashes = [], tempkey;\r\n\r\n"],[0,"Tabl"]],"start1":2532,"start2":2532,"length1":41,"length2":8},{"diffs":[[0,"e;\r\n"],[-1,"                \r\n            tempKeyI = temphashes.indexOf(key)\r\n            if(tempKeyI !== -1)\r\n                console.log(key + \":\" + temphashes[tempKeyI]);\r\n                \r\n            temphashes.push(key);\r\n"],[0,"    "]],"start1":3648,"start2":3648,"length1":224,"length2":8}]],"length":4379,"saved":false}
{"ts":1351034475049,"patch":[[{"diffs":[[0,"shCo"],[-1,"de(node.rubixState, RubixState.corners7) % TableGenerator.cornerDbSize"],[1,"rners(nodes[index].rubixState)"],[0,";\r\n "]],"start1":1293,"start2":1293,"length1":78,"length2":38}]],"length":4339,"saved":false}
{"ts":1351034574532,"patch":[[{"diffs":[[0,"DbSize);\r\n    \r\n"],[1,"    // Breadth first\r\n//"],[0,"    TableGenerat"]],"start1":674,"start2":674,"length1":32,"length2":56},{"diffs":[[0,"   /"],[-1,"*\r\n    var initialNode = "],[1,"/ Depth Limited\r\n    TableGenerator.generateDLS("],[0,"new "]],"start1":760,"start2":760,"length1":33,"length2":56},{"diffs":[[0,"e())"],[1,")"],[0,";\r\n    \r"],[-1,"\n    TableGenerator.generateDLS(initialNode);\r"],[0,"\n\r\n "]],"start1":855,"start2":855,"length1":62,"length2":17},{"diffs":[[0,");\r\n"],[-1,"    */\r\n"],[0,"    "]],"start1":1130,"start2":1130,"length1":16,"length2":8}]],"length":4333,"saved":false}
{"ts":1351034638520,"patch":[[{"diffs":[[0,"    "],[-1,"successors[index].parent = null;\r\n        TableGenerator.generateDLS("],[1,"TableGenerator.generateDLS(successors[index]);\r\n        RubixNode.wipeBadChain(s"],[0,"succ"]],"start1":2383,"start2":2383,"length1":77,"length2":88}]],"length":4344,"saved":false}
{"ts":1351034888632,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[-1,"//"],[0,"console.log("]],"start1":2141,"start2":2141,"length1":26,"length2":24}]],"length":4342,"saved":false}
{"ts":1351034893684,"patch":[[{"diffs":[[0,"le.log(\""],[-1,"N"],[1,"n"],[0,"ode\");\r\n"]],"start1":2158,"start2":2158,"length1":17,"length2":17}]],"length":4342,"saved":false}
{"ts":1351034931548,"patch":[[{"diffs":[[0,"ers(node"],[-1,"s[index].rubixState"],[0,");\r\n    "]],"start1":1293,"start2":1293,"length1":35,"length2":16}]],"length":4323,"saved":false}
{"ts":1351034940234,"patch":[[{"diffs":[[0,"Corners(node"],[1,".rubixState"],[0,");\r\n    valu"]],"start1":1289,"start2":1289,"length1":24,"length2":35}]],"length":4334,"saved":false}
{"ts":1351034961763,"patch":[[{"diffs":[[0,"adChain("],[-1,"s"],[0,"successo"]],"start1":2448,"start2":2448,"length1":17,"length2":16}]],"length":4333,"saved":false}
{"ts":1351035174032,"patch":[[{"diffs":[[0,"DONE!\");\r\n};\r\n\r\n"],[1,"TableGenerator.numNodes = 0;\r\n\r\n"],[0,"TableGenerator.g"]],"start1":1157,"start2":1157,"length1":32,"length2":64},{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    if (TableGenerator.numNodes % 1000 === 0)\r\n        console.log(TableGenerator.numNodes++);\r\n"],[0,"};\r\n\r\nTa"]],"start1":2508,"start2":2508,"length1":16,"length2":118}]],"length":4467,"saved":false}
{"ts":1351035180265,"patch":[[{"diffs":[[0,"numNodes"],[1,"++"],[0," % 1000 "]],"start1":2545,"start2":2545,"length1":16,"length2":18},{"diffs":[[0,"numNodes"],[-1,"++"],[0,");\r\n};\r\n"]],"start1":2606,"start2":2606,"length1":18,"length2":16}]],"length":4467,"saved":false}
{"ts":1351035182799,"patch":[[{"diffs":[[0,"Nodes = "],[-1,"0"],[1,"1"],[0,";\r\n\r\nTab"]],"start1":1191,"start2":1191,"length1":17,"length2":17}]],"length":4467,"saved":false}
{"ts":1351035225646,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    console.log(\"node\");\r\n    \r\n"],[0,"    "]],"start1":2169,"start2":2169,"length1":40,"length2":8}]],"length":4435,"saved":false}
{"ts":1351035461385,"patch":[[{"diffs":[[0,"es = 1;\r"],[1,"\nvar maxHash = 0;\r"],[0,"\n\r\nTable"]],"start1":1194,"start2":1194,"length1":16,"length2":34},{"diffs":[[0,"numNodes"],[-1,"++"],[0," % 1000 "]],"start1":2531,"start2":2531,"length1":18,"length2":16},{"diffs":[[0,"numNodes"],[1,"++"],[0,");\r\n};\r\n"]],"start1":2590,"start2":2590,"length1":16,"length2":18}]],"length":4453,"saved":false}
{"ts":1351035697638,"patch":[[{"diffs":[[0,"et(key);\r\n    \r\n"],[1,"    if (key > maxHash)\r\n        maxHash = key;\r\n    \r\n"],[0,"    if (value =="]],"start1":1409,"start2":1409,"length1":32,"length2":86}]],"length":4507,"saved":false}
{"ts":1351035706595,"patch":[[{"diffs":[[0,"mNodes++"],[1," + \":\" + maxHash"],[0,");\r\n};\r\n"]],"start1":2646,"start2":2646,"length1":16,"length2":32}]],"length":4523,"saved":false}
{"ts":1351035746059,"patch":[[{"diffs":[[0,"ole.log("],[1,"("],[0,"TableGen"]],"start1":2621,"start2":2621,"length1":16,"length2":17},{"diffs":[[0,"mNodes++"],[1,")"],[0," + \":\" +"]],"start1":2647,"start2":2647,"length1":16,"length2":17}]],"length":4525,"saved":false}
{"ts":1351035777861,"patch":[[{"diffs":[[0,"n(node)\r\n{\r\n"],[1,"    console.log(\"HI\");\r\n    \r\n"],[0,"    var key,"]],"start1":1259,"start2":1259,"length1":24,"length2":54}]],"length":4555,"saved":false}
{"ts":1351035848920,"patch":[[{"diffs":[[0," 1;\r"],[-1,"\nvar maxHash = 0;\r"],[0,"\n\r\nT"]],"start1":1198,"start2":1198,"length1":26,"length2":8},{"diffs":[[0,"\n{\r\n"],[-1,"    console.log(\"HI\");\r\n    \r\n"],[0,"    "]],"start1":1249,"start2":1249,"length1":38,"length2":8},{"diffs":[[0,"bixState);\r\n"],[1,""],[0,"    value = "]],"start1":1336,"start2":1336,"length1":24,"length2":24},{"diffs":[[0,"  \r\n"],[-1,"    if (key > maxHash)\r\n        maxHash = key;\r\n    \r\n"],[0,"    "]],"start1":1403,"start2":1403,"length1":62,"length2":8},{"diffs":[[0,"numNodes"],[1,"++"],[0," % 1000 "]],"start1":2513,"start2":2513,"length1":16,"length2":18},{"diffs":[[0,"ole.log("],[-1,"("],[0,"TableGen"]],"start1":2551,"start2":2551,"length1":17,"length2":16},{"diffs":[[0,"odes"],[-1,"++) + \":\" + maxHash"],[0,");\r\n"]],"start1":2578,"start2":2578,"length1":27,"length2":8}]],"length":4435,"saved":false}
{"ts":1351035985316,"patch":[[{"diffs":[[0,"imited\r\n    "],[1,"//"],[0,"TableGenerat"]],"start1":773,"start2":773,"length1":24,"length2":26},{"diffs":[[0,"et(key);\r\n    \r\n"],[1,"    if (value > 0 && value < node.depth)\r\n        return;\r\n    \r\n"],[0,"    if (value =="]],"start1":1393,"start2":1393,"length1":32,"length2":97}]],"length":4502,"saved":false}
{"ts":1351036036550,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    if (value > 0 && value < node.depth)\r\n        return;\r\n    \r\n"],[0,"    "]],"start1":1405,"start2":1405,"length1":73,"length2":8}]],"length":4437,"saved":false}
{"ts":1351036049021,"patch":[[{"diffs":[[0,"imited\r\n    "],[-1,"//"],[0,"TableGenerat"]],"start1":773,"start2":773,"length1":26,"length2":24}]],"length":4435,"saved":false}
{"ts":1351037878241,"patch":[[{"diffs":[[0,"cornerDbSize);\r\n"],[1,"    for (var index  = 0; index < TableGenerator.cornerDatabase.entries.length; i++)\r\n        if (TableGenerator.cornerDatabase.entries[index] !== 0)\r\n            console.log(TableGenerator.cornerDatabase.entries[index]);\r\n    \r\n"],[0,"//    TableGener"]],"start1":487,"start2":487,"length1":32,"length2":260},{"diffs":[[0,"imited\r\n    "],[1,"//"],[0,"TableGenerat"]],"start1":1001,"start2":1001,"length1":24,"length2":26}]],"length":4665,"saved":false}
{"ts":1351037893745,"patch":[[{"diffs":[[0,"ength; i"],[1,"ndex"],[0,"++)\r\n   "]],"start1":575,"start2":575,"length1":16,"length2":20}]],"length":4669,"saved":false}
{"ts":1351037936079,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    for (var index  = 0; index < TableGenerator.cornerDatabase.entries.length; index++)\r\n        if (TableGenerator.cornerDatabase.entries[index] !== 0)\r\n            console.log(TableGenerator.cornerDatabase.entries[index]);\r\n"],[0,"    \r\n"],[1,""],[0,"//  "]],"start1":499,"start2":499,"length1":240,"length2":14},{"diffs":[[0,"imited\r\n    "],[-1,"//"],[0,"TableGenerat"]],"start1":779,"start2":779,"length1":26,"length2":24},{"diffs":[[0,";\r\n    \r"],[1,"\n    for (var index  = 0; index < TableGenerator.cornerDatabase.entries.length; index++)\r\n        if (TableGenerator.cornerDatabase.entries[index] !== 0)\r\n            console.log(TableGenerator.cornerDatabase.entries[index]);\r"],[0,"\n\r\n    F"]],"start1":866,"start2":866,"length1":16,"length2":242}]],"length":4667,"saved":false}
{"ts":1351038052298,"patch":[[{"diffs":[[0,"Size);\r\n"],[-1,"    \r\n"],[0,"//    Ta"]],"start1":495,"start2":495,"length1":22,"length2":16},{"diffs":[[0,"));\r"],[-1,"\n    \r\n    for (var index  = 0; index < TableGenerator.cornerDatabase.entries.length; index++)\r\n        if (TableGenerator.cornerDatabase.entries[index] !== 0)\r\n            console.log(TableGenerator.cornerDatabase.entries[index]);\r"],[0,"\n\r\n "]],"start1":858,"start2":858,"length1":240,"length2":8},{"diffs":[[0,"de.depth);\r\n"],[1,"//"],[0,"    else // "]],"start1":1494,"start2":1494,"length1":24,"length2":26},{"diffs":[[0,"ady enumerated\r\n"],[1,"//"],[0,"        return;\r"]],"start1":1530,"start2":1530,"length1":32,"length2":34}]],"length":4433,"saved":false}
{"ts":1351038144080,"patch":[[{"diffs":[[0,"+ % 1000"],[1,"0"],[0," === 0)\r"]],"start1":2520,"start2":2520,"length1":16,"length2":17}]],"length":4434,"saved":false}
{"ts":1351038172523,"patch":[[{"diffs":[[0,"numNodes"],[-1,"++"],[0," % 10000"]],"start1":2511,"start2":2511,"length1":18,"length2":16},{"diffs":[[0,"numNodes"],[1,"++"],[0,");\r\n};\r\n"]],"start1":2571,"start2":2571,"length1":16,"length2":18}]],"length":4434,"saved":false}
{"ts":1351038205267,"patch":[[{"diffs":[[0,"numNodes"],[1,"++"],[0," % 10000"]],"start1":2511,"start2":2511,"length1":16,"length2":18},{"diffs":[[0,"numNodes"],[-1,"++"],[1," - 1"],[0,");\r\n};\r\n"]],"start1":2573,"start2":2573,"length1":18,"length2":20}]],"length":4438,"saved":false}
{"ts":1351038326442,"patch":[[{"diffs":[[0,"ode.depth)\r\n    "],[1,"{\r\n"],[0,"    "],[1,"    //"],[0,"TableGenerator.c"]],"start1":1433,"start2":1433,"length1":36,"length2":45},{"diffs":[[0,"de.depth);\r\n"],[-1,"//"],[1,"    }\r\n"],[0,"    else // "]],"start1":1503,"start2":1503,"length1":26,"length2":31},{"diffs":[[0,"erated\r\n"],[-1,"//"],[1,"    {\r\n        console.log(\"ERROR\");\r\n"],[0,"        "]],"start1":1552,"start2":1552,"length1":18,"length2":54},{"diffs":[[0,"eturn;\r\n"],[1,"    }\r\n"],[0,"/*  \r\n  "]],"start1":1607,"start2":1607,"length1":16,"length2":23}]],"length":4495,"saved":false}
{"ts":1351038328881,"patch":[[{"diffs":[[0,"ROR\");\r\n        "],[1,"//"],[0,"return;\r\n    }\r\n"]],"start1":1590,"start2":1590,"length1":32,"length2":34}]],"length":4497,"saved":false}
{"ts":1351038580366,"patch":[[{"diffs":[[0," {\r\n        "],[-1,"//"],[0,"TableGenerat"]],"start1":1448,"start2":1448,"length1":26,"length2":24},{"diffs":[[0,"    "],[-1,"console.log(\"ERROR\");\r\n        //"],[0,"retu"]],"start1":1569,"start2":1569,"length1":41,"length2":8},{"diffs":[[0," % 10000"],[1,"0"],[0," === 0)\r"]],"start1":2545,"start2":2545,"length1":16,"length2":17}]],"length":4463,"saved":false}
{"ts":1351038615234,"patch":[[{"diffs":[[0,"ole.log("],[1,"("],[0,"TableGen"]],"start1":2575,"start2":2575,"length1":16,"length2":17},{"diffs":[[0,"des - 1)"],[1," / 1000000 + \"M\")"],[0,";\r\n};\r\n\r"]],"start1":2604,"start2":2604,"length1":16,"length2":33}]],"length":4481,"saved":false}
{"ts":1351038674735,"patch":[[{"diffs":[[0,"e case\r\n"],[1,"//"],[0,"    if ("]],"start1":2205,"start2":2205,"length1":16,"length2":18},{"diffs":[[0,"== 11)\r\n"],[1,"//"],[0,"        "]],"start1":2235,"start2":2235,"length1":16,"length2":18}]],"length":4485,"saved":false}
{"ts":1351038714894,"patch":[[{"diffs":[[0,"e case\r\n"],[-1,"//"],[0,"    if ("]],"start1":2205,"start2":2205,"length1":18,"length2":16},{"diffs":[[0,"== 1"],[-1,"1"],[1,"2"],[0,")\r\n"],[-1,"//"],[0,"    "]],"start1":2233,"start2":2233,"length1":14,"length2":12}]],"length":4481,"saved":false}
{"ts":1351038927358,"patch":[[{"diffs":[[0,"es = 1;\r"],[1,"\nvar tempkeys = [];\r\nvar tempkey = 0;\r"],[0,"\n\r\nTable"]],"start1":1188,"start2":1188,"length1":16,"length2":54},{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    if (tempKeys.indexOf(key) !== -1)\r\n        console.log(\"ERROR\");\r\n    tempKeys.push(key);\r\n    \r\n"],[0,"/*  \r\n  "]],"start1":1619,"start2":1619,"length1":16,"length2":123}]],"length":4626,"saved":false}
{"ts":1351038938909,"patch":[[{"diffs":[[0,"var temp"],[-1,"k"],[1,"K"],[0,"eys = []"]],"start1":1197,"start2":1197,"length1":17,"length2":17}]],"length":4626,"saved":false}
{"ts":1351038973141,"patch":[[{"diffs":[[0,"th === 1"],[-1,"2"],[1,"1"],[0,")\r\n     "]],"start1":2374,"start2":2374,"length1":17,"length2":17}]],"length":4626,"saved":false}
{"ts":1351039121960,"patch":[[{"diffs":[[0,"\r\n    \r\n    if ("],[1,"tempKeys.indexOf(key) === -1)//"],[0,"value === 0 || v"]],"start1":1431,"start2":1431,"length1":32,"length2":63}]],"length":4657,"saved":false}
{"ts":1351039251813,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n    if (tempKeys.indexOf(key) !== -1)\r\n        "],[0,"cons"]],"start1":1658,"start2":1658,"length1":57,"length2":8},{"diffs":[[0,"og(\""],[-1,"ERROR"],[1,"Hi!"],[0,"\");\r"]],"start1":1671,"start2":1671,"length1":13,"length2":11}]],"length":4606,"saved":false}
{"ts":1351039278727,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(\"Hi!\");"],[0,"\r\n  "]],"start1":1658,"start2":1658,"length1":27,"length2":8},{"diffs":[[0,");\r\n    "],[1,"console.log(\"Hi!\");"],[0,"\r\n/*  \r\n"]],"start1":1685,"start2":1685,"length1":16,"length2":35}]],"length":4606,"saved":false}
{"ts":1351039348506,"patch":[[{"diffs":[[0," % 10000"],[-1,"0"],[0," === 0)\r"]],"start1":2670,"start2":2670,"length1":17,"length2":16}]],"length":4605,"saved":false}
{"ts":1351039352011,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    console.log(\"Hi!\");\r\n"],[0,"/*  "]],"start1":1685,"start2":1685,"length1":33,"length2":8}]],"length":4580,"saved":false}
{"ts":1351039374892,"patch":[[{"diffs":[[0,"+ % 1000"],[-1,"0"],[0," === 0)\r"]],"start1":2644,"start2":2644,"length1":17,"length2":16}]],"length":4579,"saved":false}
{"ts":1351039434602,"patch":[[{"diffs":[[0,"if ("],[-1,"tempKeys.indexOf(key) === -1)//"],[0,"valu"]],"start1":1443,"start2":1443,"length1":39,"length2":8},{"diffs":[[0,"+ % 1000"],[1,"00"],[0," === 0)\r"]],"start1":2613,"start2":2613,"length1":16,"length2":18}]],"length":4550,"saved":false}
{"ts":1351039463183,"patch":[[{"diffs":[[0," 1;\r"],[-1,"\nvar tempKeys = [];\r\nvar tempkey = 0;\r"],[0,"\n\r\nT"]],"start1":1192,"start2":1192,"length1":46,"length2":8},{"diffs":[[0," }\r\n"],[-1,"    \r\n    tempKeys.push(key);\r\n"],[0,"/*  "]],"start1":1585,"start2":1585,"length1":39,"length2":8}]],"length":4481,"saved":false}
{"ts":1351039498990,"patch":[[{"diffs":[[0,"et(key);\r\n    \r\n"],[1,"    if (key > 22000000)\r\n        console.log(key);\r\n    \r\n"],[0,"    if (value =="]],"start1":1385,"start2":1385,"length1":32,"length2":90}]],"length":4539,"saved":false}
{"ts":1351039594161,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    if (key > 22000000)\r\n        console.log(key);\r\n    \r\n"],[0,"    "]],"start1":1397,"start2":1397,"length1":66,"length2":8}]],"length":4481,"saved":false}
{"ts":1351039628321,"patch":[[{"diffs":[[0,"DbSize);\r\n    \r\n"],[1,"    TableGenerator.cornerDatabase.set(22000000, 5);\r\n    console.log(TableGenerator.cornerDatabase.get(5));\r\n    \r\n"],[0,"    // Breadth f"]],"start1":674,"start2":674,"length1":32,"length2":147},{"diffs":[[0,"imited\r\n    "],[1,"//"],[0,"TableGenerat"]],"start1":888,"start2":888,"length1":24,"length2":26}]],"length":4598,"saved":false}
{"ts":1351039643073,"patch":[[{"diffs":[[0,"ase.get("],[-1,"5"],[1,"22000000"],[0,"));\r\n   "]],"start1":785,"start2":785,"length1":17,"length2":24}]],"length":4605,"saved":false}
{"ts":1351039744225,"patch":[[{"diffs":[[0,"(2200000"],[-1,"0"],[1,"1"],[0,"));\r\n   "]],"start1":792,"start2":792,"length1":17,"length2":17}]],"length":4605,"saved":false}
{"ts":1351039753733,"patch":[[{"diffs":[[0,"(2200000"],[-1,"0"],[1,"1"],[0,", 5);\r\n "]],"start1":727,"start2":727,"length1":17,"length2":17}]],"length":4605,"saved":false}
{"ts":1351039846525,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    TableGenerator.cornerDatabase.set(22000001, 5);\r\n    console.log(TableGenerator.cornerDatabase.get(22000001));\r\n    \r\n"],[0,"    "]],"start1":686,"start2":686,"length1":130,"length2":8},{"diffs":[[0,"imited\r\n    "],[-1,"//"],[0,"TableGenerat"]],"start1":773,"start2":773,"length1":26,"length2":24},{"diffs":[[0,"txt\");\r\n    "],[-1,""],[0,""],[1,"console.log(\"MX:\" + maxHash);"],[0,"\r\n    consol"]],"start1":1120,"start2":1120,"length1":24,"length2":53},{"diffs":[[0,"des = 1;\r\n\r\n"],[1,"var maxHash = 0;\r\n\r\n"],[0,"TableGenerat"]],"start1":1216,"start2":1216,"length1":24,"length2":44},{"diffs":[[0,"atabase.get(key)"],[-1,""],[0,""],[1,";\r\n    \r\n    if (key > maxHash)\r\n        key = maxHash"],[0,";\r\n    \r\n    if "]],"start1":1425,"start2":1425,"length1":32,"length2":86}]],"length":4584,"saved":false}
{"ts":1351040796612,"patch":[[{"diffs":[[0,"et(key);\r\n    \r\n"],[1,"//"],[0,"    if (key > ma"]],"start1":1434,"start2":1434,"length1":32,"length2":34},{"diffs":[[0,"> maxHash)\r\n"],[1,"//"],[0,"        key "]],"start1":1464,"start2":1464,"length1":24,"length2":26}]],"length":4588,"saved":false}
{"ts":1351040840957,"patch":[[{"diffs":[[0,"n(node)\r\n{\r\n"],[1,"    if (TableGenerator.numNodes > 100000)\r\n        return;\r\n    \r\n"],[0,"    var key,"]],"start1":1284,"start2":1284,"length1":24,"length2":90},{"diffs":[[0,"\r\n    \r\n"],[-1,"//"],[0,"    if ("]],"start1":1508,"start2":1508,"length1":18,"length2":16},{"diffs":[[0,"xHash)\r\n"],[-1,"//"],[0,"        "]],"start1":1532,"start2":1532,"length1":18,"length2":16}]],"length":4650,"saved":false}
{"ts":1351040869624,"patch":[[{"diffs":[[0,"    "],[-1," key ="],[0," maxHash"],[1," = key"],[0,";\r\n "]],"start1":1543,"start2":1543,"length1":22,"length2":22}]],"length":4650,"saved":false}
{"ts":1351040875566,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"    if (TableGenerator.numNodes > 100000)\r\n        return;\r\n    \r\n"],[0,"    "]],"start1":1292,"start2":1292,"length1":74,"length2":8}]],"length":4584,"saved":false}
{"ts":1351043466802,"patch":[[{"diffs":[[0,"bSize = "],[1,"165148810//"],[0,"88179840"]],"start1":155,"start2":155,"length1":16,"length2":27}]],"length":4595,"saved":false}
{"ts":1351043499598,"patch":[[{"diffs":[[0,"8810"],[1,"; "],[0,"//"],[1," "],[0,"88179840"],[-1,";"],[1," - when optimal way to hash is found"],[0,"\r\nTa"]],"start1":168,"start2":168,"length1":19,"length2":57}]],"length":4633,"saved":false}
{"ts":1351043687518,"patch":[[{"diffs":[[0,"n(node)\r\n{\r\n"],[1,"    if (TableGenerator.numNodes > 100000)\r\n        return;\r\n    \r\n"],[0,"    var key,"]],"start1":1333,"start2":1333,"length1":24,"length2":90}]],"length":4699,"saved":false}
{"ts":1351043780512,"patch":[[{"diffs":[[0," 1651488"],[-1,"1"],[1,"2"],[0,"0; // 88"]],"start1":162,"start2":162,"length1":17,"length2":17}]],"length":4699,"saved":false}
{"ts":1351043857515,"patch":[[{"diffs":[[0," 1651488"],[-1,"20"],[1,"16"],[0,"; // 881"]],"start1":162,"start2":162,"length1":18,"length2":18}]],"length":4699,"saved":false}
{"ts":1351043924409,"patch":[[{"diffs":[[0,"depth)\r\n"],[-1,"    {\r\n"],[0,"        "]],"start1":1655,"start2":1655,"length1":23,"length2":16},{"diffs":[[0,"de.depth);\r\n"],[-1,"    }\r\n"],[0,"    else // "]],"start1":1712,"start2":1712,"length1":31,"length2":24},{"diffs":[[0,"erated\r\n"],[-1,"    {\r\n"],[0,"        "]],"start1":1754,"start2":1754,"length1":23,"length2":16},{"diffs":[[0,"eturn;\r\n"],[-1,"    }\r\n"],[0,"/*  \r\n  "]],"start1":1771,"start2":1771,"length1":23,"length2":16}]],"length":4671,"saved":false}
{"ts":1351043938932,"patch":[[{"diffs":[[0," > 10000"],[-1,"0"],[0,")\r\n     "]],"start1":1376,"start2":1376,"length1":17,"length2":16}]],"length":4670,"saved":false}
{"ts":1351043978327,"patch":[[{"diffs":[[0,"bixState);\r\n"],[1,"    console.log(key);\r\n"],[0,"    value = "]],"start1":1493,"start2":1493,"length1":24,"length2":47}]],"length":4693,"saved":false}
{"ts":1351044041992,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    console.log(key);\r\n"],[0,"    "]],"start1":1501,"start2":1501,"length1":31,"length2":8},{"diffs":[[0,"h = key;\r\n    \r\n"],[1,"//"],[0,"    if (value =="]],"start1":1602,"start2":1602,"length1":32,"length2":34},{"diffs":[[0," > node.depth)\r\n"],[1,"//"],[0,"        TableGen"]],"start1":1648,"start2":1648,"length1":32,"length2":34},{"diffs":[[0,"de.depth);\r\n"],[1,"//"],[0,"    else // "]],"start1":1715,"start2":1715,"length1":24,"length2":26},{"diffs":[[0,"ady enumerated\r\n"],[1,"//"],[0,"        return;\r"]],"start1":1751,"start2":1751,"length1":32,"length2":34}]],"length":4678,"saved":false}
{"ts":1351044075724,"patch":[[{"diffs":[[0,"ners\r\n    key = "],[1,"0;//"],[0,"RubixState.hashC"]],"start1":1447,"start2":1447,"length1":32,"length2":36}]],"length":4682,"saved":false}
{"ts":1351044112938,"patch":[[{"diffs":[[0,"y = "],[-1,"0;//"],[0,"Rubi"]],"start1":1459,"start2":1459,"length1":12,"length2":8},{"diffs":[[0,"h = "],[-1,"key;"],[0,"\r\n  "]],"start1":1602,"start2":1602,"length1":12,"length2":8}]],"length":4674,"saved":false}
{"ts":1351044116118,"patch":[[{"diffs":[[0,"tate);\r\n    "],[1,"//"],[0,"value = Tabl"]],"start1":1497,"start2":1497,"length1":24,"length2":26}]],"length":4676,"saved":false}
{"ts":1351044171256,"patch":[[{"diffs":[[0,"xHash = "],[1,"key;"],[0,"\r\n    \r\n"]],"start1":1600,"start2":1600,"length1":16,"length2":20}]],"length":4680,"saved":false}
{"ts":1351044204886,"patch":[[{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"value = "]],"start1":1501,"start2":1501,"length1":18,"length2":16}]],"length":4678,"saved":false}
{"ts":1351044213623,"patch":[[{"diffs":[[0,"n(node)\r\n{\r\n"],[1,"//"],[0,"    if (Tabl"]],"start1":1333,"start2":1333,"length1":24,"length2":26},{"diffs":[[0,"s > 10000)\r\n"],[1,"//"],[0,"        retu"]],"start1":1377,"start2":1377,"length1":24,"length2":26}]],"length":4682,"saved":false}
{"ts":1351044284267,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"//"],[0,"    if ("]],"start1":1614,"start2":1614,"length1":18,"length2":16},{"diffs":[[0,"depth)\r\n"],[-1,"//"],[0,"        "]],"start1":1658,"start2":1658,"length1":18,"length2":16},{"diffs":[[0,"de.depth);\r\n"],[-1,"//"],[0,"    else // "]],"start1":1715,"start2":1715,"length1":26,"length2":24},{"diffs":[[0,"erated\r\n"],[-1,"//"],[0,"        "]],"start1":1757,"start2":1757,"length1":18,"length2":16}]],"length":4674,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351085059478,"patch":[[{"diffs":[[0,"e = "],[-1,"165148816; // 88179840 - when optimal way to hash is found"],[1,"88179840; // 165148816"],[0,"\r\nTa"]],"start1":159,"start2":159,"length1":66,"length2":30},{"diffs":[[0,");\r\n"],[-1,"    console.log(\"MX:\" + maxHash);\r\n"],[0,"    "]],"start1":1137,"start2":1137,"length1":43,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"var maxHash = 0;"],[1,"TableGenerator.generateCombined = function(node)\r\n{\r\n    \r\n}"],[0,"\r\n\r\n"]],"start1":1202,"start2":1202,"length1":24,"length2":68},{"diffs":[[0,"  \r\n"],[-1,"    if (key > maxHash)\r\n        maxHash = key;\r\n    \r\n"],[0,"    "]],"start1":1537,"start2":1537,"length1":62,"length2":8},{"diffs":[[0,"% 100000"],[1,"0"],[0," === 0)\r"]],"start1":2658,"start2":2658,"length1":16,"length2":17},{"diffs":[[0,"ion("],[-1,")\r\n{\r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());"],[1,"node)"],[0,"\r\n"],[1,"{"],[0,"    "]],"start1":2789,"start2":2789,"length1":86,"length2":16},{"diffs":[[0,"ors("],[-1,"initialN"],[1,"n"],[0,"ode)"]],"start1":2843,"start2":2843,"length1":16,"length2":9},{"diffs":[[0,"ad(strDb);\r\n"],[-1,""],[0,"};"],[1,"\r\n"]],"start1":4503,"start2":4503,"length1":14,"length2":16}]],"length":4519,"saved":false}
{"ts":1351085164281,"patch":[[{"diffs":[[0,"DbSize);\r\n    \r\n"],[1,"    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n  \r\n    // Combined\r\n    TableGenerator.generateCombined(initialNode);\r\n  \r\n"],[0,"    // Breadth f"]],"start1":687,"start2":687,"length1":32,"length2":180},{"diffs":[[0,"Breadth("],[1,"initialNode"],[0,");\r\n    "]],"start1":902,"start2":902,"length1":16,"length2":27},{"diffs":[[0,"th Limited\r\n"],[1,"//"],[0,"    TableGen"]],"start1":941,"start2":941,"length1":24,"length2":26},{"diffs":[[0,"DLS("],[-1,"new RubixNode(RubixState.createWithGoalState())"],[1,"initialNode"],[0,");\r\n"]],"start1":982,"start2":982,"length1":55,"length2":19}]],"length":4644,"saved":false}
{"ts":1351085185343,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"TableGenerator.numNodes = 1;\r\n\r\n"],[0,"Tabl"]],"start1":1295,"start2":1295,"length1":40,"length2":8},{"diffs":[[0,"\n    \r\n}"],[1,";"],[0,"\r\n\r\nTabl"]],"start1":1351,"start2":1351,"length1":16,"length2":17},{"diffs":[[0,"tor."],[-1,"generateDLS = function(node)"],[1,"numNodes = 1;"],[0,"\r\n"],[-1,"{"],[0,"\r\n"],[-1,"//    if ("],[0,"Tabl"]],"start1":1375,"start2":1375,"length1":51,"length2":25},{"diffs":[[0,"tor."],[-1,"numNodes > 10000)\r\n//        return;"],[1,"generateDLS = function(node)"],[0,"\r\n"],[1,"{"],[0,"    "]],"start1":1407,"start2":1407,"length1":46,"length2":39}]],"length":4580,"saved":false}
{"ts":1351085212105,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    TableGenerator.cornerDatabase = new PatternDatabase(TableGenerator.cornerDbSize);\r\n//    TableGenerator.edgesTopDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n//    TableGenerator.edgesBottomDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n    \r\n"],[0,"    "]],"start1":2970,"start2":2970,"length1":282,"length2":8}]],"length":4306,"saved":false}
{"ts":1351085299461,"patch":[[{"diffs":[[0,"tor."],[-1,"depth = 2"],[1,"breadthDepth = 5;\r\nTableGenerator.dlsDepth = 11"],[0,";\r\n\r"]],"start1":365,"start2":365,"length1":17,"length2":55},{"diffs":[[0,"de)\r\n{\r\n"],[-1,""],[0,"    "],[1,"var nodes = RubixNode.getSuccessors(node), successors = [], depth, index;\r\n    var key, value;\r\n    \r\n    for (depth = 1; depth <= TableGenerator.breadthDepth; depth++)\r\n    {        \r\n        for (index = 0; index < nodes.length; index++)\r\n        {\r\n            key = RubixState.hashCorners(nodes[index].rubixState);// % TableGenerator.cornerDbSize;\r\n            value = TableGenerator.cornerDatabase.get(key);\r\n            \r\n            // Do not replace existing value as that will effect an inadmissible heuristic.\r\n            if (value === 0 || value > nodes[index].depth)\r\n                TableGenerator.cornerDatabase.set(key, nodes[index].depth);\r\n            else // State already enumerated\r\n                continue;\r\n            \r\n            // TODO - edges\r\n            \r\n            successors = successors.concat(RubixNode.getSuccessors(nodes[index]));\r\n            RubixNode.wipeBadChain(nodes[index]);\r\n            \r\n            if (index % 250 === 0)\r\n            {\r\n                console.log(\"Depth: \" + depth + \"  Node: \" + index + \"  Successors: \" + successors.length);\r\n            }\r\n        }\r\n        \r\n        nodes = successors.slice(0);\r\n        successors.length = 0; // Clear array\r\n    }"],[0,"\r\n};\r\n\r\n"]],"start1":1382,"start2":1382,"length1":20,"length2":1243},{"diffs":[[0," }\r\n"],[-1,"    \r\n    console.log(\"Encoding...\");\r\n    var strDb = TableGenerator.cornerDatabase.toString();\r\n    console.log(\"Length: \" + strDb.length);\r\n    //console.log(strDb.substr(0, 50));\r\n    //FileOperator.presentForDownload(strDb);\r\n"],[0,"};\r\n"]],"start1":5328,"start2":5328,"length1":239,"length2":8}]],"length":5336,"saved":false}
{"ts":1351085402077,"patch":[[{"diffs":[[0,"Depth = "],[-1,"5"],[1,"4"],[0,";\r\nTable"]],"start1":376,"start2":376,"length1":17,"length2":17}]],"length":5336,"saved":false}
{"ts":1351085786275,"patch":[[{"diffs":[[0,"250 === 0)\r\n"],[-1,"            {\r\n"],[0,"            "]],"start1":2355,"start2":2355,"length1":39,"length2":24},{"diffs":[[0,"s.length);\r\n"],[-1,"            }\r\n"],[0,"        }\r\n "]],"start1":2464,"start2":2464,"length1":39,"length2":24},{"diffs":[[0,"ray\r\n    }\r\n"],[1,"    \r\n    for (index = 0; index < nodes.length; index++)\r\n    {\r\n        \r\n    }\r\n"],[0,"};\r\n\r\nTableG"]],"start1":2577,"start2":2577,"length1":24,"length2":106}]],"length":5388,"saved":false}
{"ts":1351085957221,"patch":[[{"diffs":[[0,"  \r\n            "],[1,"//"],[0,"successors = suc"]],"start1":2178,"start2":2178,"length1":32,"length2":34},{"diffs":[[0,"odes[index]));\r\n"],[1,"            \r\n"],[0,"            Rubi"]],"start1":2252,"start2":2252,"length1":32,"length2":46},{"diffs":[[0,"successors = [],"],[1," theseSuccessors,"],[0," depth, index;\r\n"]],"start1":4244,"start2":4244,"length1":32,"length2":49},{"diffs":[[0,"rs, depth, index"],[1,", jndex"],[0,";\r\n    var key, "]],"start1":4274,"start2":4274,"length1":32,"length2":39},{"diffs":[[0,"  \r\n            "],[-1,"s"],[1,"theseS"],[0,"uccessors = succ"]],"start1":4983,"start2":4983,"length1":33,"length2":38},{"diffs":[[0,"s = "],[-1,"successors.concat(RubixNode.getSuccessors(nodes[index]));"],[1,"RubixNode.getSuccessors(nodes[index]);\r\n            for (jndex = 0; jndex < theseSuccessors.length; jndex++)\r\n                successors.push(theseSuccessors[index]);\r\n            "],[0,"\r\n  "]],"start1":5013,"start2":5013,"length1":65,"length2":188}]],"length":5556,"saved":false}
{"ts":1351085991231,"patch":[[{"diffs":[[0,"epth <= "],[-1,"5"],[1,"TableGenerator.breadthDepth"],[0,"; depth+"]],"start1":4348,"start2":4348,"length1":17,"length2":43}]],"length":5582,"saved":false}
{"ts":1351086050052,"patch":[[{"diffs":[[0,"nodes[index]);\r\n"],[1,"            console.log(theseSuccessors)l;\r\n"],[0,"            for "]],"start1":5067,"start2":5067,"length1":32,"length2":76}]],"length":5626,"saved":false}
{"ts":1351086051100,"patch":[[{"diffs":[[0,"cessors)"],[-1,"l"],[0,";\r\n     "]],"start1":5115,"start2":5115,"length1":17,"length2":16}]],"length":5625,"saved":false}
{"ts":1351086068847,"patch":[[{"diffs":[[0,"/ Combined\r\n"],[1,"//"],[0,"    TableGen"]],"start1":822,"start2":822,"length1":24,"length2":26},{"diffs":[[0," first\r\n"],[-1,"//"],[0,"    Tabl"]],"start1":905,"start2":905,"length1":18,"length2":16}]],"length":5625,"saved":false}
{"ts":1351086075088,"patch":[[{"diffs":[[0,");\r\n"],[-1,"            console.log(theseSuccessors);\r\n"],[0,"    "]],"start1":5079,"start2":5079,"length1":51,"length2":8}]],"length":5582,"saved":false}
{"ts":1351086103027,"patch":[[{"diffs":[[0,"theseSuccessors["],[-1,"i"],[1,"j"],[0,"ndex]);\r\n       "]],"start1":5185,"start2":5185,"length1":33,"length2":33}]],"length":5582,"saved":false}
{"ts":1351086133948,"patch":[[{"diffs":[[0,"Depth = "],[-1,"4"],[1,"11"],[0,";\r\nTable"]],"start1":376,"start2":376,"length1":17,"length2":18}]],"length":5583,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351086243623,"patch":[[{"diffs":[[0,"    if (index % "],[-1,"25"],[1,"10000"],[0,"0 === 0)\r\n      "]],"start1":2356,"start2":2356,"length1":34,"length2":37}]],"length":5586,"saved":false}
{"ts":1351086262103,"patch":[[{"diffs":[[0,"    "],[-1,"var nodes = RubixNode.getSuccessors(node), successors = [], depth, index;\r\n    var key, value;\r\n    \r\n    for (depth = 1; depth <= TableGenerator.breadthDepth; depth++)\r\n    {        \r\n        for (index = 0; index < nodes.length; index++)\r\n        {\r\n            key = RubixState.hashCorners(nodes[index].rubixState);// % TableGenerator.cornerDbSize;\r\n            value = TableGenerator.cornerDatabase.get(key);\r\n            \r\n            // Do not replace existing value as that will effect an inadmissible heuristic.\r\n            if (value === 0 || value > nodes[index].depth)\r\n                TableGenerator.cornerDatabase.set(key, nodes[index].depth);\r\n            else // State already enumerated\r\n                continue;\r\n            \r\n            // TODO - edges\r\n            \r\n            //successors = successors.concat(RubixNode.getSuccessors(nodes[index]));\r\n            \r\n            RubixNode.wipeBadChain(nodes[index]);\r\n            \r\n            if (index % 100000 === 0)\r\n                console.log(\"Depth: \" + depth + \"  Node: \" + index + \"  Successors: \" + successors.length);\r\n        }\r\n        \r\n        nodes = successors.slice(0);\r\n        successors.length = 0; // Clear array\r\n    }"],[1,"// Breadth here"],[0,"\r\n  "]],"start1":1391,"start2":1391,"length1":1220,"length2":23}]],"length":4389,"saved":false}
{"ts":1351086340530,"patch":[[{"diffs":[[0,"index % "],[-1,"25"],[1,"10000"],[0,"0 === 0)"]],"start1":4113,"start2":4113,"length1":18,"length2":21}]],"length":4392,"saved":false}
{"ts":1351086343663,"patch":[[{"diffs":[[0,"0)\r\n"],[-1,"            {\r\n"],[0,"    "]],"start1":4132,"start2":4132,"length1":23,"length2":8},{"diffs":[[0,");\r\n"],[-1,"            }\r\n"],[0,"    "]],"start1":4241,"start2":4241,"length1":23,"length2":8}]],"length":4362,"saved":false}
{"ts":1351086563877,"patch":[[{"diffs":[[0,"nodes[index]);\r\n"],[1,"            RubixNode.wipeBadChain(nodes[index]);\r\n"],[0,"            for "]],"start1":3874,"start2":3874,"length1":32,"length2":83},{"diffs":[[0,"ors[jndex]);"],[-1,"\r\n"],[0,"            "]],"start1":4055,"start2":4055,"length1":26,"length2":24},{"diffs":[[0,"  \r\n"],[-1,"            RubixNode.wipeBadChain(nodes[index]);\r\n"],[0,"    "]],"start1":4077,"start2":4077,"length1":59,"length2":8}]],"length":4360,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351087021758,"patch":[[{"diffs":[[1,"\r\n$(document).ready(function() {\r\n    FileOperator.init();\r\n    //TableGenerator.generate();\r\n});\r\n\r\nfunction TableGenerator() {}\r\n\r\nTableGenerator.cornerDbSize = 88179840; // 165148816\r\nTableGenerator.edgeDbSize = 42577920;\r\n\r\nTableGenerator.cornerDatabase = null;\r\nTableGenerator.edgesTopDatabase = null;\r\nTableGenerator.edgesBottomDatabase = null;\r\n\r\nTableGenerator.breadthDepth = 11;\r\nTableGenerator.dlsDepth = 11;\r\n\r\nTableGenerator.generate = function()\r\n{     \r\n    TableGenerator.cornerDatabase = new PatternDatabase(TableGenerator.cornerDbSize);\r\n//    TableGenerator.edgesTopDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n//    TableGenerator.edgesBottomDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n    \r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n  \r\n    // Combined\r\n//    TableGenerator.generateCombined(initialNode);\r\n  \r\n    // Breadth first\r\n    TableGenerator.generateBreadth(initialNode);\r\n    \r\n    // Depth Limited\r\n//    TableGenerator.generateDLS(initialNode);\r\n\r\n    FileOperator.presentForDownload(TableGenerator.cornerDatabase);\r\n//    FileOperator.presentForDownload(TableGenerator.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(TableGenerator.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\");\r\n};\r\n\r\nTableGenerator.generateCombined = function(node)\r\n{\r\n    // Breadth here\r\n    \r\n    for (index = 0; index < nodes.length; index++)\r\n    {\r\n        \r\n    }\r\n};\r\n\r\nTableGenerator.numNodes = 1;\r\n\r\nTableGenerator.generateDLS = function(node)\r\n{    \r\n    var key, value;\r\n    \r\n    // Corners\r\n    key = RubixState.hashCorners(node.rubixState);\r\n    value = TableGenerator.cornerDatabase.get(key);\r\n    \r\n    if (value === 0 || value > node.depth)\r\n        TableGenerator.cornerDatabase.set(key, node.depth);\r\n    else // State already enumerated\r\n        return;\r\n/*  \r\n    // Edges Top\r\n    key = RubixState.hashCode(node.rubixState, RubixState.edgesTop) % TableGenerator.edgeDbSize;\r\n    value = TableGenerator.edgesTopDatabase.get(key);\r\n    \r\n    if (value === 0 || value > node.depth)\r\n        TableGenerator.edgesTopDatabase.set(key, node.depth);\r\n    \r\n    // Edges Bottom\r\n    key = RubixState.hashCode(node.rubixState, RubixState.edgesBottom) % TableGenerator.edgeDbSize;\r\n    value = TableGenerator.edgesBottomDatabase.get(key);\r\n    \r\n    if (value === 0 || value > node.depth)\r\n        TableGenerator.edgesBottomDatabase.set(key, node.depth);\r\n*/    \r\n    \r\n    // Base case\r\n    if (node.depth === 11)\r\n        return;\r\n    \r\n    var successors = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < successors.length; index++)\r\n    {\r\n        TableGenerator.generateDLS(successors[index]);\r\n        RubixNode.wipeBadChain(successors[index]);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 1000000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n};\r\n\r\nTableGenerator.generateBreadth = function(node)\r\n{    \r\n    var nodes = RubixNode.getSuccessors(node), successors = [], theseSuccessors, depth, index, jndex;\r\n    var key, value;\r\n    \r\n    for (depth = 1; depth <= TableGenerator.breadthDepth; depth++)\r\n    {        \r\n        for (index = 0; index < nodes.length; index++)\r\n        {\r\n            key = RubixState.hashCorners(nodes[index].rubixState);// % TableGenerator.cornerDbSize;\r\n            value = TableGenerator.cornerDatabase.get(key);\r\n            \r\n            // Do not replace existing value as that will effect an inadmissible heuristic.\r\n            if (value === 0 || value > nodes[index].depth)\r\n                TableGenerator.cornerDatabase.set(key, nodes[index].depth);\r\n            else // State already enumerated\r\n                continue;\r\n            \r\n            // TODO - edges\r\n            \r\n            theseSuccessors = RubixNode.getSuccessors(nodes[index]);\r\n            RubixNode.wipeBadChain(nodes[index]);\r\n            for (jndex = 0; jndex < theseSuccessors.length; jndex++)\r\n                successors.push(theseSuccessors[jndex]);            \r\n            \r\n            if (index % 100000 === 0)\r\n                console.log(\"Depth: \" + depth + \"  Node: \" + index + \"  Successors: \" + successors.length);\r\n        }\r\n        \r\n        nodes = successors.slice(0);\r\n        successors.length = 0; // Clear array\r\n    }\r\n    \r\n    return nodes;\r\n};\r\n"]],"start1":0,"start2":0,"length1":0,"length2":4385}]],"length":4385,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351087028740,"patch":[[{"diffs":[[0,"Depth = "],[-1,"11"],[1,"5"],[0,";\r\nTable"]],"start1":376,"start2":376,"length1":18,"length2":17}]],"length":4384,"saved":false}
{"ts":1351087070916,"patch":[[{"diffs":[[0,"    "],[-1,"// Breadth here"],[1,"var nodes = TableGenerator.generateBreadth(node);"],[0,"\r\n  "]],"start1":1390,"start2":1390,"length1":23,"length2":57},{"diffs":[[0," {\r\n        "],[1,"TableGenerator.generateDLS = function(node)"],[0,"\r\n    }\r\n};\r"]],"start1":1506,"start2":1506,"length1":24,"length2":67}]],"length":4461,"saved":false}
{"ts":1351087072066,"patch":[[{"diffs":[[0,"on(node)"],[1,";"],[0,"\r\n    }\r"]],"start1":1553,"start2":1553,"length1":16,"length2":17}]],"length":4462,"saved":false}
{"ts":1351087089146,"patch":[[{"diffs":[[0,"\n    \r\n    for ("],[1,"var "],[0,"index = 0; index"]],"start1":1444,"start2":1444,"length1":32,"length2":36},{"diffs":[[0,"ngth; index++)\r\n"],[-1,"    {\r\n"],[0,"        TableGen"]],"start1":1491,"start2":1491,"length1":39,"length2":32},{"diffs":[[0,"eDLS"],[-1," = function(node);\r\n    }"],[1,"(nodes[index]);"],[0,"\r\n};"]],"start1":1537,"start2":1537,"length1":33,"length2":23}]],"length":4449,"saved":false}
{"ts":1351087098122,"patch":[[{"diffs":[[0,"/ Combined\r\n"],[-1,"//"],[0,"    TableGen"]],"start1":822,"start2":822,"length1":26,"length2":24},{"diffs":[[0," first\r\n"],[1,"//"],[0,"    Tabl"]],"start1":903,"start2":903,"length1":16,"length2":18}]],"length":4449,"saved":false}
{"ts":1351087147042,"patch":[[{"diffs":[[0,"Depth = "],[-1,"5"],[1,"4"],[0,";\r\nTable"]],"start1":376,"start2":376,"length1":17,"length2":17}]],"length":4449,"saved":false}
{"ts":1351087168228,"patch":[[{"diffs":[[0,"ngth; index++)\r\n"],[1,"    {\r\n"],[0,"        TableGen"]],"start1":1491,"start2":1491,"length1":32,"length2":39},{"diffs":[[0,"s[index]);\r\n"],[1,"        console.log(\"DLS iteration.\");\r\n    }\r\n"],[0,"};\r\n\r\nTableG"]],"start1":1553,"start2":1553,"length1":24,"length2":71}]],"length":4503,"saved":false}
{"ts":1351087352467,"patch":[[{"diffs":[[0,"h(node);\r\n    \r\n"],[1,"    console.log(nodes.length);\r\n"],[0,"    for (var ind"]],"start1":1435,"start2":1435,"length1":32,"length2":64}]],"length":4535,"saved":false}
{"ts":1351087480073,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"NODES to DLS: \" + "],[0,"nodes.le"]],"start1":1459,"start2":1459,"length1":16,"length2":35},{"diffs":[[0,"tion"],[-1,".\""],[1,": \" + (index + 1)"],[0,");\r\n"]],"start1":1646,"start2":1646,"length1":10,"length2":25}]],"length":4569,"saved":false}
{"ts":1351087839858,"patch":[[{"diffs":[[0,"    "],[-1,"    continue;"],[1,"{\r\n                RubixNode.wipeBadChain(nodes[index]);\r\n                continue;\r\n            }"],[0,"\r\n  "]],"start1":3928,"start2":3928,"length1":21,"length2":106}]],"length":4654,"saved":false}
{"ts":1351087854038,"patch":[[{"diffs":[[0,"Depth = "],[-1,"4"],[1,"5"],[0,";\r\nTable"]],"start1":376,"start2":376,"length1":17,"length2":17}]],"length":4654,"saved":false}
{"ts":1351089084870,"patch":[[{"diffs":[[0,"Depth = "],[-1,"5"],[1,"4"],[0,";\r\nTable"]],"start1":376,"start2":376,"length1":17,"length2":17},{"diffs":[[0,"ndex]);         "],[-1,"   "],[0,"\r\n            \r\n"]],"start1":4329,"start2":4329,"length1":35,"length2":32}]],"length":4651,"saved":false}
{"ts":1351089208258,"patch":[[{"diffs":[[0,"Depth = "],[-1,"11"],[1,"6"],[0,";\r\n\r\nTab"]],"start1":406,"start2":406,"length1":18,"length2":17}]],"length":4650,"saved":false}
{"ts":1351089266630,"patch":[[{"diffs":[[0,"=== "],[-1,"11"],[1,"TableGenerator.dlsDepth"],[0,")\r\n "]],"start1":2724,"start2":2724,"length1":10,"length2":31}]],"length":4671,"saved":false}
{"ts":1351089511769,"patch":[[{"diffs":[[0,"nodes[index]);\r\n"],[1,"        if (index % 10000 === 0)\r\n    "],[0,"        console."]],"start1":1599,"start2":1599,"length1":32,"length2":70}]],"length":4709,"saved":false}
{"ts":1351089606447,"patch":[[{"diffs":[[0,"Depth = "],[-1,"6"],[1,"8"],[0,";\r\n\r\nTab"]],"start1":406,"start2":406,"length1":17,"length2":17}]],"length":4709,"saved":false}
{"ts":1351089670177,"patch":[[{"diffs":[[0,"\" + "],[-1,"("],[0,"index"],[-1," + 1)"],[0,");\r\n"]],"start1":1689,"start2":1689,"length1":19,"length2":13}]],"length":4703,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351112364079,"patch":[[{"diffs":[[0," Depth Limited\r\n"],[1,"    var successors = RubixNode.getSuccessors(initialNode)\r\n    for (var index = 0; index < successors.length; index++)\r\n    {\r\n        setTimeout(function() {\r\n            TableGenerator.generateDLS(successors[index]);\r\n        }, 50);\r\n    }\r\n"],[0,"//    TableGener"]],"start1":974,"start2":974,"length1":32,"length2":276},{"diffs":[[0,"   }\r\n    \r\n"],[1,""],[0,"    return n"]],"start1":4912,"start2":4912,"length1":24,"length2":24},{"diffs":[[0,"};\r\n"],[-1,"\r\n$(document).ready(function() {\r\n    FileOperator.init();\r\n    //TableGenerator.generate();\r\n});\r\n\r\nfunction TableGenerator() {}\r\n\r\nTableGenerator.cornerDbSize = 88179840; // 165148816\r\nTableGenerator.edgeDbSize = 42577920;\r\n\r\nTableGenerator.cornerDatabase = null;\r\nTableGenerator.edgesTopDatabase = null;\r\nTableGenerator.edgesBottomDatabase = null;\r\n\r\nTableGenerator.breadthDepth = 11;\r\nTableGenerator.dlsDepth = 11;\r\n\r\nTableGenerator.generate = function()\r\n{     \r\n    TableGenerator.cornerDatabase = new PatternDatabase(TableGenerator.cornerDbSize);\r\n//    TableGenerator.edgesTopDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n//    TableGenerator.edgesBottomDatabase = new PatternDatabase(TableGenerator.edgeDbSize);\r\n    \r\n    var initialNode = new RubixNode(RubixState.createWithGoalState());\r\n  \r\n    // Combined\r\n//    TableGenerator.generateCombined(initialNode);\r\n  \r\n    // Breadth first\r\n    TableGenerator.generateBreadth(initialNode);\r\n    \r\n    // Depth Limited\r\n//    TableGenerator.generateDLS(initialNode);\r\n\r\n    FileOperator.presentForDownload(TableGenerator.cornerDatabase);\r\n//    FileOperator.presentForDownload(TableGenerator.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(TableGenerator.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\");\r\n};\r\n\r\nTableGenerator.generateCombined = function(node)\r\n{\r\n    // Breadth here\r\n    \r\n    for (index = 0; index < nodes.length; index++)\r\n    {\r\n        \r\n    }\r\n};\r\n\r\nTableGenerator.numNodes = 1;\r\n\r\nTableGenerator.generateDLS = function(node)\r\n{    \r\n    var key, value;\r\n    \r\n    // Corners\r\n    key = RubixState.hashCorners(node.rubixState);\r\n    value = TableGenerator.cornerDatabase.get(key);\r\n    \r\n    if (value === 0 || value > node.depth)\r\n        TableGenerator.cornerDatabase.set(key, node.depth);\r\n    else // State already enumerated\r\n        return;\r\n/*  \r\n    // Edges Top\r\n    key = RubixState.hashCode(node.rubixState, RubixState.edgesTop) % TableGenerator.edgeDbSize;\r\n    value = TableGenerator.edgesTopDatabase.get(key);\r\n    \r\n    if (value === 0 || value > node.depth)\r\n        TableGenerator.edgesTopDatabase.set(key, node.depth);\r\n    \r\n    // Edges Bottom\r\n    key = RubixState.hashCode(node.rubixState, RubixState.edgesBottom) % TableGenerator.edgeDbSize;\r\n    value = TableGenerator.edgesBottomDatabase.get(key);\r\n    \r\n    if (value === 0 || value > node.depth)\r\n        TableGenerator.edgesBottomDatabase.set(key, node.depth);\r\n*/    \r\n    \r\n    // Base case\r\n    if (node.depth === 11)\r\n        return;\r\n    \r\n    var successors = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < successors.length; index++)\r\n    {\r\n        TableGenerator.generateDLS(successors[index]);\r\n        RubixNode.wipeBadChain(successors[index]);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 1000000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n};\r\n\r\nTableGenerator.generateBreadth = function(node)\r\n{    \r\n    var nodes = RubixNode.getSuccessors(node), successors = [], theseSuccessors, depth, index, jndex;\r\n    var key, value;\r\n    \r\n    for (depth = 1; depth <= TableGenerator.breadthDepth; depth++)\r\n    {        \r\n        for (index = 0; index < nodes.length; index++)\r\n        {\r\n            key = RubixState.hashCorners(nodes[index].rubixState);// % TableGenerator.cornerDbSize;\r\n            value = TableGenerator.cornerDatabase.get(key);\r\n            \r\n            // Do not replace existing value as that will effect an inadmissible heuristic.\r\n            if (value === 0 || value > nodes[index].depth)\r\n                TableGenerator.cornerDatabase.set(key, nodes[index].depth);\r\n            else // State already enumerated\r\n                continue;\r\n            \r\n            // TODO - edges\r\n            \r\n            theseSuccessors = RubixNode.getSuccessors(nodes[index]);\r\n            RubixNode.wipeBadChain(nodes[index]);\r\n            for (jndex = 0; jndex < theseSuccessors.length; jndex++)\r\n                successors.push(theseSuccessors[jndex]);            \r\n            \r\n            if (index % 100000 === 0)\r\n                console.log(\"Depth: \" + depth + \"  Node: \" + index + \"  Successors: \" + successors.length);\r\n        }\r\n        \r\n        nodes = successors.slice(0);\r\n        successors.length = 0; // Clear array\r\n    }\r\n};\r\n"]],"start1":4943,"start2":4943,"length1":4364,"length2":4}]],"length":4947,"saved":false}
{"ts":1351112486019,"patch":[[{"diffs":[[0,"/ Combined\r\n"],[1,"//"],[0,"    TableGen"]],"start1":821,"start2":821,"length1":24,"length2":26}]],"length":4949,"saved":false}
{"ts":1351112538775,"patch":[[{"diffs":[[0,"   }, 50"],[1," + index"],[0,");\r\n    "]],"start1":1217,"start2":1217,"length1":16,"length2":24}]],"length":4957,"saved":false}
{"ts":1351112599741,"patch":[[{"diffs":[[0,"ialNode)"],[1,";\r\n    console.log(successors);"],[0,"\r\n    fo"]],"start1":1041,"start2":1041,"length1":16,"length2":47},{"diffs":[[0,"   }, 50"],[-1," + index"],[0,");\r\n    "]],"start1":1248,"start2":1248,"length1":24,"length2":16}]],"length":4980,"saved":false}
{"ts":1351112748582,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"S:\" + s"],[0,"successo"]],"start1":1060,"start2":1060,"length1":16,"length2":24}]],"length":4988,"saved":false}
{"ts":1351112749481,"patch":[[{"diffs":[[0,"(\"S:\" + "],[-1,"s"],[0,"successo"]],"start1":1067,"start2":1067,"length1":17,"length2":16}]],"length":4987,"saved":false}
{"ts":1351112836929,"patch":[[{"diffs":[[0,"initialNode)"],[-1,""],[0,""],[1,", successor"],[0,";\r\n    conso"]],"start1":1037,"start2":1037,"length1":24,"length2":35},{"diffs":[[0,"ndex++)\r\n    {\r\n"],[1,"        successor = successors[index];\r\n"],[0,"        setTimeo"]],"start1":1152,"start2":1152,"length1":32,"length2":72},{"diffs":[[0,"LS(successor"],[-1,"s[index]"],[0,");\r\n        "]],"start1":1277,"start2":1277,"length1":32,"length2":24}]],"length":5030,"saved":false}
{"ts":1351112924439,"patch":[[{"diffs":[[0,"s++ % 100000"],[-1,"0"],[0," === 0)\r\n   "]],"start1":3414,"start2":3414,"length1":25,"length2":24}]],"length":5029,"saved":false}
{"ts":1351113005913,"patch":[[{"diffs":[[0,"th Limited\r\n"],[1,"//"],[0,"    var succ"]],"start1":980,"start2":980,"length1":24,"length2":26},{"diffs":[[0,"essor;\r\n"],[1,"//"],[0,"    cons"]],"start1":1057,"start2":1057,"length1":16,"length2":18},{"diffs":[[0,"ccessors);\r\n"],[1,"//"],[0,"    for (var"]],"start1":1092,"start2":1092,"length1":24,"length2":26},{"diffs":[[0,"ngth; index++)\r\n"],[1,"//"],[0,"    {\r\n"],[1,"//"],[0,"        successo"]],"start1":1151,"start2":1151,"length1":39,"length2":43},{"diffs":[[0,"ndex];\r\n"],[1,"//"],[0,"        "]],"start1":1210,"start2":1210,"length1":16,"length2":18},{"diffs":[[0,"nction() {\r\n"],[1,"//"],[0,"            "]],"start1":1241,"start2":1241,"length1":24,"length2":26},{"diffs":[[0,"uccessor);\r\n"],[1,"//"],[0,"        }, 5"]],"start1":1295,"start2":1295,"length1":24,"length2":26},{"diffs":[[0,");\r\n"],[1,"//"],[0,"    }\r\n"],[-1,"//"],[0,"    "]],"start1":1322,"start2":1322,"length1":17,"length2":17}]],"length":5045,"saved":false}
{"ts":1351113034789,"patch":[[{"diffs":[[0,"\r\n//"],[-1,"    var successors = RubixNode.getSuccessors(initialNode), successor;\r\n//    console.log(\"S:\" + successors);\r\n//    for (var index = 0; index < successors.length; index++)\r\n//    {\r\n//        successor = successors[index];\r\n//        setTimeout(function() {\r\n//            TableGenerator.generateDLS(successor);\r\n//        }, 50);\r\n//    }\r\n"],[0,"    "]],"start1":990,"start2":990,"length1":349,"length2":8}]],"length":4704,"saved":false}
{"ts":1351113078831,"patch":[[{"diffs":[[0,"/ Combined\r\n"],[-1,"//"],[0,"    TableGen"]],"start1":821,"start2":821,"length1":26,"length2":24}]],"length":4702,"saved":false}
{"ts":1351113691200,"patch":[[{"diffs":[[0,"840;"],[-1," // 165148816"],[0,"\r\nTa"]],"start1":168,"start2":168,"length1":21,"length2":8}]],"length":4689,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351130293779,"patch":[[{"diffs":[[0,"Depth = "],[-1,"8"],[1,"5"],[0,";\r\n\r\nTab"]],"start1":393,"start2":393,"length1":17,"length2":17}]],"length":4689,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351130612747,"patch":[[{"diffs":[[0,"Depth = "],[-1,"5"],[1,"7"],[0,";\r\n\r\nTab"]],"start1":393,"start2":393,"length1":17,"length2":17}]],"length":4689,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351130703963,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    //TableGenerator.generate();\r\n"],[0,"});\r"]],"start1":56,"start2":56,"length1":42,"length2":8}]],"length":4655,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351131029417,"patch":[[{"diffs":[[0,"on Table"],[-1,"Generator"],[1,"s"],[0,"() {}\r\n\r"]],"start1":73,"start2":73,"length1":25,"length2":17},{"diffs":[[0,"\n\r\nTable"],[-1,"Generator"],[1,"s"],[0,".corner"],[1,"s"],[0,"DbSize ="]],"start1":88,"start2":88,"length1":32,"length2":25},{"diffs":[[0,"9840;\r\nTable"],[-1,"Generator"],[1,"s"],[0,".edge"],[1,"s"],[0,"DbSize = 425"]],"start1":118,"start2":118,"length1":38,"length2":31},{"diffs":[[0,"20;\r\n\r\nTable"],[-1,"Generator"],[1,"s"],[0,".cornerDatab"]],"start1":152,"start2":152,"length1":33,"length2":25},{"diffs":[[0,"null;\r\nTable"],[-1,"Generator"],[1,"s"],[0,".edgesTopDat"]],"start1":183,"start2":183,"length1":33,"length2":25},{"diffs":[[0,"null;\r\nTable"],[-1,"Generator"],[1,"s"],[0,".edgesBottom"]],"start1":216,"start2":216,"length1":33,"length2":25},{"diffs":[[0," = null;\r\n\r\n"],[1,"Tables.load = function()\r\n{\r\n    \r\n};\r\n\r\nfunction TableGenerator() {}\r\n\r\n"],[0,"TableGenerat"]],"start1":249,"start2":249,"length1":24,"length2":97},{"diffs":[[0," \r\n    Table"],[-1,"Generator"],[1,"s"],[0,".cornerDatab"]],"start1":443,"start2":443,"length1":33,"length2":25},{"diffs":[[0,"se(Table"],[-1,"Generator"],[1,"s"],[0,".corner"],[1,"s"],[0,"DbSize);"]],"start1":491,"start2":491,"length1":32,"length2":25},{"diffs":[[0,"\n//    Table"],[-1,"Generator"],[1,"s"],[0,".edgesTopDat"]],"start1":517,"start2":517,"length1":33,"length2":25},{"diffs":[[0,"tabase(Table"],[-1,"Generator"],[1,"s"],[0,".edge"],[1,"s"],[0,"DbSize);\r\n//"]],"start1":563,"start2":563,"length1":38,"length2":31},{"diffs":[[0,"\n//    Table"],[-1,"Generator"],[1,"s"],[0,".edgesBottom"]],"start1":591,"start2":591,"length1":33,"length2":25},{"diffs":[[0,"tabase(Table"],[-1,"Generator"],[1,"s"],[0,".edge"],[1,"s"],[0,"DbSize);\r\n  "]],"start1":640,"start2":640,"length1":38,"length2":31},{"diffs":[[0,"wnload(Table"],[-1,"Generator"],[1,"s"],[0,".cornerDatab"]],"start1":1004,"start2":1004,"length1":33,"length2":25},{"diffs":[[0,"wnload(Table"],[-1,"Generator"],[1,"s"],[0,".edgesTopDat"]],"start1":1067,"start2":1067,"length1":33,"length2":25},{"diffs":[[0,"wnload(Table"],[-1,"Generator"],[1,"s"],[0,".edgesBottom"]],"start1":1153,"start2":1153,"length1":33,"length2":25},{"diffs":[[0,"alue = Table"],[-1,"Generator"],[1,"s"],[0,".cornerDatab"]],"start1":1810,"start2":1810,"length1":33,"length2":25},{"diffs":[[0,"       Table"],[-1,"Generator"],[1,"s"],[0,".cornerDatab"]],"start1":1901,"start2":1901,"length1":33,"length2":25},{"diffs":[[0,"Top) % Table"],[-1,"Generator"],[1,"s"],[0,".edge"],[1,"s"],[0,"DbSize;\r\n   "]],"start1":2095,"start2":2095,"length1":38,"length2":31},{"diffs":[[0,"alue = Table"],[-1,"Generator"],[1,"s"],[0,".edgesTopDat"]],"start1":2128,"start2":2128,"length1":33,"length2":25},{"diffs":[[0,"       Table"],[-1,"Generator"],[1,"s"],[0,".edgesTopDat"]],"start1":2221,"start2":2221,"length1":33,"length2":25},{"diffs":[[0," % Table"],[-1,"Generator"],[1,"s"],[0,".edge"],[1,"s"],[0,"DbSize;\r"]],"start1":2372,"start2":2372,"length1":30,"length2":23},{"diffs":[[0,"alue = Table"],[-1,"Generator"],[1,"s"],[0,".edgesBottom"]],"start1":2401,"start2":2401,"length1":33,"length2":25},{"diffs":[[0,"   Table"],[-1,"Generator"],[1,"s"],[0,".edgesBo"]],"start1":2501,"start2":2501,"length1":25,"length2":17},{"diffs":[[0," % Table"],[-1,"Generator"],[1,"s"],[0,".corner"],[1,"s"],[0,"DbSize;\r"]],"start1":3436,"start2":3436,"length1":32,"length2":25},{"diffs":[[0,"alue = Table"],[-1,"Generator"],[1,"s"],[0,".cornerDatab"]],"start1":3475,"start2":3475,"length1":33,"length2":25},{"diffs":[[0,"   Table"],[-1,"Generator"],[1,"s"],[0,".cornerD"]],"start1":3695,"start2":3695,"length1":25,"length2":17}]],"length":4528,"saved":false}
{"ts":1351131091668,"patch":[[{"diffs":[[0,"\n{\r\n    "],[1,"if (!Tables.cornerDatabase)\r\n        Tables.cornerDatabase = new PatternDatabase(Tables.cornersDbSize);\r\n    \r\n    \r\n    \r\n    // TODO - edges"],[0,"\r\n};\r\n\r\n"]],"start1":286,"start2":286,"length1":16,"length2":158}]],"length":4670,"saved":false}
{"ts":1351131139431,"patch":[[{"diffs":[[0,"();\r\n});\r\n\r\n"],[1,"/**\r\n * Handles interaction with the tables.\r\n */\r\n"],[0,"function Tab"]],"start1":55,"start2":55,"length1":24,"length2":75},{"diffs":[[0," = null;\r\n\r\n"],[1,"/**\r\n * Loads the tables into memory\r\n */\r\n"],[0,"Tables.load "]],"start1":300,"start2":300,"length1":24,"length2":67},{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"/**\r\n * Handles table generation.\r\n */\r\n"],[0,"function"]],"start1":530,"start2":530,"length1":16,"length2":56}]],"length":4804,"saved":false}
{"ts":1351131800894,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n    \r\n    // TODO - edges"],[1,"Tables.cornerDatabase.loadFromFile(\"tables/corners_table_depth5.txt\");\r\n    \r\n    // TODO - edges\r\n};\r\n\r\nTables.cornerHeuristic = function(state)\r\n{\r\n    "],[0,"\r\n};"]],"start1":499,"start2":499,"length1":35,"length2":162}]],"length":4931,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351132304303,"patch":[[{"diffs":[[0,"unction("],[-1,"s"],[1,"rubixS"],[0,"tate)\r\n{"]],"start1":634,"start2":634,"length1":17,"length2":22},{"diffs":[[0,"\n{\r\n    "],[1,"var key = RubixState.hashCorners(rubixState);\r\n    var value = Tables.cornerDatabase.get(key);\r\n    \r\n    return value == null ? 0 : value;"],[0,"\r\n};\r\n\r\n"]],"start1":654,"start2":654,"length1":16,"length2":155}]],"length":5075,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351133031891,"patch":[[{"diffs":[[0,"dges\r\n};\r\n\r\n"],[1,"/**\r\n * Given a rubix state, returns the corners table heuristic.\r\n * @param rubixState the state\r\n * @return the corner table heuristic\r\n */\r\n"],[0,"Tables.corne"]],"start1":596,"start2":596,"length1":24,"length2":167},{"diffs":[[0,"pth = 7;\r\n\r\n"],[1,"/**\r\n * Generates the heuristic tables.\r\n */\r\n"],[0,"TableGenerat"]],"start1":1078,"start2":1078,"length1":24,"length2":70}]],"length":5264,"saved":false}
{"ts":1351133092776,"patch":[[{"diffs":[[0,"des = 1;\r\n\r\n"],[1,"/**\r\n * Performs table generation using a depth-liminited algorithm started with the\r\n * specified node.\r\n * @param node the node to start the generation at\r\n */\r\n"],[0,"TableGenerat"]],"start1":2382,"start2":2382,"length1":24,"length2":187}]],"length":5427,"saved":false}
{"ts":1351133236156,"patch":[[{"diffs":[[0,"hm start"],[-1,"ed"],[1,"ing"],[0," with th"]],"start1":2459,"start2":2459,"length1":18,"length2":19},{"diffs":[[0,"art the "],[-1,"generation"],[1,"search"],[0," at\r\n */"]],"start1":2530,"start2":2530,"length1":26,"length2":22}]],"length":5424,"saved":false}
{"ts":1351133313170,"patch":[[{"diffs":[[0,"tor() {}\r\n\r\n"],[1,"// The maximum depths to go to with each search algorithm\r\n"],[0,"TableGenerat"]],"start1":1012,"start2":1012,"length1":24,"length2":83},{"diffs":[[0," + \"M\");\r\n};\r\n\r\n"],[1,"/**\r\n * Performs table generation using a breadth-first search algorithm starting \r\n * with the specified node.\r\n * @param node the node to start the search at\r\n */\r\n"],[0,"TableGenerator.g"]],"start1":3971,"start2":3971,"length1":32,"length2":198}]],"length":5649,"saved":false}
{"ts":1351136221608,"patch":[[{"diffs":[[0,"Depth = "],[-1,"7"],[1,"8"],[0,";\r\n\r\n/**"]],"start1":1135,"start2":1135,"length1":17,"length2":17}]],"length":5649,"saved":false}
{"ts":1351136230809,"patch":[[{"diffs":[[0,"Nodes++ % 100000"],[1,"0"],[0," === 0)\r\n       "]],"start1":3887,"start2":3887,"length1":32,"length2":33}]],"length":5650,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1351184069524,"patch":[[{"diffs":[[0," + \"M\");\r\n};\r\n\r\n"],[1,"/**\r\n * Performs table generation using a recursive breadth-first search algorithm \r\n * starting with the specified node.\r\n * @param node the node to start the search at\r\n */\r\nTableGenerator.generateBreadthRecursive = function(node)\r\n{\r\n    \r\n};\r\n\r\n"],[0,"/**\r\n * Performs"]],"start1":3972,"start2":3972,"length1":32,"length2":281}]],"length":5899,"saved":false}
{"ts":1351184355031,"patch":[[{"diffs":[[0,"node)\r\n{"],[1,"    "],[0,"\r\n    "],[1,"var key = RubixState.hashCorners(nodes[index].rubixState);// % Tables.cornersDbSize;\r\n    var value = Tables.cornerDatabase.get(key);\r\n    \r\n    // Do not replace existing value as that will effect an inadmissible heuristic.\r\n    if (value === 0 || value > node.depth)\r\n        Tables.cornerDatabase.set(key, node.depth);\r\n    else // State already enumerated\r\n    {\r\n        RubixNode.wipeBadChain(nodes[index]);\r\n        return;\r\n    }\r\n    \r\n    var nodes = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < node.length; index++)\r\n    {\r\n        \r\n    }"],[0,"\r\n};\r\n\r\n"]],"start1":4215,"start2":4215,"length1":22,"length2":602}]],"length":6479,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1351185034855,"patch":[[{"diffs":[[0," + \"M\");\r\n};\r\n\r\n"],[1,"TableGenerator.breadthFrontier = [];\r\n\r\n"],[0,"/**\r\n * Performs"]],"start1":3972,"start2":3972,"length1":32,"length2":72},{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    if (node.depth === TableGenerator.breadthDepth)\r\n        return;\r\n    \r\n"],[0,"    var nodes = "]],"start1":4702,"start2":4702,"length1":32,"length2":108},{"diffs":[[0,"+)\r\n    "],[-1,"{\r\n        "],[1,"    TableGenerator.breadthFrontier.push(node[index]);\r\n    \r\n    if (TableGenerator.breadthFrontier.length > 0)\r\n    {\r\n        setTimeout(function() {\r\n            TableGenerator.generateBreadthRecursive(node);\r\n        }, 0);"],[0,"\r\n    }\r"]],"start1":4899,"start2":4899,"length1":27,"length2":243}]],"length":6811,"saved":false}
{"ts":1351186505394,"patch":[[{"diffs":[[0,"/ Combined\r\n"],[1,"//"],[0,"    TableGen"]],"start1":1551,"start2":1551,"length1":24,"length2":26},{"diffs":[[0,"Node);\r\n  \r\n"],[1,"    TableGenerator.generateBreadthRecursive(initialNode);\r\n    \r\n"],[0,"    // Bread"]],"start1":1608,"start2":1608,"length1":24,"length2":89}]],"length":6878,"saved":false}
{"ts":1351186576674,"patch":[[{"diffs":[[0,"0);\r\n    }\r\n"],[1,"    \r\n    if (TableGenerator.numNodes++ % 1000000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n"],[0,"};\r\n\r\n/**\r\n "]],"start1":5198,"start2":5198,"length1":24,"length2":151}]],"length":7005,"saved":false}
{"ts":1351186628562,"patch":[[{"diffs":[[0,"ers(node"],[-1,"s[index].rubixState"],[0,");// % T"]],"start1":4369,"start2":4369,"length1":35,"length2":16}]],"length":6986,"saved":false}
{"ts":1351186679301,"patch":[[{"diffs":[[0,"Nodes++ % 100000"],[-1,"0"],[0," === 0)\r\n       "]],"start1":5223,"start2":5223,"length1":33,"length2":32}]],"length":6985,"saved":false}
{"ts":1351186768415,"patch":[[{"diffs":[[0,"     }, "],[1,"1"],[0,"0);\r\n   "]],"start1":5171,"start2":5171,"length1":16,"length2":17}]],"length":6986,"saved":false}
{"ts":1351187652875,"patch":[[{"diffs":[[0,"x < node"],[1,"s"],[0,".length;"]],"start1":4924,"start2":4924,"length1":16,"length2":17},{"diffs":[[0,"ush(node"],[1,"s"],[0,"[index])"]],"start1":4992,"start2":4992,"length1":16,"length2":17}]],"length":6988,"saved":false}
{"ts":1351188088743,"patch":[[{"diffs":[[0,"ive(node);\r\n"],[1,"        }, 0);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 100000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n};\r\n\r\nTableGenerator.generateBreadthRecursiveCallback = function(node)\r\n{    \r\n    var key = RubixState.hashCorners(node);// % Tables.cornersDbSize;\r\n    var value = Tables.cornerDatabase.get(key);\r\n    \r\n    // Do not replace existing value as that will effect an inadmissible heuristic.\r\n    if (value === 0 || value > node.depth)\r\n        Tables.cornerDatabase.set(key, node.depth);\r\n    else // State already enumerated\r\n    {\r\n        RubixNode.wipeBadChain(nodes[index]);\r\n        return;\r\n    }\r\n    \r\n    if (node.depth === TableGenerator.breadthDepth)\r\n        return;\r\n    \r\n    var nodes = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < nodes.length; index++)\r\n        TableGenerator.breadthFrontier.push(nodes[index]);\r\n    \r\n    if (TableGenerator.breadthFrontier.length > 0)\r\n    {\r\n        setTimeout(function() {\r\n            TableGenerator.generateBreadthRecursive(node);\r\n"],[0,"        }, 1"]],"start1":5158,"start2":5158,"length1":24,"length2":1086}]],"length":8050,"saved":false}
{"ts":1351188096161,"patch":[[{"diffs":[[0,"numNodes++ % 100"],[-1,"000"],[0," === 0)\r\n       "]],"start1":5222,"start2":5222,"length1":35,"length2":32}]],"length":8047,"saved":false}
{"ts":1351188316047,"patch":[[{"diffs":[[0,"     }, "],[1,"10"],[0,"0);\r\n   "]],"start1":5173,"start2":5173,"length1":16,"length2":18}]],"length":8049,"saved":false}
{"ts":1351188328966,"patch":[[{"diffs":[[0,"de);\r\n\r\n"],[1,"//"],[0,"    File"]],"start1":1829,"start2":1829,"length1":16,"length2":18}]],"length":8051,"saved":false}
{"ts":1351188440127,"patch":[[{"diffs":[[0,"e);\r"],[-1,"\n\r\n//    FileOperator.presentForDownload(Tables.cornerDatabase);\r\n//    FileOperator.presentForDownload(Tables.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(Tables.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\");\r"],[0,"\n};\r"]],"start1":1830,"start2":1830,"length1":278,"length2":8},{"diffs":[[0,"tor."],[-1,"generateBreadthRecursiveCallback = function(node)\r\n{    \r\n    var key = RubixState.hashCorners(node);// % Tables.cornersDbSize;\r\n    var value = Tables.cornerDatabase.get(key);\r\n    \r\n    // Do not replace existing value as that will effect an inadmissible heuristic.\r\n    if (value === 0 || value > node.depth)\r\n        Tables.cornerDatabase.set(key, node.depth);\r\n    else // State already enumerated\r\n    {\r\n        RubixNode.wipeBadChain(nodes[index]);\r\n        return;\r\n    }\r\n    \r\n    if (node.depth === TableGenerator.breadthDepth)\r\n        return;\r\n    \r\n    var nodes = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < nodes.length; index++)\r\n        TableGenerator.breadthFrontier.push(nodes[index]);\r\n    \r\n    if (TableGenerator.breadthFrontier.length > 0)\r\n    {\r\n        setTimeout(function() {\r\n            TableGenerator.generateBreadthRecursive(node);\r\n        }, 10);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 100000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");"],[1,"finishGeneration = function()\r\n{    \r\n    "],[0,"\r\n};"]],"start1":5067,"start2":5067,"length1":1048,"length2":50}]],"length":6783,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1351191734308,"patch":[[{"diffs":[[0,"     }, "],[-1,"10"],[0,""],[1,""],[0,"0);\r\n   "]],"start1":4905,"start2":4905,"length1":18,"length2":16},{"diffs":[[0,"  \r\n    "],[1,"FileOperator.presentForDownload(Tables.cornerDatabase);\r\n//    FileOperator.presentForDownload(Tables.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(Tables.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\");"],[0,"\r\n};\r\n\r\n"]],"start1":5103,"start2":5103,"length1":16,"length2":276},{"diffs":[[0,"using a "],[1,"iterative "],[0,"breadth-"]],"start1":5413,"start2":5413,"length1":16,"length2":26}]],"length":7051,"saved":false}
{"ts":1351191972516,"patch":[[{"diffs":[[0,"nction() {\r\n"],[1,"            for (var index = 0; index < (TableGenerator.breadthFrontier.length > 10 ? 10 : TableGenerator.breadthFrontier.length); index++)\r\n    "],[0,"            "]],"start1":4830,"start2":4830,"length1":24,"length2":169},{"diffs":[[0,"cursive("],[-1,"node"],[1,"TableGenerator.breadthFrontier.pop()"],[0,");\r\n    "]],"start1":5031,"start2":5031,"length1":20,"length2":52}]],"length":7228,"saved":false}
{"ts":1351192100821,"patch":[[{"diffs":[[0,"ntier = "],[-1,"[]"],[1,"new Queue()"],[0,";\r\n\r\n/**"]],"start1":3812,"start2":3812,"length1":18,"length2":27},{"diffs":[[0,"rontier."],[-1,"push"],[1,"enqueue"],[0,"(nodes[i"]],"start1":4724,"start2":4724,"length1":20,"length2":23},{"diffs":[[0,"ier."],[-1,"pop"],[1,"dequeue"],[0,"());"]],"start1":5078,"start2":5078,"length1":11,"length2":15}]],"length":7244,"saved":false}
{"ts":1351192228757,"patch":[[{"diffs":[[0,"> 10"],[1,"0"],[0," ? 10"],[1,"0"],[0," : T"]],"start1":4933,"start2":4933,"length1":13,"length2":15}]],"length":7246,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1351193504399,"patch":[[{"diffs":[[0,"Depth = "],[-1,"4"],[1,"5"],[0,";\r\nTable"]],"start1":1105,"start2":1105,"length1":17,"length2":17},{"diffs":[[0,"Node);\r\n  \r\n"],[1,"//"],[0,"    TableGen"]],"start1":1608,"start2":1608,"length1":24,"length2":26},{"diffs":[[0," first\r\n"],[-1,"//"],[0,"    Tabl"]],"start1":1701,"start2":1701,"length1":18,"length2":16},{"diffs":[[0,"lNode);\r"],[1,"\n\r\n    TableGenerator.finishGeneration();\r"],[0,"\n};\r\n\r\nT"]],"start1":1826,"start2":1826,"length1":16,"length2":58},{"diffs":[[0,"r = "],[-1,"new Queue()"],[1,"[]"],[0,";\r\n\r"]],"start1":3858,"start2":3858,"length1":19,"length2":10},{"diffs":[[0,"n(node)\r\n{    \r\n"],[1,"    console.log(\"R\");\r\n"],[0,"    var key = Ru"]],"start1":4094,"start2":4094,"length1":32,"length2":55},{"diffs":[[0,"adChain(node"],[-1,"s[index]"],[0,""],[1,""],[0,");\r\n        "]],"start1":4509,"start2":4509,"length1":32,"length2":24},{"diffs":[[0,"ier."],[-1,"enqueue"],[1,"push"],[0,"(nod"]],"start1":4776,"start2":4776,"length1":15,"length2":12},{"diffs":[[0,"            "],[1,"//"],[0,"for (var ind"]],"start1":4899,"start2":4899,"length1":24,"length2":26},{"diffs":[[0,"ier."],[-1,"dequeue"],[1,"shift"],[0,"());"]],"start1":5127,"start2":5127,"length1":15,"length2":13},{"diffs":[[0,"ors(nodes[index]"],[-1,""],[0,""],[1,", successors"],[0,");\r\n            "]],"start1":6779,"start2":6779,"length1":32,"length2":44}]],"length":7303,"saved":false}
{"ts":1351193659953,"patch":[[{"diffs":[[0,"    "],[-1," theseSuccessors ="],[0," Rub"]],"start1":6736,"start2":6736,"length1":26,"length2":8},{"diffs":[[0,");\r\n"],[-1,"            for (jndex = 0; jndex < theseSuccessors.length; jndex++)\r\n                successors.push(theseSuccessors[jndex]);         \r\n"],[0,"    "]],"start1":6840,"start2":6840,"length1":145,"length2":8}]],"length":7148,"saved":false}
{"ts":1351193725687,"patch":[[{"diffs":[[0,"   \r\n           "],[1," theseSuccessors ="],[0," RubixNode.getSu"]],"start1":6724,"start2":6724,"length1":32,"length2":50},{"diffs":[[0,"nodes[index]);\r\n"],[1,"            for (jndex = 0; jndex < theseSuccessors.length; jndex++)\r\n                successors.push(theseSuccessors[jndex]);         \r\n"],[0,"            \r\n  "]],"start1":6846,"start2":6846,"length1":32,"length2":169}]],"length":7303,"saved":false}
{"ts":1351193751207,"patch":[[{"diffs":[[0,"ccessors"],[1," = []"],[0,", depth,"]],"start1":5922,"start2":5922,"length1":16,"length2":21},{"diffs":[[0,"        "],[-1," theseSuccessors ="],[0," RubixNo"]],"start1":6737,"start2":6737,"length1":34,"length2":16},{"diffs":[[0,"index], "],[-1,"s"],[1,"theseS"],[0,"uccessor"]],"start1":6776,"start2":6776,"length1":17,"length2":22}]],"length":7295,"saved":false}
{"ts":1351194338331,"patch":[[{"diffs":[[0,"es\r\n            "],[1,"console.log(theseSuccessors);"],[0,"\r\n            Ru"]],"start1":6716,"start2":6716,"length1":32,"length2":61}]],"length":7324,"saved":false}
{"ts":1351194457581,"patch":[[{"diffs":[[0," var"],[-1," nodes = RubixNode.getSuccessors(node),"],[0," suc"]],"start1":5854,"start2":5854,"length1":47,"length2":8},{"diffs":[[0,", value;\r\n    \r\n"],[1,"    RubixNode.getSuccessors(node, successors);\r\n    \r\n"],[0,"    for (depth ="]],"start1":5931,"start2":5931,"length1":32,"length2":86},{"diffs":[[0,"\n    {        \r\n"],[1,"        nodes.length = 0\r\n        for (index = 0; index < successors.length; index++)\r\n            nodes.push(successors[index]);\r\n        \r\n"],[0,"        for (ind"]],"start1":6068,"start2":6068,"length1":32,"length2":173},{"diffs":[[0," }\r\n"],[-1,"        \r\n        nodes = successors.slice(0);\r\n        successors.length = 0; // Clear array\r\n"],[0,"    "]],"start1":7345,"start2":7345,"length1":103,"length2":8}]],"length":7385,"saved":false}
{"ts":1351194473086,"patch":[[{"diffs":[[0,"\r\n{    \r\n    var"],[1," nodes,"],[0," successors = []"]],"start1":5842,"start2":5842,"length1":32,"length2":39}]],"length":7392,"saved":false}
{"ts":1351194504982,"patch":[[{"diffs":[[0,"ar nodes"],[1," = []"],[0,", succes"]],"start1":5856,"start2":5856,"length1":16,"length2":21}]],"length":7397,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351212165564,"patch":[[{"diffs":[[0,"nction() {\r\n"],[1,"    if (!FileOperator.operator)\r\n    "],[0,"    FileOper"]],"start1":22,"start2":22,"length1":24,"length2":61},{"diffs":[[0,"nit();\r\n"],[-1,""],[0,"});\r\n\r\n/"]],"start1":89,"start2":89,"length1":16,"length2":16},{"diffs":[[0,"istic.\r\n"],[1," * \r\n"],[0," * @para"]],"start1":704,"start2":704,"length1":16,"length2":21},{"diffs":[[0," state\r\n"],[1," * \r\n"],[0," * @retu"]],"start1":741,"start2":741,"length1":16,"length2":21},{"diffs":[[0,"\r\n\r\n"],[-1,"TableGenerator.breadthFrontier = [];\r\n\r\n/**\r\n * Performs table generation using a recursive breadth-first search algorithm \r\n * starting with the specified node.\r\n * @param node the node to start the search at\r\n */\r\nTableGenerator.generateBreadthRecursive = function(node)\r\n{    \r\n    console.log(\"R\");\r\n    var key = RubixState.hashCorners(node);// % Tables.cornersDbSize;\r\n    var value = Tables.cornerDatabase.get(key);\r\n    \r\n    // Do not replace existing value as that will effect an inadmissible heuristic.\r\n    if (value === 0 || value > node.depth)\r\n        Tables.cornerDatabase.set(key, node.depth);\r\n    else // State already enumerated\r\n    {\r\n        RubixNode.wipeBadChain(node);\r\n        return;\r\n    }\r\n    \r\n    if (node.depth === TableGenerator.breadthDepth)\r\n        return;\r\n    \r\n    var nodes = RubixNode.getSuccessors(node);\r\n    \r\n    for (var index = 0; index < nodes.length; index++)\r\n        TableGenerator.breadthFrontier.push(nodes[index]);\r\n    \r\n    if (TableGenerator.breadthFrontier.length > 0)\r\n    {\r\n        setTimeout(function() {\r\n            //for (var index = 0; index < (TableGenerator.breadthFrontier.length > 100 ? 100 : TableGenerator.breadthFrontier.length); index++)\r\n                TableGenerator.generateBreadthRecursive(TableGenerator.breadthFrontier.shift());\r\n        }, 0);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 100 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n};\r\n\r\n"],[0,"Tabl"]],"start1":3872,"start2":3872,"length1":1473,"length2":8},{"diffs":[[0,"DONE!\");\r\n};\r\n\r\n"],[1,"TableGenerator.breadthFrontier = [];\r\n\r\n"],[0,"/**\r\n * Performs"]],"start1":4185,"start2":4185,"length1":32,"length2":72},{"diffs":[[0,"odes"],[-1,".length = 0\r\n        for (index = 0; index < successors.length; index++)\r\n            nodes.push(successors[index]"],[1," = successors.slice(0"],[0,");\r\n"]],"start1":4727,"start2":4727,"length1":122,"length2":29},{"diffs":[[0,"                "],[1,"//"],[0,"RubixNode.wipeBa"]],"start1":5277,"start2":5277,"length1":32,"length2":34},{"diffs":[[0,"    "],[-1,"console.log(theseSuccessors);"],[0,"\r\n  "]],"start1":5427,"start2":5427,"length1":37,"length2":8},{"diffs":[[0,"ccessors);\r\n"],[-1,""],[0,"            "]],"start1":5490,"start2":5490,"length1":24,"length2":24},{"diffs":[[0,");\r\n            "],[1,"//"],[0,"RubixNode.wipeBa"]],"start1":5498,"start2":5498,"length1":32,"length2":34}]],"length":5901,"saved":false}
{"ts":1351212219954,"patch":[[{"diffs":[[0,"s.corner"],[1,"s"],[0,"Heuristi"]],"start1":803,"start2":803,"length1":16,"length2":17},{"diffs":[[0,": value;\r\n};\r\n\r\n"],[1,"/**\r\n * Given a rubix state, returns the corners table heuristic.\r\n * \r\n * @param rubixState the state\r\n * \r\n * @return the corner table heuristic\r\n */\r\nTables.edgesTopHeuristic = function(rubixState)\r\n{\r\n    var key = RubixState.hashTopEdges(rubixState);\r\n    var value = Tables.cornerDatabase.get(key);\r\n    \r\n    return value == null ? 0 : value;\r\n};\r\n\r\n"],[0,"/**\r\n * Handles "]],"start1":984,"start2":984,"length1":32,"length2":389}]],"length":6259,"saved":false}
{"ts":1351212228320,"patch":[[{"diffs":[[0," value = Tables."],[-1,"corner"],[1,"edgesTop"],[0,"Database.get(key"]],"start1":1264,"start2":1264,"length1":38,"length2":40}]],"length":6261,"saved":false}
{"ts":1351212260520,"patch":[[{"diffs":[[0,"rubixState)\r\n{\r\n"],[1,"    if (!Tables.cornerDatabase)\r\n        return 0;\r\n    \r\n"],[0,"    var key = Ru"]],"start1":833,"start2":833,"length1":32,"length2":90},{"diffs":[[0,"xState)\r\n{\r\n"],[1,"    if (!Talbes.edgesTopDatabase)\r\n        return 0;\r\n    \r\n"],[0,"    var key "]],"start1":1251,"start2":1251,"length1":24,"length2":84}]],"length":6379,"saved":false}
{"ts":1351212273806,"patch":[[{"diffs":[[0,"te, returns the "],[-1,"corner"],[1,"top edge"],[0,"s table heuristi"]],"start1":1083,"start2":1083,"length1":38,"length2":40}]],"length":6381,"saved":false}
{"ts":1351212292599,"patch":[[{"diffs":[[0,"\n * @return the "],[-1,"corner"],[1,"top edges table heuristic\r\n */\r\nTables.edgesTopHeuristic = function(rubixState)\r\n{\r\n    if (!Talbes.edgesTopDatabase)\r\n        return 0;\r\n    \r\n    var key = RubixState.hashTopEdges(rubixState);\r\n    var value = Tables.edgesTopDatabase.get(key);\r\n    \r\n    return value == null ? 0 : value;\r\n};\r\n\r\n/**\r\n * Given a rubix state, returns the bottom edges table heuristic.\r\n * \r\n * @param rubixState the state\r\n * \r\n * @return the bottom edges"],[0," table heuristic"]],"start1":1168,"start2":1168,"length1":38,"length2":471}]],"length":6814,"saved":false}
{"ts":1351212313502,"patch":[[{"diffs":[[0,"\r\n{\r\n    if (!Ta"],[-1,"l"],[0,"b"],[1,"l"],[0,"es.edgesTopDatab"]],"start1":1263,"start2":1263,"length1":34,"length2":34},{"diffs":[[0,"(!Ta"],[-1,"l"],[0,"b"],[1,"l"],[0,"es.e"]],"start1":1705,"start2":1705,"length1":10,"length2":10},{"diffs":[[0," RubixState.hash"],[-1,"Top"],[1,"Bottom"],[0,"Edges(rubixState"]],"start1":1771,"start2":1771,"length1":35,"length2":38},{"diffs":[[0,"e = Tables.edges"],[-1,"Top"],[1,"Bottom"],[0,"Database.get(key"]],"start1":1825,"start2":1825,"length1":35,"length2":38}]],"length":6820,"saved":false}
{"ts":1351212341809,"patch":[[{"diffs":[[0,"*/\r\nTables.edges"],[-1,"Top"],[1,"Bottom"],[0,"Heuristic = func"]],"start1":1642,"start2":1642,"length1":35,"length2":38},{"diffs":[[0,"f (!Tables.edges"],[-1,"Top"],[1,"Bottom"],[0,"Database)\r\n     "]],"start1":1706,"start2":1706,"length1":35,"length2":38},{"diffs":[[0,"Depth = "],[-1,"5"],[1,"4"],[0,";\r\nTable"]],"start1":2077,"start2":2077,"length1":17,"length2":17}]],"length":6826,"saved":false}
{"ts":1351212388111,"patch":[[{"diffs":[[0,"/ Combined\r\n"],[-1,"//"],[0,"    TableGen"]],"start1":2523,"start2":2523,"length1":26,"length2":24},{"diffs":[[0,");\r\n"],[-1,"  \r\n//    TableGenerator.generateBreadthRecursive(initialNode);\r\n"],[0,"    "]],"start1":2582,"start2":2582,"length1":73,"length2":8},{"diffs":[[0," first\r\n"],[1,"//"],[0,"    Tabl"]],"start1":2606,"start2":2606,"length1":16,"length2":18},{"diffs":[[0,"\r\n\r\n"],[-1,"TableGenerator.finishGeneration = function()\r\n{    \r\n    FileOperator.presentForDownload(Tables.cornerDatabase);\r\n//    FileOperator.presentForDownload(Tables.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(Tables.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\");\r\n};\r\n\r\nTableGenerator.breadthFrontier = [];\r\n\r\n"],[0,"/**\r"]],"start1":4732,"start2":4732,"length1":373,"length2":8},{"diffs":[[0,"rn nodes"],[-1,""],[0,""],[1,";\r\n};\r\n\r\nTableGenerator.finishGeneration = function()\r\n{    \r\n    FileOperator.presentForDownload(Tables.cornerDatabase);\r\n//    FileOperator.presentForDownload(Tables.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(Tables.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\")"],[0,";\r\n};\r\n"]],"start1":6381,"start2":6381,"length1":15,"length2":340}]],"length":6721,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351212421231,"patch":[[{"diffs":[[0,"    "],[-1,"TableGenerator.finishGeneration("],[1,"FileOperator.presentForDownload(Tables.cornerDatabase);\r\n//    FileOperator.presentForDownload(Tables.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(Tables.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\""],[0,");\r\n"]],"start1":2744,"start2":2744,"length1":40,"length2":266},{"diffs":[[0,"};\r\n"],[-1,"\r\nTableGenerator.finishGeneration = function()\r\n{    \r\n    FileOperator.presentForDownload(Tables.cornerDatabase);\r\n//    FileOperator.presentForDownload(Tables.edgesTopDatabase, \"edgesTopTable.txt\");\r\n//    FileOperator.presentForDownload(Tables.edgesBottomDatabase, \"edgesBottomTable.txt\");\r\n    console.log(\"DONE!\");\r\n};\r\n"]],"start1":6618,"start2":6618,"length1":329,"length2":4}]],"length":6622,"saved":false}
{"ts":1351212488299,"patch":[[{"diffs":[[0,"te);"],[-1,"// % Tables.cornersDbSize;"],[0,"\r\n  "]],"start1":5616,"start2":5616,"length1":34,"length2":8}]],"length":6596,"saved":false}
{"ts":1351212547346,"patch":[[{"diffs":[[0,"                "],[-1,"//"],[0,"RubixNode.wipeBa"]],"start1":5972,"start2":5972,"length1":34,"length2":32}]],"length":6594,"saved":false}
{"ts":1351212570318,"patch":[[{"diffs":[[0," {\r\n"],[-1,"                RubixNode.wipeBadChain(nodes[index]);\r\n"],[0,"    "]],"start1":5968,"start2":5968,"length1":63,"length2":8},{"diffs":[[0,"    "],[-1,"//RubixNode.wipeBadChain(nodes[index]);"],[0,"\r\n  "]],"start1":6148,"start2":6148,"length1":47,"length2":8}]],"length":6500,"saved":false}
{"ts":1351212604146,"patch":[[{"diffs":[[0,"essors ="],[1," [];\r\n   "],[0," RubixNo"]],"start1":4599,"start2":4599,"length1":16,"length2":25},{"diffs":[[0,"cessors(node"],[1,", successors"],[0,");\r\n    \r\n  "]],"start1":4633,"start2":4633,"length1":24,"length2":36}]],"length":6521,"saved":false}
{"ts":1351212692026,"patch":[[{"diffs":[[0,".slice(0);\r\n"],[1,"        successors.length = 0;\r\n"],[0,"        \r\n  "]],"start1":5486,"start2":5486,"length1":24,"length2":56}]],"length":6553,"saved":false}
{"ts":1351212852717,"patch":[[{"diffs":[[0,"base"],[-1,", \"edgesTopTable.txt\""],[0,");\r\n"]],"start1":2862,"start2":2862,"length1":29,"length2":8},{"diffs":[[0,"base"],[-1,", \"edgesBottomTable.txt\""],[0,");\r\n"]],"start1":2930,"start2":2930,"length1":32,"length2":8}]],"length":6508,"saved":false}
{"ts":1351213026815,"patch":[[{"diffs":[[0,"Depth = "],[-1,"8"],[1,"5"],[0,";\r\n\r\n/**"]],"start1":2107,"start2":2107,"length1":17,"length2":17}]],"length":6508,"saved":false}
{"ts":1351213121097,"patch":[[{"diffs":[[0,"ornersDbSize);\r\n"],[1,"        \r\n    if (!Tables.edgesTopDatabase)\r\n        Tables.edgesTopDatabase = new PatternDatabase(Tables.edgesDbSize);\r\n        \r\n    if (!Tables.edgesBottomDatabase)\r\n        Tables.edgesBottomDatabase = new PatternDatabase(Tables.edgesDbSize);\r\n"],[0,"    \r\n    Tables"]],"start1":514,"start2":514,"length1":32,"length2":280}]],"length":6756,"saved":false}
{"ts":1351213158254,"patch":[[{"diffs":[[0,"th5.txt\");\r\n"],[1,"    Tables.edgesTopDatabase.loadFromFile(\"tables/\");\r\n    Tables.edgesBottomDatabase.loadFromFile(\"tables/\");\r\n"],[0,"    \r\n    //"]],"start1":848,"start2":848,"length1":24,"length2":135}]],"length":6867,"saved":false}
{"ts":1351213171830,"patch":[[{"diffs":[[0,"ads the "],[1,"pattern da"],[0,"tab"],[-1,"l"],[1,"as"],[0,"es into "]],"start1":359,"start2":359,"length1":20,"length2":31},{"diffs":[[0,"o memory"],[1,"."],[0,"\r\n */\r\nT"]],"start1":388,"start2":388,"length1":16,"length2":17},{"diffs":[[0,");\r\n"],[-1,"    \r\n    // TODO - edges\r\n"],[0,"};\r\n"]],"start1":979,"start2":979,"length1":35,"length2":8}]],"length":6852,"saved":false}
{"ts":1351213202660,"patch":[[{"diffs":[[0,"Database);\r\n"],[1,"\r\n"],[0,"    console."]],"start1":3270,"start2":3270,"length1":24,"length2":26},{"diffs":[[0,"og(\""],[-1,"DONE!"],[1,"Table generation completed."],[0,"\");\r"]],"start1":3297,"start2":3297,"length1":13,"length2":35}]],"length":6876,"saved":false}
{"ts":1351213323401,"patch":[[{"diffs":[[0,"            "],[-1,""],[0,""],[1,"// Corners\r\n            "],[0,"key = RubixS"]],"start1":5930,"start2":5930,"length1":24,"length2":48},{"diffs":[[0,"ed\r\n"],[-1,"            {\r\n"],[0,"    "]],"start1":6353,"start2":6353,"length1":23,"length2":8},{"diffs":[[0,"    "],[-1,"}\r\n            \r\n            // TODO - edges"],[1,"    \r\n            // Top Edges\r\n            key = RubixState.hashTopEdges(nodes[index].rubixState);\r\n            value = Tables.edgesTopDatabase.get(key);\r\n            \r\n            if (value === 0 || value > nodes[index].depth)\r\n                Tables.edgesTopDatabase.set(key, nodes[index].depth);\r\n            else // State already enumerated\r\n                continue;\r\n            \r\n            // Bottom Edges\r\n            key = RubixState.hashBottomEdges(nodes[index].rubixState);\r\n            value = Tables.edgesBottomDatabase.get(key);\r\n            \r\n            if (value === 0 || value > nodes[index].depth)\r\n                Tables.edgesBottomDatabase.set(key, nodes[index].depth);\r\n            else // State already enumerated\r\n                continue;\r\n                "],[0,"\r\n  "]],"start1":6392,"start2":6392,"length1":52,"length2":792}]],"length":7625,"saved":false}
{"ts":1351213408267,"patch":[[{"diffs":[[0,") {}\r\n\r\n"],[1,"// Table to generate: 0 corners, 1 edges top, 2 edges bottoms\r\nTableGenerator.tablesToGenerate = 0;\r\n\r\n"],[0,"// The m"]],"start1":2332,"start2":2332,"length1":16,"length2":119}]],"length":7728,"saved":false}
{"ts":1351213409415,"patch":[[{"diffs":[[0,"s bottom"],[-1,"s"],[0,"\r\nTableG"]],"start1":2392,"start2":2392,"length1":17,"length2":16}]],"length":7727,"saved":false}
{"ts":1351213489355,"patch":[[{"diffs":[[0,"or.table"],[-1,"s"],[0,"ToGenera"]],"start1":2414,"start2":2414,"length1":17,"length2":16},{"diffs":[[0,"et(key);\r\n    \r\n"],[1,"    if (TableGenerator.tableToGenerate === 0)\r\n    {\r\n    "],[0,"    if (value =="]],"start1":4193,"start2":4193,"length1":32,"length2":90},{"diffs":[[0,"depth)\r\n        "],[1," "],[1,"   "],[0,"Tables.cornerDat"]],"start1":4303,"start2":4303,"length1":32,"length2":36},{"diffs":[[0,"de.depth);\r\n"],[1,"    "],[0,"    else // "]],"start1":4356,"start2":4356,"length1":24,"length2":28},{"diffs":[[0,"ady enumerated\r\n"],[1,"    "],[0,"        return;\r"]],"start1":4394,"start2":4394,"length1":32,"length2":36},{"diffs":[[0,"n;\r\n"],[-1,"/*  \r\n"],[1,"    }\r\n    else if (TableGenerator.tableToGenerate === 1)\r\n    {\r\n    "],[0,"    "]],"start1":4427,"start2":4427,"length1":14,"length2":78},{"diffs":[[0,"es Top\r\n    "],[1," "],[1,"   "],[0,"key = RubixS"]],"start1":4511,"start2":4511,"length1":24,"length2":28},{"diffs":[[0,"s.edgesDbSize;\r\n"],[1,"    "],[0,"    value = Tabl"]],"start1":4598,"start2":4598,"length1":32,"length2":36},{"diffs":[[0,".get(key);\r\n    "],[1,"    "],[0,"\r\n    "],[1," "],[1,"   "],[0,"if (value === 0 "]],"start1":4653,"start2":4653,"length1":38,"length2":46},{"diffs":[[0," > node.depth)\r\n"],[1,"    "],[0,"        Tables.e"]],"start1":4707,"start2":4707,"length1":32,"length2":36},{"diffs":[[0,"epth);\r\n    "],[-1,"\r\n"],[1,"    else // State already enumerated\r\n            return;\r\n    }\r\n    else if (TableGenerator.tableToGenerate === 2)\r\n    {\r\n    "],[0,"    // Edges"]],"start1":4774,"start2":4774,"length1":26,"length2":153},{"diffs":[[0,"Bottom\r\n"],[1,"    "],[0,"    key "]],"start1":4928,"start2":4928,"length1":16,"length2":20},{"diffs":[[0,"gesDbSize;\r\n"],[1,"    "],[0,"    value = "]],"start1":5022,"start2":5022,"length1":24,"length2":28},{"diffs":[[0,".get(key);\r\n    "],[-1,"\r\n"],[1,"    \r\n    "],[0,"    if (value =="]],"start1":5076,"start2":5076,"length1":34,"length2":42},{"diffs":[[0,"depth)\r\n        "],[1,"    "],[0,"Tables.edgesBott"]],"start1":5138,"start2":5138,"length1":32,"length2":36},{"diffs":[[0,"th);"],[1," "],[0,"\r\n"],[-1,"*/"],[0,"    "],[1,"    else // State already enumerated\r\n            return;\r\n    }"],[0,"\r\n  "]],"start1":5202,"start2":5202,"length1":16,"length2":79}]],"length":8090,"saved":false}
{"ts":1351213524566,"patch":[[{"diffs":[[0,"lue;\r\n    \r\n"],[1,"    if (TableGenerator.tableToGenerate === 0)\r\n    {\r\n    "],[0,"    // Corne"]],"start1":4078,"start2":4078,"length1":24,"length2":82},{"diffs":[[0,"// Corners\r\n"],[1,"    "],[0,"    key = Ru"]],"start1":4152,"start2":4152,"length1":24,"length2":28},{"diffs":[[0,"bixState);\r\n"],[1,"    "],[0,"    value = "]],"start1":4208,"start2":4208,"length1":24,"length2":28},{"diffs":[[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"if (TableGenerator.tableToGenerate === 0)\r\n    {"],[0,"\r\n  "]],"start1":4269,"start2":4269,"length1":62,"length2":12}]],"length":8106,"saved":false}
{"ts":1351213577891,"patch":[[{"diffs":[[0,"\n        {\r\n"],[1,"            if (TableGenerator.tableToGenerate === 0)\r\n            {\r\n    "],[0,"            "]],"start1":6399,"start2":6399,"length1":24,"length2":98},{"diffs":[[0,"    // Corners\r\n"],[1,"    "],[0,"            key "]],"start1":6493,"start2":6493,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"value = Tables.c"]],"start1":6577,"start2":6577,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"  "],[-1,"\r\n"],[1,"  \r\n    "],[0,"            // D"]],"start1":6634,"start2":6634,"length1":34,"length2":42},{"diffs":[[0,"c.\r\n            "],[1,"    "],[0,"if (value === 0 "]],"start1":6749,"start2":6749,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"Tables.cornerDat"]],"start1":6817,"start2":6817,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"else // State al"]],"start1":6886,"start2":6886,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"continue;\r\n     "]],"start1":6940,"start2":6940,"length1":32,"length2":36},{"diffs":[[0,"continue;\r\n     "],[1,"       }\r\n"],[0,"           \r\n   "]],"start1":6960,"start2":6960,"length1":32,"length2":42},{"diffs":[[0,"  }\r\n           "],[-1,"\r\n"],[1," else if (TableGenerator.tableToGenerate === 1)\r\n            {\r\n    "],[0,"            // T"]],"start1":6981,"start2":6981,"length1":34,"length2":100},{"diffs":[[0,"  // Top Edges\r\n"],[1,"    "],[0,"            key "]],"start1":7075,"start2":7075,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"  "],[1,"  "],[0,"value = Tables.e"]],"start1":7160,"start2":7160,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"\r\n            if"]],"start1":7219,"start2":7219,"length1":32,"length2":36},{"diffs":[[0,"  \r\n            "],[1,"    "],[0,"if (value === 0 "]],"start1":7237,"start2":7237,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"Tables.edgesTopD"]],"start1":7305,"start2":7305,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"else // State al"]],"start1":7376,"start2":7376,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"continue;\r\n     "]],"start1":7430,"start2":7430,"length1":32,"length2":36},{"diffs":[[0,"e;\r\n            "],[1,"}"],[0,"\r\n"],[1,"            else if (TableGenerator.tableToGenerate === 2)\r\n            {\r\n    "],[0,"            // B"]],"start1":7457,"start2":7457,"length1":34,"length2":114},{"diffs":[[0,"es\r\n            "],[1,"  "],[1,"  "],[0,"key = RubixState"]],"start1":7580,"start2":7580,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"value = Tables.e"]],"start1":7656,"start2":7656,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"\r\n            if"]],"start1":7718,"start2":7718,"length1":32,"length2":36},{"diffs":[[0,"  \r\n            "],[1," "],[1,"   "],[0,"if (value === 0 "]],"start1":7736,"start2":7736,"length1":32,"length2":36},{"diffs":[[0,"[index].depth)\r\n"],[1,"    "],[0,"                "]],"start1":7788,"start2":7788,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"   "],[1," "],[0,"else // State al"]],"start1":7878,"start2":7878,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"continue;\r\n     "]],"start1":7932,"start2":7932,"length1":32,"length2":36},{"diffs":[[0,"     continue;\r\n"],[1,"            }\r\n"],[0,"                "]],"start1":7947,"start2":7947,"length1":32,"length2":47}]],"length":8439,"saved":false}
{"ts":1351213584666,"patch":[[{"diffs":[[0,"     }\r\n"],[-1,"                \r\n"],[0,"        "]],"start1":7970,"start2":7970,"length1":34,"length2":16}]],"length":8421,"saved":false}
{"ts":1351213622120,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * Performs table generation using a depth-liminited algorithm starting with the\r\n * specified node.\r\n * @param node the node to start the search at\r\n */\r\nTableGenerator.generateDLS = function(node)\r\n{    \r\n    var key, value;\r\n    \r\n    if (TableGenerator.tableToGenerate === 0)\r\n    {\r\n        // Corners\r\n        key = RubixState.hashCorners(node.rubixState);\r\n        value = Tables.cornerDatabase.get(key);\r\n        \r\n        if (value === 0 || value > node.depth)\r\n            Tables.cornerDatabase.set(key, node.depth);\r\n        else // State already enumerated\r\n            return;\r\n    }\r\n    else if (TableGenerator.tableToGenerate === 1)\r\n    {\r\n        // Edges Top\r\n        key = RubixState.hashCode(node.rubixState, RubixState.edgesTop) % Tables.edgesDbSize;\r\n        value = Tables.edgesTopDatabase.get(key);\r\n        \r\n        if (value === 0 || value > node.depth)\r\n            Tables.edgesTopDatabase.set(key, node.depth);\r\n        else // State already enumerated\r\n            return;\r\n    }\r\n    else if (TableGenerator.tableToGenerate === 2)\r\n    {\r\n        // Edges Bottom\r\n        key = RubixState.hashCode(node.rubixState, RubixState.edgesBottom) % Tables.edgesDbSize;\r\n        value = Tables.edgesBottomDatabase.get(key);\r\n        \r\n        if (value === 0 || value > node.depth)\r\n            Tables.edgesBottomDatabase.set(key, node.depth); \r\n        else // State already enumerated\r\n            return;\r\n    }\r\n    \r\n    // Base case\r\n    if (node.depth === TableGenerator.dlsDepth)\r\n        return;\r\n    \r\n    var successors = [];\r\n    RubixNode.getSuccessors(node, successors);\r\n    \r\n    for (var index = 0; index < successors.length; index++)\r\n    {\r\n        TableGenerator.generateDLS(successors[index]);\r\n        RubixNode.wipeBadChain(successors[index]);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 1000000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n};\r\n\r\n"],[0,"/**\r"]],"start1":3847,"start2":3847,"length1":1944,"length2":8},{"diffs":[[0,"nodes;\r\n};\r\n"],[1,"\r\n/**\r\n * Performs table generation using a depth-liminited algorithm starting with the\r\n * specified node.\r\n * @param node the node to start the search at\r\n */\r\nTableGenerator.generateDLS = function(node)\r\n{    \r\n    var key, value;\r\n    \r\n    if (TableGenerator.tableToGenerate === 0)\r\n    {\r\n        // Corners\r\n        key = RubixState.hashCorners(node.rubixState);\r\n        value = Tables.cornerDatabase.get(key);\r\n        \r\n        if (value === 0 || value > node.depth)\r\n            Tables.cornerDatabase.set(key, node.depth);\r\n        else // State already enumerated\r\n            return;\r\n    }\r\n    else if (TableGenerator.tableToGenerate === 1)\r\n    {\r\n        // Edges Top\r\n        key = RubixState.hashCode(node.rubixState, RubixState.edgesTop) % Tables.edgesDbSize;\r\n        value = Tables.edgesTopDatabase.get(key);\r\n        \r\n        if (value === 0 || value > node.depth)\r\n            Tables.edgesTopDatabase.set(key, node.depth);\r\n        else // State already enumerated\r\n            return;\r\n    }\r\n    else if (TableGenerator.tableToGenerate === 2)\r\n    {\r\n        // Edges Bottom\r\n        key = RubixState.hashCode(node.rubixState, RubixState.edgesBottom) % Tables.edgesDbSize;\r\n        value = Tables.edgesBottomDatabase.get(key);\r\n        \r\n        if (value === 0 || value > node.depth)\r\n            Tables.edgesBottomDatabase.set(key, node.depth); \r\n        else // State already enumerated\r\n            return;\r\n    }\r\n    \r\n    // Base case\r\n    if (node.depth === TableGenerator.dlsDepth)\r\n        return;\r\n    \r\n    var successors = [];\r\n    RubixNode.getSuccessors(node, successors);\r\n    \r\n    for (var index = 0; index < successors.length; index++)\r\n    {\r\n        TableGenerator.generateDLS(successors[index]);\r\n        RubixNode.wipeBadChain(successors[index]);\r\n    }\r\n    \r\n    if (TableGenerator.numNodes++ % 1000000 === 0)\r\n        console.log((TableGenerator.numNodes - 1) / 1000000 + \"M\");\r\n};\r\n"]],"start1":6473,"start2":6473,"length1":12,"length2":1948}]],"length":8421,"saved":false}
{"ts":1351213682834,"patch":[[{"diffs":[[0,"earch algorithm "],[1,"\r\n * "],[0,"starting \r\n * wi"]],"start1":3918,"start2":3918,"length1":32,"length2":37},{"diffs":[[0,"tarting "],[-1,"\r\n * "],[0,"with the"]],"start1":3940,"start2":3940,"length1":21,"length2":16},{"diffs":[[0,"pecified node.\r\n"],[1," * \r\n"],[0," * @param node t"]],"start1":3958,"start2":3958,"length1":32,"length2":37},{"diffs":[[0," the search at\r\n"],[1," * \r\n * @return the successors to the nodes at which the search stops\r\n"],[0," */\r\nTableGenera"]],"start1":4011,"start2":4011,"length1":32,"length2":103},{"diffs":[[0,"using a "],[1,"recursive "],[0,"depth-li"]],"start1":6597,"start2":6597,"length1":16,"length2":26},{"diffs":[[0,"gorithm "],[1,"\r\n * "],[0,"starting"]],"start1":6633,"start2":6633,"length1":16,"length2":21},{"diffs":[[0,"with the"],[-1,"\r\n *"],[0," specifi"]],"start1":6655,"start2":6655,"length1":20,"length2":16},{"diffs":[[0," node.\r\n"],[1," * \r\n"],[0," * @para"]],"start1":6673,"start2":6673,"length1":16,"length2":21}]],"length":8513,"saved":false}
{"ts":1351213735479,"patch":[[{"diffs":[[0," RubixState.hash"],[-1,"Code"],[1,"TopEdges"],[0,"(node.rubixState"]],"start1":7276,"start2":7276,"length1":36,"length2":40},{"diffs":[[0,"tate"],[-1,", RubixState.edgesTop) % Tables.edgesDbSize"],[1,")"],[0,";\r\n "]],"start1":7312,"start2":7312,"length1":51,"length2":9},{"diffs":[[0,"hash"],[-1,"Code"],[1,"BottomEdges"],[0,"(nod"]],"start1":7667,"start2":7667,"length1":12,"length2":19},{"diffs":[[0,"tate"],[-1,", RubixState.edgesBottom) % Tables.edgesDbSiz"],[1,")"],[0,"e;\r\n"]],"start1":7694,"start2":7694,"length1":53,"length2":9}]],"length":8438,"saved":false}
{"ts":1351213739398,"patch":[[{"diffs":[[0,"ixState)"],[-1,"e"],[0,";\r\n     "]],"start1":7691,"start2":7691,"length1":17,"length2":16}]],"length":8437,"saved":false}
{"ts":1351213803029,"patch":[[{"diffs":[[0,"Depth = "],[-1,"5"],[1,"6"],[0,";\r\n\r\n/**"]],"start1":2552,"start2":2552,"length1":17,"length2":17}]],"length":8437,"saved":false}
{"ts":1351213810416,"patch":[[{"diffs":[[0,"erate = "],[-1,"0"],[1,"1"],[0,";\r\n\r\n// "]],"start1":2427,"start2":2427,"length1":17,"length2":17}]],"length":8437,"saved":false}
{"ts":1351213927189,"patch":[[{"diffs":[[0,"()\r\n{     \r\n"],[1,"    if (TableGenerator.tableToGenerate === 0)\r\n    "],[0,"    Tables.c"]],"start1":2646,"start2":2646,"length1":24,"length2":75},{"diffs":[[0,"ornersDbSize);\r\n"],[-1,"//"],[1,"    else if (TableGenerator.tableToGenerate === 1)\r\n    "],[0,"    Tables.edges"]],"start1":2765,"start2":2765,"length1":34,"length2":88},{"diffs":[[0,"esDbSize);\r\n"],[-1,"//"],[1,"    else if (TableGenerator.tableToGenerate === 2)\r\n    "],[0,"    Tables.e"]],"start1":2897,"start2":2897,"length1":26,"length2":80},{"diffs":[[0,"alNode);\r\n\r\n"],[1,"    if (TableGenerator.tableToGenerate === 0)\r\n    "],[0,"    FileOper"]],"start1":3336,"start2":3336,"length1":24,"length2":75},{"diffs":[[0,"rnerDatabase);\r\n"],[-1,"//"],[1,"    else if (TableGenerator.tableToGenerate === 1)\r\n    "],[0,"    FileOperator"]],"start1":3444,"start2":3444,"length1":34,"length2":88},{"diffs":[[0,"base);\r\n"],[-1,"//"],[1,"    else if (TableGenerator.tableToGenerate === 2)\r\n    "],[0,"    File"]],"start1":3571,"start2":3571,"length1":18,"length2":72}]],"length":8755,"saved":false}
{"ts":1351214030708,"patch":[[{"diffs":[[0,"ate = 1;\r\n\r\n"],[1,"// Search type: 0 combined, 1 breadth-first only, 2 depth-limited only\r\nTableGenerator.searchType = 0;\r\n\r\n"],[0,"// The maxim"]],"start1":2429,"start2":2429,"length1":24,"length2":130},{"diffs":[[0,"    "],[-1,"// Combined"],[1,"if (TableGenerator.searchType === 0)"],[0,"\r\n"],[1,"    "],[0,"    "]],"start1":3228,"start2":3228,"length1":21,"length2":50},{"diffs":[[0,"    "],[-1,"\r\n    // Breadth first\r\n//"],[1,"else if (TableGenerator.searchType === 1)\r\n    "],[0,"    "]],"start1":3325,"start2":3325,"length1":34,"length2":55},{"diffs":[[0,"    "],[-1,"\r\n    // Depth Limited\r\n//"],[1,"else if (TableGenerator.searchType === 2)\r\n    "],[0,"    "]],"start1":3426,"start2":3426,"length1":34,"length2":55}]],"length":8932,"saved":false}
{"ts":1351214198623,"patch":[[{"diffs":[[0,"h = "],[-1,"6"],[1,"5"],[0,";\r\n\r"]],"start1":2662,"start2":2662,"length1":9,"length2":9}]],"length":8932,"saved":false}
{"ts":1351214716636,"patch":[[{"diffs":[[0,"erate = "],[-1,"1"],[1,"2"],[0,";\r\n\r\n// "]],"start1":2427,"start2":2427,"length1":17,"length2":17},{"diffs":[[0,"Depth = "],[-1,"5"],[1,"6"],[0,";\r\n\r\n/**"]],"start1":2658,"start2":2658,"length1":17,"length2":17}]],"length":8932,"saved":false}
