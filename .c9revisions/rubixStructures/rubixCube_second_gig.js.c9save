{"ts":1350958243542,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1350958250792,"patch":[[{"diffs":[[1,"function RubixState(){};"]],"start1":0,"start2":0,"length1":0,"length2":24}]],"length":24,"saved":false}
{"ts":1350958257790,"patch":[[{"diffs":[[0,"(){}"],[-1,";"]],"start1":19,"start2":19,"length1":5,"length2":4}]],"length":23,"saved":false}
{"ts":1350958475161,"patch":[[{"diffs":[[0,"tate(){}"],[1,"\n\n\n"]],"start1":15,"start2":15,"length1":8,"length2":11}]],"length":26,"saved":false}
{"ts":1350958513523,"patch":[[{"diffs":[[0,"e(){}\n\n\n"],[1,"/**\n * Creates a Rubik cube with the goal state.\n */\nRubixState.createWithGoalState = function()\n{\n    // HAHAHAHAHA #JohnDidn'tFeelLikeWritingASeparateInitializer\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\n};\n\n/**\n * Creates a Rubik Cube from an upper case String of characters from a string \n * from the alphabet: {R,G,Y,B,O,W}.\n * \n * @param text The textual representation of the rubik cube as specified in the \n *      assignment.\n * @return A state for the supplied text.\n */\nRubixState.createWithString = function(text)\n{\n    \n    if(text.length !=  54) \n    {\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\n            \" faces!\");\n        return null;\n    }\n    \n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\n    \n    if(error !== \"\")\n    {\n        console.log(error);\n        return null;\n    }\n    \n    // An array to hold the intermediate state.\n    var faces = [];\n    \n    // Iterate over the input string to organize our data.\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\n    {\n        line = text.substring(index*9,index*9 + 9);\n        \n        // Switch on indices in a manner befitting of a boss.\n        switch(index)\n        {\n            case 1:\n                faces.push(line.substring(0,3));\n                faces.push(line.substring(3,6));\n                faces.push(line.substring(6,9));\n                break;\n            case 2 :\n            case 3 :\n                faces[1] += line.substring(0,3);\n                faces[2] += line.substring(3,6);\n                faces[3] += line.substring(6,9);\n                break;\n            default:\n                faces.push(line);\n                break;\n        }        \n    }\n    \n    // Splits the strings into character arrays.\n    for(var face in faces)\n    {\n        faces[face] = faces[face].split('');\n    }\n    \n    // Check the center cubies before advancing.\n    for(index = 0; index < faces.length; index ++)\n    {\n        if(RubixState.faceValues[index] !== faces[index][4])\n        {\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\n                 \" is wrong!\");\n            return null;\n        }\n    }\n        \n    var state = new RubixState();\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\n\n    /*\n             00 24 03\n             26 -R 28\n             06 30 09\n    02 27 08 07 31 10 11 29 05\n    33 -G 35 34 -Y 36 37 -B 39\n    14 41 17 15 42 18 20 45 23\n             16 43 19\n             40 -O 44\n             13 47 22\n             12 46 21\n             32 -W 38\n             01 25 04   \n    */\n    //c0\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\n    \n    //c1\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\n    \n    //c2\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\n    \n    //c3\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\n    \n    //c4\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\n    \n    //c5\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\n    \n    //c6\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \n    \n    //c7\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\n    \n    //s0\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\n    \n    //s1\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\n    \n    //s2\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\n    \n    //s3\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\n    \n    //s4\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\n    \n    //s5\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\n    \n    //s6\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\n    \n    //s7\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\n    \n    //s8\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\n    \n    //s9\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\n        \n    //s10\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\n    \n    //s11\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\n    \n    return RubixState.verifyState(state) ? state : null;\n};"]],"start1":18,"start2":18,"length1":8,"length2":6416}]],"length":6434,"saved":false}
{"ts":1350958517913,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    // HAHAHAHAHA #JohnDidn'tFeelLikeWritingASeparateInitializer\n"],[0,"    "]],"start1":121,"start2":121,"length1":73,"length2":8}]],"length":6369,"saved":false}
{"ts":1350958542041,"patch":[[{"diffs":[[0,"te ="],[-1," new RubixState();\n    state.cubies ="],[0," new"]],"start1":2705,"start2":2705,"length1":45,"length2":8},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[0]  = R"]],"start1":3066,"start2":3066,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[1]  = R"]],"start1":3120,"start2":3120,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[2]  = R"]],"start1":3174,"start2":3174,"length1":23,"length2":16}]],"length":6311,"saved":false}
{"ts":1350958548695,"patch":[[{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[3]  = R"]],"start1":3242,"start2":3242,"length1":23,"length2":16}]],"length":6304,"saved":false}
{"ts":1350958552591,"patch":[[{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[4]  = R"]],"start1":3296,"start2":3296,"length1":23,"length2":16}]],"length":6297,"saved":false}
{"ts":1350958556275,"patch":[[{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[5]  = R"]],"start1":3350,"start2":3350,"length1":23,"length2":16}]],"length":6290,"saved":false}
{"ts":1350958560160,"patch":[[{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[6]  = R"]],"start1":3418,"start2":3418,"length1":23,"length2":16}]],"length":6283,"saved":false}
{"ts":1350958563972,"patch":[[{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[7]  = R"]],"start1":3472,"start2":3472,"length1":23,"length2":16}]],"length":6276,"saved":false}
{"ts":1350958593944,"patch":[[{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[8]  = R"]],"start1":3526,"start2":3526,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[9]  = R"]],"start1":3594,"start2":3594,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[10] = R"]],"start1":3648,"start2":3648,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[11] = R"]],"start1":3702,"start2":3702,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[12] = R"]],"start1":3770,"start2":3770,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[13] = R"]],"start1":3824,"start2":3824,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[14] = R"]],"start1":3878,"start2":3878,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[15] = R"]],"start1":3946,"start2":3946,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[16] = R"]],"start1":4000,"start2":4000,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[17] = R"]],"start1":4054,"start2":4054,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[18] = R"]],"start1":4122,"start2":4122,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[19] = R"]],"start1":4176,"start2":4176,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[20] = R"]],"start1":4230,"start2":4230,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[21] = R"]],"start1":4301,"start2":4301,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[22] = R"]],"start1":4355,"start2":4355,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[23] = R"]],"start1":4409,"start2":4409,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[24] = R"]],"start1":4477,"start2":4477,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[25] = R"]],"start1":4531,"start2":4531,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[26] = R"]],"start1":4599,"start2":4599,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[27] = R"]],"start1":4653,"start2":4653,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[28] = R"]],"start1":4721,"start2":4721,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[29] = R"]],"start1":4775,"start2":4775,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[30] = R"]],"start1":4843,"start2":4843,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[31] = R"]],"start1":4897,"start2":4897,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[32] = R"]],"start1":4965,"start2":4965,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[33] = R"]],"start1":5019,"start2":5019,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[34] = R"]],"start1":5087,"start2":5087,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[35] = R"]],"start1":5141,"start2":5141,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[36] = R"]],"start1":5209,"start2":5209,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[37] = R"]],"start1":5263,"start2":5263,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[38] = R"]],"start1":5331,"start2":5331,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[39] = R"]],"start1":5385,"start2":5385,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[40] = R"]],"start1":5453,"start2":5453,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[41] = R"]],"start1":5507,"start2":5507,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[42] = R"]],"start1":5575,"start2":5575,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[43] = R"]],"start1":5629,"start2":5629,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[44] = R"]],"start1":5702,"start2":5702,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[45] = R"]],"start1":5756,"start2":5756,"length1":23,"length2":16},{"diffs":[[0,"   state"],[-1,".cubies"],[0,"[46] = R"]],"start1":5825,"start2":5825,"length1":23,"length2":16},{"diffs":[[0,"tate"],[-1,".cubies"],[0,"[47]"]],"start1":5883,"start2":5883,"length1":15,"length2":8}]],"length":5996,"saved":false}
{"ts":1350958661005,"patch":[[{"diffs":[[0," 00 24 0"],[-1,"3"],[1,"1"],[0,"\n       "]],"start1":2767,"start2":2767,"length1":17,"length2":17},{"diffs":[[0,"   0"],[-1,"6"],[1,"2"],[0," 30 0"],[-1,"9"],[1,"3"],[0,"\n    0"],[-1,"2"],[1,"0"],[0," 27 0"],[-1,"8 07 31 10 11 29 05"],[1,"2 02 10 03 03   01"],[0,"\n   "]],"start1":2809,"start2":2809,"length1":46,"length2":45},{"diffs":[[0,"   0"],[-1,"1"],[1,"0"],[0," 25 0"],[-1,"4"],[1,"1"],[0,"   \n"]],"start1":3033,"start2":3033,"length1":15,"length2":15}]],"length":5995,"saved":false}
{"ts":1350958662080,"patch":[[{"diffs":[[0,"03 03   "],[1," "],[0,"01\n    3"]],"start1":2840,"start2":2840,"length1":16,"length2":17}]],"length":5996,"saved":false}
{"ts":1350958714438,"patch":[[{"diffs":[[0,"    "],[-1,"1"],[1,"0"],[0,"4 41 "],[-1,"17 1"],[1,"05 0"],[0,"5 42 "],[-1,"18 20"],[1,"06 06"],[0," 45 "],[-1,"23"],[1,"07"],[0,"\n   "]],"start1":2883,"start2":2883,"length1":34,"length2":34},{"diffs":[[0,"    "],[-1,"16"],[1,"05"],[0," 43 "],[-1,"19"],[1,"06"],[0,"\n   "]],"start1":2923,"start2":2923,"length1":16,"length2":16},{"diffs":[[0,"    "],[-1,"13"],[1,"04"],[0," 47 "],[-1,"22"],[1,"07"],[0,"\n   "]],"start1":2967,"start2":2967,"length1":16,"length2":16},{"diffs":[[0,"    "],[-1,"12"],[1,"04"],[0," 46 "],[-1,"21"],[1,"07"],[0,"\n   "]],"start1":2989,"start2":2989,"length1":16,"length2":16}]],"length":5996,"saved":false}
{"ts":1350958736624,"patch":[[{"diffs":[[0,"     00 "],[-1,"24"],[1,"08"],[0," 01\n    "]],"start1":2763,"start2":2763,"length1":18,"length2":18},{"diffs":[[0,"    "],[-1,"26"],[1,"09"],[0," -R "],[-1,"28"],[1,"10"],[0,"\n   "]],"start1":2786,"start2":2786,"length1":16,"length2":16},{"diffs":[[0,"\n    00 "],[-1,"27"],[1,"09"],[0," 02 02 1"]],"start1":2820,"start2":2820,"length1":18,"length2":18},{"diffs":[[0,"0 03 03 "],[-1,"  "],[1,"10"],[0," 01\n    "]],"start1":2838,"start2":2838,"length1":18,"length2":18},{"diffs":[[0,"     00 "],[-1,"25"],[1,"08"],[0," 01   \n "]],"start1":3032,"start2":3032,"length1":18,"length2":18}]],"length":5996,"saved":false}
{"ts":1350958857242,"patch":[[{"diffs":[[0,"     02 "],[-1,"30"],[1,"11"],[0," 03\n    "]],"start1":2807,"start2":2807,"length1":18,"length2":18},{"diffs":[[0," 02 02 1"],[-1,"0"],[1,"1"],[0," 03 03 1"]],"start1":2830,"start2":2830,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"33"],[1,"12"],[0," -G "],[-1,"35 34 -Y 36 37"],[1,"13 13 -Y 14 14"],[0," -B "],[-1,"39"],[1,"15"],[0,"\n    04 "],[-1,"4"],[0,"1"],[1,"6"],[0," 05 05 "],[-1,"42"],[1,"17"],[0," 06 06 "],[-1,"45"],[1,"18"],[0," 07\n"]],"start1":2852,"start2":2852,"length1":62,"length2":62},{"diffs":[[0,"     05 "],[-1,"43"],[1,"17"],[0," 06\n    "]],"start1":2922,"start2":2922,"length1":18,"length2":18},{"diffs":[[0,"    "],[-1,"40"],[1,"16"],[0," -O "],[-1,"44"],[1,"18"],[0,"\n   "]],"start1":2945,"start2":2945,"length1":16,"length2":16},{"diffs":[[0,"     04 "],[-1,"47"],[1,"19"],[0," 07\n    "]],"start1":2966,"start2":2966,"length1":18,"length2":18},{"diffs":[[0,"     04 "],[-1,"46"],[1,"19"],[0," 07\n    "]],"start1":2988,"start2":2988,"length1":18,"length2":18},{"diffs":[[0,"    "],[-1,"3"],[1,"1"],[0,"2 -W "],[-1,"38"],[1,"15"],[0,"\n   "]],"start1":3011,"start2":3011,"length1":16,"length2":16}]],"length":5996,"saved":false}
{"ts":1350958975300,"patch":[[{"diffs":[[0,"\n    //c"],[-1,"0"],[1,"orners\n    stat\n    \n    \n    \n    //c0\n    "],[0,"\n    sta"]],"start1":3055,"start2":3055,"length1":17,"length2":60}]],"length":6039,"saved":false}
{"ts":1350959050388,"patch":[[{"diffs":[[0,"ers\n    "],[-1,"stat"],[1,"for(index = 0; index < 7; index ++)\n    {\n        \n    }\n    state[0]\n    state[1]\n    state[2]\n    state[3]\n    state[4]\n    state[5]\n    state[6]\n    state"],[0,"\n    \n  "]],"start1":3066,"start2":3066,"length1":20,"length2":173}]],"length":6192,"saved":false}
{"ts":1350959057129,"patch":[[{"diffs":[[0,")\n    {\n        "],[1," state[index]  "],[0,"\n    }\n    state"]],"start1":3108,"start2":3108,"length1":32,"length2":47},{"diffs":[[0,"  }\n    "],[-1,"state"],[0,"[0]\n    "]],"start1":3142,"start2":3142,"length1":21,"length2":16}]],"length":6202,"saved":false}
{"ts":1350959058297,"patch":[[{"diffs":[[0,"e[index]"],[1,";"],[0,"  \n    }"]],"start1":3129,"start2":3129,"length1":16,"length2":17}]],"length":6203,"saved":false}
{"ts":1350959061987,"patch":[[{"diffs":[[0,"\n   "],[-1," [0]\n    state[1]\n    state[2]\n    state[3]\n    state[4]\n    state[5]\n    state[6]\n    state"],[0,"\n   "]],"start1":3146,"start2":3146,"length1":100,"length2":8}]],"length":6111,"saved":false}
{"ts":1350959151066,"patch":[[{"diffs":[[0,"        "],[-1," "],[0,"state[in"]],"start1":3116,"start2":3116,"length1":17,"length2":16},{"diffs":[[0,"   //c0\n"],[-1,"    \n"],[0,"    stat"]],"start1":3166,"start2":3166,"length1":21,"length2":16},{"diffs":[[0,"e : null;\n};"],[1,"\n\nRubixState.processCorner(faceA, faceB, faceC)"]],"start1":6093,"start2":6093,"length1":12,"length2":59}]],"length":6152,"saved":false}
{"ts":1350959162095,"patch":[[{"diffs":[[0,", faceC)"],[1,"\n{\n    \n};"]],"start1":6144,"start2":6144,"length1":8,"length2":18}]],"length":6162,"saved":false}
{"ts":1350959171070,"patch":[[{"diffs":[[0,"ssCorner"],[1," = function "],[0,"(faceA, "]],"start1":6123,"start2":6123,"length1":16,"length2":28}]],"length":6174,"saved":false}
{"ts":1350959216881,"patch":[[{"diffs":[[0,"\n    \n};"],[1,"\n\nRubixState.cubies = {\n    \n}"]],"start1":6166,"start2":6166,"length1":8,"length2":38}]],"length":6204,"saved":false}
{"ts":1350959217422,"patch":[[{"diffs":[[0,"ubies = {\n    \n}"],[1,";"]],"start1":6188,"start2":6188,"length1":16,"length2":17}]],"length":6205,"saved":false}
{"ts":1350959321430,"patch":[[{"diffs":[[0,"ubies = {\n  "],[-1,"  "],[1,"\"RGW\" = {\"value\":0,\"\":\"\"}"],[0,"\n};"]],"start1":6188,"start2":6188,"length1":17,"length2":40}]],"length":6228,"saved":false}
{"ts":1350959326045,"patch":[[{"diffs":[[0,"\n  \"RGW\""],[-1," = "],[1,":"],[0,"{\"value\""]],"start1":6197,"start2":6197,"length1":19,"length2":17}]],"length":6226,"saved":false}
{"ts":1350959388774,"patch":[[{"diffs":[[0,"e\":0"],[-1,",\"\":\"\""],[0,"}\n};"]],"start1":6212,"start2":6212,"length1":14,"length2":8}]],"length":6220,"saved":false}
{"ts":1350959398508,"patch":[[{"diffs":[[0,"alue\":0}"],[1,",\n  \"RGW\":{\"value\":1}\n"],[0,"\n};"]],"start1":6209,"start2":6209,"length1":11,"length2":33}]],"length":6242,"saved":false}
{"ts":1350959427783,"patch":[[{"diffs":[[0,"ue\":0},\n  \"R"],[-1,"G"],[0,"W"],[1,"B"],[0,"\":{\"value\":1"]],"start1":6211,"start2":6211,"length1":26,"length2":26},{"diffs":[[0,"alue\":1}"],[1,",\n  \"RGY\":{\"value\":2},\n  \"RGW\":{\"value\":0}\n\n"],[0,"\n\n};"]],"start1":6230,"start2":6230,"length1":12,"length2":56}]],"length":6286,"saved":false}
{"ts":1350959525668,"patch":[[{"diffs":[[0,"1},\n  \"R"],[-1,"G"],[0,"Y"],[1,"G"],[0,"\":{\"valu"]],"start1":6236,"start2":6236,"length1":18,"length2":18},{"diffs":[[0,"ue\":2},\n  \"R"],[-1,"GW"],[1,"BY\":{\"value\":3},\n  \"OWG\":{\"value\":4},\n  \"OGY"],[0,"\":{\"value\":0"]],"start1":6253,"start2":6253,"length1":26,"length2":68},{"diffs":[[0,"\"value\":"],[-1,"0}"],[1,"5},"],[0,"\n\n\n\n};"]],"start1":6312,"start2":6312,"length1":16,"length2":17}]],"length":6329,"saved":false}
{"ts":1350959544737,"patch":[[{"diffs":[[0,"ue\":5},\n"],[1,"  \"RYB\":{\"value\":2},"],[0,"\n\n\n};"]],"start1":6316,"start2":6316,"length1":13,"length2":33}]],"length":6349,"saved":false}
{"ts":1350959547032,"patch":[[{"diffs":[[0,"\"value\":"],[-1,"2"],[1,"6"],[0,"},\n\n\n};"]],"start1":6333,"start2":6333,"length1":16,"length2":16}]],"length":6349,"saved":false}
{"ts":1350959558407,"patch":[[{"diffs":[[0,"ue\":6},\n"],[1,"  \"RBW\":{\"value\":7},\n"],[0,"\n\n};"]],"start1":6337,"start2":6337,"length1":12,"length2":33}]],"length":6370,"saved":false}
{"ts":1350959559412,"patch":[[{"diffs":[[0,"alue\":7}"],[-1,","],[0,"\n\n\n};"]],"start1":6356,"start2":6356,"length1":14,"length2":13}]],"length":6369,"saved":false}
{"ts":1350959611444,"patch":[[{"diffs":[[0,":5},\n  \""],[-1,"R"],[1,"O"],[0,"YB\":{\"va"]],"start1":6319,"start2":6319,"length1":17,"length2":17},{"diffs":[[0,":6},\n  \""],[-1,"R"],[1,"O"],[0,"BW\":{\"va"]],"start1":6340,"start2":6340,"length1":17,"length2":17}]],"length":6369,"saved":false}
{"ts":1350959626649,"patch":[[{"diffs":[[0,"\n{\n    \n};\n\n"],[1,"//Leading character Donminates\n"],[0,"RubixState.c"]],"start1":6164,"start2":6164,"length1":24,"length2":55}]],"length":6400,"saved":false}
{"ts":1350959628753,"patch":[[{"diffs":[[0,"acter Do"],[-1,"n"],[0,"minates\n"]],"start1":6190,"start2":6190,"length1":17,"length2":16}]],"length":6399,"saved":false}
{"ts":1350959733908,"patch":[[{"diffs":[[0,"alue\":7}"],[1,",\n  \"RY\":{\"value\":8),\n  \"RB\":{\"value\":"],[0,"\n\n\n};"]],"start1":6386,"start2":6386,"length1":13,"length2":51}]],"length":6437,"saved":false}
{"ts":1350959739169,"patch":[[{"diffs":[[0,"value\":8"],[-1,")"],[1,"}"],[0,",\n  \"RB\""]],"start1":6405,"start2":6405,"length1":17,"length2":17},{"diffs":[[0,"\"value\":"],[1,"9}"],[0,"\n\n\n};"]],"start1":6424,"start2":6424,"length1":13,"length2":15}]],"length":6439,"saved":false}
{"ts":1350959753428,"patch":[[{"diffs":[[0,"alue\":9}"],[1,",\n  \"RG\":{\"value\":10},"],[0,"\n\n\n};"]],"start1":6426,"start2":6426,"length1":13,"length2":35}]],"length":6461,"saved":false}
{"ts":1350959861209,"patch":[[{"diffs":[[0,"7},\n  \"R"],[-1,"Y"],[1,"W"],[0,"\":{\"valu"]],"start1":6392,"start2":6392,"length1":17,"length2":17},{"diffs":[[0,"e\":10},\n"],[1,"  \"RY\":{\"value\":11},\n  \"WG\":{\"value\":12},\n  \"GY\":{\"value\":13},\n  \"YB\":{\"value\":14},\n  \"BW\":{\"value\":15}\n  \n"],[0,"\n\n};"]],"start1":6449,"start2":6449,"length1":12,"length2":119}]],"length":6568,"saved":false}
{"ts":1350959875835,"patch":[[{"diffs":[[0,",\n  \"RW\""],[1," "],[0,":{\"value"]],"start1":6394,"start2":6394,"length1":16,"length2":17},{"diffs":[[0,",\n  \"RB\""],[1," "],[0,":{\"value"]],"start1":6415,"start2":6415,"length1":16,"length2":17},{"diffs":[[0,",\n  \"RG\""],[1," "],[0,":{\"value"]],"start1":6436,"start2":6436,"length1":16,"length2":17},{"diffs":[[0,",\n  \"RY\""],[1," "],[0,":{\"value"]],"start1":6458,"start2":6458,"length1":16,"length2":17},{"diffs":[[0,",\n  \"WG\""],[1," "],[0,":{\"value"]],"start1":6480,"start2":6480,"length1":16,"length2":17},{"diffs":[[0,",\n  \"GY\""],[1," "],[0,":{\"value"]],"start1":6502,"start2":6502,"length1":16,"length2":17},{"diffs":[[0,",\n  \"YB\""],[1," "],[0,":{\"value"]],"start1":6524,"start2":6524,"length1":16,"length2":17},{"diffs":[[0,",\n  \"BW\""],[1," "],[0,":{\"value"]],"start1":6546,"start2":6546,"length1":16,"length2":17}]],"length":6576,"saved":false}
{"ts":1350959886174,"patch":[[{"diffs":[[0,"value\":0"],[1," "],[0,"},\n  \"RW"]],"start1":6238,"start2":6238,"length1":16,"length2":17},{"diffs":[[0,"value\":1"],[1," "],[0,"},\n  \"RY"]],"start1":6260,"start2":6260,"length1":16,"length2":17},{"diffs":[[0,"value\":2"],[1," "],[0,"},\n  \"RB"]],"start1":6282,"start2":6282,"length1":16,"length2":17},{"diffs":[[0,"value\":3"],[1," "],[0,"},\n  \"OW"]],"start1":6304,"start2":6304,"length1":16,"length2":17},{"diffs":[[0,"value\":4"],[1," "],[0,"},\n  \"OG"]],"start1":6326,"start2":6326,"length1":16,"length2":17},{"diffs":[[0,"value\":5"],[1," "],[0,"},\n  \"OY"]],"start1":6348,"start2":6348,"length1":16,"length2":17},{"diffs":[[0,"value\":6"],[1," "],[0,"},\n  \"OB"]],"start1":6370,"start2":6370,"length1":16,"length2":17},{"diffs":[[0,"value\":7"],[1," "],[0,"},\n  \"RW"]],"start1":6392,"start2":6392,"length1":16,"length2":17},{"diffs":[[0,"value\":8"],[1," "],[0,"},\n  \"RB"]],"start1":6414,"start2":6414,"length1":16,"length2":17},{"diffs":[[0,"value\":9"],[1," "],[0,"},\n  \"RG"]],"start1":6436,"start2":6436,"length1":16,"length2":17}]],"length":6586,"saved":false}
{"ts":1350959973778,"patch":[[{"diffs":[[0,"lue\":15}"],[1,",\n  \"OG\" :{\"value\":16},\n  \"OY\" :{\"value\":17},\n  \"OB\" :{\"value\":18},\n  \"OW\" :{\"value\":19}"],[0,"\n  \n\n\n};"]],"start1":6570,"start2":6570,"length1":16,"length2":104}]],"length":6674,"saved":false}
{"ts":1350960147027,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"if(faceA == 'R')\n    {\n        \n    }"],[0,"\n};\n\n//L"]],"start1":6163,"start2":6163,"length1":16,"length2":53},{"diffs":[[0,":19}"],[-1,"\n"],[0,"  \n"],[-1,"\n\n"],[0,"};"]],"start1":6699,"start2":6699,"length1":12,"length2":9}]],"length":6708,"saved":false}
{"ts":1350960202977,"patch":[[{"diffs":[[0,"faceA =="],[1," 'R' || faceB == 'R' || faceC =="],[0," 'R')\n  "]],"start1":6174,"start2":6174,"length1":16,"length2":48},{"diffs":[[0," \n    }\n"],[1,"    else if(\n"],[0,"};\n\n//Le"]],"start1":6233,"start2":6233,"length1":16,"length2":29}]],"length":6753,"saved":false}
{"ts":1350960263956,"patch":[[{"diffs":[[0,"B, faceC)\n{\n"],[1,"    var leader = faceA;\n    \n    if(leader !== 'R' || leader !='O')\n    {\n        \n    }\n"],[0,"    if(faceA"]],"start1":6155,"start2":6155,"length1":24,"length2":113}]],"length":6842,"saved":false}
{"ts":1350960273330,"patch":[[{"diffs":[[0,"r !="],[1,"= "],[0,"'O"],[-1,"')\n    {\n        \n    }\n    if(faceA == 'R' || faceB == 'R' || faceC == 'R"],[0,"')\n "]],"start1":6226,"start2":6226,"length1":84,"length2":12},{"diffs":[[0,"  }\n"],[-1,"    else if(\n"],[0,"};\n\n"]],"start1":6254,"start2":6254,"length1":21,"length2":8}]],"length":6757,"saved":false}
{"ts":1350960293147,"patch":[[{"diffs":[[0,"face"],[-1,"A, faceB, faceC"],[1,"s"],[0,")\n{\n"]],"start1":6144,"start2":6144,"length1":23,"length2":9}]],"length":6743,"saved":false}
{"ts":1350960298622,"patch":[[{"diffs":[[0,"n (faces"],[1,", orientation"],[0,")\n{\n    "]],"start1":6141,"start2":6141,"length1":16,"length2":29}]],"length":6756,"saved":false}
{"ts":1350960355257,"patch":[[{"diffs":[[0," faceA;\n    "],[1,"faces.indexOf('R"],[0,"\n    if(lead"]],"start1":6182,"start2":6182,"length1":24,"length2":40}]],"length":6772,"saved":false}
{"ts":1350960355812,"patch":[[{"diffs":[[0,"dexOf('R"],[1,"'"],[0,"\n    if("]],"start1":6202,"start2":6202,"length1":16,"length2":17}]],"length":6773,"saved":false}
{"ts":1350960357663,"patch":[[{"diffs":[[0,"exOf('R'"],[1,");"],[0,"\n    if("]],"start1":6203,"start2":6203,"length1":16,"length2":18}]],"length":6775,"saved":false}
{"ts":1350960366126,"patch":[[{"diffs":[[0,"er ="],[-1," faceA;\n   "],[0," fac"]],"start1":6178,"start2":6178,"length1":19,"length2":8}]],"length":6764,"saved":false}
{"ts":1350960394465,"patch":[[{"diffs":[[0,"    "],[-1,"var leader = faces.indexOf('R');\n    if(leader !== 'R' || leader !== 'O'"],[1,"for(var index in faces"],[0,")\n  "]],"start1":6166,"start2":6166,"length1":80,"length2":30}]],"length":6714,"saved":false}
{"ts":1350960404158,"patch":[[{"diffs":[[0,"\n    {\n     "],[1,"faces[index];"],[0,"   \n    }\n};"]],"start1":6193,"start2":6193,"length1":24,"length2":37}]],"length":6727,"saved":false}
{"ts":1350960425605,"patch":[[{"diffs":[[0,"entation)\n{\n"],[1,"    var corner= 0;\n"],[0,"    for(var "]],"start1":6154,"start2":6154,"length1":24,"length2":43}]],"length":6746,"saved":false}
{"ts":1350960428521,"patch":[[{"diffs":[[0,"r corner"],[1," "],[0,"= 0;\n   "]],"start1":6172,"start2":6172,"length1":16,"length2":17}]],"length":6747,"saved":false}
{"ts":1350960439660,"patch":[[{"diffs":[[0,"\n    {\n     "],[1,"   "],[0,"faces[index]"]],"start1":6213,"start2":6213,"length1":24,"length2":27}]],"length":6750,"saved":false}
{"ts":1350960536765,"patch":[[{"diffs":[[0,"[index];"],[1,"\n     "],[0,"   \n    "]],"start1":6233,"start2":6233,"length1":16,"length2":22}]],"length":6756,"saved":false}
{"ts":1350960568779,"patch":[[{"diffs":[[0,"aces"],[-1,", orientation"],[0,")\n{\n"]],"start1":6145,"start2":6145,"length1":21,"length2":8}]],"length":6743,"saved":false}
{"ts":1350960596648,"patch":[[{"diffs":[[0,"  }\n};\n\n"],[1,"\n\n"],[0,"//Leadin"]],"start1":6240,"start2":6240,"length1":16,"length2":18},{"diffs":[[0," = {\n  \""],[-1,"R"],[0,"G"],[1,"R"],[0,"W\":{\"val"]],"start1":6297,"start2":6297,"length1":18,"length2":18}]],"length":6745,"saved":false}
{"ts":1350960601472,"patch":[[{"diffs":[[0,"\n  \""],[1,"B"],[0,"RW"],[-1,"B"],[0,"\":{\""]],"start1":6323,"start2":6323,"length1":11,"length2":11}]],"length":6745,"saved":false}
{"ts":1350960613724,"patch":[[{"diffs":[[0,"\n  \""],[1,"G"],[0,"RY"],[-1,"G"],[0,"\":{\""]],"start1":6345,"start2":6345,"length1":11,"length2":11}]],"length":6745,"saved":false}
{"ts":1350960620619,"patch":[[{"diffs":[[0," = {\n  \""],[-1,"G"],[0,"R"],[1,"G"],[0,"W\":{\"val"]],"start1":6297,"start2":6297,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[-1,"B"],[0,"RW"],[1,"B"],[0,"\":{\""]],"start1":6323,"start2":6323,"length1":11,"length2":11},{"diffs":[[0,"\n  \""],[-1,"G"],[0,"RY"],[1,"G"],[0,"\":{\""]],"start1":6345,"start2":6345,"length1":11,"length2":11}]],"length":6745,"saved":false}
{"ts":1350960728589,"patch":[[{"diffs":[[0,"  }\n};\n\n"],[1,"RubixState.sortFace = function(faceA, faceB)\n{\n};\n"],[0,"\n\n//Lead"]],"start1":6240,"start2":6240,"length1":16,"length2":66},{"diffs":[[0," = {\n  \""],[-1,"R"],[0,"G"],[1,"R"],[0,"W\":{\"val"]],"start1":6347,"start2":6347,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[1,"B"],[0,"RW"],[-1,"B"],[0,"\":{\""]],"start1":6373,"start2":6373,"length1":11,"length2":11},{"diffs":[[0,"\n  \""],[1,"G"],[0,"RY"],[-1,"G"],[0,"\":{\""]],"start1":6395,"start2":6395,"length1":11,"length2":11},{"diffs":[[0,"2 },\n  \""],[-1,"R"],[0,"B"],[1,"R"],[0,"Y\":{\"val"]],"start1":6413,"start2":6413,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[1,"G"],[0,"OW"],[-1,"G"],[0,"\":{\""]],"start1":6439,"start2":6439,"length1":11,"length2":11},{"diffs":[[0,"4 },\n  \""],[-1,"O"],[0,"G"],[1,"O"],[0,"Y\":{\"val"]],"start1":6457,"start2":6457,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[1,"B"],[0,"OY"],[-1,"B"],[0,"\":{\""]],"start1":6483,"start2":6483,"length1":11,"length2":11},{"diffs":[[0,"6 },\n  \""],[-1,"O"],[0,"B"],[1,"O"],[0,"W\":{\"val"]],"start1":6501,"start2":6501,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[-1,"R"],[0,"B"],[1,"R"],[0,"\" :{"]],"start1":6549,"start2":6549,"length1":10,"length2":10},{"diffs":[[0,"9 },\n  \""],[-1,"R"],[0,"G"],[1,"R"],[0,"\" :{\"val"]],"start1":6567,"start2":6567,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[-1,"W"],[0,"G"],[1,"W"],[0,"\" :{"]],"start1":6615,"start2":6615,"length1":10,"length2":10},{"diffs":[[0,"13},\n  \""],[-1,"Y"],[0,"B"],[1,"Y"],[0,"\" :{\"val"]],"start1":6655,"start2":6655,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[-1,"O"],[0,"G"],[1,"O"],[0,"\" :{"]],"start1":6703,"start2":6703,"length1":10,"length2":10},{"diffs":[[0,"\n  \""],[-1,"O"],[0,"B"],[1,"O"],[0,"\" :{"]],"start1":6747,"start2":6747,"length1":10,"length2":10}]],"length":6795,"saved":false}
{"ts":1350960730395,"patch":[[{"diffs":[[0,"aceB)\n{\n"],[1,"    \n"],[0,"};\n\n\n//L"]],"start1":6287,"start2":6287,"length1":16,"length2":21}]],"length":6800,"saved":false}
{"ts":1350960823996,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"faceA[0].localeCompare(faceB[0]);"],[0,"\n};\n\n\n//"]],"start1":6291,"start2":6291,"length1":16,"length2":49}]],"length":6833,"saved":false}
{"ts":1350960826804,"patch":[[{"diffs":[[0,"aceB)\n{\n    "],[1,"return "],[0,"faceA[0].loc"]],"start1":6287,"start2":6287,"length1":24,"length2":31}]],"length":6840,"saved":false}
{"ts":1350960853039,"patch":[[{"diffs":[[0,"er = 0;\n"],[1,"    faces.sort();\n"],[0,"    for("]],"start1":6165,"start2":6165,"length1":16,"length2":34}]],"length":6858,"saved":false}
{"ts":1350960857339,"patch":[[{"diffs":[[0,"    "],[-1,"var corner = 0;"],[0,"\n   "]],"start1":6153,"start2":6153,"length1":23,"length2":8},{"diffs":[[0,"sort();\n"],[1,"    \n"],[0,"    for("]],"start1":6168,"start2":6168,"length1":16,"length2":21}]],"length":6848,"saved":false}
{"ts":1350960917112,"patch":[[{"diffs":[[0,"s[index]"],[1,"[0]"],[0,";\n      "]],"start1":6227,"start2":6227,"length1":16,"length2":19}]],"length":6851,"saved":false}
{"ts":1350960931428,"patch":[[{"diffs":[[0,"aces)\n{\n    "],[1,"var cornerString = \"\";"],[0,"\n    faces.s"]],"start1":6145,"start2":6145,"length1":24,"length2":46}]],"length":6873,"saved":false}
{"ts":1350960939465,"patch":[[{"diffs":[[0,"   {\n       "],[1," cornerString +="],[0," faces[index"]],"start1":6232,"start2":6232,"length1":24,"length2":40}]],"length":6889,"saved":false}
{"ts":1350960942946,"patch":[[{"diffs":[[0,"dex][0];"],[-1,"\n"],[0,"        "]],"start1":6269,"start2":6269,"length1":17,"length2":16}]],"length":6888,"saved":false}
{"ts":1350960961454,"patch":[[{"diffs":[[0," \n    }\n"],[1,"    \n    RubixState.cubies[cornerString]\n"],[0,"};\n\nRubi"]],"start1":6284,"start2":6284,"length1":16,"length2":57}]],"length":6929,"saved":false}
{"ts":1350960962020,"patch":[[{"diffs":[[0,"rString]"],[1,";"],[0,"\n};\n\nRub"]],"start1":6324,"start2":6324,"length1":16,"length2":17}]],"length":6930,"saved":false}
{"ts":1350960977161,"patch":[[{"diffs":[[0,"   \n    "],[1,"return("],[0,"RubixSta"]],"start1":6293,"start2":6293,"length1":16,"length2":23},{"diffs":[[0,"rString]"],[1,".value)"],[0,";\n};\n\nRu"]],"start1":6331,"start2":6331,"length1":16,"length2":23}]],"length":6944,"saved":false}
{"ts":1350960980559,"patch":[[{"diffs":[[0,"  return"],[1," "],[0,"(RubixSt"]],"start1":6299,"start2":6299,"length1":16,"length2":17}]],"length":6945,"saved":false}
{"ts":1350960993173,"patch":[[{"diffs":[[0,"g].value"],[1," * 8"],[0,");\n};\n\nR"]],"start1":6338,"start2":6338,"length1":16,"length2":20}]],"length":6949,"saved":false}
{"ts":1350961016404,"patch":[[{"diffs":[[0,"lue * 8)"],[1," + faces[0][1]"],[0,";\n};\n\nRu"]],"start1":6343,"start2":6343,"length1":16,"length2":30}]],"length":6963,"saved":false}
{"ts":1350961030543,"patch":[[{"diffs":[[0,"processC"],[-1,"orner"],[1,"ubie"],[0," = funct"]],"start1":6118,"start2":6118,"length1":21,"length2":20}]],"length":6962,"saved":false}
{"ts":1350961045418,"patch":[[{"diffs":[[0," \n    }\n    "],[1,"console.log();"],[0,"\n    return "]],"start1":6283,"start2":6283,"length1":24,"length2":38}]],"length":6976,"saved":false}
{"ts":1350961046327,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState.cubies[cornerString].value"],[0,");\n    r"]],"start1":6299,"start2":6299,"length1":16,"length2":53}]],"length":7013,"saved":false}
{"ts":1350961059270,"patch":[[{"diffs":[[0,"index < "],[-1,"7"],[1,"20"],[0,"; index "]],"start1":3089,"start2":3089,"length1":17,"length2":18}]],"length":7014,"saved":false}
{"ts":1350961066929,"patch":[[{"diffs":[[0," \n    \n    \n    "],[1,"/*"],[0,"\n    //c0\n    st"]],"start1":3149,"start2":3149,"length1":32,"length2":34},{"diffs":[[0,"[7],4);\n    "],[1,"*/"],[0,"\n    return "]],"start1":6036,"start2":6036,"length1":24,"length2":26}]],"length":7018,"saved":false}
{"ts":1350961071071,"patch":[[{"diffs":[[0,"\n    */\n    "],[1,"//"],[0,"return Rubix"]],"start1":6043,"start2":6043,"length1":24,"length2":26}]],"length":7020,"saved":false}
{"ts":1350961209731,"patch":[[{"diffs":[[0,"]);\n};\n\n"],[1,"/**\n * The face value map used in tanslating moves to something human readable. \n */\nRubixState.faceValues = ['R','G','Y','B','O','W'];\n"],[0,"\n//Leadi"]],"start1":6516,"start2":6516,"length1":16,"length2":152}]],"length":7156,"saved":false}
{"ts":1350961217495,"patch":[[{"diffs":[[0,"]);\n};\n\n"],[-1,"/**\n *"],[1,"\n//"],[0," The fac"]],"start1":6516,"start2":6516,"length1":22,"length2":19},{"diffs":[[0,"dable. \n"],[-1," */\n"],[0,"RubixSta"]],"start1":6594,"start2":6594,"length1":20,"length2":16}]],"length":7149,"saved":false}
{"ts":1350961268573,"patch":[[{"diffs":[[0,"index < "],[-1,"20"],[1,"7"],[0,"; index "]],"start1":3089,"start2":3089,"length1":18,"length2":17}]],"length":7148,"saved":false}
{"ts":1350961288371,"patch":[[{"diffs":[[0,"    "],[-1,"for(index = 0; index < 7; index ++)\n    {\n        state[index];  \n    }\n   "],[0,"\n   "]],"start1":3070,"start2":3070,"length1":83,"length2":8}]],"length":7073,"saved":false}
{"ts":1350961293151,"patch":[[{"diffs":[[0,"  \n    \n"],[-1,"    /*\n"],[0,"    //c0"]],"start1":3077,"start2":3077,"length1":23,"length2":16}]],"length":7066,"saved":false}
{"ts":1350961297689,"patch":[[{"diffs":[[0,"[7],4);\n    "],[-1,"*/"],[0,"\n    //retur"]],"start1":5953,"start2":5953,"length1":26,"length2":24}]],"length":7064,"saved":false}
{"ts":1350961314724,"patch":[[{"diffs":[[0," RubixState."],[-1,"createFace("],[1,"processCubie([["],[0,"faces[0][0],"]],"start1":3109,"start2":3109,"length1":35,"length2":39},{"diffs":[[0,"[0][0],0"],[1,"]"],[0,");\n    s"]],"start1":3141,"start2":3141,"length1":16,"length2":17}]],"length":7069,"saved":false}
{"ts":1350961323868,"patch":[[{"diffs":[[0,"0][0],0]"],[1,",[faces[5][6],5]"],[0,");\n    s"]],"start1":3142,"start2":3142,"length1":16,"length2":32},{"diffs":[[0,"ateFace("],[-1,"faces[5][6],5"],[0,");\n    s"]],"start1":3199,"start2":3199,"length1":29,"length2":16}]],"length":7072,"saved":false}
{"ts":1350961331622,"patch":[[{"diffs":[[0,"5][6],5]"],[1,",[faces[1][0],1]"],[0,");\n    s"]],"start1":3158,"start2":3158,"length1":16,"length2":32},{"diffs":[[0,"ateFace("],[-1,"faces[1][0],1"],[0,");\n    \n"]],"start1":3256,"start2":3256,"length1":29,"length2":16}]],"length":7075,"saved":false}
{"ts":1350961350260,"patch":[[{"diffs":[[0,".createFace("],[1,"[[faces[0][2],0],[faces[5][8],5]"],[0,");\n    state"]],"start1":3211,"start2":3211,"length1":24,"length2":56},{"diffs":[[0,"ateFace("],[-1,"faces[0][2],0"],[0,");\n    s"]],"start1":3343,"start2":3343,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[5][8],5"],[0,");\n    s"]],"start1":3384,"start2":3384,"length1":29,"length2":16}]],"length":7081,"saved":false}
{"ts":1350961357778,"patch":[[{"diffs":[[0,"5][8],5]"],[1,",[faces[3][2],3]]"],[0,");\n    s"]],"start1":3247,"start2":3247,"length1":16,"length2":33},{"diffs":[[0,"ateFace("],[-1,"faces[3][2],3"],[0,");\n    \n"]],"start1":3442,"start2":3442,"length1":29,"length2":16}]],"length":7085,"saved":false}
{"ts":1350961361760,"patch":[[{"diffs":[[0,"1][0],1]"],[1,"]"],[0,");\n    s"]],"start1":3174,"start2":3174,"length1":16,"length2":17}]],"length":7086,"saved":false}
{"ts":1350961369500,"patch":[[{"diffs":[[0,"ixState."],[-1,"createFac"],[1,"processCubi"],[0,"e([[face"]],"start1":3205,"start2":3205,"length1":25,"length2":27}]],"length":7088,"saved":false}
{"ts":1350961387534,"patch":[[{"diffs":[[0,"[2],3]]);\n  "],[1,"/*"],[0,"  state[2]  "]],"start1":3268,"start2":3268,"length1":24,"length2":26},{"diffs":[[0,"();\n"],[-1,"    \n    //c1\n"],[0,"    "]],"start1":3317,"start2":3317,"length1":22,"length2":8},{"diffs":[[0,"es[4][7],4);"],[1,"*/"],[0,"\n    \n    //"]],"start1":5960,"start2":5960,"length1":24,"length2":26}]],"length":7078,"saved":false}
{"ts":1350961457643,"patch":[[{"diffs":[[0,"3]]);\n  "],[-1,"/*"],[0,"  state["]],"start1":3272,"start2":3272,"length1":18,"length2":16},{"diffs":[[0,"tate.createFace("],[1,"[[faces[0][6],0],[faces[2][0],2],[faces[1][2],1]]"],[0,");\n    state[3] "]],"start1":3300,"start2":3300,"length1":32,"length2":81},{"diffs":[[0,"ateFace("],[-1,"faces[0][6],0"],[0,");\n    s"]],"start1":3535,"start2":3535,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[2][0],2"],[0,");\n    s"]],"start1":3576,"start2":3576,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[1][2],1"],[0,");\n    \n"]],"start1":3617,"start2":3617,"length1":29,"length2":16}]],"length":7086,"saved":false}
{"ts":1350961465624,"patch":[[{"diffs":[[0,"ixState."],[-1,"createFac"],[1,"processCubi"],[0,"e([[face"]],"start1":3297,"start2":3297,"length1":25,"length2":27}]],"length":7088,"saved":false}
{"ts":1350961483644,"patch":[[{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e();\n    sta"]],"start1":3385,"start2":3385,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e();\n    sta"]],"start1":3428,"start2":3428,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e();\n    \n  "]],"start1":3471,"start2":3471,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e();\n    sta"]],"start1":3528,"start2":3528,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e();\n    sta"]],"start1":3571,"start2":3571,"length1":33,"length2":35},{"diffs":[[0,"ixState."],[-1,"createFac"],[1,"processCubi"],[0,"e();\n   "]],"start1":3618,"start2":3618,"length1":25,"length2":27},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[0][8"]],"start1":3671,"start2":3671,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[2][2"]],"start1":3727,"start2":3727,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[3][0"]],"start1":3783,"start2":3783,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[5][0"]],"start1":3853,"start2":3853,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[4][6"]],"start1":3909,"start2":3909,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[1][6"]],"start1":3965,"start2":3965,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[2][6"]],"start1":4035,"start2":4035,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[4][0"]],"start1":4091,"start2":4091,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[1][8"]],"start1":4147,"start2":4147,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[2][8"]],"start1":4217,"start2":4217,"length1":33,"length2":35},{"diffs":[[0," RubixState."],[-1,"createFac"],[1,"processCubi"],[0,"e(faces[4][2"]],"start1":4273,"start2":4273,"length1":33,"length2":35}]],"length":7122,"saved":false}
{"ts":1350961498707,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[0][8],0],[faces[0][8],0],[faces[0][8],0]]"],[0,");\n    state[4] "]],"start1":3394,"start2":3394,"length1":32,"length2":81},{"diffs":[[0,"ssCubie("],[-1,"faces[0][8],0"],[0,");\n    s"]],"start1":3737,"start2":3737,"length1":29,"length2":16}]],"length":7158,"saved":false}
{"ts":1350961510614,"patch":[[{"diffs":[[0,"],0],[faces["],[-1,"0][8],0"],[1,"2][2],2"],[0,"],[faces[0]["]],"start1":3422,"start2":3422,"length1":31,"length2":31},{"diffs":[[0,"ssCubie("],[-1,"faces[2][2],2"],[0,");\n    s"]],"start1":3780,"start2":3780,"length1":29,"length2":16}]],"length":7145,"saved":false}
{"ts":1350961518271,"patch":[[{"diffs":[[0,",[faces["],[-1,"0][8],0]"],[1,"3][0],3"],[0,"]);\n    "]],"start1":3442,"start2":3442,"length1":24,"length2":23},{"diffs":[[0,"ssCubie("],[-1,"faces[3][0],3"],[0,");\n    \n"]],"start1":3822,"start2":3822,"length1":29,"length2":16}]],"length":7131,"saved":false}
{"ts":1350961519745,"patch":[[{"diffs":[[0,"3][0],3]"],[1,"]"],[0,");\n    s"]],"start1":3450,"start2":3450,"length1":16,"length2":17}]],"length":7132,"saved":false}
{"ts":1350961546125,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[(faces[5][0],5],[faces[4][6],4],faces[1][6],1["],[0,");\n    state[5] "]],"start1":3486,"start2":3486,"length1":32,"length2":80},{"diffs":[[0,"essCubie"],[-1,"(faces[5][0],5"],[0,");\n    s"]],"start1":3927,"start2":3927,"length1":30,"length2":16},{"diffs":[[0,"ssCubie("],[-1,"faces[4][6],4"],[0,");\n    s"]],"start1":3970,"start2":3970,"length1":29,"length2":16},{"diffs":[[0,"ssCubie("],[-1,"faces[1][6],1"],[0,");\n    \n"]],"start1":4013,"start2":4013,"length1":29,"length2":16}]],"length":7140,"saved":false}
{"ts":1350961550235,"patch":[[{"diffs":[[0,"][6],4],"],[1,"["],[0,"faces[1]"]],"start1":3528,"start2":3528,"length1":16,"length2":17},{"diffs":[[0,"[1][6],1"],[-1,"["],[1,"]]"],[0,");\n    s"]],"start1":3542,"start2":3542,"length1":17,"length2":18}]],"length":7142,"saved":false}
{"ts":1350961587492,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"("],[0,"faces[5]"]],"start1":3496,"start2":3496,"length1":17,"length2":16}]],"length":7141,"saved":false}
{"ts":1350961619949,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[2][6],2],[faces[4][0],4],[]]"],[0,");\n    \n    //c2"]],"start1":3578,"start2":3578,"length1":32,"length2":68},{"diffs":[[0,"ssCubie("],[-1,"faces[2][6],2"],[0,");\n    s"]],"start1":4107,"start2":4107,"length1":29,"length2":16},{"diffs":[[0,"ssCubie("],[-1,"faces[4][0],4"],[0,");\n    s"]],"start1":4150,"start2":4150,"length1":29,"length2":16}]],"length":7151,"saved":false}
{"ts":1350961625591,"patch":[[{"diffs":[[0,"[0],4],["],[1,"faces[1][8],1"],[0,"]]);\n   "]],"start1":3620,"start2":3620,"length1":16,"length2":29},{"diffs":[[0,"ssCubie("],[-1,"faces[1][8],1"],[0,");\n    \n"]],"start1":4206,"start2":4206,"length1":29,"length2":16}]],"length":7151,"saved":false}
{"ts":1350961647920,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[2][8],2],[faces[4][2],4],[]]"],[0,");\n    state[7] "]],"start1":3684,"start2":3684,"length1":32,"length2":68},{"diffs":[[0,"ssCubie("],[-1,"faces[2][8],2"],[0,");\n    s"]],"start1":4299,"start2":4299,"length1":29,"length2":16},{"diffs":[[0,"ssCubie("],[-1,"faces[4][2],4"],[0,");\n    s"]],"start1":4342,"start2":4342,"length1":29,"length2":16}]],"length":7161,"saved":false}
{"ts":1350961654344,"patch":[[{"diffs":[[0,"[2],4],["],[1,"faces[3][6],3"],[0,"]]);\n   "]],"start1":3726,"start2":3726,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[3][6],3"],[0,");   \n  "]],"start1":4396,"start2":4396,"length1":29,"length2":16}]],"length":7161,"saved":false}
{"ts":1350961727058,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[5][2],5],[],[]]"],[0,");\n    state[8] "]],"start1":3776,"start2":3776,"length1":32,"length2":55},{"diffs":[[0,"\n   "],[-1," state[20] = RubixState.createFace();   \n    "],[0,"\n   "]],"start1":4388,"start2":4388,"length1":53,"length2":8},{"diffs":[[0,"ateFace("],[-1,"faces[5][2],5"],[0,");\n    s"]],"start1":4432,"start2":4432,"length1":29,"length2":16}]],"length":7126,"saved":false}
{"ts":1350961736385,"patch":[[{"diffs":[[0,"[2],5],["],[1,"faces[4][8],4"],[0,"],[]]);\n"]],"start1":3802,"start2":3802,"length1":16,"length2":29},{"diffs":[[0,"Face"],[-1,"(faces[4][8],4"],[0,");\n "]],"start1":4489,"start2":4489,"length1":22,"length2":8}]],"length":7125,"saved":false}
{"ts":1350961743099,"patch":[[{"diffs":[[0,"[8],4],["],[1,"faces[3][8],3"],[0,"]]);\n   "]],"start1":3818,"start2":3818,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[3][8],3"],[0,");\n    \n"]],"start1":4539,"start2":4539,"length1":29,"length2":16}]],"length":7125,"saved":false}
{"ts":1350961746748,"patch":[[{"diffs":[[0,"essCubie"],[1,"("],[0,");\n    s"]],"start1":4075,"start2":4075,"length1":16,"length2":17}]],"length":7126,"saved":false}
{"ts":1350961751287,"patch":[[{"diffs":[[0,"]);\n"],[-1,"    \n    //c2\n"],[0,"    "]],"start1":3642,"start2":3642,"length1":22,"length2":8}]],"length":7112,"saved":false}
{"ts":1350961752721,"patch":[[{"diffs":[[0,"ces[3][8],3]]);\n"],[1,"    \n"],[0,"    state[8]  = "]],"start1":3814,"start2":3814,"length1":32,"length2":37}]],"length":7117,"saved":false}
{"ts":1350961759560,"patch":[[{"diffs":[[0,"();\n"],[-1,"    \n    //c3\n"],[0,"    "]],"start1":3874,"start2":3874,"length1":22,"length2":8},{"diffs":[[0,"();\n"],[-1,"    \n    //c4\n"],[0,"    "]],"start1":4003,"start2":4003,"length1":22,"length2":8}]],"length":7089,"saved":false}
{"ts":1350961764765,"patch":[[{"diffs":[[0,"();\n"],[-1,"    \n    //c5\n"],[0,"    "]],"start1":4132,"start2":4132,"length1":22,"length2":8}]],"length":7075,"saved":false}
{"ts":1350961767527,"patch":[[{"diffs":[[0,"();\n"],[-1,"    \n    //c6\n"],[0,"    "]],"start1":4261,"start2":4261,"length1":22,"length2":8}]],"length":7061,"saved":false}
{"ts":1350961772286,"patch":[[{"diffs":[[0,"   \n"],[-1,"    //c7\n    state[21] = RubixState.createFace();\n    state[22] = RubixState.createFace);\n    state[23] = RubixState.createFace();\n"],[0,"    "]],"start1":4351,"start2":4351,"length1":139,"length2":8}]],"length":6930,"saved":false}
{"ts":1350961789893,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[0][1],0],[]]"],[0,");\n    state[9] "]],"start1":3859,"start2":3859,"length1":32,"length2":52},{"diffs":[[0,"ateFace("],[-1,"faces[0][1],0"],[0,");\n    s"]],"start1":4419,"start2":4419,"length1":29,"length2":16}]],"length":6937,"saved":false}
{"ts":1350961798053,"patch":[[{"diffs":[[0,"[1],0],["],[1,"faces[5][7],5"],[0,"]]);\n   "]],"start1":3885,"start2":3885,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[5][7],5"],[0,");\n    \n"]],"start1":4473,"start2":4473,"length1":29,"length2":16}]],"length":6937,"saved":false}
{"ts":1350961804050,"patch":[[{"diffs":[[0,"();\n"],[-1,"   \n    \n    //s0\n    state[24] = RubixState.createFace();\n    state[25] = RubixState.createFace();\n"],[0,"    "]],"start1":4380,"start2":4380,"length1":108,"length2":8}]],"length":6837,"saved":false}
{"ts":1350961815990,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[0][3],0],[]]"],[0,");\n    state[10]"]],"start1":3935,"start2":3935,"length1":32,"length2":52},{"diffs":[[0,"ateFace("],[-1,"faces[0][3],0"],[0,");\n    s"]],"start1":4448,"start2":4448,"length1":29,"length2":16}]],"length":6844,"saved":false}
{"ts":1350961830008,"patch":[[{"diffs":[[0,"[3],0],["],[1,"faces[1][1],1"],[0,"]]);\n   "]],"start1":3961,"start2":3961,"length1":16,"length2":29},{"diffs":[[0,"te.processCubie("],[1,"[[faces[0][5],0],[]]"],[0,");\n    state[11]"]],"start1":4011,"start2":4011,"length1":32,"length2":52},{"diffs":[[0,"ateFace("],[-1,"faces[1][1],1"],[0,");\n    \n"]],"start1":4522,"start2":4522,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[0][5],0"],[0,");\n    s"]],"start1":4577,"start2":4577,"length1":29,"length2":16}]],"length":6851,"saved":false}
{"ts":1350961835746,"patch":[[{"diffs":[[0,"[5],0],["],[1,"faces[3][1],3"],[0,"]]);\n   "]],"start1":4037,"start2":4037,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[3][1],3"],[0,");\n    \n"]],"start1":4631,"start2":4631,"length1":29,"length2":16}]],"length":6851,"saved":false}
{"ts":1350961876681,"patch":[[{"diffs":[[0,"   \n"],[-1,"    //s1\n    state[26] = RubixState.createFace();\n    state[27] = RubixState.createFace();\n    \n    //s2\n    state[28] = RubixState.createFace();\n    state[29] = RubixState.createFace();\n    \n"],[0,"    "]],"start1":4451,"start2":4451,"length1":200,"length2":8},{"diffs":[[0,"alue\":0 "],[1,",\"orientValue\":0"],[0,"},\n  \"BR"]],"start1":6227,"start2":6227,"length1":16,"length2":32}]],"length":6675,"saved":false}
{"ts":1350961891989,"patch":[[{"diffs":[[0,"\":0 "],[-1,",\"orientValue\":0"],[0,"},\n "]],"start1":6231,"start2":6231,"length1":24,"length2":8}]],"length":6659,"saved":false}
{"ts":1350961935675,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[],[]]"],[0,");\n    state[12]"]],"start1":4087,"start2":4087,"length1":32,"length2":39}]],"length":6666,"saved":false}
{"ts":1350961946104,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[0][7],0],[faces[2][1],2"],[0,"]]);\n   "]],"start1":4097,"start2":4097,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[0][7],0"],[0,");\n    s"]],"start1":4527,"start2":4527,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[2][1],2"],[0,");\n    \n"]],"start1":4568,"start2":4568,"length1":29,"length2":16}]],"length":6666,"saved":false}
{"ts":1350961954486,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[],[]]"],[0,");\n    state[13]"]],"start1":4163,"start2":4163,"length1":32,"length2":39}]],"length":6673,"saved":false}
{"ts":1350961964501,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[5][3],5],[faces[1][3],1"],[0,"]]);\n   "]],"start1":4173,"start2":4173,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[5][3],5"],[0,");\n    s"]],"start1":4656,"start2":4656,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[1][3],1"],[0,");\n    \n"]],"start1":4697,"start2":4697,"length1":29,"length2":16}]],"length":6673,"saved":false}
{"ts":1350961977491,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[faces[2][3],2],[]]"],[0,");\n    state[14]"]],"start1":4239,"start2":4239,"length1":32,"length2":52},{"diffs":[[0,"ateFace("],[-1,"faces[2][3],2"],[0,");\n    s"]],"start1":4772,"start2":4772,"length1":29,"length2":16}]],"length":6680,"saved":false}
{"ts":1350961981710,"patch":[[{"diffs":[[0,"[3],2],["],[1,"faces[1][5],1"],[0,"]]);\n   "]],"start1":4265,"start2":4265,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[1][5],1"],[0,");\n    \n"]],"start1":4826,"start2":4826,"length1":29,"length2":16}]],"length":6680,"saved":false}
{"ts":1350961985185,"patch":[[{"diffs":[[0,");\n "],[-1,"   \n    //s3\n    state[30] = RubixState.createFace();\n    state[31] = RubixState.createFace();\n    \n    //s4\n    state[32] = RubixState.createFace();\n    state[33] = RubixState.createFace();\n    \n    //s5\n    state[34] = RubixState.createFace();\n    state[35] = RubixState.createFace();"],[0,"\n   "]],"start1":4546,"start2":4546,"length1":294,"length2":8}]],"length":6394,"saved":false}
{"ts":1350961991940,"patch":[[{"diffs":[[0,"ate.processCubie"],[-1,"("],[1,"[[],[]]"],[0,");\n    state[15]"]],"start1":4314,"start2":4314,"length1":33,"length2":39}]],"length":6400,"saved":false}
{"ts":1350961997937,"patch":[[{"diffs":[[0,"essCubie"],[1,"("],[0,"[[],[]])"]],"start1":4322,"start2":4322,"length1":16,"length2":17}]],"length":6401,"saved":false}
{"ts":1350962007148,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[2][5],2],[faces[3][3],3"],[0,"]]);\n   "]],"start1":4325,"start2":4325,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[2][5],2"],[0,");\n    s"]],"start1":4628,"start2":4628,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[3][3],3"],[0,");\n    \n"]],"start1":4669,"start2":4669,"length1":29,"length2":16}]],"length":6401,"saved":false}
{"ts":1350962012907,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[],[]]"],[0,");\n    state[16]"]],"start1":4391,"start2":4391,"length1":32,"length2":39}]],"length":6408,"saved":false}
{"ts":1350962021851,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[5][5],5],[faces[3][5],3"],[0,"]]);\n   "]],"start1":4401,"start2":4401,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[5][5],5"],[0,");\n    s"]],"start1":4757,"start2":4757,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[3][5],3"],[0,");\n    \n"]],"start1":4798,"start2":4798,"length1":29,"length2":16}]],"length":6408,"saved":false}
{"ts":1350962034278,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[],[]]"],[0,");\n"],[-1,""],[0,"    state[17] = "]],"start1":4467,"start2":4467,"length1":35,"length2":42},{"diffs":[[0,"processCubie();\n"],[1,""],[0,"    state[19] = "]],"start1":4563,"start2":4563,"length1":32,"length2":32},{"diffs":[[0,"();\n"],[-1," \n    \n    //s6\n    state[36] = RubixState.createFace();\n    state[37] = RubixState.createFace();\n    \n    //s7\n    state[38] = RubixState.createFace();\n    state[39] = RubixState.createFace();\n"],[0,"    "]],"start1":4618,"start2":4618,"length1":202,"length2":8}]],"length":6221,"saved":false}
{"ts":1350962042418,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[4][3],4],[faces[1][7],1"],[0,"]]);\n   "]],"start1":4477,"start2":4477,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[4][3],4"],[0,");\n    s"]],"start1":4692,"start2":4692,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[1][7],1"],[0,");\n    \n"]],"start1":4733,"start2":4733,"length1":29,"length2":16}]],"length":6221,"saved":false}
{"ts":1350962047326,"patch":[[{"diffs":[[0,"te.processCubie("],[1,"[[],[]]"],[0,");\n    state[18]"]],"start1":4543,"start2":4543,"length1":32,"length2":39}]],"length":6228,"saved":false}
{"ts":1350962058455,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[2][7],2],[faces[4][1],4"],[0,"]]);\n   "]],"start1":4553,"start2":4553,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[2][7],2"],[0,");\n    s"]],"start1":4821,"start2":4821,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[4][1],4"],[0,");\n     "]],"start1":4862,"start2":4862,"length1":29,"length2":16}]],"length":6228,"saved":false}
{"ts":1350962063183,"patch":[[{"diffs":[[0,"rocessCubie("],[1,"[[],[]]"],[0,");\n    state"]],"start1":4623,"start2":4623,"length1":24,"length2":31}]],"length":6235,"saved":false}
{"ts":1350962067982,"patch":[[{"diffs":[[0,"Cubie([["],[1,"faces[4][5],4"],[0,"],[]]);\n"]],"start1":4629,"start2":4629,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[4][5],4"],[0,");\n    s"]],"start1":4942,"start2":4942,"length1":29,"length2":16}]],"length":6235,"saved":false}
{"ts":1350962072535,"patch":[[{"diffs":[[0,"[5],4],["],[1,"faces[3][7],3"],[0,"]]);\n   "]],"start1":4645,"start2":4645,"length1":16,"length2":29},{"diffs":[[0,"ateFace("],[-1,"faces[3][7],3"],[0,");\n    \n"]],"start1":4996,"start2":4996,"length1":29,"length2":16}]],"length":6235,"saved":false}
{"ts":1350962078311,"patch":[[{"diffs":[[0,"();\n"],[-1,"    \n    //s8\n    state[40] = RubixState.createFace();\n    state[41] = RubixState.createFace();\n    \n    //s9\n    state[42] = RubixState.createFace();\n    state[43] = RubixState.createFace();\n        \n    //s10\n    state[44] = RubixState.createFace();\n    state[45] = RubixState.createFace();"],[0,"\n   "]],"start1":4710,"start2":4710,"length1":300,"length2":8}]],"length":5943,"saved":false}
{"ts":1350962084490,"patch":[[{"diffs":[[0,"ssCubie("],[1,"[[],[]]"],[0,");\n\n    "]],"start1":4703,"start2":4703,"length1":16,"length2":23}]],"length":5950,"saved":false}
{"ts":1350962095410,"patch":[[{"diffs":[[0,"Cubie([["],[-1,"],["],[1,"faces[5][1],5],[faces[4][7],4"],[0,"]]);\n\n  "]],"start1":4705,"start2":4705,"length1":19,"length2":45},{"diffs":[[0,"ateFace("],[-1,"faces[5][1],5"],[0,");\n    s"]],"start1":4793,"start2":4793,"length1":29,"length2":16},{"diffs":[[0,"ateFace("],[-1,"faces[4][7],4"],[0,");*/\n   "]],"start1":4834,"start2":4834,"length1":29,"length2":16}]],"length":5950,"saved":false}
{"ts":1350962099476,"patch":[[{"diffs":[[0,"]]);"],[-1,"\n\n    \n    //s11\n    state[46] = RubixState.createFace();\n    state[47] = RubixState.createFace();*/\n    "],[0,"\n   "]],"start1":4742,"start2":4742,"length1":113,"length2":8}]],"length":5845,"saved":false}
{"ts":1350962242126,"patch":[[{"diffs":[[0,"5][7],5]]);\n"],[1,"    console.log(\"before\");\n"],[0,"    state[9]"]],"start1":3899,"start2":3899,"length1":24,"length2":51},{"diffs":[[0,"ces[1][1],1]]);\n"],[1,"    console.log(\"after\");\n"],[0,"    state[10] = "]],"start1":3998,"start2":3998,"length1":32,"length2":58},{"diffs":[[0,"4][7],4]]);\n"],[1,"    \n"],[0,"    //return"]],"start1":4788,"start2":4788,"length1":24,"length2":29}]],"length":5903,"saved":false}
{"ts":1350962287082,"patch":[[{"diffs":[[0,"\"before\""],[1,",faces[1][1]"],[0,");\n    s"]],"start1":3927,"start2":3927,"length1":16,"length2":28}]],"length":5915,"saved":false}
{"ts":1350962303677,"patch":[[{"diffs":[[0,"es[1][1]"],[1,",faces[0][3]"],[0,");\n    s"]],"start1":3939,"start2":3939,"length1":16,"length2":28}]],"length":5927,"saved":false}
{"ts":1350962410072,"patch":[[{"diffs":[[0," \"\";"],[-1,"\n    faces.sort();\n"],[0,"    "]],"start1":4959,"start2":4959,"length1":27,"length2":8},{"diffs":[[0," = {\n  \""],[-1,"G"],[0,"R"],[1,"G"],[0,"W\":{\"val"]],"start1":5460,"start2":5460,"length1":18,"length2":18},{"diffs":[[0,"\":0 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"B"],[0,"RW"],[1,"B"],[0,"\":{\""]],"start1":5480,"start2":5480,"length1":17,"length2":33},{"diffs":[[0,"\":1 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"G"],[0,"RY"],[1,"G"],[0,"\":{\""]],"start1":5518,"start2":5518,"length1":17,"length2":33},{"diffs":[[0,"alue\":2 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"B"],[0,"R"],[1,"B"],[0,"Y\":{\"val"]],"start1":5552,"start2":5552,"length1":24,"length2":40},{"diffs":[[0,"\":3 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"G"],[0,"OW"],[1,"G"],[0,"\":{\""]],"start1":5594,"start2":5594,"length1":17,"length2":33},{"diffs":[[0,"alue\":4 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"G"],[0,"O"],[1,"G"],[0,"Y\":{\"val"]],"start1":5628,"start2":5628,"length1":24,"length2":40},{"diffs":[[0,"\":5 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"B"],[0,"OY"],[1,"B"],[0,"\":{\""]],"start1":5670,"start2":5670,"length1":17,"length2":33},{"diffs":[[0,"alue\":6 "],[1,",\"orientValue\":0"],[0,"},\n  \""],[-1,"B"],[0,"O"],[1,"B"],[0,"W\":{\"val"]],"start1":5704,"start2":5704,"length1":24,"length2":40},{"diffs":[[0,"alue\":7 "],[1,",\"orientValue\":0"],[0,"},\n  \"RW"]],"start1":5742,"start2":5742,"length1":16,"length2":32},{"diffs":[[0,"\n  \""],[-1,"B"],[0,"R"],[1,"G"],[0,"\" :{"]],"start1":5790,"start2":5790,"length1":10,"length2":10},{"diffs":[[0,"e\":9"],[-1," "],[0,"},\n  \""],[-1,"G"],[0,"R"],[1,"B"],[0,"\" :{"]],"start1":5805,"start2":5805,"length1":17,"length2":16},{"diffs":[[0,"alue\":10"],[1," "],[0,"},\n  \"RY"]],"start1":5823,"start2":5823,"length1":16,"length2":17},{"diffs":[[0,"11},\n  \""],[-1,"G"],[0,"W"],[1,"G"],[0,"\" :{\"val"]],"start1":5852,"start2":5852,"length1":18,"length2":18},{"diffs":[[0,"13},\n  \""],[-1,"B"],[0,"Y"],[1,"B"],[0,"\" :{\"val"]],"start1":5896,"start2":5896,"length1":18,"length2":18},{"diffs":[[0,"\n  \""],[-1,"G"],[0,"O"],[1,"G"],[0,"\" :{"]],"start1":5944,"start2":5944,"length1":10,"length2":10},{"diffs":[[0,"17},\n  \""],[-1,"B"],[0,"O"],[1,"B"],[0,"\" :{\"val"]],"start1":5984,"start2":5984,"length1":18,"length2":18}]],"length":6036,"saved":false}
{"ts":1350962606972,"patch":[[{"diffs":[[0,"     \n    }\n"],[1,"    \n\n"],[0,"    console."]],"start1":5045,"start2":5045,"length1":24,"length2":30}]],"length":6042,"saved":false}
{"ts":1350962617099,"patch":[[{"diffs":[[0,"aces[0]["],[-1,"3"],[0,"]);\n    "]],"start1":3949,"start2":3949,"length1":17,"length2":16},{"diffs":[[0,"]);\n"],[-1,"    console.log(\"after\");\n"],[0,"    "]],"start1":4033,"start2":4033,"length1":34,"length2":8}]],"length":6015,"saved":false}
{"ts":1350962619224,"patch":[[{"diffs":[[0,"]);\n"],[-1,"    console.log(\"before\",faces[1][1],faces[0][]);\n"],[0,"    "]],"start1":3907,"start2":3907,"length1":58,"length2":8}]],"length":5965,"saved":false}
{"ts":1350962623231,"patch":[[{"diffs":[[0,"\n    //c"],[-1,"0"],[1,"orner"],[0,"\n    sta"]],"start1":3084,"start2":3084,"length1":17,"length2":21}]],"length":5969,"saved":false}
{"ts":1350962626761,"patch":[[{"diffs":[[0,",3]]);\n    \n"],[1,"    //side\n"],[0,"    state[8]"]],"start1":3827,"start2":3827,"length1":24,"length2":35}]],"length":5980,"saved":false}
{"ts":1350962679097,"patch":[[{"diffs":[[0,"  */"],[-1,"\n    //corners\n    \n    \n"],[0,"    "]],"start1":3051,"start2":3051,"length1":33,"length2":8},{"diffs":[[0,"alue\":8 "],[1,",\"orientValue\":0"],[0,"},\n  \"RG"]],"start1":5699,"start2":5699,"length1":16,"length2":32},{"diffs":[[0,"value\":9"],[1," ,\"orientValue\":0"],[0,"},\n  \"RB"]],"start1":5736,"start2":5736,"length1":16,"length2":33}]],"length":5988,"saved":false}
{"ts":1350962683498,"patch":[[{"diffs":[[0,"alue\":8 "],[-1,",\"orientValue\":0"],[0,"},\n  \"RG"]],"start1":5699,"start2":5699,"length1":32,"length2":16},{"diffs":[[0,"value\":9"],[-1," ,\"orientValue\":0"],[0,"},\n  \"RB"]],"start1":5720,"start2":5720,"length1":33,"length2":16}]],"length":5955,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350963094004,"patch":[[{"diffs":[[1,"function RubixState(){}\n\n\n/**\n * Creates a Rubik cube with the goal state.\n */\nRubixState.createWithGoalState = function()\n{\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\n};\n\n/**\n * Creates a Rubik Cube from an upper case String of characters from a string \n * from the alphabet: {R,G,Y,B,O,W}.\n * \n * @param text The textual representation of the rubik cube as specified in the \n *      assignment.\n * @return A state for the supplied text.\n */\nRubixState.createWithString = function(text)\n{\n    \n    if(text.length !=  54) \n    {\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\n            \" faces!\");\n        return null;\n    }\n    \n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\n    \n    if(error !== \"\")\n    {\n        console.log(error);\n        return null;\n    }\n    \n    // An array to hold the intermediate state.\n    var faces = [];\n    \n    // Iterate over the input string to organize our data.\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\n    {\n        line = text.substring(index*9,index*9 + 9);\n        \n        // Switch on indices in a manner befitting of a boss.\n        switch(index)\n        {\n            case 1:\n                faces.push(line.substring(0,3));\n                faces.push(line.substring(3,6));\n                faces.push(line.substring(6,9));\n                break;\n            case 2 :\n            case 3 :\n                faces[1] += line.substring(0,3);\n                faces[2] += line.substring(3,6);\n                faces[3] += line.substring(6,9);\n                break;\n            default:\n                faces.push(line);\n                break;\n        }        \n    }\n    \n    // Splits the strings into character arrays.\n    for(var face in faces)\n    {\n        faces[face] = faces[face].split('');\n    }\n    \n    // Check the center cubies before advancing.\n    for(index = 0; index < faces.length; index ++)\n    {\n        if(RubixState.faceValues[index] !== faces[index][4])\n        {\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\n                 \" is wrong!\");\n            return null;\n        }\n    }\n        \n    var state = new Uint8Array(new ArrayBuffer(48));\n\n    /*\n             00 08 01\n             09 -R 10\n             02 11 03\n    00 09 02 02 11 03 03 10 01\n    12 -G 13 13 -Y 14 14 -B 15\n    04 16 05 05 17 06 06 18 07\n             05 17 06\n             16 -O 18\n             04 19 07\n             04 19 07\n             12 -W 15\n             00 08 01   \n    */    \n    //corner\n    state[0]  = RubixState.processCubie([[faces[0][0],0],[faces[5][6],5],[faces[1][0],1]]);\n    state[1]  = RubixState.processCubie([[faces[0][2],0],[faces[5][8],5],[faces[3][2],3]]);\n    state[2]  = RubixState.processCubie([[faces[0][6],0],[faces[2][0],2],[faces[1][2],1]]);\n    state[3]  = RubixState.processCubie([[faces[0][8],0],[faces[2][2],2],[faces[3][0],3]]);\n    state[4]  = RubixState.processCubie([[faces[5][0],5],[faces[4][6],4],[faces[1][6],1]]);\n    state[5]  = RubixState.processCubie([[faces[2][6],2],[faces[4][0],4],[faces[1][8],1]]);\n    state[6]  = RubixState.processCubie([[faces[2][8],2],[faces[4][2],4],[faces[3][6],3]]);\n    state[7]  = RubixState.processCubie([[faces[5][2],5],[faces[4][8],4],[faces[3][8],3]]);\n    \n    //side\n    state[8]  = RubixState.processCubie([[faces[0][1],0],[faces[5][7],5]]);\n    state[9]  = RubixState.processCubie([[faces[0][3],0],[faces[1][1],1]]);\n    state[10] = RubixState.processCubie([[faces[0][5],0],[faces[3][1],3]]);\n    state[11] = RubixState.processCubie([[faces[0][7],0],[faces[2][1],2]]);\n    state[12] = RubixState.processCubie([[faces[5][3],5],[faces[1][3],1]]);\n    state[13] = RubixState.processCubie([[faces[2][3],2],[faces[1][5],1]]);\n    state[14] = RubixState.processCubie([[faces[2][5],2],[faces[3][3],3]]);\n    state[15] = RubixState.processCubie([[faces[5][5],5],[faces[3][5],3]]);\n    state[16] = RubixState.processCubie([[faces[4][3],4],[faces[1][7],1]]);\n    state[17] = RubixState.processCubie([[faces[2][7],2],[faces[4][1],4]]);\n    state[18] = RubixState.processCubie([[faces[4][5],4],[faces[3][7],3]]);\n    state[19] = RubixState.processCubie([[faces[5][1],5],[faces[4][7],4]]);\n    \n    //return RubixState.verifyState(state) ? state : null;\n};\n\nRubixState.processCubie = function (faces)\n{\n    var cornerString = \"\";    \n    for(var index in faces)\n    {\n        cornerString += faces[index][0];        \n    }\n    \n\n   // console.log(RubixState.cubies[cornerString].value);\n    return null..(RubixState.cubies[cornerString].value * 8) + faces[0][1];\n};\n\nRubixState.sortFace = function(faceA, faceB)\n{\n    return faceA[0].localeCompare(faceB[0]);\n};\n\n\n// The face value map used in tanslating moves to something human readable. \nRubixState.faceValues = ['R','G','Y','B','O','W'];\n\n//Leading character Dominates\nRubixState.cubies = {\n  \"RGW\":{\"value\":0 ,\"orientValue\":0},\n  \"RWB\":{\"value\":1 ,\"orientValue\":0},\n  \"RYG\":{\"value\":2 ,\"orientValue\":0},\n  \"RBY\":{\"value\":3 ,\"orientValue\":0},\n  \"OWG\":{\"value\":4 ,\"orientValue\":0},\n  \"OGY\":{\"value\":5 ,\"orientValue\":0},\n  \"OYB\":{\"value\":6 ,\"orientValue\":0},\n  \"OBW\":{\"value\":7 ,\"orientValue\":0},\n  \"RW\" :{\"value\":8 },\n  \"RG\" :{\"value\":9},\n  \"RB\" :{\"value\":10 },\n  \"RY\" :{\"value\":11},\n  \"WG\" :{\"value\":12},\n  \"GY\" :{\"value\":13},\n  \"YB\" :{\"value\":14},\n  \"BW\" :{\"value\":15},\n  \"OG\" :{\"value\":16},\n  \"OY\" :{\"value\":17},\n  \"OB\" :{\"value\":18},\n  \"OW\" :{\"value\":19}  \n};"]],"start1":0,"start2":0,"length1":0,"length2":5963}]],"length":5963,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350963095529,"patch":[[{"diffs":[[0,"null"],[-1,".."],[1,";//"],[0,"(Rub"]],"start1":5045,"start2":5045,"length1":10,"length2":11}]],"length":5964,"saved":false}
{"ts":1350963919945,"patch":[[{"diffs":[[0,"g = \"\";    \n"],[1,"    \n"],[0,"    for(var "]],"start1":4869,"start2":4869,"length1":24,"length2":29},{"diffs":[[0," }\n    \n"],[1,"    //TODO make this actually assign values...\n    "],[0,"\n   // c"]],"start1":4972,"start2":4972,"length1":16,"length2":67},{"diffs":[[0,"]);\n};\n\n"],[1,"//TODO rotations.\n\n//TODO verifier."],[0,"\n// The "]],"start1":5259,"start2":5259,"length1":16,"length2":51}]],"length":6055,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350996924885,"patch":[[{"diffs":[[0,"   \n    //corner"],[1,"s"],[0,"\n"],[-1,""],[0,"    state[0]  = "]],"start1":3056,"start2":3056,"length1":33,"length2":34},{"diffs":[[0,"\n    \n    //side"],[1,"s"],[0,"\n    state[8]  ="]],"start1":3809,"start2":3809,"length1":32,"length2":33},{"diffs":[[0,"tions.\n\n"],[1,""],[0,"//TODO v"]],"start1":5280,"start2":5280,"length1":16,"length2":16},{"diffs":[[0," \n};"],[-1,"function RubixState(){}\n\n\n/**\n * Creates a Rubik cube with the goal state.\n */\nRubixState.createWithGoalState = function()\n{\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\n};\n\n/**\n * Creates a Rubik Cube from an upper case String of characters from a string \n * from the alphabet: {R,G,Y,B,O,W}.\n * \n * @param text The textual representation of the rubik cube as specified in the \n *      assignment.\n * @return A state for the supplied text.\n */\nRubixState.createWithString = function(text)\n{\n    \n    if(text.length !=  54) \n    {\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\n            \" faces!\");\n        return null;\n    }\n    \n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\n    \n    if(error !== \"\")\n    {\n        console.log(error);\n        return null;\n    }\n    \n    // An array to hold the intermediate state.\n    var faces = [];\n    \n    // Iterate over the input string to organize our data.\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\n    {\n        line = text.substring(index*9,index*9 + 9);\n        \n        // Switch on indices in a manner befitting of a boss.\n        switch(index)\n        {\n            case 1:\n                faces.push(line.substring(0,3));\n                faces.push(line.substring(3,6));\n                faces.push(line.substring(6,9));\n                break;\n            case 2 :\n            case 3 :\n                faces[1] += line.substring(0,3);\n                faces[2] += line.substring(3,6);\n                faces[3] += line.substring(6,9);\n                break;\n            default:\n                faces.push(line);\n                break;\n        }        \n    }\n    \n    // Splits the strings into character arrays.\n    for(var face in faces)\n    {\n        faces[face] = faces[face].split('');\n    }\n    \n    // Check the center cubies before advancing.\n    for(index = 0; index < faces.length; index ++)\n    {\n        if(RubixState.faceValues[index] !== faces[index][4])\n        {\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\n                 \" is wrong!\");\n            return null;\n        }\n    }\n        \n    var state = new Uint8Array(new ArrayBuffer(48));\n\n    /*\n             00 08 01\n             09 -R 10\n             02 11 03\n    00 09 02 02 11 03 03 10 01\n    12 -G 13 13 -Y 14 14 -B 15\n    04 16 05 05 17 06 06 18 07\n             05 17 06\n             16 -O 18\n             04 19 07\n             04 19 07\n             12 -W 15\n             00 08 01   \n    */    \n    //corner\n    state[0]  = RubixState.processCubie([[faces[0][0],0],[faces[5][6],5],[faces[1][0],1]]);\n    state[1]  = RubixState.processCubie([[faces[0][2],0],[faces[5][8],5],[faces[3][2],3]]);\n    state[2]  = RubixState.processCubie([[faces[0][6],0],[faces[2][0],2],[faces[1][2],1]]);\n    state[3]  = RubixState.processCubie([[faces[0][8],0],[faces[2][2],2],[faces[3][0],3]]);\n    state[4]  = RubixState.processCubie([[faces[5][0],5],[faces[4][6],4],[faces[1][6],1]]);\n    state[5]  = RubixState.processCubie([[faces[2][6],2],[faces[4][0],4],[faces[1][8],1]]);\n    state[6]  = RubixState.processCubie([[faces[2][8],2],[faces[4][2],4],[faces[3][6],3]]);\n    state[7]  = RubixState.processCubie([[faces[5][2],5],[faces[4][8],4],[faces[3][8],3]]);\n    \n    //side\n    state[8]  = RubixState.processCubie([[faces[0][1],0],[faces[5][7],5]]);\n    state[9]  = RubixState.processCubie([[faces[0][3],0],[faces[1][1],1]]);\n    state[10] = RubixState.processCubie([[faces[0][5],0],[faces[3][1],3]]);\n    state[11] = RubixState.processCubie([[faces[0][7],0],[faces[2][1],2]]);\n    state[12] = RubixState.processCubie([[faces[5][3],5],[faces[1][3],1]]);\n    state[13] = RubixState.processCubie([[faces[2][3],2],[faces[1][5],1]]);\n    state[14] = RubixState.processCubie([[faces[2][5],2],[faces[3][3],3]]);\n    state[15] = RubixState.processCubie([[faces[5][5],5],[faces[3][5],3]]);\n    state[16] = RubixState.processCubie([[faces[4][3],4],[faces[1][7],1]]);\n    state[17] = RubixState.processCubie([[faces[2][7],2],[faces[4][1],4]]);\n    state[18] = RubixState.processCubie([[faces[4][5],4],[faces[3][7],3]]);\n    state[19] = RubixState.processCubie([[faces[5][1],5],[faces[4][7],4]]);\n    \n    //return RubixState.verifyState(state) ? state : null;\n};\n\nRubixState.processCubie = function (faces)\n{\n    var cornerString = \"\";    \n    for(var index in faces)\n    {\n        cornerString += faces[index][0];        \n    }\n    \n\n    console.log(RubixState.cubies[cornerString].value);\n    return (RubixState.cubies[cornerString].value * 8) + faces[0][1];\n};\n\nRubixState.sortFace = function(faceA, faceB)\n{\n    return faceA[0].localeCompare(faceB[0]);\n};\n\n\n// The face value map used in tanslating moves to something human readable. \nRubixState.faceValues = ['R','G','Y','B','O','W'];\n\n//Leading character Dominates\nRubixState.cubies = {\n  \"RGW\":{\"value\":0 ,\"orientValue\":0},\n  \"RWB\":{\"value\":1 ,\"orientValue\":0},\n  \"RYG\":{\"value\":2 ,\"orientValue\":0},\n  \"RBY\":{\"value\":3 ,\"orientValue\":0},\n  \"OWG\":{\"value\":4 ,\"orientValue\":0},\n  \"OGY\":{\"value\":5 ,\"orientValue\":0},\n  \"OYB\":{\"value\":6 ,\"orientValue\":0},\n  \"OBW\":{\"value\":7 ,\"orientValue\":0},\n  \"RW\" :{\"value\":8 },\n  \"RG\" :{\"value\":9},\n  \"RB\" :{\"value\":10 },\n  \"RY\" :{\"value\":11},\n  \"WG\" :{\"value\":12},\n  \"GY\" :{\"value\":13},\n  \"YB\" :{\"value\":14},\n  \"BW\" :{\"value\":15},\n  \"OG\" :{\"value\":16},\n  \"OY\" :{\"value\":17},\n  \"OB\" :{\"value\":18},\n  \"OW\" :{\"value\":19}  \n};"]],"start1":6053,"start2":6053,"length1":5959,"length2":4}]],"length":6057,"saved":false}
{"ts":1350996958654,"patch":[[{"diffs":[[0,"   var c"],[-1,"orner"],[1,"ubie"],[0,"String ="]],"start1":4853,"start2":4853,"length1":21,"length2":20},{"diffs":[[0,"\"\";    \n    "],[1,"var "],[0,"\n    for(var"]],"start1":4874,"start2":4874,"length1":24,"length2":28}]],"length":6060,"saved":false}
{"ts":1350996964147,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    var cubieString = \"\";    \n"],[0,"    "]],"start1":4848,"start2":4848,"length1":38,"length2":8}]],"length":6030,"saved":false}
{"ts":1350997035126,"patch":[[{"diffs":[[0,"    var "],[1,"cubieSum = 0;"],[0,"\n    for"]],"start1":4852,"start2":4852,"length1":16,"length2":29}]],"length":6043,"saved":false}
{"ts":1350997042583,"patch":[[{"diffs":[[0,"       c"],[-1,"ornerString"],[1,"ubieSum"],[0," += face"]],"start1":4909,"start2":4909,"length1":27,"length2":23}]],"length":6039,"saved":false}
{"ts":1350997089544,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    \n"],[0,"    //TODO m"]],"start1":4952,"start2":4952,"length1":24,"length2":29},{"diffs":[[0,"urn "],[-1,"null;//"],[1,"(faces.length === 3 ? : )\n    "],[0,"(Rub"]],"start1":5086,"start2":5086,"length1":15,"length2":38}]],"length":6067,"saved":false}
{"ts":1350997091427,"patch":[[{"diffs":[[0," 3 ? : )"],[1,"();"],[0,"\n    (Ru"]],"start1":5107,"start2":5107,"length1":16,"length2":19}]],"length":6070,"saved":false}
{"ts":1350997155544,"patch":[[{"diffs":[[0,"[0][1];\n};\n\n"],[1,"RubixState.processCorner = function(faces, cubieSum)\n{\n    \n};\n\n"],[0,"RubixState.s"]],"start1":5174,"start2":5174,"length1":24,"length2":88}]],"length":6134,"saved":false}
{"ts":1350998065168,"patch":[[{"diffs":[[0,"3 ? "],[-1,": )("],[1,"RubixState.processCorner:RubixState.processSide)(faces, cubieSum"],[0,");\n "]],"start1":5108,"start2":5108,"length1":12,"length2":72}]],"length":6194,"saved":false}
{"ts":1350998098426,"patch":[[{"diffs":[[0,"\n{\n    \n};\n\n"],[1,"RubixState.processSide = functino(faces,cubieSum)\n{\n    \n    \n\n"],[0,"RubixState.s"]],"start1":5298,"start2":5298,"length1":24,"length2":87}]],"length":6257,"saved":false}
{"ts":1350998100302,"patch":[[{"diffs":[[0,"\n{\n    \n"],[-1,"    "],[1,"};"],[0,"\n\nRubixS"]],"start1":5359,"start2":5359,"length1":20,"length2":18}]],"length":6255,"saved":false}
{"ts":1350998104450,"patch":[[{"diffs":[[0,"ncti"],[-1,"n"],[0,"o"],[1,"n"],[0,"(fac"]],"start1":5337,"start2":5337,"length1":10,"length2":10}]],"length":6255,"saved":false}
{"ts":1350998180191,"patch":[[{"diffs":[[0,"    \n   "],[1," "],[0,"// conso"]],"start1":5016,"start2":5016,"length1":16,"length2":17},{"diffs":[[0,"m);\n"],[-1,"    (RubixState.cubies[cornerString].value * 8) + faces[0][1];\n"],[0,"};\n\n"]],"start1":5176,"start2":5176,"length1":71,"length2":8}]],"length":6193,"saved":false}
{"ts":1350998190814,"patch":[[{"diffs":[[0,"  }\n"],[-1,"    \n    \n    //TODO make this actually assign values...\n    \n    // console.log(RubixState.cubies[cornerString].value);\n"],[0,"    "]],"start1":4955,"start2":4955,"length1":129,"length2":8}]],"length":6072,"saved":false}
{"ts":1350998191748,"patch":[[{"diffs":[[0,"     \n    }\n"],[1,"    \n"],[0,"    return ("]],"start1":4947,"start2":4947,"length1":24,"length2":29}]],"length":6077,"saved":false}
{"ts":1350998202649,"patch":[[{"diffs":[[0,"cubieSum)\n{\n    "],[1,"switch (cubieSum)\n    {\n        \n    };"],[0,"\n};\n\nRubixState."]],"start1":5111,"start2":5111,"length1":32,"length2":71}]],"length":6116,"saved":false}
{"ts":1350998203473,"patch":[[{"diffs":[[0,"  \n    }"],[-1,";"],[0,"\n};\n\nRub"]],"start1":5157,"start2":5157,"length1":17,"length2":16}]],"length":6115,"saved":false}
{"ts":1350998230582,"patch":[[{"diffs":[[0,"  {\n        "],[1,"case 3:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [0,2,1]);\n                break;\n            //RBY\n            case 5:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1],state.cubies[index + 2]],\n                    [0,3,2]);\n                break;\n            //RGW\n            case 6:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [0,1,5]);\n                break;\n            //OGY\n            case 7:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [4,1,2]);\n                break;\n            //RWB\n            case 8:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [0,5,3]);\n                break;\n            //OYB\n            case 9:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1] , state.cubies[index + 2]],\n                    [4,2,3]);\n                break;\n            //OWG\n            case 10:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1],state.cubies[index + 2]],\n                    [4,5,1]);\n                break;\n            //OBW\n            case 12:  \n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [4,3,5]);\n                break;"],[0,"\n    }\n};\n\nR"]],"start1":5147,"start2":5147,"length1":24,"length2":1732}]],"length":7823,"saved":false}
{"ts":1350998240514,"patch":[[{"diffs":[[0,"    "],[-1,"    "],[0,"case 5:\n"],[-1,"                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1],state.cubies[index + 2]],\n                    [0,3,2]);\n"],[0,"    "]],"start1":5368,"start2":5368,"length1":175,"length2":16}]],"length":7664,"saved":false}
{"ts":1350998260529,"patch":[[{"diffs":[[0,"    "],[-1,"updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [0,2,1]);\n                break;\n            //RBY\n        case 5:\n                break;\n            //RGW\n            case 6:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [0,1,5]);\n                break;\n            //OGY\n            case 7:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [4,1,2]);\n                break;\n            //RWB\n            case 8:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [0,5,3]);\n                break;\n            //OYB\n            case 9:\n                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1] , state.cubies[index + 2]],\n                    [4,2,3]);"],[1,"break;\n            //RBY\n        case 5:\n                break;\n            //RGW\n            case 6:\n                break;\n            //OGY\n            case 7:\n                break;\n            //RWB\n            case 8:\n                break;\n            //OYB\n            case 9:"],[0,"\n   "]],"start1":5179,"start2":5179,"length1":1073,"length2":292}]],"length":6883,"saved":false}
{"ts":1350998264236,"patch":[[{"diffs":[[0,"10:\n"],[-1,"                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1],state.cubies[index + 2]],\n                    [4,5,1]);\n"],[0,"    "]],"start1":5526,"start2":5526,"length1":163,"length2":8}]],"length":6728,"saved":false}
{"ts":1350998267164,"patch":[[{"diffs":[[0,":  \n"],[-1,"                updateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1], state.cubies[index + 2]],\n                    [4,3,5]);\n"],[0,"    "]],"start1":5590,"start2":5590,"length1":164,"length2":8}]],"length":6572,"saved":false}
{"ts":1350998287499,"patch":[[{"diffs":[[0,"cubieSum)\n    {\n"],[1,"        //RYG\n"],[0,"        case 3:\n"]],"start1":5135,"start2":5135,"length1":32,"length2":46},{"diffs":[[0," 3:\n            "],[-1,"    "],[0,"break;\n         "]],"start1":5177,"start2":5177,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"//RBY\n  "]],"start1":5200,"start2":5200,"length1":20,"length2":16},{"diffs":[[0,"case 5:\n"],[-1,"    "],[0,"        "]],"start1":5222,"start2":5222,"length1":20,"length2":16}]],"length":6574,"saved":false}
{"ts":1350998330168,"patch":[[{"diffs":[[0,"  //"],[1," "],[0,"RYG\n"],[-1,""],[0,"    "]],"start1":5157,"start2":5157,"length1":12,"length2":13},{"diffs":[[0,"      //"],[1," "],[0,"RBY\n    "]],"start1":5203,"start2":5203,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"    "],[0,"//"],[1," "],[0,"RGW\n"],[-1,"    "],[0,"    "]],"start1":5255,"start2":5255,"length1":22,"length2":15},{"diffs":[[0," 6:\n            "],[-1," "],[-1,"   "],[0,"break;\n         "]],"start1":5278,"start2":5278,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"    "],[0,"//"],[1," "],[0,"OGY\n    "]],"start1":5301,"start2":5301,"length1":22,"length2":19},{"diffs":[[0,"OGY\n        "],[-1,"  "],[-1,"  "],[0,"case 7:\n    "]],"start1":5312,"start2":5312,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[0,"break;\n"],[-1,"    "],[0,"        //RW"]],"start1":5332,"start2":5332,"length1":39,"length2":31},{"diffs":[[0,"  //"],[1," "],[0,"RWB\n"],[-1,"    "],[0,"    "]],"start1":5357,"start2":5357,"length1":16,"length2":13},{"diffs":[[0,"case 8:\n"],[-1,"    "],[0,"        "]],"start1":5374,"start2":5374,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"    "],[0,"//"],[1," "],[0,"OYB\n"],[-1,"    "],[0,"    "]],"start1":5405,"start2":5405,"length1":22,"length2":15},{"diffs":[[0," 9:\n            "],[-1," "],[-1,"   "],[0,"break;\n         "]],"start1":5428,"start2":5428,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"    "],[0,"//"],[1," "],[0,"OWG\n    "]],"start1":5451,"start2":5451,"length1":22,"length2":19},{"diffs":[[0,"OWG\n        "],[-1,"  "],[-1,"  "],[0,"case 10:\n   "]],"start1":5462,"start2":5462,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[0,"break;\n"],[-1,"    "],[0,"        //OB"]],"start1":5483,"start2":5483,"length1":39,"length2":31},{"diffs":[[0,"  //"],[1," "],[0,"OBW\n"],[-1,"    "],[0,"    "]],"start1":5508,"start2":5508,"length1":16,"length2":13},{"diffs":[[0,"e 12:  \n"],[-1,"    "],[0,"        "]],"start1":5528,"start2":5528,"length1":20,"length2":16}]],"length":6510,"saved":false}
{"ts":1350998537604,"patch":[[{"diffs":[[0,",'W'];\n\n"],[1,"RubixState.faceMap = {\n    \n}\n\n"],[0,"//Leadin"]],"start1":5879,"start2":5879,"length1":16,"length2":47}]],"length":6541,"saved":false}
{"ts":1350998538245,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n//Lead"]],"start1":5908,"start2":5908,"length1":16,"length2":17}]],"length":6542,"saved":false}
{"ts":1350998576407,"patch":[[{"diffs":[[0,"Map = {\n    "],[1,"'R'\n    'G'\n    'Y'\n    'B'\n    'O'\n    'W'"],[0,"\n};\n\n//Leadi"]],"start1":5902,"start2":5902,"length1":24,"length2":67}]],"length":6585,"saved":false}
{"ts":1350998599613,"patch":[[{"diffs":[[0," 'R'"],[1,":{\"value\":0},"],[0,"\n    'G'"],[1,":"],[0,"\n    'Y'"],[1,":"],[0,"\n    'B'"],[1,":"],[0,"\n    'O'"],[1,":"],[0,"\n    'W'"],[1,":"],[0,"\n};\n"]],"start1":5913,"start2":5913,"length1":48,"length2":66}]],"length":6603,"saved":false}
{"ts":1350998607685,"patch":[[{"diffs":[[0,"'G':"],[-1,"\n    'Y':\n    'B':\n    'O':\n    'W':"],[1,"{\"value\":0},\n    'Y':{\"value\":0},\n    'B':{\"value\":0},\n    'O':{\"value\":0},\n    'W':{\"value\":0}"],[0,"\n};\n"]],"start1":5935,"start2":5935,"length1":44,"length2":103}]],"length":6662,"saved":false}
{"ts":1350998613441,"patch":[[{"diffs":[[0,"   'G':{\"value\":"],[-1,"0"],[1,"1"],[0,"},\n    'Y':{\"val"]],"start1":5932,"start2":5932,"length1":33,"length2":33},{"diffs":[[0,"   'Y':{\"value\":"],[-1,"0"],[1,"2"],[0,"},\n    'B':{\"val"]],"start1":5953,"start2":5953,"length1":33,"length2":33},{"diffs":[[0,"   'B':{\"value\":"],[-1,"0"],[1,"3"],[0,"},\n    'O':{\"val"]],"start1":5974,"start2":5974,"length1":33,"length2":33},{"diffs":[[0,"   'O':{\"value\":"],[-1,"0"],[1,"4"],[0,"},\n    'W':{\"val"]],"start1":5995,"start2":5995,"length1":33,"length2":33},{"diffs":[[0,"\"value\":"],[-1,"0"],[1,"5"],[0,"}\n};\n\n//"]],"start1":6024,"start2":6024,"length1":17,"length2":17}]],"length":6662,"saved":false}
{"ts":1350998653940,"patch":[[{"diffs":[[0,"eSum += "],[1,"RubixState.faceMap["],[0,"faces[in"]],"start1":4920,"start2":4920,"length1":16,"length2":35},{"diffs":[[0,"ndex][0]"],[1,"].value"],[0,";       "]],"start1":4954,"start2":4954,"length1":16,"length2":23}]],"length":6688,"saved":false}
{"ts":1350998684457,"patch":[[{"diffs":[[0," \n    }\n    "],[1,"console.log(cubieSum);"],[0,"\n    return "]],"start1":4977,"start2":4977,"length1":24,"length2":46}]],"length":6710,"saved":false}
{"ts":1350998710454,"patch":[[{"diffs":[[0,"corners\n"],[1,"    console.log(\"start\");\n"],[0,"    stat"]],"start1":3066,"start2":3066,"length1":16,"length2":42}]],"length":6736,"saved":false}
{"ts":1350998763465,"patch":[[{"diffs":[[0,"     break;\n"],[1,"        default:\n            break\n"],[0,"    }\n};\n\nRu"]],"start1":5617,"start2":5617,"length1":24,"length2":59}]],"length":6771,"saved":false}
{"ts":1350998764008,"patch":[[{"diffs":[[0,"   break"],[1,";"],[0,"\n    }\n}"]],"start1":5655,"start2":5655,"length1":16,"length2":17}]],"length":6772,"saved":false}
{"ts":1350998869064,"patch":[[{"diffs":[[0,"case 3:\n"],[1,"            \n"],[0,"        "]],"start1":5248,"start2":5248,"length1":16,"length2":29}]],"length":6785,"saved":false}
{"ts":1350998894625,"patch":[[{"diffs":[[0," 3:\n            "],[1,"RubixState.cubies"],[0,"\n            bre"]],"start1":5252,"start2":5252,"length1":32,"length2":49},{"diffs":[[0,"ceMap = "],[-1,"{"],[1,"["],[0,"\n    'R'"]],"start1":6040,"start2":6040,"length1":17,"length2":17},{"diffs":[[0,"lue\":5}\n"],[-1,"}"],[1,"    ]"],[0,";\n\n//Lea"]],"start1":6167,"start2":6167,"length1":17,"length2":21}]],"length":6806,"saved":false}
{"ts":1350998900004,"patch":[[{"diffs":[[0,"ceMap = "],[-1,"["],[1,"{"],[0,"\n    'R'"]],"start1":6040,"start2":6040,"length1":17,"length2":17},{"diffs":[[0,":5}\n"],[-1,"    ]"],[1,"}"],[0,";\n\n/"]],"start1":6171,"start2":6171,"length1":13,"length2":9}]],"length":6802,"saved":false}
{"ts":1350998940214,"patch":[[{"diffs":[[0,"e.cubies"],[1,".RYG.value;"],[0,"\n       "]],"start1":5277,"start2":5277,"length1":16,"length2":27}]],"length":6813,"saved":false}
{"ts":1350998983687,"patch":[[{"diffs":[[0,"cubieSum)\n{\n"],[1,"    for(var index in  faces)\n    {\n    }\n"],[0,"    switch ("]],"start1":5185,"start2":5185,"length1":24,"length2":65}]],"length":6854,"saved":false}
{"ts":1350999010060,"patch":[[{"diffs":[[0,"aces)\n    {\n"],[1,"        faces[index][0] ==='R' || faces[index][0] ==='O'\n"],[0,"    }\n    sw"]],"start1":5220,"start2":5220,"length1":24,"length2":81}]],"length":6911,"saved":false}
{"ts":1350999025444,"patch":[[{"diffs":[[0,"  {\n        "],[1,"if("],[0,"faces[index]"]],"start1":5228,"start2":5228,"length1":24,"length2":27},{"diffs":[[0,"][0] ==="],[1," "],[0,"'R' || f"]],"start1":5254,"start2":5254,"length1":16,"length2":17},{"diffs":[[0,"][0] ==="],[1," "],[0,"'O'"],[1,")\n        {\n            break;   \n        }"],[0,"\n    }\n "]],"start1":5281,"start2":5281,"length1":19,"length2":63}]],"length":6959,"saved":false}
{"ts":1350999049559,"patch":[[{"diffs":[[0,".value;\n"],[1,"            console.log(\"inprocess\")\n"],[0,"        "]],"start1":5435,"start2":5435,"length1":16,"length2":53}]],"length":6996,"saved":false}
{"ts":1350999060543,"patch":[[{"diffs":[[0,"(\"in"],[-1,"p"],[1,"P"],[0,"rocess\")"],[1,";"],[0,"\n   "]],"start1":5466,"start2":5466,"length1":17,"length2":18}]],"length":6997,"saved":false}
{"ts":1350999081703,"patch":[[{"diffs":[[0,"Process\""],[1,",faces[index][0]"],[0,");\n     "]],"start1":5470,"start2":5470,"length1":16,"length2":32}]],"length":7013,"saved":false}
{"ts":1350999089693,"patch":[[{"diffs":[[0,"[index]["],[-1,"0"],[1,"1"],[0,"]);\n    "]],"start1":5484,"start2":5484,"length1":17,"length2":17}]],"length":7013,"saved":false}
{"ts":1350999108107,"patch":[[{"diffs":[[0,"        "],[1,"("],[0,"RubixSta"]],"start1":5406,"start2":5406,"length1":16,"length2":17},{"diffs":[[0,"YG.value"],[1,"*8)+faces[index][1]"],[0,";\n      "]],"start1":5434,"start2":5434,"length1":16,"length2":35}]],"length":7033,"saved":false}
{"ts":1350999140489,"patch":[[{"diffs":[[0,"ndex][1]"],[1,".toString(2),((RubixState.cubies.RYG.value*8)+faces[index][1]).toString(2)"],[0,");\n     "]],"start1":5506,"start2":5506,"length1":16,"length2":90}]],"length":7107,"saved":false}
{"ts":1350999157085,"patch":[[{"diffs":[[0,"ing(2),("],[1,"RubixState.cubies.RYG.value.toString(2),("],[0,"(RubixSt"]],"start1":5520,"start2":5520,"length1":16,"length2":57}]],"length":7148,"saved":false}
{"ts":1350999165501,"patch":[[{"diffs":[[0,"ring(2),"],[-1,"("],[0,"RubixSta"]],"start1":5519,"start2":5519,"length1":17,"length2":16}]],"length":7147,"saved":false}
{"ts":1350999185598,"patch":[[{"diffs":[[0,"alue*8)+"],[-1,"faces[index][1]"],[1,"6"],[0,").toStri"]],"start1":5592,"start2":5592,"length1":31,"length2":17}]],"length":7133,"saved":false}
{"ts":1350999198251,"patch":[[{"diffs":[[0,"        "],[1,"return"],[0,"(RubixSt"]],"start1":5406,"start2":5406,"length1":16,"length2":22},{"diffs":[[0,"1];\n"],[-1,"            console.log(\"inProcess\",faces[index][1].toString(2),RubixState.cubies.RYG.value.toString(2),((RubixState.cubies.RYG.value*8)+6).toString(2));\n"],[0,"    "]],"start1":5465,"start2":5465,"length1":162,"length2":8}]],"length":6985,"saved":false}
{"ts":1350999198934,"patch":[[{"diffs":[[0,"  return"],[1," "],[0,"(RubixSt"]],"start1":5412,"start2":5412,"length1":16,"length2":17}]],"length":6986,"saved":false}
{"ts":1350999205609,"patch":[[{"diffs":[[0,"case 5:\n"],[1,"            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n"],[0,"        "]],"start1":5512,"start2":5512,"length1":16,"length2":84}]],"length":7054,"saved":false}
{"ts":1350999208985,"patch":[[{"diffs":[[0,"case 6:\n"],[1,"            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n\n"],[0,"        "]],"start1":5630,"start2":5630,"length1":16,"length2":85}]],"length":7123,"saved":false}
{"ts":1350999209545,"patch":[[{"diffs":[[0,"ex][1];\n"],[-1,"\n"],[0,"        "]],"start1":5698,"start2":5698,"length1":17,"length2":16}]],"length":7122,"saved":false}
{"ts":1350999213050,"patch":[[{"diffs":[[0,"case 7:\n"],[1,"            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n\n"],[0,"        "]],"start1":5748,"start2":5748,"length1":16,"length2":85}]],"length":7191,"saved":false}
{"ts":1350999213646,"patch":[[{"diffs":[[0,"ex][1];\n"],[-1,"\n"],[0,"        "]],"start1":5816,"start2":5816,"length1":17,"length2":16}]],"length":7190,"saved":false}
{"ts":1350999218252,"patch":[[{"diffs":[[0,"case 8:\n"],[1,"            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n\n"],[0,"        "]],"start1":5866,"start2":5866,"length1":16,"length2":85}]],"length":7259,"saved":false}
{"ts":1350999219332,"patch":[[{"diffs":[[0,"ex][1];\n"],[-1,"\n"],[0,"        "]],"start1":5934,"start2":5934,"length1":17,"length2":16}]],"length":7258,"saved":false}
{"ts":1350999222665,"patch":[[{"diffs":[[0,"case 9:\n"],[1,"            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n\n"],[0,"        "]],"start1":5984,"start2":5984,"length1":16,"length2":85}]],"length":7327,"saved":false}
{"ts":1350999223496,"patch":[[{"diffs":[[0,"ex][1];\n"],[-1,"\n"],[0,"        "]],"start1":6052,"start2":6052,"length1":17,"length2":16}]],"length":7326,"saved":false}
{"ts":1350999226744,"patch":[[{"diffs":[[0,"ase 10:\n"],[1,"            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n\n"],[0,"        "]],"start1":6103,"start2":6103,"length1":16,"length2":85}]],"length":7395,"saved":false}
{"ts":1350999228720,"patch":[[{"diffs":[[0,"ex][1];\n"],[-1,"\n"],[0,"        "]],"start1":6171,"start2":6171,"length1":17,"length2":16}]],"length":7394,"saved":false}
{"ts":1350999302021,"patch":[[{"diffs":[[0," 3:\n            "],[-1,"return "],[0,"(RubixState.cubi"]],"start1":5398,"start2":5398,"length1":39,"length2":32},{"diffs":[[0,"    "],[-1,"return (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // RGW\n        case 6:\n            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OGY\n        case 7:\n            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // RWB\n        case 8:\n            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OYB\n        case 9:\n            return (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OWG\n        case 10:\n            return (RubixState.cubies.RYG.value*8)+faces[index][1];"],[1,"break;\n        // RGW\n        case 6:\n            break;\n        // OGY\n        case 7:\n            break;\n        // RWB\n        case 8:\n            break;\n        // OYB\n        case 9:\n            break;\n        // OWG\n        case 10:"],[0,"\n   "]],"start1":5521,"start2":5521,"length1":654,"length2":246},{"diffs":[[0,"\n    \n};"],[-1,""],[0,""],[1,"\n\n\nRubixState.facesArePresent = function(faces,faceComp)\n{\n}\n"],[0,"\n\nRubixS"]],"start1":5933,"start2":5933,"length1":16,"length2":77}]],"length":7040,"saved":false}
{"ts":1350999303611,"patch":[[{"diffs":[[0,"omp)\n{\n}"],[1,";"],[0,"\n\n\nRubix"]],"start1":5993,"start2":5993,"length1":16,"length2":17}]],"length":7041,"saved":false}
{"ts":1350999304543,"patch":[[{"diffs":[[0,"Comp)\n{\n"],[1,"    \n"],[0,"};\n\n\nRub"]],"start1":5992,"start2":5992,"length1":16,"length2":21}]],"length":7046,"saved":false}
{"ts":1350999318143,"patch":[[{"diffs":[[0,"faceComp)\n{\n    "],[1,"for(var index in faces)"],[0,"\n};\n\n\nRubixState"]],"start1":5988,"start2":5988,"length1":32,"length2":55}]],"length":7069,"saved":false}
{"ts":1350999320716,"patch":[[{"diffs":[[0," faces)\n"],[1,"    {\n        \n    }\n"],[0,"};\n\n\nRub"]],"start1":6020,"start2":6020,"length1":16,"length2":37}]],"length":7090,"saved":false}
{"ts":1350999335850,"patch":[[{"diffs":[[0,"  {\n        "],[1,"faces[index][0]"],[0,"\n    }\n};\n\n\n"]],"start1":6030,"start2":6030,"length1":24,"length2":39}]],"length":7105,"saved":false}
{"ts":1350999360985,"patch":[[{"diffs":[[0,"        "],[-1,"faces[index][0]"],[1,"if(faceComp.indexOf(faces[index][0]) === -1)\n        {\n            return false;   \n        }"],[0,"\n    }\n}"]],"start1":6034,"start2":6034,"length1":31,"length2":109}]],"length":7183,"saved":false}
{"ts":1350999366615,"patch":[[{"diffs":[[0,"    }\n    }\n"],[1,"    \n    return true;\n"],[0,"};\n\n\nRubixSt"]],"start1":6130,"start2":6130,"length1":24,"length2":46}]],"length":7205,"saved":false}
{"ts":1350999396190,"patch":[[{"diffs":[[0,"case 3:\n"],[1,"            RubixState.facesArePresent(faces, 'RYG');\n"],[0,"        "]],"start1":5394,"start2":5394,"length1":16,"length2":70}]],"length":7259,"saved":false}
{"ts":1350999402218,"patch":[[{"diffs":[[0,"        "],[1,"console.log("],[0,"RubixSta"]],"start1":5406,"start2":5406,"length1":16,"length2":28},{"diffs":[[0,", 'RYG')"],[1,")"],[0,";\n      "]],"start1":5458,"start2":5458,"length1":16,"length2":17}]],"length":7272,"saved":false}
{"ts":1350999411539,"patch":[[{"diffs":[[0,"case 5:\n"],[1,"                        console.log(RubixState.facesArePresent(faces, 'RYG'));\n\n"],[0,"        "]],"start1":5572,"start2":5572,"length1":16,"length2":96}]],"length":7352,"saved":false}
{"ts":1350999420952,"patch":[[{"diffs":[[0,"case 5:\n"],[-1,"            "],[0,"        "]],"start1":5572,"start2":5572,"length1":28,"length2":16},{"diffs":[[0,"t(faces, 'RY"],[-1,"G"],[1,"B"],[0,"'));\n\n      "]],"start1":5629,"start2":5629,"length1":25,"length2":25}]],"length":7340,"saved":false}
{"ts":1350999441268,"patch":[[{"diffs":[[0,"            "],[-1,"console.log("],[0,"RubixState.f"]],"start1":5580,"start2":5580,"length1":36,"length2":24},{"diffs":[[0,", 'R"],[-1,"YB')"],[1,"BY'"],[0,");\n\n"]],"start1":5624,"start2":5624,"length1":12,"length2":11}]],"length":7327,"saved":false}
{"ts":1350999474174,"patch":[[{"diffs":[[0,"cubieSum)\n{\n"],[1,"    var composition = 0, testString;\n"],[0,"    for(var "]],"start1":5185,"start2":5185,"length1":24,"length2":61},{"diffs":[[0,"    }\n    }\n"],[1,"    \n"],[0,"    switch ("]],"start1":5368,"start2":5368,"length1":24,"length2":29}]],"length":7369,"saved":false}
{"ts":1350999475687,"patch":[[{"diffs":[[0,"stString"],[1," =''"],[0,";\n    fo"]],"start1":5224,"start2":5224,"length1":16,"length2":20}]],"length":7373,"saved":false}
{"ts":1350999490852,"patch":[[{"diffs":[[0,"case 3:\n"],[1,"            testString = 'RYG';\n"],[0,"        "]],"start1":5440,"start2":5440,"length1":16,"length2":48}]],"length":7405,"saved":false}
{"ts":1350999516830,"patch":[[{"diffs":[[0,"  co"],[-1,"nsole.log(RubixState.facesArePresent(faces, 'RYG'));\n           "],[1,"mposition ="],[0," (Ru"]],"start1":5490,"start2":5490,"length1":72,"length2":19},{"diffs":[[0,"ex][1];\n"],[1,"            \n"],[0,"        "]],"start1":5547,"start2":5547,"length1":16,"length2":29}]],"length":7365,"saved":false}
{"ts":1350999529292,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    \n    console.log(RubixState.facesArePresent(faces, testString));\n"],[0,"};\n\nRubi"]],"start1":6030,"start2":6030,"length1":16,"length2":85}]],"length":7434,"saved":false}
{"ts":1350999548506,"patch":[[{"diffs":[[0,"   \n    "],[-1,"console.log"],[1,"if"],[0,"(RubixSt"]],"start1":6039,"start2":6039,"length1":27,"length2":18},{"diffs":[[0,"String))"],[-1,";"],[1,")\n    {\n        \n    }"],[0,"\n};\n\nRub"]],"start1":6088,"start2":6088,"length1":17,"length2":38}]],"length":7446,"saved":false}
{"ts":1350999556969,"patch":[[{"diffs":[[0,"String))"],[-1,")"],[0,"\n    {\n "]],"start1":6088,"start2":6088,"length1":17,"length2":16}]],"length":7445,"saved":false}
{"ts":1350999558943,"patch":[[{"diffs":[[0,"    \n    if("],[1,"!"],[0,"RubixState.f"]],"start1":6038,"start2":6038,"length1":24,"length2":25}]],"length":7446,"saved":false}
{"ts":1350999566083,"patch":[[{"diffs":[[0,"  {\n        "],[1,"composition = -1;"],[0,"\n    }\n};\n\nR"]],"start1":6100,"start2":6100,"length1":24,"length2":41}]],"length":7463,"saved":false}
{"ts":1350999571582,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    return composition;\n"],[0,"};\n\nRubi"]],"start1":6128,"start2":6128,"length1":16,"length2":40}]],"length":7487,"saved":false}
{"ts":1350999580789,"patch":[[{"diffs":[[0,"= -1;\n    }\n"],[1,"    \n"],[0,"    return c"]],"start1":6124,"start2":6124,"length1":24,"length2":29}]],"length":7492,"saved":false}
{"ts":1350999586329,"patch":[[{"diffs":[[0,"1];\n"],[-1,"            \n"],[0,"    "]],"start1":5551,"start2":5551,"length1":21,"length2":8}]],"length":7479,"saved":false}
{"ts":1350999594681,"patch":[[{"diffs":[[0,"    "],[-1,"RubixState.facesArePresent(faces, 'RBY');\n"],[1,"testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];"],[0,"\n   "]],"start1":5613,"start2":5613,"length1":50,"length2":102}]],"length":7531,"saved":false}
{"ts":1350999606289,"patch":[[{"diffs":[[0,"    "],[-1,"break;\n        // OGY\n        case 7:\n            break;\n        // RWB\n        case 8:\n            break;\n        // OYB\n        case 9:\n            break;\n        // OWG\n        case 10:\n            break;\n        // OBW\n        case 12:  "],[1,"testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OGY\n        case 7:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // RWB\n        case 8:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OYB\n        case 9:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OWG\n        case 10:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // OBW\n        case 12:  \n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];"],[0,"\n   "]],"start1":5770,"start2":5770,"length1":249,"length2":891},{"diffs":[[0,"       default:\n"],[1,"        \n"],[0,"            brea"]],"start1":6678,"start2":6678,"length1":32,"length2":41}]],"length":8182,"saved":false}
{"ts":1350999607876,"patch":[[{"diffs":[[0,"efault:\n"],[-1,"        \n"],[0,"        "]],"start1":6686,"start2":6686,"length1":25,"length2":16}]],"length":8173,"saved":false}
{"ts":1350999646605,"patch":[[{"diffs":[[0,"g(\"start\");\n"],[1,"    try{\n    "],[0,"    state[0]"]],"start1":3088,"start2":3088,"length1":24,"length2":37},{"diffs":[[0,"ces[1][0],1]]);\n"],[1,"    "],[0,"    state[1]  = "]],"start1":3189,"start2":3189,"length1":32,"length2":36},{"diffs":[[0,"ces[3][2],3]]);\n"],[1,"    "],[0,"    state[2]  = "]],"start1":3285,"start2":3285,"length1":32,"length2":36},{"diffs":[[0,"],1]]);\n    "],[1," "],[1,"   "],[0,"state[3]  = "]],"start1":3389,"start2":3389,"length1":24,"length2":28},{"diffs":[[0,"],3]]);\n    "],[1," "],[1,"   "],[0,"state[4]  = "]],"start1":3485,"start2":3485,"length1":24,"length2":28},{"diffs":[[0,"],1]]);\n    "],[1," "],[1,"   "],[0,"state[5]  = "]],"start1":3581,"start2":3581,"length1":24,"length2":28},{"diffs":[[0,"],1]]);\n    "],[1," "],[1,"   "],[0,"state[6]  = "]],"start1":3677,"start2":3677,"length1":24,"length2":28},{"diffs":[[0,"],3]]);\n    "],[1,"  "],[1,"  "],[0,"state[7]  = "]],"start1":3773,"start2":3773,"length1":24,"length2":28},{"diffs":[[0,"],3]]);\n    "],[1,"  "],[-1,"\n"],[1,"  \n    "],[0,"    //sides\n"]],"start1":3869,"start2":3869,"length1":25,"length2":33},{"diffs":[[0,"//sides\n    "],[1,"  "],[1,"  "],[0,"state[8]  = "]],"start1":3894,"start2":3894,"length1":24,"length2":28},{"diffs":[[0,"],5]]);\n    "],[1,"   "],[1," "],[0,"state[9]  = "]],"start1":3974,"start2":3974,"length1":24,"length2":28},{"diffs":[[0,"],1]]);\n    "],[1,"   "],[1," "],[0,"state[10] = "]],"start1":4054,"start2":4054,"length1":24,"length2":28},{"diffs":[[0,"],3]]);\n    "],[1,"   "],[1," "],[0,"state[11] = "]],"start1":4134,"start2":4134,"length1":24,"length2":28},{"diffs":[[0,"],2]]);\n    "],[1,"   "],[1," "],[0,"state[12] = "]],"start1":4214,"start2":4214,"length1":24,"length2":28},{"diffs":[[0,"ces[1][3],1]]);\n"],[1,"    "],[0,"    state[13] = "]],"start1":4286,"start2":4286,"length1":32,"length2":36},{"diffs":[[0,"ces[1][5],1]]);\n"],[1,"    "],[0,"    state[14] = "]],"start1":4366,"start2":4366,"length1":32,"length2":36},{"diffs":[[0,"ces[3][3],3]]);\n"],[1,"    "],[0,"    state[15] = "]],"start1":4446,"start2":4446,"length1":32,"length2":36},{"diffs":[[0,"ces[3][5],3]]);\n"],[1,"    "],[0,"    state[16] = "]],"start1":4526,"start2":4526,"length1":32,"length2":36},{"diffs":[[0,"1][7],1]]);\n"],[1,"    "],[0,"    state[17"]],"start1":4610,"start2":4610,"length1":24,"length2":28},{"diffs":[[0,"],4]]);\n    "],[1," "],[1,"   "],[0,"state[18] = "]],"start1":4694,"start2":4694,"length1":24,"length2":28},{"diffs":[[0,"],3]]);\n    "],[1," "],[1,"   "],[0,"state[19] = "]],"start1":4774,"start2":4774,"length1":24,"length2":28},{"diffs":[[0,"4][7],4]]);\n"],[1,"    }catch(error)\n    {\n        \n    }\n"],[0,"    \n    //r"]],"start1":4850,"start2":4850,"length1":24,"length2":63}]],"length":8309,"saved":false}
{"ts":1350999652120,"patch":[[{"diffs":[[0,"\n    {\n     "],[1,"console.log(error);"],[0,"   \n    }\n  "]],"start1":4879,"start2":4879,"length1":24,"length2":43}]],"length":8328,"saved":false}
{"ts":1350999654324,"patch":[[{"diffs":[[0,"\n    {\n     "],[1,"   "],[0,"console.log("]],"start1":4879,"start2":4879,"length1":24,"length2":27}]],"length":8331,"saved":false}
{"ts":1350999720265,"patch":[[{"diffs":[[0,"    "],[-1,"composition = -1"],[1,"throw \"CError\""],[0,";\n  "]],"start1":6947,"start2":6947,"length1":24,"length2":22}]],"length":8329,"saved":false}
{"ts":1350999736609,"patch":[[{"diffs":[[0,"ch(error)\n    {\n"],[1,"        if(error ===\"CError\")\n        {\n            \n        }\n"],[0,"        console."]],"start1":4870,"start2":4870,"length1":32,"length2":95}]],"length":8392,"saved":false}
{"ts":1350999759134,"patch":[[{"diffs":[[0,"    "],[-1,"\n        }\n        console.log(error);   "],[1,"console.log(\"One of your corners has an invalid configuration of colors\");   \n\n        }"],[0,"\n   "]],"start1":4934,"start2":4934,"length1":49,"length2":96}]],"length":8439,"saved":false}
{"ts":1350999760960,"patch":[[{"diffs":[[0,"s\");   \n"],[-1,"\n"],[0,"        "]],"start1":5008,"start2":5008,"length1":17,"length2":16}]],"length":8438,"saved":false}
{"ts":1350999781447,"patch":[[{"diffs":[[0,"olors\");"],[-1,"   "],[0,"\n       "]],"start1":5004,"start2":5004,"length1":19,"length2":16}]],"length":8435,"saved":false}
{"ts":1350999793547,"patch":[[{"diffs":[[0," testString = 'R"],[1,"B"],[0,"Y"],[-1,"G"],[0,"';\n            c"]],"start1":5880,"start2":5880,"length1":34,"length2":34},{"diffs":[[0,"ixState.cubies.R"],[1,"B"],[0,"Y"],[-1,"G"],[0,".value*8)+faces["]],"start1":5931,"start2":5931,"length1":34,"length2":34},{"diffs":[[0," testString = 'R"],[-1,"Y"],[0,"G"],[1,"W"],[0,"';\n            c"]],"start1":6037,"start2":6037,"length1":34,"length2":34},{"diffs":[[0,"ixState.cubies.R"],[-1,"Y"],[0,"G"],[1,"W"],[0,".value*8)+faces["]],"start1":6088,"start2":6088,"length1":34,"length2":34}]],"length":8435,"saved":false}
{"ts":1350999797459,"patch":[[{"diffs":[[0,"  testString = '"],[-1,"RYG"],[1,"OGY"],[0,"';\n            c"]],"start1":6193,"start2":6193,"length1":35,"length2":35},{"diffs":[[0,"bixState.cubies."],[-1,"RYG"],[1,"OGY"],[0,".value*8)+faces["]],"start1":6244,"start2":6244,"length1":35,"length2":35}]],"length":8435,"saved":false}
{"ts":1350999802887,"patch":[[{"diffs":[[0," testString = 'R"],[-1,"YG"],[1,"WB"],[0,"';\n            c"]],"start1":6351,"start2":6351,"length1":34,"length2":34},{"diffs":[[0,"ixState.cubies.R"],[-1,"YG"],[1,"WB"],[0,".value*8)+faces["]],"start1":6402,"start2":6402,"length1":34,"length2":34}]],"length":8435,"saved":false}
{"ts":1350999806563,"patch":[[{"diffs":[[0,"  testString = '"],[-1,"RYG"],[1,"OYB"],[0,"';\n            c"]],"start1":6507,"start2":6507,"length1":35,"length2":35},{"diffs":[[0,"bixState.cubies."],[-1,"RYG"],[1,"OYB"],[0,".value*8)+faces["]],"start1":6558,"start2":6558,"length1":35,"length2":35}]],"length":8435,"saved":false}
{"ts":1350999811876,"patch":[[{"diffs":[[0,"  testString = '"],[-1,"RY"],[1,"OW"],[0,"G';\n            "]],"start1":6665,"start2":6665,"length1":34,"length2":34},{"diffs":[[0,"bixState.cubies."],[-1,"RY"],[1,"OW"],[0,"G.value*8)+faces"]],"start1":6716,"start2":6716,"length1":34,"length2":34}]],"length":8435,"saved":false}
{"ts":1350999815751,"patch":[[{"diffs":[[0,"  testString = '"],[-1,"RYG"],[1,"OBW"],[0,"';\n            c"]],"start1":6825,"start2":6825,"length1":35,"length2":35}]],"length":8435,"saved":false}
{"ts":1350999817296,"patch":[[{"diffs":[[0,"bixState.cubies."],[-1,"RYG"],[1,"OBW"],[0,".value*8)+faces["]],"start1":6876,"start2":6876,"length1":35,"length2":35}]],"length":8435,"saved":false}
{"ts":1350999830741,"patch":[[{"diffs":[[0,"ng ='';\n"],[1,"    \n"],[0,"    for("]],"start1":5494,"start2":5494,"length1":16,"length2":21}]],"length":8440,"saved":false}
{"ts":1350999944585,"patch":[[{"diffs":[[0,"ieSum);\n};\n\n"],[1,"/**\n * Processes an array of faces and converts it to the representation for a cubie.\n * In all of these cases the \n */\n"],[0,"RubixState.p"]],"start1":5394,"start2":5394,"length1":24,"length2":144},{"diffs":[[0,"dex "],[-1,"in  faces"],[1,"= 0; index < faces.length;  faces++"],[0,")\n  "]],"start1":5641,"start2":5641,"length1":17,"length2":43}]],"length":8586,"saved":false}
{"ts":1350999948393,"patch":[[{"diffs":[[0,"dex = 0; index <"],[1,"="],[0," faces.length;  "]],"start1":5641,"start2":5641,"length1":32,"length2":33}]],"length":8587,"saved":false}
{"ts":1350999961967,"patch":[[{"diffs":[[0," faces++)\n    {\n"],[1,"        if(index ==faces.length)\n        {\n                \n        }\n"],[0,"        if(faces"]],"start1":5673,"start2":5673,"length1":32,"length2":102}]],"length":8657,"saved":false}
{"ts":1350999986275,"patch":[[{"diffs":[[0,"            "],[1,"throw \"CError\";"],[0,"    \n       "]],"start1":5732,"start2":5732,"length1":24,"length2":39}]],"length":8672,"saved":false}
{"ts":1351000002912,"patch":[[{"diffs":[[0,"index =="],[1,"= "],[0,"faces.le"]],"start1":5700,"start2":5700,"length1":16,"length2":18}]],"length":8674,"saved":false}
{"ts":1351000028017,"patch":[[{"diffs":[[0,"4][7],4]]);\n"],[1,"    console.log(\"cubieSum\");\n\n"],[0,"    }catch(e"]],"start1":4850,"start2":4850,"length1":24,"length2":54},{"diffs":[[0,"  }\n"],[-1,"    console.log(cubieSum);\n"],[0,"    "]],"start1":5301,"start2":5301,"length1":35,"length2":8}]],"length":8677,"saved":false}
{"ts":1351000040577,"patch":[[{"diffs":[[0,"],3]]);\n        "],[1,"    console.log(\"cubieSum\");\n"],[0,"\n        //sides"]],"start1":3869,"start2":3869,"length1":32,"length2":61},{"diffs":[[0,"]]);"],[-1,"\n    console.log(\"cubieSum\");"],[0,"\n\n  "]],"start1":4886,"start2":4886,"length1":37,"length2":8}]],"length":8677,"saved":false}
{"ts":1351000054952,"patch":[[{"diffs":[[0,"]]);"],[-1,"\n            console.log(\"cubieSum\");"],[0,"\n\n  "]],"start1":3872,"start2":3872,"length1":45,"length2":8},{"diffs":[[0,"  }\n        "],[1,"else "],[0,"if(faces[ind"]],"start1":5738,"start2":5738,"length1":24,"length2":29}]],"length":8645,"saved":false}
{"ts":1351000062444,"patch":[[{"diffs":[[0,"ngth)\n        {\n"],[1,"            console.log(\"FUCK\");\n"],[0,"            thro"]],"start1":5684,"start2":5684,"length1":32,"length2":65}]],"length":8678,"saved":false}
{"ts":1351000072514,"patch":[[{"diffs":[[0,"ch(error)\n    {\n"],[1,"                    console.log(\"cubieSum\");\n\n"],[0,"        if(error"]],"start1":4863,"start2":4863,"length1":32,"length2":78}]],"length":8724,"saved":false}
{"ts":1351000079260,"patch":[[{"diffs":[[0,"log("],[-1,"\"cubieSum\""],[1,"error"],[0,");\n\n"]],"start1":4907,"start2":4907,"length1":18,"length2":13}]],"length":8719,"saved":false}
{"ts":1351000091730,"patch":[[{"diffs":[[0,"index =="],[-1,"="],[0," faces.l"]],"start1":5707,"start2":5707,"length1":17,"length2":16}]],"length":8718,"saved":false}
{"ts":1351000100547,"patch":[[{"diffs":[[0,"s.length"],[1,"()"],[0,";  faces"]],"start1":5670,"start2":5670,"length1":16,"length2":18}]],"length":8720,"saved":false}
{"ts":1351000112775,"patch":[[{"diffs":[[0,"ng ='';\n    "],[1,"console.log(faces);"],[0,"\n    for(var"]],"start1":5621,"start2":5621,"length1":24,"length2":43}]],"length":8739,"saved":false}
{"ts":1351000121344,"patch":[[{"diffs":[[0,"   {"],[-1,"\n                    console.log(error);"],[0,"\n\n  "]],"start1":4874,"start2":4874,"length1":48,"length2":8},{"diffs":[[0,"rs\");\n        }\n"],[1,"        \n        else\n        {\n            \n        }\n"],[0,"    }\n    \n    /"]],"start1":5001,"start2":5001,"length1":32,"length2":87}]],"length":8754,"saved":false}
{"ts":1351000123397,"patch":[[{"diffs":[[0,"  {\n            "],[1,"                    console.log(error);\n   "],[0,"\n        }\n    }"]],"start1":5045,"start2":5045,"length1":32,"length2":75}]],"length":8797,"saved":false}
{"ts":1351000125247,"patch":[[{"diffs":[[0,"      {\n"],[-1,"                    "],[0,"        "]],"start1":5041,"start2":5041,"length1":36,"length2":16}]],"length":8777,"saved":false}
{"ts":1351000192132,"patch":[[{"diffs":[[0," <= "],[-1,"faces.length()"],[1,"3"],[0,";  f"]],"start1":5719,"start2":5719,"length1":22,"length2":9}]],"length":8764,"saved":false}
{"ts":1351000215556,"patch":[[{"diffs":[[0,"'';\n"],[-1,"    console.log(faces);\n"],[0,"    "]],"start1":5663,"start2":5663,"length1":32,"length2":8}]],"length":8740,"saved":false}
{"ts":1351000222726,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            console.log(\"FUCK\");\n"],[0,"    "]],"start1":5758,"start2":5758,"length1":41,"length2":8}]],"length":8707,"saved":false}
{"ts":1351000230149,"patch":[[{"diffs":[[0,"index =="],[-1," faces.length"],[1,"= 3"],[0,")\n      "]],"start1":5729,"start2":5729,"length1":29,"length2":19}]],"length":8697,"saved":false}
{"ts":1351000231695,"patch":[[{"diffs":[[0,"ng ='';\n"],[1,"    \n"],[0,"    for("]],"start1":5659,"start2":5659,"length1":16,"length2":21}]],"length":8702,"saved":false}
{"ts":1351000245423,"patch":[[{"diffs":[[0," <= 3;  "],[-1,"faces"],[1,"index"],[0,"++)\n    "]],"start1":5700,"start2":5700,"length1":21,"length2":21}]],"length":8702,"saved":false}
{"ts":1351000256371,"patch":[[{"diffs":[[0,"ndex <= "],[-1,"3"],[1,"faces.length"],[0,";  index"]],"start1":5696,"start2":5696,"length1":17,"length2":28}]],"length":8713,"saved":false}
{"ts":1351000264752,"patch":[[{"diffs":[[0,"dex === "],[-1,"3"],[1,"faces.length"],[0,")\n      "]],"start1":5747,"start2":5747,"length1":17,"length2":28}]],"length":8724,"saved":false}
{"ts":1351000279330,"patch":[[{"diffs":[[0,"4][7],4]]);\n"],[1,"        console.log(\"end\");"],[0,"\n    }catch("]],"start1":4842,"start2":4842,"length1":24,"length2":51}]],"length":8751,"saved":false}
{"ts":1351000385724,"patch":[[{"diffs":[[0,"ses the "],[1,"ordering of the faces matters logically, eg RYB is oriented\n * by the red face and the preceding faces are Y then B."],[0,"\n */\nRub"]],"start1":5585,"start2":5585,"length1":16,"length2":132},{"diffs":[[0,"\n        }\n    }"],[-1,"\n"],[0,"    \n    switch "]],"start1":6063,"start2":6063,"length1":33,"length2":32}]],"length":8866,"saved":false}
{"ts":1351000431666,"patch":[[{"diffs":[[0,"stString"],[1,", faces[index][1]"],[0,"))\n    {"]],"start1":7463,"start2":7463,"length1":16,"length2":33}]],"length":8883,"saved":false}
{"ts":1351000450605,"patch":[[{"diffs":[[0,"faceComp)\n{\n"],[1,"    \n"],[0,"    for(var "]],"start1":7666,"start2":7666,"length1":24,"length2":29}]],"length":8888,"saved":false}
{"ts":1351000463606,"patch":[[{"diffs":[[0,"faceComp"],[1,", orientingFace"],[0,")\n{\n    "]],"start1":7666,"start2":7666,"length1":16,"length2":31}]],"length":8903,"saved":false}
{"ts":1351000467039,"patch":[[{"diffs":[[0,"n(faces,"],[1," "],[0,"faceComp"]],"start1":7658,"start2":7658,"length1":16,"length2":17}]],"length":8904,"saved":false}
{"ts":1351000507631,"patch":[[{"diffs":[[0,":5}\n};\n\n"],[1,"RubixState.faceTranslations =[\n    \n]\n\n"],[0,"//Leadin"]],"start1":8273,"start2":8273,"length1":16,"length2":55}]],"length":8943,"saved":false}
{"ts":1351000535047,"patch":[[{"diffs":[[0,"    "],[1,"0:{},\n    1:{},\n    2:{},\n    3:{},\n    4:\n    5:"],[0,"\n]"],[1,";"],[0,"\n\n//"]],"start1":8312,"start2":8312,"length1":10,"length2":60}]],"length":8993,"saved":false}
{"ts":1351000541527,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"RubixState.faceTranslations =[\n    0:{},\n    1:{},\n    2:{},\n    3:{},\n    4:\n    5:\n];"],[0,"\n\n//"]],"start1":8277,"start2":8277,"length1":95,"length2":8}]],"length":8906,"saved":false}
{"ts":1351000582453,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"    switch((state.cubies[index] & 7) + \n            (state.cubies[index + 1] & 7))\n\t\t{\n\t\t\t//RG\n\t\t\tcase 1:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1]],\n                    [0,1],index);\n\t\t\t\tbreak;\n\t\t\t//RY\n\t\t\tcase 2:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1]],\n                    [2,0],index);\n\t\t\t\tbreak;\n\t\t\t//RB, YG\n\t\t\tcase 3:\n\t\t\t\tif( (state.cubies[index] & 7) === 0 || \n                    (state.cubies[index] & 7) === 3)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[0,3],index);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[1,2],index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t//RW, OG, YB\n\t\t\tcase 5:\n\t\t\t\t//RW\n\t\t\t\tif((state.cubies[index] & 7) === 0 || \n                    (state.cubies[index] & 7) === 5)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[5,0],index);\n\t\t\t\t}\n\t\t\t\t//OG\n\t\t\t\telse if ((state.cubies[index] & 7) === 4 || \n                    (state.cubies[index] & 7) === 1)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[4,1],index);\n\t\t\t\t}\n\t\t\t\t//YB\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[3,2],index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t//OY, WG\n\t\t\tcase 6:\n\t\t\t\tif((state.cubies[index] & 7) === 2 || \n                    (state.cubies[index] & 7) === 4)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[2,4],index);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[1,5],index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t//OB\n\t\t\tcase 7:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[4,3],index);\n\t\t\t\tbreak;\n\t\t\t//WB\n\t\t\tcase 8:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[3,5],index);\n\t\t\t\tbreak;\n\t\t\t//OW\n\t\t\tcase 9:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[5,4],index);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\n                    \"combination! For side:\"+  (index - 24) / 2);\n                return false;\n\t\t}"],[0,"\n};\n\n\nRu"]],"start1":7608,"start2":7608,"length1":16,"length2":2270}]],"length":11160,"saved":false}
{"ts":1351000602478,"patch":[[{"diffs":[[0,"eSum)\n{\n"],[-1,"    "],[0,"    swit"]],"start1":7604,"start2":7604,"length1":20,"length2":16},{"diffs":[[0,"tch("],[-1,"(state.cubies[index] & 7) + \n            (state.cubies[index + 1] & 7)"],[1,"cubieSum"],[0,")\n"],[-1,"\t"],[0,"\t{\n\t\t"],[-1,"\t"],[0,"//RG\n"],[-1,"\t"],[0,"\t\tca"]],"start1":7619,"start2":7619,"length1":93,"length2":28},{"diffs":[[0," 1:\n"],[-1,"\t\t\t\tupdateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1]],\n                    [0,1],index);\n"],[0,"\t\t\t\t"]],"start1":7649,"start2":7649,"length1":131,"length2":8}]],"length":10968,"saved":false}
{"ts":1351000614582,"patch":[[{"diffs":[[0,"\tcase 1:\n\t\t\t"],[-1,"\t"],[0,"break;\n"],[-1,"\t"],[0,"\t\t//RY\n\t\t\tca"]],"start1":7644,"start2":7644,"length1":33,"length2":31},{"diffs":[[0,"Y\n\t\t"],[-1,"\t"],[0,"case 2:\n"],[-1,"\t"],[0,"\t\t\tu"]],"start1":7668,"start2":7668,"length1":18,"length2":16},{"diffs":[[0,"[2,0],index);\n\t\t"],[-1,"\t\t"],[1,"    "],[0,"break;\n\t\t\t//RB, "]],"start1":7788,"start2":7788,"length1":34,"length2":36}]],"length":10966,"saved":false}
{"ts":1351000618979,"patch":[[{"diffs":[[0," 2:\n"],[-1,"\t\t\tupdateFaceCheck([state.cubies[index], \n                    state.cubies[index + 1]],\n                    [2,0],index);\n\t\t"],[1,"        "],[0,"    "]],"start1":7676,"start2":7676,"length1":132,"length2":16}]],"length":10850,"saved":false}
{"ts":1351000655054,"patch":[[{"diffs":[[0,"reak;\n\t\t"],[-1,"\t"],[0,"//RB, YG"]],"start1":7693,"start2":7693,"length1":17,"length2":16},{"diffs":[[0,"/RB, YG\n"],[-1,"\t"],[0,"\t\tcase 3"]],"start1":7702,"start2":7702,"length1":17,"length2":16},{"diffs":[[0,"e 3:\n\t\t\t"],[-1,"\t"],[0,"if("],[1," faces[0][0] === 'R' || faces[0][0] === 'B' \n               "],[0," (state."]],"start1":7715,"start2":7715,"length1":20,"length2":79}]],"length":10907,"saved":false}
{"ts":1351000660923,"patch":[[{"diffs":[[0," === 'B'"],[-1," "],[1,")"],[0,"\n       "]],"start1":7761,"start2":7761,"length1":17,"length2":17}]],"length":10907,"saved":false}
{"ts":1351000663801,"patch":[[{"diffs":[[0,"B')\n"],[-1,"                (state.cubies[index] & 7) === 0 || \n                    (state.cubies[index] & 7) === 3)\n"],[0,"\t\t\t\t"]],"start1":7767,"start2":7767,"length1":113,"length2":8}]],"length":10802,"saved":false}
{"ts":1351000679160,"patch":[[{"diffs":[[0,"\n\t\t\t"],[-1,"\t"],[0,"{\n"],[-1,"\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[0,3],index);\n\t"],[1,"\n"],[0,"\t\t\t}\n"],[-1,"\t"],[0,"\t\t\telse\n"],[-1,"\t"],[0,"\t\t\t{"]],"start1":7770,"start2":7770,"length1":123,"length2":24}]],"length":10703,"saved":false}
{"ts":1351000685592,"patch":[[{"diffs":[[0,"\t\t{\n"],[-1,"\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[1,2],index);\n\t"],[0,"\t\t\t}"]],"start1":7791,"start2":7791,"length1":105,"length2":8}]],"length":10606,"saved":false}
{"ts":1351000687138,"patch":[[{"diffs":[[0,"se\n\t\t\t{\n\t\t\t}\n\t\t\t"],[-1,"\t"],[0,"break;\n\t\t\t//RW, "]],"start1":7787,"start2":7787,"length1":33,"length2":32}]],"length":10605,"saved":false}
{"ts":1351000700780,"patch":[[{"diffs":[[0,"e 3:\n\t\t\t"],[1,"// RG\n            "],[0,"if( face"]],"start1":7715,"start2":7715,"length1":16,"length2":34},{"diffs":[[0,"reak;\n\t\t"],[-1,"\t"],[0,"//RW, OG"]],"start1":7822,"start2":7822,"length1":17,"length2":16},{"diffs":[[0,"W, OG, YB\n\t\t"],[-1,"\t"],[0,"case 5:\n\t\t\t\t"]],"start1":7833,"start2":7833,"length1":25,"length2":24},{"diffs":[[0,"se 5:\n\t\t"],[-1,"\t\t"],[1,"    "],[0,"//RW\n\t\t\t"]],"start1":7847,"start2":7847,"length1":18,"length2":20}]],"length":10623,"saved":false}
{"ts":1351000705724,"patch":[[{"diffs":[[0,"{\n\n\t\t\t}\n"],[1,"            //RG\n"],[0,"\t\t\telse\n"]],"start1":7792,"start2":7792,"length1":16,"length2":33}]],"length":10640,"saved":false}
{"ts":1351000707482,"patch":[[{"diffs":[[0,"      //"],[1," "],[0,"RG\n\t\t\tel"]],"start1":7806,"start2":7806,"length1":16,"length2":17}]],"length":10641,"saved":false}
{"ts":1351000736449,"patch":[[{"diffs":[[0,"    "],[-1,"switch(cubieSum)\n\t{\n\t\t//RG\n\t\tcase 1:"],[1,"var testString = '',composition = '';\n    switch(cubieSum)\n\t{\n\t\t//RG\n\t\tcase 1:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];"],[0,"\n\t\t\t"]],"start1":7612,"start2":7612,"length1":44,"length2":193}]],"length":10790,"saved":false}
{"ts":1351000737984,"patch":[[{"diffs":[[0,"ition = "],[-1,"''"],[1,"-"],[0,";\n    sw"]],"start1":7642,"start2":7642,"length1":18,"length2":17}]],"length":10789,"saved":false}
{"ts":1351000739165,"patch":[[{"diffs":[[0,"ition = "],[-1,"-"],[0,";\n    sw"]],"start1":7642,"start2":7642,"length1":17,"length2":16}]],"length":10788,"saved":false}
{"ts":1351000740116,"patch":[[{"diffs":[[0,"ition = "],[1,"0"],[0,";\n    sw"]],"start1":7642,"start2":7642,"length1":16,"length2":17}]],"length":10789,"saved":false}
{"ts":1351000752232,"patch":[[{"diffs":[[0,"sition = 0;\n"],[1,"    \n    for(var index = 0; index <= faces.length;  index++)\n    {\n        if(index === faces.length)\n        {\n            throw \"CError\";    \n        }\n        else if(faces[index][0] === 'R' || faces[index][0] === 'O')\n        {\n            break;   \n        }\n    }    \n    \n"],[0,"    switch(c"]],"start1":7641,"start2":7641,"length1":24,"length2":303}]],"length":11068,"saved":false}
{"ts":1351000758187,"patch":[[{"diffs":[[0,"         throw \""],[-1,"C"],[1,"E"],[0,"Error\";    \n    "]],"start1":7768,"start2":7768,"length1":33,"length2":33}]],"length":11068,"saved":false}
{"ts":1351000795841,"patch":[[{"diffs":[[0,"    "],[-1,"if(index === faces.length)\n        {\n            throw \"EError\";    \n        }\n        else "],[0,"if(f"]],"start1":7724,"start2":7724,"length1":100,"length2":8}]],"length":10976,"saved":false}
{"ts":1351000820619,"patch":[[{"diffs":[[0,"dex = 0; index <"],[-1,"="],[0," faces.length;  "]],"start1":7672,"start2":7672,"length1":33,"length2":32},{"diffs":[[0," }    \n    \n"],[1,"    if(index)\n"],[0,"    switch(c"]],"start1":7827,"start2":7827,"length1":24,"length2":38}]],"length":10989,"saved":false}
{"ts":1351000835056,"patch":[[{"diffs":[[0,"    "],[-1,"if(index)"],[1,"console.log(index,faces);"],[0,"\n   "]],"start1":7839,"start2":7839,"length1":17,"length2":33}]],"length":11005,"saved":false}
{"ts":1351000841159,"patch":[[{"diffs":[[0,"faces);\n    "],[1,"/*"],[0,"switch(cubie"]],"start1":7861,"start2":7861,"length1":24,"length2":26},{"diffs":[[0,"lse;\n\t\t}"],[1,"*?"],[0,"\n};\n\n\nRu"]],"start1":9709,"start2":9709,"length1":16,"length2":18}]],"length":11009,"saved":false}
{"ts":1351000842048,"patch":[[{"diffs":[[0,"se;\n\t\t}*"],[-1,"?"],[1,"/"],[0,"\n};\n\n\nRu"]],"start1":9710,"start2":9710,"length1":17,"length2":17}]],"length":11009,"saved":false}
{"ts":1351000895430,"patch":[[{"diffs":[[0,"faces);\n"],[1,"    if(index === 2)\n    {\n        \n    }\n"],[0,"    /*sw"]],"start1":7861,"start2":7861,"length1":16,"length2":57}]],"length":11050,"saved":false}
{"ts":1351000899236,"patch":[[{"diffs":[[0,"     \n    }\n"],[1,"    else{\n        \n    }\n"],[0,"    /*switch"]],"start1":7898,"start2":7898,"length1":24,"length2":49}]],"length":11075,"saved":false}
{"ts":1351000900702,"patch":[[{"diffs":[[0,"    else"],[1,"\n    "],[0,"{\n      "]],"start1":7910,"start2":7910,"length1":16,"length2":21}]],"length":11080,"saved":false}
{"ts":1351000927111,"patch":[[{"diffs":[[0,"    "],[-1,"\n    }\n    /*"],[0,"swit"]],"start1":7929,"start2":7929,"length1":21,"length2":8},{"diffs":[[0,"bieSum)\n"],[-1,"\t"],[1,"    "],[0,"{\n\t\t//RG"]],"start1":7942,"start2":7942,"length1":17,"length2":20},{"diffs":[[0,"     break;\n"],[1,"        case 3:\n            break;\n    }\n    /*\n"],[0,"\t\t//RB, YG\n\t"]],"start1":8114,"start2":8114,"length1":24,"length2":72}]],"length":11118,"saved":false}
{"ts":1351000930621,"patch":[[{"diffs":[[0,"         break;\n"],[1,"        //RG\n"],[0,"        case 3:\n"]],"start1":8110,"start2":8110,"length1":32,"length2":45}]],"length":11131,"saved":false}
{"ts":1351000931891,"patch":[[{"diffs":[[0,"      //"],[1," "],[0,"RG\n     "]],"start1":8128,"start2":8128,"length1":16,"length2":17}]],"length":11132,"saved":false}
{"ts":1351000932941,"patch":[[{"diffs":[[0,"ak;\n\t\t//"],[1," "],[0,"RY\n\t\tcas"]],"start1":8086,"start2":8086,"length1":16,"length2":17}]],"length":11133,"saved":false}
{"ts":1351000934588,"patch":[[{"diffs":[[0,"  {\n\t\t//"],[1," "],[0,"RG\n\t\tcas"]],"start1":7952,"start2":7952,"length1":16,"length2":17}]],"length":11134,"saved":false}
{"ts":1351000981207,"patch":[[{"diffs":[[0,"         break;\n"],[1,"        // RW, OG\n        case 5:\n            if(faces[0][0] === 'R' || faces[0][0] === 'W')\n            {\n                \n            }\n"],[0,"    }\n    /*\n\t\t/"]],"start1":8161,"start2":8161,"length1":32,"length2":170}]],"length":11272,"saved":false}
{"ts":1351000990057,"patch":[[{"diffs":[[0,")\n            {\n"],[1,"                    \n            }\n            else\n            {\n"],[0,"                "]],"start1":8268,"start2":8268,"length1":32,"length2":98}]],"length":11338,"saved":false}
{"ts":1351000993253,"patch":[[{"diffs":[[0," \n            }\n"],[1,"            break;\n            \n"],[0,"    }\n    /*\n\t\t/"]],"start1":8365,"start2":8365,"length1":32,"length2":64}]],"length":11370,"saved":false}
{"ts":1351001010349,"patch":[[{"diffs":[[0,"ak;\n        "],[-1,"    "],[0,"\n    }\n    /"]],"start1":8396,"start2":8396,"length1":28,"length2":24},{"diffs":[[0,"\t// "],[-1,"RG\n            if( faces[0][0] === 'R' || faces[0][0] === 'B')\n\t\t\t{\n\n\t\t\t}\n            // R"],[1,"Y"],[0,"G\n\t\t"]],"start1":8445,"start2":8445,"length1":98,"length2":9}]],"length":11277,"saved":false}
{"ts":1351001022248,"patch":[[{"diffs":[[0,"\t\t//"],[-1,"RB, "],[0,"YG\n\t"]],"start1":8422,"start2":8422,"length1":12,"length2":8}]],"length":11273,"saved":false}
{"ts":1351001026426,"patch":[[{"diffs":[[0,"\t\t//"],[-1,"RW, OG,"],[0," YB\n"]],"start1":8476,"start2":8476,"length1":15,"length2":8}]],"length":11266,"saved":false}
{"ts":1351001047094,"patch":[[{"diffs":[[0,"\n\t\t\t"],[-1,"// YG\n\t\t\telse\n\t\t\t{\n\t\t\t}\n\t\t\tbreak;\n\t\t// YB\n\t\tcase 5:\n\t\t    //RW\n\t\t\t\tif((state.cubies[index] & 7) === 0 || \n                    (state.cubies[index] & 7) === 5)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[5,0],index);\n\t\t\t\t}\n\t\t\t\t//OG\n\t\t\t\telse if ((state.cubies[index] & 7) === 4 || \n                    (state.cubies[index] & 7) === 1)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[4,1],index);\n\t\t\t\t}\n\t\t\t\t//YB\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[3,2],index);\n\t\t\t\t}"],[1,"break;\n\t\t// YB\n\t\tcase 5:\n"],[0,"\n\t\t\t"]],"start1":8438,"start2":8438,"length1":619,"length2":33}]],"length":10680,"saved":false}
{"ts":1351001049873,"patch":[[{"diffs":[[0,"case 5:\n\n\t\t\t"],[-1,"\t"],[0,"break;\n\t\t\t//"]],"start1":8459,"start2":8459,"length1":25,"length2":24}]],"length":10679,"saved":false}
{"ts":1351001074332,"patch":[[{"diffs":[[0,"         break;\n"],[1,"        // OY\n        case 6:\n            \n"],[0,"        \n    }\n "]],"start1":8384,"start2":8384,"length1":32,"length2":75}]],"length":10722,"saved":false}
{"ts":1351001077816,"patch":[[{"diffs":[[0,"        case 6:\n"],[1,"            break\n"],[0,"            \n   "]],"start1":8414,"start2":8414,"length1":32,"length2":50}]],"length":10740,"saved":false}
{"ts":1351001078595,"patch":[[{"diffs":[[0,"   break"],[1,";"],[0,"\n       "]],"start1":8439,"start2":8439,"length1":16,"length2":17}]],"length":10741,"saved":false}
{"ts":1351001091481,"patch":[[{"diffs":[[0,"e 5:\n\n\t\t"],[-1,"\t"],[0,"break;\n\t"]],"start1":8524,"start2":8524,"length1":17,"length2":16},{"diffs":[[0,";\n\t\t"],[-1,"\t"],[0,"//"],[-1,"OY,"],[0," WG\n\t"],[-1,"\t\tcase 6:\n\t\t\t\tif((state.cubies[index] & 7) === 2 || \n                    (state.cubies[index] & 7) === 4)\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[2,4],index);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t\t[1,5],index);\n\t\t\t\t}"],[1,"    case 6:"],[0,"\n\t\t\t"]],"start1":8537,"start2":8537,"length1":349,"length2":26}]],"length":10417,"saved":false}
{"ts":1351001093927,"patch":[[{"diffs":[[0," case 6:\n\t\t\t"],[-1,"\t"],[0,"break;\n\t\t\t//"]],"start1":8551,"start2":8551,"length1":25,"length2":24}]],"length":10416,"saved":false}
{"ts":1351001103667,"patch":[[{"diffs":[[0,";\n\t\t"],[-1,"\t"],[0,"//OB\n"],[-1,"\t"],[0,"\t\tca"]],"start1":8568,"start2":8568,"length1":15,"length2":13},{"diffs":[[0," 7:\n"],[-1,"\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[4,3],index);\n\t"],[0,"\t\t\tb"]],"start1":8583,"start2":8583,"length1":102,"length2":8}]],"length":10320,"saved":false}
{"ts":1351001108550,"patch":[[{"diffs":[[0," break;\n        "],[-1,"    "],[1,"//OB\n    \tcase 7:\n\t\t\tbreak;"],[0,"\n        \n    }\n"]],"start1":8441,"start2":8441,"length1":36,"length2":59},{"diffs":[[0,";\n\t\t"],[-1,"//OB\n\t\tcase 7:\n\t\t\tbreak;"],[0,"\n\t\t\t"]],"start1":8591,"start2":8591,"length1":32,"length2":8}]],"length":10319,"saved":false}
{"ts":1351001120769,"patch":[[{"diffs":[[0,"\t\n\t\t"],[-1,"\t"],[0,"//WB\n"],[-1,"\t"],[0,"\t\tca"]],"start1":8594,"start2":8594,"length1":15,"length2":13},{"diffs":[[0,":\n\t\t"],[-1,"\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[3,5],index);\n\t\t\t\t"],[1,"    "],[0,"brea"]],"start1":8611,"start2":8611,"length1":103,"length2":12}]],"length":10226,"saved":false}
{"ts":1351001128026,"patch":[[{"diffs":[[0,"case 5:\n"],[-1,"\n"],[1,"    "],[0,"\t\tbreak;"]],"start1":8544,"start2":8544,"length1":17,"length2":20}]],"length":10229,"saved":false}
{"ts":1351001140905,"patch":[[{"diffs":[[0,":\n\t\t\tbreak;\n"],[1,"        //OW\n    \tcase 9:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[5,4],index);\n\t\tbreak;\n"],[0,"        \n   "]],"start1":8473,"start2":8473,"length1":24,"length2":152},{"diffs":[[0,"\n\t\t\t"],[-1,"//OW\n\t\t\tcase 9:\n\t\t\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[5,4],index);\n\t\t\t\tbreak;"],[0,"\n\t\t\t"]],"start1":8756,"start2":8756,"length1":127,"length2":8}]],"length":10238,"saved":false}
{"ts":1351001152888,"patch":[[{"diffs":[[0,":\n\t\t"],[-1,"\t\tupdateFaceCheck([state.cubies[index], \n\t\t\t\t\tstate.cubies[index + 1]],\n\t\t\t\t\t[5,4],index);\n\t\t"],[1,"    break;\n        default "],[0,"brea"]],"start1":8509,"start2":8509,"length1":101,"length2":35}]],"length":10172,"saved":false}
{"ts":1351001156746,"patch":[[{"diffs":[[0,"default "],[1,":\n            "],[0,"break;\n "]],"start1":8532,"start2":8532,"length1":16,"length2":30}]],"length":10186,"saved":false}
{"ts":1351001191833,"patch":[[{"diffs":[[0,")\n    {\n        "],[1,"switch (cubieSum)\n        {\n            //YG\n    \t\tcase 3:\n    \t\t\tbreak;\n    \t\t// YB\n    \t\tcase 5:\n        \t\tbreak;\n    \t\t// WG\n    \t    case 6:\n    \t\t\tbreak;\n    \t\t\n    \t\t//WB\n    \t\tcase 8:\n\t\t        break;\n\t\t\t\n\t\t\tdefault:   \n                breakl\n        }"],[0,"\n    }\n    else\n"]],"start1":7887,"start2":7887,"length1":32,"length2":291},{"diffs":[[0,"/*\n\t"],[-1,"\t//YG\n\t\tcase 3:\n\t\t\tbreak;\n\t\t// YB\n\t\tcase 5:\n    \t\tbreak;\n\t\t// WG\n\t    case 6:\n\t\t\tbreak;\n\t\t\n\t\t//WB\n\t\tcase 8:\n\t\t    break;\n\t\t\t\n\t\t\tdefault:"],[0,"\n\t\t\t"]],"start1":8839,"start2":8839,"length1":144,"length2":8}]],"length":10309,"saved":false}
{"ts":1351001212176,"patch":[[{"diffs":[[0,"    "],[-1,"{\n"],[1,"    {\n    "],[0,"\t\t// RG\n"],[1,"    "],[0,"\t\tca"]],"start1":8209,"start2":8209,"length1":18,"length2":30},{"diffs":[[0,"G\n    \t\tcase 1:\n"],[1,"    "],[0,"            test"]],"start1":8229,"start2":8229,"length1":32,"length2":36},{"diffs":[[0,"G';\n            "],[1,"   "],[1," "],[0,"composition = (R"]],"start1":8277,"start2":8277,"length1":32,"length2":36},{"diffs":[[0,"ex][1];\n"],[1,"    "],[0,"\t\t\tbreak"]],"start1":8352,"start2":8352,"length1":16,"length2":20},{"diffs":[[0,"ak;\n"],[1,"    "],[0,"\t\t// RY\n"],[1,"    "],[0,"\t\tca"]],"start1":8370,"start2":8370,"length1":16,"length2":24},{"diffs":[[0," 2:\n            "],[1,"    "],[0,"break;\n        /"]],"start1":8396,"start2":8396,"length1":32,"length2":36},{"diffs":[[0,"        "],[1," "],[1,"   "],[0,"// RG\n"],[1,"    "],[0,"        "]],"start1":8423,"start2":8423,"length1":22,"length2":30},{"diffs":[[0," 3:\n            "],[1,"  "],[1,"  "],[0,"break;\n"],[1,"    "],[0,"        // RW, O"]],"start1":8457,"start2":8457,"length1":39,"length2":47},{"diffs":[[0," OG\n        "],[1,"   "],[1," "],[0,"case 5:\n"],[1,"    "],[0,"            "]],"start1":8502,"start2":8502,"length1":32,"length2":40},{"diffs":[[0,"W')\n            "],[-1,"{\n"],[1,"    {\n    "],[0,"                "]],"start1":8585,"start2":8585,"length1":34,"length2":42},{"diffs":[[0,"   \n            "],[1,"    "],[0,"}\n            el"]],"start1":8628,"start2":8628,"length1":32,"length2":36},{"diffs":[[0,"  }\n            "],[1," "],[1,"   "],[0,"else\n           "]],"start1":8646,"start2":8646,"length1":32,"length2":36},{"diffs":[[0,"lse\n            "],[-1,"{\n"],[1,"    {\n   "],[0,"                "]],"start1":8667,"start2":8667,"length1":34,"length2":41},{"diffs":[[0,"                "],[-1,"\n"],[1," \n    "],[0,"            }\n  "]],"start1":8692,"start2":8692,"length1":33,"length2":38},{"diffs":[[0,"              }\n"],[1,"    "],[0,"            brea"]],"start1":8712,"start2":8712,"length1":32,"length2":36},{"diffs":[[0,"    "],[1,"    "],[0,"// OY\n"],[1,"    "],[0,"    "]],"start1":8755,"start2":8755,"length1":14,"length2":22},{"diffs":[[0," 6:\n            "],[1," "],[1,"   "],[0,"break;\n        /"]],"start1":8785,"start2":8785,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"//OB\n   "]],"start1":8812,"start2":8812,"length1":16,"length2":20},{"diffs":[[0,"   //OB\n    "],[1,"  "],[1,"  "],[0,"\tcase 7:\n\t\t\t"]],"start1":8821,"start2":8821,"length1":24,"length2":28},{"diffs":[[0,"case 7:\n"],[1,"    "],[0,"\t\t\tbreak"]],"start1":8838,"start2":8838,"length1":16,"length2":20},{"diffs":[[0,"    "],[1,"   "],[1," "],[0,"//OW\n"],[1,"    "],[0,"    "]],"start1":8864,"start2":8864,"length1":13,"length2":21},{"diffs":[[0,"case 9:\n"],[1,"    "],[0,"\t\t    br"]],"start1":8886,"start2":8886,"length1":16,"length2":20},{"diffs":[[0,"ak;\n        "],[1,"    "],[0,"default :\n  "]],"start1":8907,"start2":8907,"length1":24,"length2":28},{"diffs":[[0,"fault :\n"],[1,"    "],[0,"        "]],"start1":8925,"start2":8925,"length1":16,"length2":20},{"diffs":[[0,"break;\n        \n"],[1,"        }\n"],[0,"    }\n    /*\n\t\n\t"]],"start1":8949,"start2":8949,"length1":32,"length2":42}]],"length":10455,"saved":false}
{"ts":1351001215861,"patch":[[{"diffs":[[0,"  }\n"],[-1,"    /*\n\t\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\n                    \"combination! For side:\"+  (index - 24) / 2);\n                return false;\n\t\t}*/\n"],[0,"};\n\n"]],"start1":8977,"start2":8977,"length1":193,"length2":8}]],"length":10270,"saved":false}
{"ts":1351001220127,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(index,faces);\n"],[0,"    "]],"start1":7835,"start2":7835,"length1":38,"length2":8}]],"length":10240,"saved":false}
{"ts":1351001248012,"patch":[[{"diffs":[[0,"   //YG\n    "],[-1,"\t\t"],[1,"        "],[0,"case 3:\n    "]],"start1":7910,"start2":7910,"length1":26,"length2":32},{"diffs":[[0,"case 3:\n    "],[-1,"\t\t\t"],[1,"            "],[0,"break;\n    \t"]],"start1":7930,"start2":7930,"length1":27,"length2":36},{"diffs":[[0,"ak;\n    "],[-1,"\t\t"],[1,"        "],[0,"// YB\n  "]],"start1":7957,"start2":7957,"length1":18,"length2":24},{"diffs":[[0,"  // YB\n    "],[-1,"\t\t"],[1,"        "],[0,"case 5:\n    "]],"start1":7971,"start2":7971,"length1":26,"length2":32},{"diffs":[[0,"        "],[-1,"\t\t"],[1,"    "],[0,"break;\n "]],"start1":7999,"start2":7999,"length1":18,"length2":20},{"diffs":[[0,"ak;\n    "],[-1,"\t\t"],[1,"        "],[0,"// WG\n  "]],"start1":8014,"start2":8014,"length1":18,"length2":24},{"diffs":[[0," WG\n    "],[-1,"\t"],[1,"    "],[0,"    case"]],"start1":8032,"start2":8032,"length1":17,"length2":20},{"diffs":[[0,"case 6:\n    "],[-1,"\t\t\t"],[1,"            "],[0,"break;\n    \t"]],"start1":8048,"start2":8048,"length1":27,"length2":36}]],"length":10287,"saved":false}
{"ts":1351001269545,"patch":[[{"diffs":[[0,"    "],[-1,"\t\t\n"],[1,"    "],[0,"    "],[-1,"\t\t"],[0,"//WB"]],"start1":8079,"start2":8079,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"\t\tcase 8:\n\t\t"],[1,"        case 8:\n        "],[0,"    "]],"start1":8096,"start2":8096,"length1":20,"length2":32},{"diffs":[[0,"   break"],[-1,"l"],[1,";"],[0,"\n       "]],"start1":8171,"start2":8171,"length1":17,"length2":17}]],"length":10298,"saved":false}
{"ts":1351001274604,"patch":[[{"diffs":[[0," testString = 'R"],[-1,"Y"],[0,"G';\n            "]],"start1":8288,"start2":8288,"length1":33,"length2":32}]],"length":10297,"saved":false}
{"ts":1351001280462,"patch":[[{"diffs":[[0,"      {\n    "],[-1,"\t\t"],[1,"        "],[0,"// RG\n    \t\t"]],"start1":8239,"start2":8239,"length1":26,"length2":32},{"diffs":[[0,"  // RG\n    "],[-1,"\t\t"],[1,"        "],[0,"case 1:\n    "]],"start1":8257,"start2":8257,"length1":26,"length2":32}]],"length":10309,"saved":false}
{"ts":1351001288869,"patch":[[{"diffs":[[0,"ex][1];\n    "],[-1,"\t\t\t"],[1,"            "],[0,"break;\n    \t"]],"start1":8391,"start2":8391,"length1":27,"length2":36},{"diffs":[[0,"ak;\n    "],[-1,"\t\t"],[1,"        "],[0,"// RY\n  "]],"start1":8418,"start2":8418,"length1":18,"length2":24}]],"length":10324,"saved":false}
{"ts":1351001291931,"patch":[[{"diffs":[[0," RY\n    "],[-1,"\t\t"],[1,"        "],[0,"case 2:\n"]],"start1":8436,"start2":8436,"length1":18,"length2":24}]],"length":10330,"saved":false}
{"ts":1351001296736,"patch":[[{"diffs":[[0,"/OB\n        "],[-1,"\t"],[1,"    "],[0,"case 7:\n    "]],"start1":8885,"start2":8885,"length1":25,"length2":28}]],"length":10333,"saved":false}
{"ts":1351001305884,"patch":[[{"diffs":[[0," 7:\n    "],[-1,"\t\t\t"],[1,"        "],[0,"break;\n "]],"start1":8905,"start2":8905,"length1":19,"length2":24}]],"length":10338,"saved":false}
{"ts":1351001312567,"patch":[[{"diffs":[[0,"        "],[-1,"\t"],[1,"    "],[0,"case 9:\n"]],"start1":8945,"start2":8945,"length1":17,"length2":20},{"diffs":[[0," 9:\n    "],[-1,"\t\t"],[1,"        "],[0,"    brea"]],"start1":8961,"start2":8961,"length1":18,"length2":24}]],"length":10347,"saved":false}
{"ts":1351001326120,"patch":[[{"diffs":[[0,"ixState.cubies.R"],[-1,"Y"],[0,"G.value*8)+faces"]],"start1":8354,"start2":8354,"length1":33,"length2":32}]],"length":10346,"saved":false}
{"ts":1351001341830,"patch":[[{"diffs":[[0,"    "],[-1,"break;\n            // RG\n            case 3:"],[1,"testString = 'RG';\n                composition = (RubixState.cubies.RG.value*8)+faces[index][1];\n                break;\n            // RG\n            case 3:\n                testString = 'RG';\n                composition = (RubixState.cubies.RG.value*8)+faces[index][1];"],[0,"\n   "]],"start1":8471,"start2":8471,"length1":52,"length2":278}]],"length":10572,"saved":false}
{"ts":1351001349657,"patch":[[{"diffs":[[0," testString = 'R"],[-1,"G"],[1,"Y"],[0,"';\n             "]],"start1":8474,"start2":8474,"length1":33,"length2":33},{"diffs":[[0,"ixState.cubies.R"],[-1,"G"],[1,"Y"],[0,".value*8)+faces["]],"start1":8528,"start2":8528,"length1":33,"length2":33}]],"length":10572,"saved":false}
{"ts":1351001372316,"patch":[[{"diffs":[[0,"            // R"],[-1,"G"],[1,"B"],[0,"\n            cas"]],"start1":8595,"start2":8595,"length1":33,"length2":33}]],"length":10572,"saved":false}
{"ts":1351001378196,"patch":[[{"diffs":[[0," testString = 'R"],[-1,"G"],[1,"B"],[0,"';\n             "]],"start1":8648,"start2":8648,"length1":33,"length2":33},{"diffs":[[0,"ixState.cubies.R"],[-1,"G"],[1,"B"],[0,".value*8)+faces["]],"start1":8702,"start2":8702,"length1":33,"length2":33}]],"length":10572,"saved":false}
{"ts":1351001384319,"patch":[[{"diffs":[[0,"                "],[-1," "],[1,"testString = 'RG';\n                    composition = (RubixState.cubies.RG.value*8)+faces[index][1];"],[0,"   \n            "]],"start1":8896,"start2":8896,"length1":33,"length2":132}]],"length":10671,"saved":false}
{"ts":1351001388329,"patch":[[{"diffs":[[0," testString = 'R"],[-1,"G"],[1,"W"],[0,"';\n             "]],"start1":8911,"start2":8911,"length1":33,"length2":33}]],"length":10671,"saved":false}
{"ts":1351001392420,"patch":[[{"diffs":[[0,"ixState.cubies.R"],[-1,"G"],[1,"W"],[0,".value*8)+faces["]],"start1":8969,"start2":8969,"length1":33,"length2":33}]],"length":10671,"saved":false}
{"ts":1351001396856,"patch":[[{"diffs":[[0,"              {\n"],[1,"                    testString = 'RG';\n                    composition = (RubixState.cubies.RG.value*8)+faces[index][1];\n"],[0,"                "]],"start1":9057,"start2":9057,"length1":32,"length2":153}]],"length":10792,"saved":false}
{"ts":1351001400733,"patch":[[{"diffs":[[0,"  testString = '"],[-1,"R"],[1,"O"],[0,"G';\n            "]],"start1":9091,"start2":9091,"length1":33,"length2":33}]],"length":10792,"saved":false}
{"ts":1351001404421,"patch":[[{"diffs":[[0,"bixState.cubies."],[-1,"R"],[1,"O"],[0,"G.value*8)+faces"]],"start1":9149,"start2":9149,"length1":33,"length2":33}]],"length":10792,"saved":false}
{"ts":1351001405790,"patch":[[{"diffs":[[0,"faces[index][1];"],[-1,"\n"],[0,"                "]],"start1":9177,"start2":9177,"length1":33,"length2":32}]],"length":10791,"saved":false}
{"ts":1351001425880,"patch":[[{"diffs":[[0,"        case 6:\n"],[1,"                testString = 'OY';\n                composition = (RubixState.cubies.OY.value*8)+faces[index][1];\n"],[0,"                "]],"start1":9277,"start2":9277,"length1":32,"length2":145}]],"length":10904,"saved":false}
{"ts":1351001435097,"patch":[[{"diffs":[[0,"        case 7:\n"],[1,"                testString = 'OB';\n                composition = (RubixState.cubies.OB.value*8)+faces[index][1];\n"],[0,"            brea"]],"start1":9450,"start2":9450,"length1":32,"length2":145}]],"length":11017,"saved":false}
{"ts":1351001437416,"patch":[[{"diffs":[[0,"1];\n            "],[1,"    "],[0,"break;\n         "]],"start1":9575,"start2":9575,"length1":32,"length2":36}]],"length":11021,"saved":false}
{"ts":1351001444972,"patch":[[{"diffs":[[0,"        case 9:\n"],[1,"                testString = 'OW';\n                composition = (RubixState.cubies.RG.value*8)+faces[index][1];\n"],[0,"                "]],"start1":9623,"start2":9623,"length1":32,"length2":145}]],"length":11134,"saved":false}
{"ts":1351001450362,"patch":[[{"diffs":[[0,"bixState.cubies."],[-1,"RG"],[1,"OW"],[0,".value*8)+faces["]],"start1":9707,"start2":9707,"length1":34,"length2":34}]],"length":11134,"saved":false}
{"ts":1351001477415,"patch":[[{"diffs":[[0,"}\n    }\n"],[1,"    \n        if(!RubixState.facesArePresent(faces, testString, faces[index][1]))\n    {\n        throw \"CError\";\n    }\n    \n    return composition;\n};\n"],[0,"};\n\n\nRub"]],"start1":9837,"start2":9837,"length1":16,"length2":165}]],"length":11283,"saved":false}
{"ts":1351001481543,"patch":[[{"diffs":[[0,"\n        throw \""],[-1,"C"],[1,"E"],[0,"Error\";\n    }\n  "]],"start1":9931,"start2":9931,"length1":33,"length2":33}]],"length":11283,"saved":false}
{"ts":1351001485193,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[-1,"    "],[0,"    if(!Rubi"]],"start1":9838,"start2":9838,"length1":28,"length2":24}]],"length":11279,"saved":false}
{"ts":1351001501202,"patch":[[{"diffs":[[0,"ion;\n};\n"],[-1,"};"],[0,"\n\n\nRubix"]],"start1":9982,"start2":9982,"length1":18,"length2":16}]],"length":11277,"saved":false}
{"ts":1351001530498,"patch":[[{"diffs":[[0,"t\");\n   "],[1,"//"],[0," try{\n  "]],"start1":3095,"start2":3095,"length1":16,"length2":18},{"diffs":[[0,"\");\n    "],[1,"/*"],[0,"}catch(e"]],"start1":4880,"start2":4880,"length1":16,"length2":18},{"diffs":[[0,"\n        }\n    }"],[1,"*/"],[0,"\n    \n    //retu"]],"start1":5115,"start2":5115,"length1":32,"length2":34}]],"length":11283,"saved":false}
{"ts":1351001542937,"patch":[[{"diffs":[[0,"t\");\n   "],[-1,"//"],[0," try{\n  "]],"start1":3095,"start2":3095,"length1":18,"length2":16}]],"length":11281,"saved":false}
{"ts":1351001546285,"patch":[[{"diffs":[[0,"\");\n    "],[-1,"/*"],[0,"}catch(e"]],"start1":4878,"start2":4878,"length1":18,"length2":16}]],"length":11279,"saved":false}
{"ts":1351001550400,"patch":[[{"diffs":[[0," }\n    }"],[-1,"*/"],[0,"\n    \n  "]],"start1":5119,"start2":5119,"length1":18,"length2":16}]],"length":11277,"saved":false}
{"ts":1351001607539,"patch":[[{"diffs":[[0,"        case 3:\n"],[1,"                \n"],[0,"                "]],"start1":7922,"start2":7922,"length1":32,"length2":49},{"diffs":[[0,"on;\n};\n\n"],[1,"RubixState.indexOfFace = function()\n{\n    \n}\n\n"],[0,"\n\nRubixS"]],"start1":10000,"start2":10000,"length1":16,"length2":62}]],"length":11340,"saved":false}
{"ts":1351001609534,"patch":[[{"diffs":[[0,")\n{\n    "],[1," if(!RubixState.facesArePresent(faces, testString, faces[index][1]))\n    {\n        throw \"CError\";\n    }\n    \n    return composition;\n};   "],[0,"\n}\n\n\n\nRu"]],"start1":10042,"start2":10042,"length1":16,"length2":155}]],"length":11479,"saved":false}
{"ts":1351001613748,"patch":[[{"diffs":[[0,"    "],[-1," if(!RubixState.facesArePresent(faces, testString, faces[index][1]))\n    {\n        throw \"CError\";\n    }\n    \n    return composition;\n};   "],[0,"\n}"],[1,";"],[0,"\n\n\n\n"]],"start1":10046,"start2":10046,"length1":149,"length2":11}]],"length":11341,"saved":false}
{"ts":1351001625632,"patch":[[{"diffs":[[0,"Face = function("],[1,"faces, faceChar"],[0,")\n{\n    \n};\n\n\n\nR"]],"start1":10026,"start2":10026,"length1":32,"length2":47}]],"length":11356,"saved":false}
{"ts":1351001650625,"patch":[[{"diffs":[[0,"                "],[1,"RubixState.indexOfFace()"],[0,"\n               "]],"start1":7938,"start2":7938,"length1":32,"length2":56}]],"length":11380,"saved":false}
{"ts":1351001655647,"patch":[[{"diffs":[[0,"xOfFace("],[1,"faces, 'Y'"],[0,")\n      "]],"start1":7969,"start2":7969,"length1":16,"length2":26}]],"length":11390,"saved":false}
{"ts":1351001658278,"patch":[[{"diffs":[[0,"        "],[1," index ="],[0," RubixSt"]],"start1":7945,"start2":7945,"length1":16,"length2":24}]],"length":11398,"saved":false}
{"ts":1351001659163,"patch":[[{"diffs":[[0,"es, 'Y')"],[1,";"],[0,"\n       "]],"start1":7988,"start2":7988,"length1":16,"length2":17}]],"length":11399,"saved":false}
{"ts":1351001674729,"patch":[[{"diffs":[[0,"faceChar)\n{\n"],[1,"     for(var index = 0; index < faces.length;  index++)\n    {\n        if(faces[index][0] == faceChar\\ || faces[index][0] === 'O')\n        {\n            break;   \n        }\n    }"],[0,"    \n};\n\n\n\nR"]],"start1":10092,"start2":10092,"length1":24,"length2":201}]],"length":11576,"saved":false}
{"ts":1351001677825,"patch":[[{"diffs":[[0,"Char"],[-1,"\\ || faces[index][0] === 'O'"],[0,")\n  "]],"start1":10200,"start2":10200,"length1":36,"length2":8}]],"length":11548,"saved":false}
{"ts":1351001689618,"patch":[[{"diffs":[[0,"  }    \n"],[1,"    if(index == faces.length)\n    {\n        \n    }\n"],[0,"};\n\n\n\nRu"]],"start1":10250,"start2":10250,"length1":16,"length2":67}]],"length":11599,"saved":false}
{"ts":1351001695312,"patch":[[{"diffs":[[0,"  {\n        "],[1,"index = -1    "],[0,"\n    }\n};\n\n\n"]],"start1":10290,"start2":10290,"length1":24,"length2":38}]],"length":11613,"saved":false}
{"ts":1351001718595,"patch":[[{"diffs":[[0,"    "],[-1,"index = -1"],[1,"throw \"FErr\""],[0,"    "]],"start1":10298,"start2":10298,"length1":18,"length2":20}]],"length":11615,"saved":false}
{"ts":1351001720258,"patch":[[{"diffs":[[0,"w \"FErr\""],[1,";"],[0,"    \n   "]],"start1":10306,"start2":10306,"length1":16,"length2":17}]],"length":11616,"saved":false}
{"ts":1351001723611,"patch":[[{"diffs":[[0," \n    }\n"],[1,"    return index;\n"],[0,"};\n\n\n\nRu"]],"start1":10318,"start2":10318,"length1":16,"length2":34}]],"length":11634,"saved":false}
{"ts":1351001744709,"patch":[[{"diffs":[[0,"rs\");\n        }\n"],[1,"        else if(error === \"EError\")\n        {\n        }\n"],[0,"        \n       "]],"start1":5028,"start2":5028,"length1":32,"length2":88}]],"length":11690,"saved":false}
{"ts":1351001769268,"patch":[[{"diffs":[[0,"ror\")\n        {\n"],[1,"            console.log(\"One of your edges has an invalid configuration of colors\");\n"],[0,"        }\n      "]],"start1":5074,"start2":5074,"length1":32,"length2":117}]],"length":11775,"saved":false}
{"ts":1351001791254,"patch":[[{"diffs":[[0,"      }\n        "],[1,"else if (error === \"FError\")\n        {\n            \n        }"],[0,"\n        else\n  "]],"start1":5177,"start2":5177,"length1":32,"length2":93}]],"length":11836,"saved":false}
{"ts":1351001813661,"patch":[[{"diffs":[[0,"  {\n            "],[1,"console.log(\"One of your faces could not be found on a cubie.\"    "],[0,"\n        }\n     "]],"start1":5228,"start2":5228,"length1":32,"length2":98}]],"length":11902,"saved":false}
{"ts":1351001815553,"patch":[[{"diffs":[[0," cubie.\""],[1,";"],[0,"    \n   "]],"start1":5298,"start2":5298,"length1":16,"length2":17}]],"length":11903,"saved":false}
{"ts":1351001818138,"patch":[[{"diffs":[[0,"ration of colors"],[1,"."],[0,"\");\n        }\n  "]],"start1":5155,"start2":5155,"length1":32,"length2":33}]],"length":11904,"saved":false}
{"ts":1351001820607,"patch":[[{"diffs":[[0,"f colors"],[1,"."],[0,"\");\n    "]],"start1":5022,"start2":5022,"length1":16,"length2":17}]],"length":11905,"saved":false}
{"ts":1351001824580,"patch":[[{"diffs":[[0," cubie.\""],[1,")"],[0,";    \n  "]],"start1":5300,"start2":5300,"length1":16,"length2":17}]],"length":11906,"saved":false}
{"ts":1351001832459,"patch":[[{"diffs":[[0,"}\n    }    \n"],[1,"    \n"],[0,"    if(index"]],"start1":10518,"start2":10518,"length1":24,"length2":29}]],"length":11911,"saved":false}
{"ts":1351001833884,"patch":[[{"diffs":[[0,"Err\";    \n    }\n"],[1,"    \n"],[0,"    return index"]],"start1":10587,"start2":10587,"length1":32,"length2":37}]],"length":11916,"saved":false}
{"ts":1351001836056,"patch":[[{"diffs":[[0,")\n{\n    "],[-1," "],[0,"for(var "]],"start1":10372,"start2":10372,"length1":17,"length2":16}]],"length":11915,"saved":false}
{"ts":1351001853228,"patch":[[{"diffs":[[0,"ow \"FErr"],[1,"or"],[0,"\";    \n "]],"start1":10581,"start2":10581,"length1":16,"length2":18}]],"length":11917,"saved":false}
{"ts":1351001865213,"patch":[[{"diffs":[[0,"ixState."],[-1,"indexOfFace"],[1,"faceIndex"],[0," = funct"]],"start1":10326,"start2":10326,"length1":27,"length2":25}]],"length":11915,"saved":false}
{"ts":1351001870403,"patch":[[{"diffs":[[0,"ate."],[-1,"indexOfFace"],[1,"faceIndex"],[0,"(fac"]],"start1":8241,"start2":8241,"length1":19,"length2":17}]],"length":11913,"saved":false}
{"ts":1351001882288,"patch":[[{"diffs":[[0,"aces, 'Y');\n"],[1,"                testString = 'YG';\n                composition = (RubixState.cubies.YG.value*8)+faces[index][1];\n"],[0,"            "]],"start1":8256,"start2":8256,"length1":24,"length2":137}]],"length":12026,"saved":false}
{"ts":1351001891379,"patch":[[{"diffs":[[0,"        case 5:\n"],[1,"                index = RubixState.faceIndex(faces, 'Y');\n                testString = 'YB';\n                composition = (RubixState.cubies.YG.value*8)+faces[index][1];\n    "],[0,"            brea"]],"start1":8426,"start2":8426,"length1":32,"length2":207}]],"length":12201,"saved":false}
{"ts":1351001908755,"patch":[[{"diffs":[[0,"      //"],[-1,"Y"],[0,"G"],[1,"Y"],[0,"\n       "]],"start1":8179,"start2":8179,"length1":18,"length2":18}]],"length":12201,"saved":false}
{"ts":1351001922482,"patch":[[{"diffs":[[0,"ceIndex(faces, '"],[-1,"Y"],[1,"G"],[0,"');\n            "]],"start1":8247,"start2":8247,"length1":33,"length2":33},{"diffs":[[0,"ring = '"],[-1,"Y"],[0,"G"],[1,"Y"],[0,"';\n     "]],"start1":8290,"start2":8290,"length1":18,"length2":18},{"diffs":[[0,"bixState.cubies."],[-1,"Y"],[0,"G"],[1,"Y"],[0,".value*8)+faces["]],"start1":8336,"start2":8336,"length1":34,"length2":34}]],"length":12201,"saved":false}
{"ts":1351001953482,"patch":[[{"diffs":[[0,"      //"],[1," B"],[0,"W"],[-1,"B"],[0,"\n       "]],"start1":8703,"start2":8703,"length1":18,"length2":19}]],"length":12202,"saved":false}
{"ts":1351001972787,"patch":[[{"diffs":[[0,"        case 6:\n"],[1,"                index = RubixState.faceIndex(faces, 'W');\n                testString = 'WG';\n                composition = (RubixState.cubies.WG.value*8)+faces[index][1];\n"],[0,"                "]],"start1":8658,"start2":8658,"length1":32,"length2":203}]],"length":12373,"saved":false}
{"ts":1351001983730,"patch":[[{"diffs":[[0,"        case 8:\n"],[1,"                index = RubixState.faceIndex(faces, 'B');\n                testString = 'BW';\n                composition = (RubixState.cubies.YG.value*8)+faces[index][1];\n"],[0,"                "]],"start1":8890,"start2":8890,"length1":32,"length2":203}]],"length":12544,"saved":false}
{"ts":1351001989503,"patch":[[{"diffs":[[0,"bixState.cubies."],[-1,"YG"],[1,"BW"],[0,".value*8)+faces["]],"start1":9032,"start2":9032,"length1":34,"length2":34}]],"length":12544,"saved":false}
{"ts":1351002128503,"patch":[[{"diffs":[[0,"d\");\n   "],[1,"/*"],[0," }catch("]],"start1":4877,"start2":4877,"length1":16,"length2":18},{"diffs":[[0,"}\n    }\n    "],[1,"*/"],[0,"\n    //retur"]],"start1":5394,"start2":5394,"length1":24,"length2":26}]],"length":12548,"saved":false}
{"ts":1351002132354,"patch":[[{"diffs":[[0,"t\");\n   "],[1,"//"],[0," try{\n  "]],"start1":3095,"start2":3095,"length1":16,"length2":18}]],"length":12550,"saved":false}
{"ts":1351002151801,"patch":[[{"diffs":[[0,"cubies.Y"],[-1,"G"],[1,"B"],[0,".value*8"]],"start1":8583,"start2":8583,"length1":17,"length2":17}]],"length":12550,"saved":false}
{"ts":1351002168454,"patch":[[{"diffs":[[0,"\n    */\n"],[1,"    console.log(state);\n"],[0,"    //re"]],"start1":5403,"start2":5403,"length1":16,"length2":40}]],"length":12574,"saved":false}
{"ts":1351002221623,"patch":[[{"diffs":[[0,"fer("],[-1,"48"],[1,"20"],[0,"));\n"]],"start1":2737,"start2":2737,"length1":10,"length2":10}]],"length":12574,"saved":false}
{"ts":1351002350464,"patch":[[{"diffs":[[0,"gFace)\n{"],[-1,"\n"],[0,"    \n   "]],"start1":11353,"start2":11353,"length1":17,"length2":16}]],"length":12573,"saved":false}
{"ts":1351002463801,"patch":[[{"diffs":[[0,":5}\n};\n\n"],[1,"RubixState.faceSet = [];\n"],[0,"\n\n//Lead"]],"start1":11940,"start2":11940,"length1":16,"length2":41}]],"length":12598,"saved":false}
{"ts":1351002558114,"patch":[[{"diffs":[[0,"t = [];\n"],[1,"RubixState.edgeWindowSum = 0;\n"],[0,"\n\n//Lead"]],"start1":11965,"start2":11965,"length1":16,"length2":46}]],"length":12628,"saved":false}
{"ts":1351002586853,"patch":[[{"diffs":[[0,"// try{\n"],[1,"        RubixState.faceSet = [0,0,0,0,0,0];\n        RubixState.edgeWindowSum = 0;\n"],[0,"        "]],"start1":3103,"start2":3103,"length1":16,"length2":98}]],"length":12710,"saved":false}
{"ts":1351002589865,"patch":[[{"diffs":[[0,"dowSum = 0;\n"],[1,"        \n"],[0,"        stat"]],"start1":3181,"start2":3181,"length1":24,"length2":33}]],"length":12719,"saved":false}
{"ts":1351002596557,"patch":[[{"diffs":[[0,"   \n"],[-1,"    //corners\n"],[0,"    "]],"start1":3056,"start2":3056,"length1":22,"length2":8},{"diffs":[[0,"um = 0;\n        "],[1,"    //corners\n"],[0,"\n        state[0"]],"start1":3171,"start2":3171,"length1":32,"length2":46}]],"length":12719,"saved":false}
{"ts":1351002599492,"patch":[[{"diffs":[[0,"        "],[-1,"    "],[0,"//corner"]],"start1":3179,"start2":3179,"length1":20,"length2":16},{"diffs":[[0,"corners\n"],[-1,"\n"],[0,"        "]],"start1":3189,"start2":3189,"length1":17,"length2":16}]],"length":12714,"saved":false}
{"ts":1351002600745,"patch":[[{"diffs":[[0,"dowSum = 0;\n"],[1,"        \n"],[0,"        //co"]],"start1":3167,"start2":3167,"length1":24,"length2":33}]],"length":12723,"saved":false}
{"ts":1351002721353,"patch":[[{"diffs":[[0,"e;   \n        }\n"],[1,"        faceSet[faces[index][1]]\n"],[0,"    }\n    \n    r"]],"start1":11581,"start2":11581,"length1":32,"length2":65}]],"length":12756,"saved":false}
{"ts":1351002727118,"patch":[[{"diffs":[[0,"dex][1]]"],[1," += 0;"],[0,"\n    }\n "]],"start1":11621,"start2":11621,"length1":16,"length2":22}]],"length":12762,"saved":false}
{"ts":1351002735986,"patch":[[{"diffs":[[0,"  }\n        "],[1,"RubixState."],[0,"faceSet[face"]],"start1":11593,"start2":11593,"length1":24,"length2":35}]],"length":12773,"saved":false}
{"ts":1351002752276,"patch":[[{"diffs":[[0,"],3]]);\n"],[1,"        console.log(RubixState.faceSet);"],[0,"\n       "]],"start1":3966,"start2":3966,"length1":16,"length2":56}]],"length":12813,"saved":false}
{"ts":1351002777157,"patch":[[{"diffs":[[0,"      }\n        "],[1,"\n        if(faces.length == 3)\n        {\n            "],[0,"RubixState.faceS"]],"start1":11629,"start2":11629,"length1":32,"length2":85},{"diffs":[[0,"][1]] += 0;\n"],[1,"        }\n"],[0,"    }\n    \n "]],"start1":11728,"start2":11728,"length1":24,"length2":34}]],"length":12876,"saved":false}
{"ts":1351002781872,"patch":[[{"diffs":[[0,"+= 0;\n        }\n"],[1,"        else\n        {\n            \n        }\n"],[0,"    }\n    \n    r"]],"start1":11734,"start2":11734,"length1":32,"length2":78}]],"length":12922,"saved":false}
{"ts":1351002792612,"patch":[[{"diffs":[[0,"  {\n            "],[1,"RubixState "],[0,"\n        }\n    }"]],"start1":11769,"start2":11769,"length1":32,"length2":43}]],"length":12933,"saved":false}
{"ts":1351002811527,"patch":[[{"diffs":[[0,"bixState"],[-1," "],[1,".edgeWindowSum +=0;"],[0,"\n       "]],"start1":11787,"start2":11787,"length1":17,"length2":35}]],"length":12951,"saved":false}
{"ts":1351002827277,"patch":[[{"diffs":[[0,"[1]] += "],[-1,"0"],[1,"1"],[0,";\n      "]],"start1":11729,"start2":11729,"length1":17,"length2":17}]],"length":12951,"saved":false}
{"ts":1351002877224,"patch":[[{"diffs":[[0,":0 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"RWB\":{\""]],"start1":12396,"start2":12396,"length1":32,"length2":33},{"diffs":[[0,":1 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"RYG\":{\""]],"start1":12435,"start2":12435,"length1":32,"length2":33},{"diffs":[[0,":2 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"RBY\":{\""]],"start1":12474,"start2":12474,"length1":32,"length2":33},{"diffs":[[0,":3 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"OWG\":{\""]],"start1":12513,"start2":12513,"length1":32,"length2":33},{"diffs":[[0,":4 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"OGY\":{\""]],"start1":12552,"start2":12552,"length1":32,"length2":33},{"diffs":[[0,":5 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"OYB\":{\""]],"start1":12591,"start2":12591,"length1":32,"length2":33},{"diffs":[[0,":6 ,\"orientValue"],[1,"s"],[0,"\":0},\n  \"OBW\":{\""]],"start1":12630,"start2":12630,"length1":32,"length2":33},{"diffs":[[0,"\"orientValue"],[1,"s"],[0,"\":0},\n  \"RW\""]],"start1":12673,"start2":12673,"length1":24,"length2":25}]],"length":12959,"saved":false}
{"ts":1351002882191,"patch":[[{"diffs":[[0,",\"orientValues\":"],[-1,"0"],[1,"{}"],[0,"},\n  \"RW\" :{\"val"]],"start1":12672,"start2":12672,"length1":33,"length2":34}]],"length":12960,"saved":false}
{"ts":1351002898020,"patch":[[{"diffs":[[0,"alues\":{"],[1,"\"O\":0,\"B\":1,\"W\":2"],[0,"}},\n  \"R"]],"start1":12681,"start2":12681,"length1":16,"length2":33}]],"length":12977,"saved":false}
{"ts":1351002917660,"patch":[[{"diffs":[[0,"ientValues\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"RWB\":{"]],"start1":12403,"start2":12403,"length1":25,"length2":43},{"diffs":[[0,"ientValues\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"RYG\":{"]],"start1":12460,"start2":12460,"length1":25,"length2":43},{"diffs":[[0,"ientValues\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"RBY\":{"]],"start1":12517,"start2":12517,"length1":25,"length2":43},{"diffs":[[0,"ientValues\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"OWG\":{"]],"start1":12574,"start2":12574,"length1":25,"length2":43},{"diffs":[[0,"ientValues\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"OGY\":{"]],"start1":12631,"start2":12631,"length1":25,"length2":43},{"diffs":[[0,"ientValues\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"OYB\":{"]],"start1":12688,"start2":12688,"length1":25,"length2":43},{"diffs":[[0,"Values\":"],[-1,"0"],[1,"{\"O\":0,\"B\":1,\"W\":2}"],[0,"},\n  \"OB"]],"start1":12749,"start2":12749,"length1":17,"length2":35}]],"length":13103,"saved":false}
{"ts":1351002939467,"patch":[[{"diffs":[[0,"orientValues\":{\""],[-1,"O"],[1,"R"],[0,"\":0,\""],[-1,"B"],[1,"G"],[0,"\":1,\"W\":2}},\n  \""]],"start1":12401,"start2":12401,"length1":39,"length2":39},{"diffs":[[0,"ntValues\":{\""],[-1,"O"],[1,"R"],[0,"\":0,\""],[-1,"B"],[1,"W"],[0,"\":1,\""],[-1,"W"],[1,"B"],[0,"\":2}},\n  \"RY"]],"start1":12462,"start2":12462,"length1":37,"length2":37}]],"length":13103,"saved":false}
{"ts":1351002945792,"patch":[[{"diffs":[[0,"}},\n"],[-1,"  \"RYG\":{\"value\":2 ,\"orientValues\":{\"O\":0,\"B\":1,\"W\":2}},\n"],[0,"  \"R"]],"start1":12490,"start2":12490,"length1":65,"length2":8}]],"length":13046,"saved":false}
{"ts":1351002946816,"patch":[[{"diffs":[[0,":1,\"B\":2}},\n"],[1,"  \"RYG\":{\"value\":2 ,\"orientValues\":{\"R\":0,\"Y\":1,\"G\":2}},\n"],[0,"  \"RBY\":{\"va"]],"start1":12482,"start2":12482,"length1":24,"length2":81}]],"length":13103,"saved":false}
{"ts":1351002953801,"patch":[[{"diffs":[[0,"orientValues\":{\""],[-1,"O"],[1,"R"],[0,"\":0,\"B\":1,\"W\":2}"]],"start1":12572,"start2":12572,"length1":33,"length2":33},{"diffs":[[0,"\":{\"R\":0,\"B\":1,\""],[-1,"W"],[1,"Y"],[0,"\":2}},\n  \"OWG\":{"]],"start1":12584,"start2":12584,"length1":33,"length2":33}]],"length":13103,"saved":false}
{"ts":1351002966941,"patch":[[{"diffs":[[0,"\":0,"],[1," "],[0,"\"G\":1,"],[1," "],[0,"\"W\":"]],"start1":12418,"start2":12418,"length1":14,"length2":16},{"diffs":[[0,"\":0,"],[1," "],[0,"\"W\":1,"],[1," "],[0,"\"B\":"]],"start1":12477,"start2":12477,"length1":14,"length2":16},{"diffs":[[0,"\":0,"],[1," "],[0,"\"Y\":1,"],[1," "],[0,"\"G\":"]],"start1":12536,"start2":12536,"length1":14,"length2":16},{"diffs":[[0,":{\"R\":0,"],[1," "],[0,"\"B\":1,"],[1," "],[0,"\"Y\":2}},"]],"start1":12591,"start2":12591,"length1":22,"length2":24},{"diffs":[[0,"tValues\":{\"O\":0,"],[1," "],[0,"\"B\":1,"],[1," "],[0,"\"W\":2}},\n  \"OGY\""]],"start1":12642,"start2":12642,"length1":38,"length2":40}]],"length":13113,"saved":false}
{"ts":1351002976963,"patch":[[{"diffs":[[0,"0, \""],[-1,"B"],[1,"W"],[0,"\":1, \""],[-1,"W"],[1,"G"],[0,"\":2}"]],"start1":12656,"start2":12656,"length1":16,"length2":16}]],"length":13113,"saved":false}
{"ts":1351002980636,"patch":[[{"diffs":[[0,"tValues\":{\"O\":0,"],[1," "],[0,"\"B\":1,"],[1," "],[0,"\"W\":2}},\n  \"OYB\""]],"start1":12701,"start2":12701,"length1":38,"length2":40}]],"length":13115,"saved":false}
{"ts":1351002988210,"patch":[[{"diffs":[[0,"0, \""],[-1,"B"],[1,"G"],[0,"\":1, \""],[-1,"W"],[1,"Y"],[0,"\":2}"]],"start1":12715,"start2":12715,"length1":16,"length2":16}]],"length":13115,"saved":false}
{"ts":1351003023494,"patch":[[{"diffs":[[0,"ues\":{\"O\":0,"],[-1,"\"B"],[1," \"Y"],[0,"\":1,"],[1," "],[0,"\"W\":"],[-1,"2"],[1,"B"],[0,"}},\n  \"OBW\":"]],"start1":12764,"start2":12764,"length1":35,"length2":37}]],"length":13117,"saved":false}
{"ts":1351003030891,"patch":[[{"diffs":[[0,":1, \"W\":"],[-1,"B"],[0,"}},\n  \"O"]],"start1":12780,"start2":12780,"length1":17,"length2":16}]],"length":13116,"saved":false}
{"ts":1351003032275,"patch":[[{"diffs":[[0,":1, \"W\":"],[1,"2"],[0,"}},\n  \"O"]],"start1":12780,"start2":12780,"length1":16,"length2":17}]],"length":13117,"saved":false}
{"ts":1351003040592,"patch":[[{"diffs":[[0,":{\"O\":0,"],[1," "],[0,"\"B\":1,"],[1," "],[0,"\"W\":2}},"]],"start1":12827,"start2":12827,"length1":22,"length2":24}]],"length":13119,"saved":false}
{"ts":1351003086702,"patch":[[{"diffs":[[0,"[1]] += "],[-1,"1"],[1,"RubixState.cubies[faceComp].orientValues[faces[index][0]]"],[0,";\n      "]],"start1":11729,"start2":11729,"length1":17,"length2":73}]],"length":13175,"saved":false}
{"ts":1351003105960,"patch":[[{"diffs":[[0,"== 3)\n        {\n"],[1,"            console.log( RubixState.cubies[faceComp].orientValues[faces[index][0]]\n"],[0,"            Rubi"]],"start1":11670,"start2":11670,"length1":32,"length2":115},{"diffs":[[0,"][1]] +="],[1,"\n            console.log("],[0," RubixSt"]],"start1":11811,"start2":11811,"length1":16,"length2":41}]],"length":13283,"saved":false}
{"ts":1351003107046,"patch":[[{"diffs":[[0,"dex][0]]"],[1,")"],[0,"\n       "]],"start1":11760,"start2":11760,"length1":16,"length2":17},{"diffs":[[0,"dex][0]]"],[1,")"],[0,";\n      "]],"start1":11895,"start2":11895,"length1":16,"length2":17}]],"length":13285,"saved":false}
{"ts":1351003121084,"patch":[[{"diffs":[[0,"lues"],[-1,"[faces[index][0]])\n            RubixState.faceSet"],[1,", RubixState.cubies[faceComp].orientValues"],[0,"[fac"]],"start1":11747,"start2":11747,"length1":57,"length2":50},{"diffs":[[0,"ex]["],[-1,"1]] +="],[1,"0]])"],[0,"\n   "]],"start1":11803,"start2":11803,"length1":14,"length2":12},{"diffs":[[0,"    "],[-1,"console.log( RubixState.cubies[faceComp].orientValues"],[1,"RubixState.faceSet"],[0,"[fac"]],"start1":11820,"start2":11820,"length1":61,"length2":26},{"diffs":[[0,"[index]["],[-1,"0]])"],[1,"1]] += 0"],[0,";\n      "]],"start1":11848,"start2":11848,"length1":20,"length2":24}]],"length":13245,"saved":false}
{"ts":1351003122210,"patch":[[{"diffs":[[0,"ex][0]])"],[1,";"],[0,"\n       "]],"start1":11803,"start2":11803,"length1":16,"length2":17}]],"length":13246,"saved":false}
{"ts":1351003141666,"patch":[[{"diffs":[[0,":0, \"Y\":1, \""],[-1,"W"],[1,"B"],[0,"\":2}},\n  \"OB"]],"start1":12900,"start2":12900,"length1":25,"length2":25}]],"length":13246,"saved":false}
{"ts":1351003154809,"patch":[[{"diffs":[[0,"Values, "],[1,";\n            RubixState.faceSet[faces[index][1]] += 0"],[0,"RubixSta"]],"start1":11745,"start2":11745,"length1":16,"length2":70},{"diffs":[[0,"[0]]"],[-1,");\n            RubixState.faceSet[faces[index][1]] += 0"],[0,";\n  "]],"start1":11860,"start2":11860,"length1":63,"length2":8}]],"length":13245,"saved":false}
{"ts":1351003156387,"patch":[[{"diffs":[[0,"[1]] += "],[-1,"0"],[0,"RubixSta"]],"start1":11798,"start2":11798,"length1":17,"length2":16}]],"length":13244,"saved":false}
{"ts":1351003159822,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            console.log( RubixState.cubies[faceComp].orientValues, ;\n"],[0,"    "]],"start1":11682,"start2":11682,"length1":77,"length2":8}]],"length":13175,"saved":false}
{"ts":1351003227608,"patch":[[{"diffs":[[0,"Face)\n{    \n"],[1,"    \n"],[0,"    for(var "]],"start1":11489,"start2":11489,"length1":24,"length2":29}]],"length":13180,"saved":false}
{"ts":1351003273501,"patch":[[{"diffs":[[0,")\n{    \n    "],[1,"var previousVals ='';"],[0,"\n    for(var"]],"start1":11493,"start2":11493,"length1":24,"length2":45}]],"length":13201,"saved":false}
{"ts":1351003303156,"patch":[[{"diffs":[[0," +=0;\n        }\n"],[1,"        \n        previousVals += faces[index][0];\n"],[0,"    }\n    \n    r"]],"start1":11891,"start2":11891,"length1":32,"length2":82}]],"length":13251,"saved":false}
{"ts":1351003330382,"patch":[[{"diffs":[[0,"     }\n        \n"],[1,"        if(previousVals.indexOf(faces[index][0]) != -1)\n        {\n            \n        }\n"],[0,"        previous"]],"start1":11900,"start2":11900,"length1":32,"length2":121}]],"length":13340,"saved":false}
{"ts":1351003331848,"patch":[[{"diffs":[[0,"     \n        }\n"],[1,"        \n"],[0,"        previous"]],"start1":11989,"start2":11989,"length1":32,"length2":41}]],"length":13349,"saved":false}
{"ts":1351003348632,"patch":[[{"diffs":[[0,"  {\n            "],[1,"throw \"DupeColorError\";    "],[0,"\n        }\n     "]],"start1":11978,"start2":11978,"length1":32,"length2":59}]],"length":13376,"saved":false}
{"ts":1351003368028,"patch":[[{"diffs":[[0,";    \n        }\n"],[1,"        else if (error === \"DupeColorError\")\n        {\n        \n        }\n"],[0,"        else\n   "]],"start1":5448,"start2":5448,"length1":32,"length2":106}]],"length":13450,"saved":false}
{"ts":1351003393062,"patch":[[{"diffs":[[0,"      {\n        "],[1,"    console.log(\"One of your cubies has duplicate colors.\");"],[0,"\n        }\n     "]],"start1":5511,"start2":5511,"length1":32,"length2":92}]],"length":13510,"saved":false}
{"ts":1351003422793,"patch":[[{"diffs":[[0,"     }\n        \n"],[1,"        // Do dupe checking.\n"],[0,"        if(previ"]],"start1":12034,"start2":12034,"length1":32,"length2":61}]],"length":13539,"saved":false}
{"ts":1351003430086,"patch":[[{"diffs":[[0,"     }\n        \n"],[1,"        // Do parity checks\n"],[0,"        if(faces"]],"start1":11790,"start2":11790,"length1":32,"length2":60}]],"length":13567,"saved":false}
{"ts":1351003437380,"patch":[[{"diffs":[[0,"Comp"],[-1,", orientingFace"],[0,")\n{ "]],"start1":11608,"start2":11608,"length1":23,"length2":8}]],"length":13552,"saved":false}
{"ts":1351003444381,"patch":[[{"diffs":[[0,"stString"],[-1,", faces[index][1]"],[0,"))\n    {"]],"start1":11154,"start2":11154,"length1":33,"length2":16}]],"length":13535,"saved":false}
{"ts":1351003452141,"patch":[[{"diffs":[[0,"ring"],[-1,", faces[index][1]"],[0,"))\n "]],"start1":8038,"start2":8038,"length1":25,"length2":8}]],"length":13518,"saved":false}
{"ts":1351003472244,"patch":[[{"diffs":[[0,"ixState."],[-1,"facesArePresent"],[1,"cubieIsValid"],[0," = funct"]],"start1":11528,"start2":11528,"length1":31,"length2":28}]],"length":13515,"saved":false}
{"ts":1351003475045,"patch":[[{"diffs":[[0,"!RubixState."],[-1,"facesArePresent"],[1,"cubieIsValid"],[0,"(faces, test"]],"start1":11100,"start2":11100,"length1":39,"length2":36}]],"length":13512,"saved":false}
{"ts":1351003478244,"patch":[[{"diffs":[[0,"ate."],[-1,"facesArePresent"],[1,"cubieIsValid"],[0,"(fac"]],"start1":8005,"start2":8005,"length1":23,"length2":20}]],"length":13509,"saved":false}
{"ts":1351003500589,"patch":[[{"diffs":[[0,"in faces)\n    {\n"],[1,"        // Verify that the colors in the cubie should be there.\n"],[0,"        if(faceC"]],"start1":11621,"start2":11621,"length1":32,"length2":96}]],"length":13573,"saved":false}
{"ts":1351003578750,"patch":[[{"diffs":[[0,"ceSet);\n"],[1,"        \n         if(((faces[0]+faces[4]) % 3) + ((faces[1] + faces[3]) % 3) + ((faces[2] + faces[5]) % 3) !== 0)\n    {\n        console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\n        return false;\n    }\n"],[0,"        "]],"start1":4007,"start2":4007,"length1":16,"length2":279}]],"length":13836,"saved":false}
{"ts":1351003590889,"patch":[[{"diffs":[[0,"f((("],[1,"RubixState."],[0,"face"],[-1,"s"],[1,"Set"],[0,"[0]+"],[1,"RubixState."],[0,"face"],[-1,"s"],[1,"Set"],[0,"[4])"]],"start1":4034,"start2":4034,"length1":22,"length2":48},{"diffs":[[0,"+ (("],[1,"RubixState."],[0,"face"],[-1,"s"],[1,"Set"],[0,"[1] + "],[1,"RubixState."],[0,"face"],[-1,"s"],[1,"Set"],[0,"[3])"]],"start1":4088,"start2":4088,"length1":24,"length2":50},{"diffs":[[0,"+ (("],[1,"RubixState."],[0,"face"],[-1,"s"],[1,"Set"],[0,"[2] + "],[1,"RubixState."],[0,"face"],[-1,"s"],[1,"Set"],[0,"[5])"]],"start1":4144,"start2":4144,"length1":24,"length2":50}]],"length":13914,"saved":false}
{"ts":1351003622701,"patch":[[{"diffs":[[0,"        "],[-1,"return false"],[1,"throw \"RotCubie\""],[0,";\n    }\n"]],"start1":4328,"start2":4328,"length1":28,"length2":32}]],"length":13918,"saved":false}
{"ts":1351003628410,"patch":[[{"diffs":[[0,"        "],[-1," "],[0,"if(((Rub"]],"start1":4024,"start2":4024,"length1":17,"length2":16},{"diffs":[[0," !== 0)\n    "],[-1,"{\n"],[1,"    {\n    "],[0,"        cons"]],"start1":4198,"start2":4198,"length1":26,"length2":34},{"diffs":[[0,"\");\n        "],[1,"    "],[0,"throw \"RotCu"]],"start1":4331,"start2":4331,"length1":24,"length2":28},{"diffs":[[0,"Cubie\";\n"],[1,"    "],[0,"    }\n  "]],"start1":4357,"start2":4357,"length1":16,"length2":20}]],"length":13933,"saved":false}
{"ts":1351003641298,"patch":[[{"diffs":[[0,"eSet[4]) % 3) + "],[1,"\n            "],[0,"((RubixState.fac"]],"start1":4073,"start2":4073,"length1":32,"length2":45},{"diffs":[[0," % 3) + "],[1,"\n            "],[0,"((RubixS"]],"start1":4150,"start2":4150,"length1":16,"length2":29},{"diffs":[[0,"  {\n"],[-1,"            console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\n"],[0,"    "]],"start1":4238,"start2":4238,"length1":127,"length2":8}]],"length":13840,"saved":false}
{"ts":1351003643902,"patch":[[{"diffs":[[0,"bie\";\n        }\n"],[1,"        \n"],[0,"        //sides\n"]],"start1":4266,"start2":4266,"length1":32,"length2":41}]],"length":13849,"saved":false}
{"ts":1351003659436,"patch":[[{"diffs":[[0,"== 0)\n        {\n"],[1,"            RubixState.faceSet.length = 0;\n"],[0,"            thro"]],"start1":4226,"start2":4226,"length1":32,"length2":75}]],"length":13892,"saved":false}
{"ts":1351003666985,"patch":[[{"diffs":[[0,"bie\";\n        }\n"],[1,"        RubixState.faceSet.length = 0;\n"],[0,"        \n       "]],"start1":4309,"start2":4309,"length1":32,"length2":71}]],"length":13931,"saved":false}
{"ts":1351003668357,"patch":[[{"diffs":[[0,"      }\n        "],[1,"\n        \\"],[0,"RubixState.faceS"]],"start1":4317,"start2":4317,"length1":32,"length2":42}]],"length":13941,"saved":false}
{"ts":1351003669301,"patch":[[{"diffs":[[0,"        "],[-1,"\\"],[0,"RubixSta"]],"start1":4334,"start2":4334,"length1":17,"length2":16}]],"length":13940,"saved":false}
{"ts":1351003674034,"patch":[[{"diffs":[[0,"]);\n"],[-1,"        console.log(RubixState.faceSet);\n"],[0,"    "]],"start1":3970,"start2":3970,"length1":49,"length2":8}]],"length":13899,"saved":false}
{"ts":1351003696909,"patch":[[{"diffs":[[0,"],3]]);\n"],[1,"\n"],[0,"        "],[1,"// Check the corners for validity before wasting cycles on the sides."],[0,"\n       "]],"start1":3966,"start2":3966,"length1":24,"length2":94}]],"length":13969,"saved":false}
{"ts":1351003757193,"patch":[[{"diffs":[[0,"s.\");\n        }\n"],[1,"        else if (error === \"RotCubie\")\n        {\n            console.log(\"One of your corner cubies is rotated\");\n        }\n"],[0,"        else\n   "]],"start1":5978,"start2":5978,"length1":32,"length2":156}]],"length":14093,"saved":false}
{"ts":1351003816074,"patch":[[{"diffs":[[0,"alue\":8 "],[1,",\"orientValues\":{\"R\":0, \"G\":1}"],[0,"},\n  \"RG"]],"start1":13837,"start2":13837,"length1":16,"length2":46}]],"length":14123,"saved":false}
{"ts":1351003827383,"patch":[[{"diffs":[[0,"value\":9"],[1," ,\"orientValues\":{\"R\":0, \"G\":1}"],[0,"},\n  \"RB"]],"start1":13888,"start2":13888,"length1":16,"length2":47}]],"length":14154,"saved":false}
{"ts":1351003840525,"patch":[[{"diffs":[[0,"\":10"],[-1," },\n  \"RY\" :{\"value\":11},\n  \"WG\" :{\"value\":12},\n  \"GY\" :{\"value\":13},\n  \"YB\" :{\"value\":14},\n  \"BW\" :{\"value\":15},\n  \"OG\" :{\"value\":16},\n  \"OY\" :{\"value\":17},\n  \"OB\" :{\"value\":18},\n  \"OW\" :{\"value\":19"],[1,",\"orientValues\":{\"R\":0, \"G\":1}},\n  \"RY\" :{\"value\":11,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"WG\" :{\"value\":12,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"GY\" :{\"value\":13,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"YB\" :{\"value\":14,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"BW\" :{\"value\":15,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"OG\" :{\"value\":16,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"OY\" :{\"value\":17,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"OB\" :{\"value\":18,\"orientValues\":{\"R\":0, \"G\":1}},\n  \"OW\" :{\"value\":19,\"orientValues\":{\"R\":0, \"G\":1}"],[0,"}  \n"]],"start1":13945,"start2":13945,"length1":207,"length2":506}]],"length":14453,"saved":false}
{"ts":1351003861970,"patch":[[{"diffs":[[0,"alues\":{\"R\":0, \""],[-1,"G"],[1,"W"],[0,"\":1}},\n  \"RG\" :{"]],"start1":13854,"start2":13854,"length1":33,"length2":33},{"diffs":[[0,"alues\":{\"R\":0, \""],[-1,"G"],[1,"B"],[0,"\":1}},\n  \"RY\" :{"]],"start1":13958,"start2":13958,"length1":33,"length2":33},{"diffs":[[0,"alues\":{\"R\":0, \""],[-1,"G"],[1,"Y"],[0,"\":1}},\n  \"WG\" :{"]],"start1":14010,"start2":14010,"length1":33,"length2":33},{"diffs":[[0,"orientValues\":{\""],[-1,"R"],[1,"W"],[0,"\":0, \"G\":1}},\n  "]],"start1":14055,"start2":14055,"length1":33,"length2":33},{"diffs":[[0,"ntValues\":{\""],[-1,"R"],[1,"G"],[0,"\":0, \""],[-1,"G"],[1,"Y"],[0,"\":1}},\n  \"YB"]],"start1":14111,"start2":14111,"length1":32,"length2":32}]],"length":14453,"saved":false}
{"ts":1351003897313,"patch":[[{"diffs":[[0,"ntValues\":{\""],[-1,"R"],[1,"Y"],[0,"\":0, \""],[-1,"G"],[1,"B"],[0,"\":1}},\n  \"BW"]],"start1":14163,"start2":14163,"length1":32,"length2":32},{"diffs":[[0,"ntValues\":{\""],[-1,"R"],[1,"B"],[0,"\":0, \""],[-1,"G"],[1,"W"],[0,"\":1}},\n  \"OG"]],"start1":14215,"start2":14215,"length1":32,"length2":32},{"diffs":[[0,"orientValues\":{\""],[-1,"R"],[1,"O"],[0,"\":0, \"G\":1}},\n  "]],"start1":14263,"start2":14263,"length1":33,"length2":33},{"diffs":[[0,"ntValues\":{\""],[-1,"R"],[1,"O"],[0,"\":0, \""],[-1,"G"],[1,"Y"],[0,"\":1}},\n  \"OB"]],"start1":14319,"start2":14319,"length1":32,"length2":32},{"diffs":[[0,"ntValues\":{\""],[-1,"R"],[1,"O"],[0,"\":0, \""],[-1,"G"],[1,"B"],[0,"\":1}},\n  \"OW"]],"start1":14371,"start2":14371,"length1":32,"length2":32},{"diffs":[[0,"ntValues\":{\""],[-1,"R"],[1,"O"],[0,"\":0, \""],[-1,"G"],[1,"W"],[0,"\":1}}  \n};"]],"start1":14423,"start2":14423,"length1":30,"length2":30}]],"length":14453,"saved":false}
{"ts":1351003921878,"patch":[[{"diffs":[[0," else\n        {\n"],[1,"            // This is way harder...\n"],[0,"            Rubi"]],"start1":12527,"start2":12527,"length1":32,"length2":69}]],"length":14490,"saved":false}
{"ts":1351004605340,"patch":[[{"diffs":[[0,"m = 0;\n\n"],[1,"RubixState.edgeWindows ={\n    \n};\n\n"],[0,"\n//Leadi"]],"start1":13330,"start2":13330,"length1":16,"length2":51}]],"length":14525,"saved":false}
{"ts":1351004643239,"patch":[[{"diffs":[[0,"ws ={\n  "],[1,"8:\n  9:\n  10:\n  11:\n  12:\n  13:\n  14:\n  15:\n  16:\n  17:\n"],[0,"  \n};\n\n\n"]],"start1":13358,"start2":13358,"length1":16,"length2":72}]],"length":14581,"saved":false}
{"ts":1351004649796,"patch":[[{"diffs":[[0,":\n  17:\n"],[1,"  18:\n  19:\n"],[0,"  \n};\n\n\n"]],"start1":13414,"start2":13414,"length1":16,"length2":28}]],"length":14593,"saved":false}
{"ts":1351004710810,"patch":[[{"diffs":[[0,"  8:"],[1,"0,"],[0,"\n  9:"],[1,"1,"],[0,"\n  10:"],[1,"3,"],[0,"\n  11:"],[1,"0,"],[0,"\n  12:"],[1,"5,"],[0,"\n  13:"],[1,"2,"],[0,"\n  14:"],[1,"2,"],[0,"\n  15:"],[1,"5,"],[0,"\n  16:"],[1,"1,"],[0,"\n  17:"],[1,"4,"],[0,"\n  18:"],[1,"3,"],[0,"\n  19:"],[1,"4,"],[0,"\n  \n"]],"start1":13364,"start2":13364,"length1":73,"length2":97}]],"length":14617,"saved":false}
{"ts":1351004714630,"patch":[[{"diffs":[[0,",\n  19:4"],[-1,",\n"],[0,"  \n};\n\n\n"]],"start1":13448,"start2":13448,"length1":18,"length2":16}]],"length":14615,"saved":false}
{"ts":1351004747151,"patch":[[{"diffs":[[0,"rder...\n"],[1,"            RubixState.edgeWindow[faces[index][1]]\n"],[0,"        "]],"start1":12572,"start2":12572,"length1":16,"length2":67}]],"length":14666,"saved":false}
{"ts":1351004762801,"patch":[[{"diffs":[[0,"faceComp"],[1,",index"],[0,")\n{    \n"]],"start1":12081,"start2":12081,"length1":16,"length2":22}]],"length":14672,"saved":false}
{"ts":1351004767131,"patch":[[{"diffs":[[0,"aceComp,"],[-1,"index"],[1,"cubie"],[0,")\n{    \n"]],"start1":12082,"start2":12082,"length1":21,"length2":21}]],"length":14672,"saved":false}
{"ts":1351004774652,"patch":[[{"diffs":[[0,"eWindow["],[1,"cubie] == "],[0,"faces[in"]],"start1":12612,"start2":12612,"length1":16,"length2":26},{"diffs":[[0,"ndex][1]"],[-1,"]"],[0,"\n       "]],"start1":12637,"start2":12637,"length1":17,"length2":16}]],"length":14681,"saved":false}
{"ts":1351004793668,"patch":[[{"diffs":[[0,"else"],[-1,"\n        {\n            // This is way harder...\n            RubixState.edgeWindow[cubie] == faces[index][1]"],[1," if(cubie && RubixState.edgeWindow[cubie] == faces[index][1])\n\n        {\n            // This is way harder..."],[0,"\n   "]],"start1":12534,"start2":12534,"length1":115,"length2":117}]],"length":14683,"saved":false}
{"ts":1351004822054,"patch":[[{"diffs":[[0," +=0;\n        }\n"],[1,"        else\n        {\n            throw \"You've met with a terrible end\";    \n        }\n"],[0,"        \n       "]],"start1":12684,"start2":12684,"length1":32,"length2":121}]],"length":14772,"saved":false}
{"ts":1351004837388,"patch":[[{"diffs":[[0,"owSum +="],[-1,"0"],[1," RubixState.cubies[faceComp].orientValues[faces[index][0]]"],[0,";\n      "]],"start1":12679,"start2":12679,"length1":17,"length2":74}]],"length":14829,"saved":false}
{"ts":1351004859744,"patch":[[{"diffs":[[0,"aceComp,"],[1," "],[0,"cubie)\n{"]],"start1":12082,"start2":12082,"length1":16,"length2":17}]],"length":14830,"saved":false}
{"ts":1351004865386,"patch":[[{"diffs":[[0,"aces, testString"],[1,", cubie"],[0,"))\n    {\n       "]],"start1":11643,"start2":11643,"length1":32,"length2":39}]],"length":14837,"saved":false}
{"ts":1351004872646,"patch":[[{"diffs":[[0,"n(faces,cubieSum"],[1,",cubie"],[0,")\n{\n    var test"]],"start1":8663,"start2":8663,"length1":32,"length2":38}]],"length":14843,"saved":false}
{"ts":1351004874310,"patch":[[{"diffs":[[0,"ubieSum,"],[1," "],[0,"cubie)\n{"]],"start1":8672,"start2":8672,"length1":16,"length2":17}]],"length":14844,"saved":false}
{"ts":1351004881416,"patch":[[{"diffs":[[0,"n (faces"],[1,", cubie"],[0,")\n{\n    "]],"start1":6320,"start2":6320,"length1":16,"length2":23}]],"length":14851,"saved":false}
{"ts":1351004890262,"patch":[[{"diffs":[[0,"cubieSum"],[1,", cubie"],[0,");\n};\n\n/"]],"start1":6561,"start2":6561,"length1":16,"length2":23}]],"length":14858,"saved":false}
{"ts":1351004933328,"patch":[[{"diffs":[[0,"][7],5]]"],[1,", 8"],[0,");\n     "]],"start1":4496,"start2":4496,"length1":16,"length2":19},{"diffs":[[0,"es[1][1],1]]"],[1,", 9"],[0,");\n        s"]],"start1":4575,"start2":4575,"length1":24,"length2":27},{"diffs":[[0,"es[3][1],3]]"],[1,",10"],[0,");\n        s"]],"start1":4658,"start2":4658,"length1":24,"length2":27},{"diffs":[[0,"][1],2]]"],[1,",11"],[0,");\n     "]],"start1":4745,"start2":4745,"length1":16,"length2":19},{"diffs":[[0,"es[1][3],1]]"],[1,",12"],[0,");\n        s"]],"start1":4824,"start2":4824,"length1":24,"length2":27},{"diffs":[[0,"es[1][5],1]]"],[1,",13"],[0,");\n        s"]],"start1":4907,"start2":4907,"length1":24,"length2":27},{"diffs":[[0,"es[3][3],3]]"],[1,",14"],[0,");\n        s"]],"start1":4990,"start2":4990,"length1":24,"length2":27},{"diffs":[[0,"es[3][5],3]]"],[1,",15"],[0,");\n        s"]],"start1":5073,"start2":5073,"length1":24,"length2":27},{"diffs":[[0,"es[1][7],1]]"],[1,",16"],[0,");\n        s"]],"start1":5156,"start2":5156,"length1":24,"length2":27},{"diffs":[[0,"es[4][1],4]]"],[1,",17"],[0,");\n        s"]],"start1":5239,"start2":5239,"length1":24,"length2":27},{"diffs":[[0,"es[3][7],3]]"],[1,",18"],[0,");\n        s"]],"start1":5322,"start2":5322,"length1":24,"length2":27},{"diffs":[[0,"][7],4]]"],[1,",19"],[0,");\n     "]],"start1":5409,"start2":5409,"length1":16,"length2":19}]],"length":14894,"saved":false}
{"ts":1351004960109,"patch":[[{"diffs":[[0,"geWindow"],[1,"s"],[0,"[cubie] "]],"start1":12629,"start2":12629,"length1":16,"length2":17}]],"length":14895,"saved":false}
{"ts":1351004973465,"patch":[[{"diffs":[[0,"f(cubie "],[1,")//"],[0,"&& Rubix"]],"start1":12605,"start2":12605,"length1":16,"length2":19}]],"length":14898,"saved":false}
{"ts":1351004983925,"patch":[[{"diffs":[[0,"[1])\n\n        {\n"],[1,"            console.log(RubixState.edgeWindows[cubie]);\n"],[0,"            // T"]],"start1":12664,"start2":12664,"length1":32,"length2":88}]],"length":14954,"saved":false}
{"ts":1351005003161,"patch":[[{"diffs":[[0,"s[cubie]"],[1,",faces[index][1]"],[0,");\n     "]],"start1":12725,"start2":12725,"length1":16,"length2":32}]],"length":14970,"saved":false}
{"ts":1351005017887,"patch":[[{"diffs":[[0,"s[cubie]"],[-1,","],[1," == "],[0,"faces[in"]],"start1":12725,"start2":12725,"length1":17,"length2":20}]],"length":14973,"saved":false}
{"ts":1351005037218,"patch":[[{"diffs":[[0,"bie "],[-1,")//"],[0,"&& R"]],"start1":12609,"start2":12609,"length1":11,"length2":8},{"diffs":[[0,"log("],[-1,"RubixState.edgeWindows[cubie] == faces[index][1]"],[0,");\n "]],"start1":12697,"start2":12697,"length1":56,"length2":8}]],"length":14922,"saved":false}
{"ts":1351005047006,"patch":[[{"diffs":[[0," else\n        {\n"],[1,"            console.log(RubixState.edgeWindows[cubie] == faces[index][1])\n"],[0,"            thro"]],"start1":12857,"start2":12857,"length1":32,"length2":106}]],"length":14996,"saved":false}
{"ts":1351005061689,"patch":[[{"diffs":[[0,"log("],[-1,"RubixState.edgeWindows[cubie] == faces[index][1]"],[1,"faces.length"],[0,")\n  "]],"start1":12893,"start2":12893,"length1":56,"length2":20}]],"length":14960,"saved":false}
{"ts":1351005071749,"patch":[[{"diffs":[[0,"le.log(faces"],[-1,".length"],[1,"[index][1]"],[0,")\n          "]],"start1":12890,"start2":12890,"length1":31,"length2":34}]],"length":14963,"saved":false}
{"ts":1351005081252,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState.edgeWindows[cubie],"],[0,"faces[in"]],"start1":12889,"start2":12889,"length1":16,"length2":46}]],"length":14993,"saved":false}
{"ts":1351005093331,"patch":[[{"diffs":[[0,"    "],[-1," else\n        {\n            console.log(RubixState.edgeWindows[cubie],faces[index][1])\n            throw \"You've met with a terrible end\";    \n        }\n        "],[0,"\n   "]],"start1":12853,"start2":12853,"length1":169,"length2":8}]],"length":14832,"saved":false}
{"ts":1351005097220,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            console.log();\n"],[0,"    "]],"start1":12673,"start2":12673,"length1":35,"length2":8}]],"length":14805,"saved":false}
{"ts":1351005103618,"patch":[[{"diffs":[[0,"iousVals =''"],[1,",found"],[0,";\n    for(va"]],"start1":12180,"start2":12180,"length1":24,"length2":30}]],"length":14811,"saved":false}
{"ts":1351005112120,"patch":[[{"diffs":[[0,"ces[index][0]];\n"],[1,"            found\n"],[0,"        }\n      "]],"start1":12803,"start2":12803,"length1":32,"length2":50}]],"length":14829,"saved":false}
{"ts":1351005117904,"patch":[[{"diffs":[[0,"   found"],[1," = true;"],[0,"\n       "]],"start1":12828,"start2":12828,"length1":16,"length2":24}]],"length":14837,"saved":false}
{"ts":1351005120857,"patch":[[{"diffs":[[0,"'',found"],[1," =false"],[0,";\n    fo"]],"start1":12190,"start2":12190,"length1":16,"length2":23}]],"length":14844,"saved":false}
{"ts":1351005139081,"patch":[[{"diffs":[[0,"][0];\n    }\n    "],[1,"if(cubie && !found)\n    {\n        \n    }"],[0,"\n    return true"]],"start1":13059,"start2":13059,"length1":32,"length2":72}]],"length":14884,"saved":false}
{"ts":1351005153148,"patch":[[{"diffs":[[0,")\n    {\n        "],[1,"throw \"EWindowError\";   "],[0,"\n    }\n    retur"]],"start1":13093,"start2":13093,"length1":32,"length2":56}]],"length":14908,"saved":false}
{"ts":1351005163841,"patch":[[{"diffs":[[0,"][0];\n    }\n"],[1,"    \n"],[0,"    if(cubie"]],"start1":13059,"start2":13059,"length1":24,"length2":29},{"diffs":[[0,"rror\";   \n    }\n"],[1,"    \n"],[0,"    return true;"]],"start1":13129,"start2":13129,"length1":32,"length2":37}]],"length":14918,"saved":false}
{"ts":1351005169716,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            // This is way harder...\n"],[0,"    "]],"start1":12686,"start2":12686,"length1":45,"length2":8}]],"length":14881,"saved":false}
{"ts":1351005345301,"patch":[[{"diffs":[[0,"ed\");\n        }\n"],[1,"        else if (error === \"EWindowError\")\n        {\n            console.log(\"One of the edge cubies did not match a valid cube edge.\"\n        }\n"],[0,"        else\n   "]],"start1":6138,"start2":6138,"length1":32,"length2":177}]],"length":15026,"saved":false}
{"ts":1351005359116,"patch":[[{"diffs":[[0,"== \"RotC"],[-1,"ubie"],[1,"orner"],[0,"\")\n     "]],"start1":6054,"start2":6054,"length1":20,"length2":21},{"diffs":[[0," }\n        else\n"],[1,"        else\n"],[0,"        {\n      "]],"start1":6297,"start2":6297,"length1":32,"length2":45}]],"length":15040,"saved":false}
{"ts":1351005365289,"patch":[[{"diffs":[[0,"ow \"RotC"],[-1,"ubie"],[1,"orner"],[0,"\";\n     "]],"start1":4329,"start2":4329,"length1":20,"length2":21}]],"length":15041,"saved":false}
{"ts":1351005378611,"patch":[[{"diffs":[[0,"ed\");\n        }\n"],[1,"        else if (error === \"RotEdger\")\n        {\n            console.log(\"One of your corner cubies is rotated\");\n        }\n"],[0,"        else if "]],"start1":6140,"start2":6140,"length1":32,"length2":156},{"diffs":[[0,"      }\n        "],[-1,"else"],[0,"\n        else\n  "]],"start1":6417,"start2":6417,"length1":36,"length2":32}]],"length":15161,"saved":false}
{"ts":1351005382136,"patch":[[{"diffs":[[0,"og(\"One of your "],[-1,"corner"],[1,"edge"],[0," cubies is rotat"]],"start1":6226,"start2":6226,"length1":38,"length2":36}]],"length":15159,"saved":false}
{"ts":1351005385141,"patch":[[{"diffs":[[0,"edge.\"\n        }"],[-1,"\n"],[0,"        \n       "]],"start1":6406,"start2":6406,"length1":33,"length2":32}]],"length":15158,"saved":false}
{"ts":1351005389626,"patch":[[{"diffs":[[0,"(error);"],[-1,"\n"],[0,"   \n    "]],"start1":6477,"start2":6477,"length1":17,"length2":16}]],"length":15157,"saved":false}
{"ts":1351005426351,"patch":[[{"diffs":[[0,"7],4]],19);\n"],[1,"        \n        if(faceWindow % 2 === 1)\n        {\n        return false;\n    }\n"],[0,"        cons"]],"start1":5412,"start2":5412,"length1":24,"length2":104}]],"length":15237,"saved":false}
{"ts":1351005442535,"patch":[[{"diffs":[[0,"== 1)\n        {\n"],[1,"            RubixState.edgeWindowSum =0;\n    "],[0,"        return f"]],"start1":5460,"start2":5460,"length1":32,"length2":77},{"diffs":[[0,"turn false;\n"],[1,"    "],[0,"    }\n      "]],"start1":5531,"start2":5531,"length1":24,"length2":28}]],"length":15286,"saved":false}
{"ts":1351005447267,"patch":[[{"diffs":[[0," return "],[-1,"false"],[1,"            throw \"RotCorner\";\n"],[0,";\n      "]],"start1":5528,"start2":5528,"length1":21,"length2":47}]],"length":15312,"saved":false}
{"ts":1351005450233,"patch":[[{"diffs":[[0,"Sum =0;\n"],[-1,"            return "],[0,"        "]],"start1":5509,"start2":5509,"length1":35,"length2":16}]],"length":15293,"saved":false}
{"ts":1351005453035,"patch":[[{"diffs":[[0,"orner\";\n"],[-1,";\n"],[0,"        "]],"start1":5540,"start2":5540,"length1":18,"length2":16}]],"length":15291,"saved":false}
{"ts":1351005463082,"patch":[[{"diffs":[[0,"      throw \"Rot"],[-1,"Corner"],[1,"Edge"],[0,"\";\n        }\n   "]],"start1":5523,"start2":5523,"length1":38,"length2":36},{"diffs":[[0,"\"RotEdge"],[-1,"r"],[0,"\")\n     "]],"start1":6315,"start2":6315,"length1":17,"length2":16}]],"length":15288,"saved":false}
{"ts":1351005473057,"patch":[[{"diffs":[[0," if("],[-1,"fac"],[1,"RubixState.edg"],[0,"eWindow"],[1,"Sum"],[0," % 2"]],"start1":5440,"start2":5440,"length1":18,"length2":32}]],"length":15302,"saved":false}
{"ts":1351005476113,"patch":[[{"diffs":[[0,"dge\";\n        }\n"],[1,"                    RubixState.edgeWindowSum =0;\n\n"],[0,"        console."]],"start1":5554,"start2":5554,"length1":32,"length2":82}]],"length":15352,"saved":false}
{"ts":1351005477386,"patch":[[{"diffs":[[0,";\n        }\n"],[-1,"            "],[0,"        Rubi"]],"start1":5558,"start2":5558,"length1":36,"length2":24}]],"length":15340,"saved":false}
{"ts":1351005499823,"patch":[[{"diffs":[[0,"],19);\n        \n"],[1,"        //Do the edge pairty check.\n"],[0,"        if(Rubix"]],"start1":5417,"start2":5417,"length1":32,"length2":68}]],"length":15376,"saved":false}
{"ts":1351005503921,"patch":[[{"diffs":[[0,"      //"],[1," "],[0,"Do the e"]],"start1":5435,"start2":5435,"length1":16,"length2":17},{"diffs":[[0,"dge pair"],[1,"i"],[0,"ty check"]],"start1":5452,"start2":5452,"length1":16,"length2":17}]],"length":15378,"saved":false}
{"ts":1351005517643,"patch":[[{"diffs":[[0,"d\");\n   "],[-1,"/*"],[0," }catch("]],"start1":5669,"start2":5669,"length1":18,"length2":16},{"diffs":[[0,"  }\n    "],[-1,"*/"],[0,"\n    con"]],"start1":6720,"start2":6720,"length1":18,"length2":16}]],"length":15374,"saved":false}
{"ts":1351005524425,"patch":[[{"diffs":[[0,"t\");\n   "],[-1,"//"],[0," try{\n  "]],"start1":3081,"start2":3081,"length1":18,"length2":16}]],"length":15372,"saved":false}
{"ts":1351005538381,"patch":[[{"diffs":[[0,"e edge.\""],[1,";"],[0,"\n       "]],"start1":6621,"start2":6621,"length1":16,"length2":17}]],"length":15373,"saved":false}
{"ts":1351005558594,"patch":[[{"diffs":[[0,"e edge.\""],[1,")"],[0,";\n      "]],"start1":6621,"start2":6621,"length1":16,"length2":17}]],"length":15374,"saved":false}
{"ts":1351005741404,"patch":[[{"diffs":[[0," =0;"],[-1,"\n\n        console.log(\"end\");"],[0,"\n   "]],"start1":5638,"start2":5638,"length1":37,"length2":8}]],"length":15345,"saved":false}
{"ts":1351005746666,"patch":[[{"diffs":[[0,"        }\n    }\n"],[1,"    console.log(\"end\");\n\n"],[0,"    \n    console"]],"start1":6679,"start2":6679,"length1":32,"length2":57}]],"length":15370,"saved":false}
{"ts":1351005748079,"patch":[[{"diffs":[[0,"}\n    }\n"],[-1,"    "],[1,"\n"],[0,"console."]],"start1":6687,"start2":6687,"length1":20,"length2":17}]],"length":15367,"saved":false}
{"ts":1351005749290,"patch":[[{"diffs":[[0,"\n    }\n\n"],[1,"    "],[0,"console."]],"start1":6688,"start2":6688,"length1":16,"length2":20}]],"length":15371,"saved":false}
{"ts":1351005778624,"patch":[[{"diffs":[[0,"omposition;\n};\n\n"],[1,"RubixState.toString()\n{\n    \n};\n\n"],[0,"RubixState.proce"]],"start1":9155,"start2":9155,"length1":32,"length2":65}]],"length":15404,"saved":false}
{"ts":1351005789263,"patch":[[{"diffs":[[0,"toString"],[-1,"("],[1," = function(state"],[0,")\n{\n    "]],"start1":9182,"start2":9182,"length1":17,"length2":33}]],"length":15420,"saved":false}
{"ts":1351005819006,"patch":[[{"diffs":[[0,"composition;\n};\n"],[1,"RubixState.outputFaces = [];"],[0,"\nRubixState.toSt"]],"start1":9154,"start2":9154,"length1":32,"length2":60}]],"length":15448,"saved":false}
{"ts":1351005832427,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    for(var index in state)\n    {\n        \n    }\n"],[0,"    \n};\n\nRub"]],"start1":9227,"start2":9227,"length1":24,"length2":73}]],"length":15497,"saved":false}
{"ts":1351005842317,"patch":[[{"diffs":[[0,")\n    {\n        "],[1,"state[index]   "],[0,"\n    }\n    \n};\n\n"]],"start1":9265,"start2":9265,"length1":32,"length2":47}]],"length":15512,"saved":false}
{"ts":1351005984265,"patch":[[{"diffs":[[0,"    "],[-1,"for(var index in state)\n    {\n        state[index]   \n    }\n    "],[1,"state[0] * 8"],[0,"\n};\n"]],"start1":9239,"start2":9239,"length1":72,"length2":20}]],"length":15460,"saved":false}
{"ts":1351006007291,"patch":[[{"diffs":[[0,"    "],[1,"for(var index in state) {"],[0,"state["],[-1,"0"],[1,"index"],[0,"] * 8"],[1,"}"],[0,"\n};\n"]],"start1":9239,"start2":9239,"length1":20,"length2":50}]],"length":15490,"saved":false}
{"ts":1351006013446,"patch":[[{"diffs":[[0,"state) {"],[1,"console.log("],[0,"state[in"]],"start1":9260,"start2":9260,"length1":16,"length2":28},{"diffs":[[0,"dex] * 8"],[1,")"],[0,"}\n};\n\nRu"]],"start1":9288,"start2":9288,"length1":16,"length2":17}]],"length":15503,"saved":false}
{"ts":1351006015337,"patch":[[{"diffs":[[0,"ex] * 8)"],[1,";"],[0,"}\n};\n\nRu"]],"start1":9289,"start2":9289,"length1":16,"length2":17}]],"length":15504,"saved":false}
{"ts":1351006035101,"patch":[[{"diffs":[[0,"\n};\n"],[-1,"RubixState.outputFaces = [];\nRubixState.toString = function(state)\n{\n    for(var index in state) {console.log(state[index] * 8);}\n};"],[0,"\n\nRu"]],"start1":9166,"start2":9166,"length1":140,"length2":8}]],"length":15372,"saved":false}
{"ts":1351006040228,"patch":[[{"diffs":[[0,"e : null;\n};"],[1,"\nRubixState.outputFaces = [];\nRubixState.toString = function(state)\n{\n    for(var index in state) {console.log(state[index] * 8);}\n};"],[0,"\n\nRubixState"]],"start1":6799,"start2":6799,"length1":24,"length2":157}]],"length":15505,"saved":false}
{"ts":1351006047986,"patch":[[{"diffs":[[0,"ole.log("],[-1,"state"],[1,"RubixState.toString(state)\n    "],[0,");\n    /"]],"start1":6734,"start2":6734,"length1":21,"length2":47}]],"length":15531,"saved":false}
{"ts":1351006050194,"patch":[[{"diffs":[[0,"g(state)"],[-1,"\n    "],[0,");\n    /"]],"start1":6760,"start2":6760,"length1":21,"length2":16}]],"length":15526,"saved":false}
{"ts":1351006070711,"patch":[[{"diffs":[[0,"[index] "],[-1,"*"],[1,"/"],[0," 8);}\n};"]],"start1":6948,"start2":6948,"length1":17,"length2":17}]],"length":15526,"saved":false}
{"ts":1351006080927,"patch":[[{"diffs":[[0,"ex] "],[-1,"/ 8"],[1,">> 3"],[0,");}\n"]],"start1":6952,"start2":6952,"length1":11,"length2":12}]],"length":15527,"saved":false}
{"ts":1351006111302,"patch":[[{"diffs":[[0,"ole.log("],[1,"index, "],[0,"state[in"]],"start1":6935,"start2":6935,"length1":16,"length2":23}]],"length":15534,"saved":false}
{"ts":1351006169359,"patch":[[{"diffs":[[0,"ex] >> 3"],[1,",RubixState.cubies[ind]"],[0,");}\n};\n\n"]],"start1":6959,"start2":6959,"length1":16,"length2":39}]],"length":15557,"saved":false}
{"ts":1351006170400,"patch":[[{"diffs":[[0,"bies[ind"],[1,"ex"],[0,"]);}\n};\n"]],"start1":6981,"start2":6981,"length1":16,"length2":18}]],"length":15559,"saved":false}
{"ts":1351006178364,"patch":[[{"diffs":[[0,"> 3,"],[-1,"RubixState.cubies[index]"],[0,");}\n"]],"start1":6964,"start2":6964,"length1":32,"length2":8}]],"length":15535,"saved":false}
{"ts":1351006179483,"patch":[[{"diffs":[[0,"ex] >> 3"],[-1,","],[0,");}\n};\n\n"]],"start1":6959,"start2":6959,"length1":17,"length2":16}]],"length":15534,"saved":false}
{"ts":1351006210324,"patch":[[{"diffs":[[0,"ndex"],[-1," in state"],[1,"=0; index < state.length; index++"],[0,") {c"]],"start1":6915,"start2":6915,"length1":17,"length2":41}]],"length":15558,"saved":false}
{"ts":1351006335345,"patch":[[{"diffs":[[0,"Faces = [];\n"],[1,"RubixState.cubieOutputMapping={\n    \n}\n"],[0,"RubixState.t"]],"start1":6850,"start2":6850,"length1":24,"length2":63}]],"length":15597,"saved":false}
{"ts":1351006336433,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\nRubixSt"]],"start1":6892,"start2":6892,"length1":16,"length2":17}]],"length":15598,"saved":false}
{"ts":1351006417682,"patch":[[{"diffs":[[0,"\n    */    \n"],[1,"      /*\n             00 24 03\n             26 -R 28\n             06 30 09\n    02 27 08 07 31 10 11 29 05\n    33 -G 35 34 -Y 36 37 -B 39\n    14 41 17 15 42 18 20 45 23\n             16 43 19\n             40 -O 44\n             13 47 22\n             12 46 21\n             32 -W 38\n             01 25 04   \n    */\n"],[0,"    console."]],"start1":3048,"start2":3048,"length1":24,"length2":334},{"diffs":[[0,"ing={\n  "],[-1,"  "],[1,"0:\n  1:\n  2:\n  3:\n  4:\n  5:\n  6:\n  7:\n  8:\n  9:\n  10:\n  11:\n  12:\n  13:\n  14:\n  15:\n  16:\n  17:\n  18:\n  19:"],[0,"\n};\nRubi"]],"start1":7198,"start2":7198,"length1":18,"length2":123}]],"length":16013,"saved":false}
{"ts":1351006481091,"patch":[[{"diffs":[[0,"g={\n  0:"],[1,"[0,2,1]"],[0,"\n  1:\n  "]],"start1":7200,"start2":7200,"length1":16,"length2":23}]],"length":16020,"saved":false}
{"ts":1351006955714,"patch":[[{"diffs":[[0,"    "],[-1,"00 24 03"],[1," 0  1  2"],[0,"\n   "]],"start1":3078,"start2":3078,"length1":16,"length2":16},{"diffs":[[0,"    "],[-1,"26 -R 28\n"],[1," 3  R  5\n "],[0,"    "]],"start1":3100,"start2":3100,"length1":17,"length2":18},{"diffs":[[0,"    "],[-1,"0"],[0,"6 "],[-1,"30 09\n    02 27 08 07 31 10 11 29 05\n    33 -G 35 34 -Y 36 37 -B 39\n    14 41 17 15 42 18 20 45 23\n             16 43 19\n             40 -O 44\n             13 47 22\n             12 46 21\n             32 -W 38\n             01 25 04 "],[1," 7  8\n     9 10 11 12 13 14 15 16 17\n    18  G 20 21  Y 23 24  B 26\n    27 28 29 30 31 32 33 34 35\n        \t 36 37 38\n    \t\t 39  O 41\n    \t\t 42 43 44\n    \t\t 45 46 47\n    \t\t 48  W 50\n    \t\t 51 52 53\n"],[0,"  \n "]],"start1":3123,"start2":3123,"length1":242,"length2":208},{"diffs":[[0," 0:["],[-1,"0,2,1"],[0,"]\n  "]],"start1":7172,"start2":7172,"length1":13,"length2":8}]],"length":15982,"saved":false}
{"ts":1351006980397,"patch":[[{"diffs":[[0,"0:[]"],[1,","],[0,"\n  1:"],[1,"[]"],[0,"\n  2:"],[1,"[]"],[0,"\n  3:"],[1,"[]"],[0,"\n  4"]],"start1":7173,"start2":7173,"length1":23,"length2":30}]],"length":15989,"saved":false}
{"ts":1351007000101,"patch":[[{"diffs":[[0,"1:[]"],[1,","],[0,"\n  2:[]"],[1,","],[0,"\n  3:[]"],[1,","],[0,"\n  4:"],[1,"[],"],[0,"\n  5:"],[1,"[],"],[0,"\n  6:"],[1,"[],"],[0,"\n  7:"],[1,"[],"],[0,"\n  8:"],[1,"[],"],[0,"\n  9:"],[1,"[],"],[0,"\n  10:"],[1,"[],"],[0,"\n  11:"],[1,"[],"],[0,"\n  12:"],[1,"[],"],[0,"\n  13:"],[1,"[],"],[0,"\n  14:"],[1,"[],"],[0,"\n  15:"],[1,"[],"],[0,"\n  16:"],[1,"[],"],[0,"\n  17:"],[1,"[],"],[0,"\n  18:"],[1,"[],"],[0,"\n  19:"],[1,"[]"],[0,"\n};\n"]],"start1":7181,"start2":7181,"length1":112,"length2":162}]],"length":16039,"saved":false}
{"ts":1351007049361,"patch":[[{"diffs":[[0," 0:["],[1,"0,9,51"],[0,"],\n  1:["],[1,"2,53,17"],[0,"],\n "]],"start1":7172,"start2":7172,"length1":16,"length2":29}]],"length":16052,"saved":false}
{"ts":1351007055512,"patch":[[{"diffs":[[0,"={\n  0:["],[1," "],[0,"0,"],[1," "],[0,"9,51],\n "]],"start1":7168,"start2":7168,"length1":18,"length2":20},{"diffs":[[0,"],\n  1:["],[1," "],[0,"2,53,17]"]],"start1":7184,"start2":7184,"length1":16,"length2":17}]],"length":16055,"saved":false}
{"ts":1351007075881,"patch":[[{"diffs":[[0,"],\n  2:["],[1," 6,12,11"],[0,"],\n  3:["]],"start1":7200,"start2":7200,"length1":16,"length2":24}]],"length":16063,"saved":false}
{"ts":1351007130357,"patch":[[{"diffs":[[0,"1],\n"],[-1,"  3:[],\n"],[0,"  4:"]],"start1":7215,"start2":7215,"length1":16,"length2":8}]],"length":16055,"saved":false}
{"ts":1351007131406,"patch":[[{"diffs":[[0,"12,11],\n"],[1,"  3:[ 8,15,14],\n"],[0,"  4:[],\n"]],"start1":7211,"start2":7211,"length1":16,"length2":32}]],"length":16071,"saved":false}
{"ts":1351007189472,"patch":[[{"diffs":[[0,"],\n  4:["],[1,"42,45,27"],[0,"],\n  5:["]],"start1":7232,"start2":7232,"length1":16,"length2":24}]],"length":16079,"saved":false}
{"ts":1351007229707,"patch":[[{"diffs":[[0,"],\n  5:["],[1,"36,29,30"],[0,"],\n  6:["]],"start1":7248,"start2":7248,"length1":16,"length2":24}]],"length":16087,"saved":false}
{"ts":1351007246616,"patch":[[{"diffs":[[0,"],\n  6:["],[1,"38,32,33"],[0,"],\n  7:["]],"start1":7264,"start2":7264,"length1":16,"length2":24}]],"length":16095,"saved":false}
{"ts":1351007307407,"patch":[[{"diffs":[[0,"],\n  7:["],[1,"44,35,47"],[0,"],\n  8:["]],"start1":7280,"start2":7280,"length1":16,"length2":24}]],"length":16103,"saved":false}
{"ts":1351007333331,"patch":[[{"diffs":[[0,"],\n  8:["],[1,"2,52"],[0,"],\n  9:["]],"start1":7296,"start2":7296,"length1":16,"length2":20}]],"length":16107,"saved":false}
{"ts":1351007357317,"patch":[[{"diffs":[[0,"],\n  9:["],[1," 3,10"],[0,"],\n  10:"]],"start1":7308,"start2":7308,"length1":16,"length2":21}]],"length":16112,"saved":false}
{"ts":1351007359710,"patch":[[{"diffs":[[0,"],\n  8:["],[1," "],[0,"2,52],\n "]],"start1":7296,"start2":7296,"length1":16,"length2":17}]],"length":16113,"saved":false}
{"ts":1351007371207,"patch":[[{"diffs":[[0,",\n  10:["],[1," 5,16"],[0,"],\n  11:"]],"start1":7323,"start2":7323,"length1":16,"length2":21}]],"length":16118,"saved":false}
{"ts":1351007380754,"patch":[[{"diffs":[[0,"g={\n  0:"],[1," "],[0,"[ 0, 9,5"]],"start1":7167,"start2":7167,"length1":16,"length2":17},{"diffs":[[0,"1],\n  1:"],[1," "],[0,"[ 2,53,1"]],"start1":7184,"start2":7184,"length1":16,"length2":17},{"diffs":[[0,"7],\n  2:"],[1," "],[0,"[ 6,12,1"]],"start1":7201,"start2":7201,"length1":16,"length2":17},{"diffs":[[0,"1],\n  3:"],[1," "],[0,"[ 8,15,1"]],"start1":7218,"start2":7218,"length1":16,"length2":17},{"diffs":[[0,"4],\n  4:"],[1," "],[0,"[42,45,2"]],"start1":7235,"start2":7235,"length1":16,"length2":17},{"diffs":[[0,"7],\n  5:"],[1," "],[0,"[36,29,3"]],"start1":7252,"start2":7252,"length1":16,"length2":17},{"diffs":[[0,"0],\n  6:"],[1," "],[0,"[38,32,3"]],"start1":7269,"start2":7269,"length1":16,"length2":17},{"diffs":[[0,"3],\n  7:"],[1," "],[0,"[44,35,4"]],"start1":7286,"start2":7286,"length1":16,"length2":17},{"diffs":[[0,"7],\n  8:"],[1," "],[0,"[ 2,52],"]],"start1":7303,"start2":7303,"length1":16,"length2":17},{"diffs":[[0,"2],\n  9:"],[1," "],[0,"[ 3,10],"]],"start1":7317,"start2":7317,"length1":16,"length2":17}]],"length":16128,"saved":false}
{"ts":1351007415910,"patch":[[{"diffs":[[0,"{\n  "],[1," "],[0,"0:"],[-1," "],[0,"[ 0,"]],"start1":7169,"start2":7169,"length1":11,"length2":11},{"diffs":[[0,"1],\n"],[1," "],[0,"  1:"],[-1," "],[0,"[ 2,"]],"start1":7184,"start2":7184,"length1":13,"length2":13},{"diffs":[[0,"7],\n"],[1," "],[0,"  2:"],[-1," "],[0,"[ 6,"]],"start1":7201,"start2":7201,"length1":13,"length2":13},{"diffs":[[0,",\n  "],[1," "],[0,"3:"],[-1," "],[0,"[ 8,"]],"start1":7220,"start2":7220,"length1":11,"length2":11},{"diffs":[[0,",\n  "],[1," "],[0,"4:"],[-1," "],[0,"[42,"]],"start1":7237,"start2":7237,"length1":11,"length2":11},{"diffs":[[0,",\n  "],[1," "],[0,"5:"],[-1," "],[0,"[36,"]],"start1":7254,"start2":7254,"length1":11,"length2":11},{"diffs":[[0,"0],\n"],[1," "],[0,"  6:"],[-1," "],[0,"[38,"]],"start1":7269,"start2":7269,"length1":13,"length2":13},{"diffs":[[0,"3],\n"],[1," "],[0,"  7:"],[-1," "],[0,"[44,"]],"start1":7286,"start2":7286,"length1":13,"length2":13},{"diffs":[[0,",\n  "],[1," "],[0,"8:"],[-1," "],[0,"[ 2,"]],"start1":7305,"start2":7305,"length1":11,"length2":11},{"diffs":[[0,",\n  "],[1," "],[0,"9:"],[-1," "],[0,"[ 3,"]],"start1":7319,"start2":7319,"length1":11,"length2":11}]],"length":16128,"saved":false}
{"ts":1351007428939,"patch":[[{"diffs":[[0,",\n  11:["],[1," 7,13"],[0,"],\n  12:"]],"start1":7347,"start2":7347,"length1":16,"length2":21}]],"length":16133,"saved":false}
{"ts":1351007444314,"patch":[[{"diffs":[[0,",\n  12:["],[1,"18,48"],[0,"],\n  13:"]],"start1":7361,"start2":7361,"length1":16,"length2":21}]],"length":16138,"saved":false}
{"ts":1351007474738,"patch":[[{"diffs":[[0,"12:["],[-1,"18,4"],[1,"48,1"],[0,"8],\n"]],"start1":7365,"start2":7365,"length1":12,"length2":12}]],"length":16138,"saved":false}
{"ts":1351007484422,"patch":[[{"diffs":[[0,",\n  13:["],[1,"20,21"],[0,"],\n  14:"]],"start1":7375,"start2":7375,"length1":16,"length2":21}]],"length":16143,"saved":false}
{"ts":1351007490114,"patch":[[{"diffs":[[0,",\n  14:["],[1,"23,24"],[0,"],\n  15:"]],"start1":7389,"start2":7389,"length1":16,"length2":21}]],"length":16148,"saved":false}
{"ts":1351007507561,"patch":[[{"diffs":[[0,",\n  15:["],[1,"26,50"],[0,"],\n  16:"]],"start1":7403,"start2":7403,"length1":16,"length2":21}]],"length":16153,"saved":false}
{"ts":1351007534150,"patch":[[{"diffs":[[0,",\n  16:["],[1,"39,28"],[0,"],\n  17:"]],"start1":7417,"start2":7417,"length1":16,"length2":21}]],"length":16158,"saved":false}
{"ts":1351007546502,"patch":[[{"diffs":[[0,",\n  17:["],[1,"37,31"],[0,"],\n  18:"]],"start1":7431,"start2":7431,"length1":16,"length2":21}]],"length":16163,"saved":false}
{"ts":1351007559008,"patch":[[{"diffs":[[0,",\n  18:["],[1,"41,34"],[0,"],\n  19:"]],"start1":7445,"start2":7445,"length1":16,"length2":21}]],"length":16168,"saved":false}
{"ts":1351007564056,"patch":[[{"diffs":[[0,",\n  19:["],[1,"43,46"],[0,"]\n};\nRub"]],"start1":7459,"start2":7459,"length1":16,"length2":21}]],"length":16173,"saved":false}
{"ts":1351007587106,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState.cubieOutputMapping["],[0,"index"],[1,"]"],[0,", state["]],"start1":7574,"start2":7574,"length1":21,"length2":52}]],"length":16204,"saved":false}
{"ts":1351007691835,"patch":[[{"diffs":[[0,"={\n   0:"],[1,"{"],[0,"[ 0, 9,5"]],"start1":7168,"start2":7168,"length1":16,"length2":17},{"diffs":[[0,"0, 9,51]"],[1,"}"],[0,",\n   1:["]],"start1":7179,"start2":7179,"length1":16,"length2":17}]],"length":16206,"saved":false}
{"ts":1351007704916,"patch":[[{"diffs":[[0,"{\n   0:{"],[1,"\"abs\":"],[0,"[ 0, 9,5"]],"start1":7169,"start2":7169,"length1":16,"length2":22}]],"length":16212,"saved":false}
{"ts":1351007708373,"patch":[[{"diffs":[[0," 0:{\"abs"],[1,"olute"],[0,"\":[ 0, 9"]],"start1":7173,"start2":7173,"length1":16,"length2":21}]],"length":16217,"saved":false}
{"ts":1351007714474,"patch":[[{"diffs":[[0,"0, 9,51]"],[1,", \"faces\":"],[0,"},\n   1:"]],"start1":7190,"start2":7190,"length1":16,"length2":26}]],"length":16227,"saved":false}
{"ts":1351007739249,"patch":[[{"diffs":[[0,"\"faces\":"],[1,"[0,1,5]"],[0,"},\n   1:"]],"start1":7200,"start2":7200,"length1":16,"length2":23}]],"length":16234,"saved":false}
{"ts":1351007777027,"patch":[[{"diffs":[[0,"},\n   1:"],[1,"{\"absolute\":"],[0,"[ 2,53,1"]],"start1":7215,"start2":7215,"length1":16,"length2":28},{"diffs":[[0,"],\n   2:"],[1,"{\"absolute\":"],[0,"[ 6,12,1"]],"start1":7244,"start2":7244,"length1":16,"length2":28},{"diffs":[[0,"],\n   3:"],[1,"{\"absolute\":"],[0,"[ 8,15,1"]],"start1":7273,"start2":7273,"length1":16,"length2":28},{"diffs":[[0,"],\n   4:"],[1,"{\"absolute\":"],[0,"[42,45,2"]],"start1":7302,"start2":7302,"length1":16,"length2":28},{"diffs":[[0,"],\n   5:"],[1,"{\"absolute\":"],[0,"[36,29,3"]],"start1":7331,"start2":7331,"length1":16,"length2":28},{"diffs":[[0,"],\n   6:"],[1,"{\"absolute\":"],[0,"[38,32,3"]],"start1":7360,"start2":7360,"length1":16,"length2":28},{"diffs":[[0,"],\n   7:"],[1,"{\"absolute\":"],[0,"[44,35,4"]],"start1":7389,"start2":7389,"length1":16,"length2":28},{"diffs":[[0,"],\n   8:"],[1,"{\"absolute\":"],[0,"[ 2,52],"]],"start1":7418,"start2":7418,"length1":16,"length2":28},{"diffs":[[0,"],\n   9:"],[1,"{\"absolute\":"],[0,"[ 3,10],"]],"start1":7444,"start2":7444,"length1":16,"length2":28},{"diffs":[[0,"],\n  10:"],[1,"{\"absolute\":"],[0,"[ 5,16],"]],"start1":7470,"start2":7470,"length1":16,"length2":28},{"diffs":[[0,"],\n  11:"],[1,"{\"absolute\":"],[0,"[ 7,13],"]],"start1":7496,"start2":7496,"length1":16,"length2":28},{"diffs":[[0,"],\n  12:"],[1,"{\"absolute\":"],[0,"[48,18],"]],"start1":7522,"start2":7522,"length1":16,"length2":28},{"diffs":[[0,"],\n  13:"],[1,"{\"absolute\":"],[0,"[20,21],"]],"start1":7548,"start2":7548,"length1":16,"length2":28},{"diffs":[[0,"],\n  14:"],[1,"{\"absolute\":"],[0,"[23,24],"]],"start1":7574,"start2":7574,"length1":16,"length2":28},{"diffs":[[0,"],\n  15:"],[1,"{\"absolute\":"],[0,"[26,50],"]],"start1":7600,"start2":7600,"length1":16,"length2":28},{"diffs":[[0,"],\n  16:"],[1,"{\"absolute\":"],[0,"[39,28],"]],"start1":7626,"start2":7626,"length1":16,"length2":28},{"diffs":[[0,"],\n  17:"],[1,"{\"absolute\":"],[0,"[37,31],"]],"start1":7652,"start2":7652,"length1":16,"length2":28},{"diffs":[[0,"],\n  18:"],[1,"{\"absolute\":"],[0,"[41,34],"]],"start1":7678,"start2":7678,"length1":16,"length2":28},{"diffs":[[0,"],\n  19:"],[1,"{\"absolute\":"],[0,"[43,46]\n"]],"start1":7704,"start2":7704,"length1":16,"length2":28}]],"length":16462,"saved":false}
{"ts":1351007798443,"patch":[[{"diffs":[[0,",53,17],"],[1," \"faces\":[0,1,5]},"],[0,"\n   2:{\""]],"start1":7238,"start2":7238,"length1":16,"length2":34},{"diffs":[[0,",12,11],"],[1," \"faces\":[0,1,5]},"],[0,"\n   3:{\""]],"start1":7285,"start2":7285,"length1":16,"length2":34},{"diffs":[[0,",15,14],"],[1," \"faces\":[0,1,5]},"],[0,"\n   4:{\""]],"start1":7332,"start2":7332,"length1":16,"length2":34},{"diffs":[[0,",45,27],"],[1," \"faces\":[0,1,5]},"],[0,"\n   5:{\""]],"start1":7379,"start2":7379,"length1":16,"length2":34},{"diffs":[[0,",29,30],"],[1," \"faces\":[0,1,5]},"],[0,"\n   6:{\""]],"start1":7426,"start2":7426,"length1":16,"length2":34},{"diffs":[[0,",32,33],"],[1," \"faces\":[0,1,5]},"],[0,"\n   7:{\""]],"start1":7473,"start2":7473,"length1":16,"length2":34},{"diffs":[[0,",35,47],"],[1," \"faces\":[0,1,5]},"],[0,"\n   8:{\""]],"start1":7520,"start2":7520,"length1":16,"length2":34},{"diffs":[[0,"[ 2,52],"],[1," \"faces\":[0,1,5]},"],[0,"\n   9:{\""]],"start1":7564,"start2":7564,"length1":16,"length2":34},{"diffs":[[0,"[ 3,10],"],[1," \"faces\":[0,1,5]},"],[0,"\n  10:{\""]],"start1":7608,"start2":7608,"length1":16,"length2":34},{"diffs":[[0,"[ 5,16],"],[1," \"faces\":[0,1,5]},"],[0,"\n  11:{\""]],"start1":7652,"start2":7652,"length1":16,"length2":34},{"diffs":[[0,"[ 7,13],"],[1," \"faces\":[0,1,5]},"],[0,"\n  12:{\""]],"start1":7696,"start2":7696,"length1":16,"length2":34},{"diffs":[[0,"[48,18],"],[1," \"faces\":[0,1,5]},"],[0,"\n  13:{\""]],"start1":7740,"start2":7740,"length1":16,"length2":34},{"diffs":[[0,"[20,21],"],[1," \"faces\":[0,1,5]},"],[0,"\n  14:{\""]],"start1":7784,"start2":7784,"length1":16,"length2":34},{"diffs":[[0,"[23,24],"],[1," \"faces\":[0,1,5]},"],[0,"\n  15:{\""]],"start1":7828,"start2":7828,"length1":16,"length2":34},{"diffs":[[0,"[26,50],"],[1," \"faces\":[0,1,5]},"],[0,"\n  16:{\""]],"start1":7872,"start2":7872,"length1":16,"length2":34},{"diffs":[[0,"[39,28],"],[1," \"faces\":[0,1,5]},"],[0,"\n  17:{\""]],"start1":7916,"start2":7916,"length1":16,"length2":34},{"diffs":[[0,"[37,31],"],[1," \"faces\":[0,1,5]},"],[0,"\n  18:{\""]],"start1":7960,"start2":7960,"length1":16,"length2":34},{"diffs":[[0,"[41,34],"],[1," \"faces\":[0,1,5]},"],[0,"\n  19:{\""]],"start1":8004,"start2":8004,"length1":16,"length2":34},{"diffs":[[0,":[43,46]"],[1,", \"faces\":[0,1,5]}"],[0,"\n};\nRubi"]],"start1":8047,"start2":8047,"length1":16,"length2":34}]],"length":16804,"saved":false}
{"ts":1351007819041,"patch":[[{"diffs":[[0,"[ 2,52],"],[1,"   "],[0," \"faces\""]],"start1":7564,"start2":7564,"length1":16,"length2":19},{"diffs":[[0,"[ 3,10],"],[1,"   "],[0," \"faces\""]],"start1":7611,"start2":7611,"length1":16,"length2":19},{"diffs":[[0,"[ 5,16],"],[1,"   "],[0," \"faces\""]],"start1":7658,"start2":7658,"length1":16,"length2":19},{"diffs":[[0,"[ 7,13],"],[1,"   "],[0," \"faces\""]],"start1":7705,"start2":7705,"length1":16,"length2":19},{"diffs":[[0,"[48,18],"],[1,"   "],[0," \"faces\""]],"start1":7752,"start2":7752,"length1":16,"length2":19},{"diffs":[[0,"[20,21],"],[1,"   "],[0," \"faces\""]],"start1":7799,"start2":7799,"length1":16,"length2":19},{"diffs":[[0,"[23,24],"],[1,"   "],[0," \"faces\""]],"start1":7846,"start2":7846,"length1":16,"length2":19},{"diffs":[[0,"[26,50],"],[1,"   "],[0," \"faces\""]],"start1":7893,"start2":7893,"length1":16,"length2":19},{"diffs":[[0,"[39,28],"],[1,"   "],[0," \"faces\""]],"start1":7940,"start2":7940,"length1":16,"length2":19},{"diffs":[[0,"[37,31],"],[1,"   "],[0," \"faces\""]],"start1":7987,"start2":7987,"length1":16,"length2":19},{"diffs":[[0,"[41,34],"],[1,"   "],[0," \"faces\""]],"start1":8034,"start2":8034,"length1":16,"length2":19},{"diffs":[[0,"[43,46],"],[1,"   "],[0," \"faces\""]],"start1":8081,"start2":8081,"length1":16,"length2":19}]],"length":16840,"saved":false}
{"ts":1351007828969,"patch":[[{"diffs":[[0," \"faces\":[0,"],[-1,"1,5"],[1,"5,3"],[0,"]},\n   2:{\"a"]],"start1":7246,"start2":7246,"length1":27,"length2":27}]],"length":16840,"saved":false}
{"ts":1351007874533,"patch":[[{"diffs":[[0," \"faces\":[0,"],[-1,"1,5"],[1,"2,1"],[0,"]},\n   3:{\"a"]],"start1":7293,"start2":7293,"length1":27,"length2":27},{"diffs":[[0,"], \"faces\":["],[-1,"0,1,5"],[1,"4,5,1"],[0,"]},\n   5:{\"a"]],"start1":7385,"start2":7385,"length1":29,"length2":29},{"diffs":[[0,"], \"faces\":["],[-1,"0,1,5"],[1,"4,1,2"],[0,"]},\n   6:{\"a"]],"start1":7432,"start2":7432,"length1":29,"length2":29}]],"length":16840,"saved":false}
{"ts":1351007904008,"patch":[[{"diffs":[[0,"2,33], \"faces\":["],[-1,"0"],[1,"4"],[0,",1,5]},\n   7:{\"a"]],"start1":7475,"start2":7475,"length1":33,"length2":33},{"diffs":[[0,"5,47], \"faces\":["],[-1,"0"],[1,"4"],[0,",1,5]},\n   8:{\"a"]],"start1":7522,"start2":7522,"length1":33,"length2":33},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n   9:{\"a"]],"start1":7576,"start2":7576,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  10:{\"a"]],"start1":7621,"start2":7621,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  11:{\"a"]],"start1":7666,"start2":7666,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  12:{\"a"]],"start1":7711,"start2":7711,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  13:{\"a"]],"start1":7756,"start2":7756,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  14:{\"a"]],"start1":7801,"start2":7801,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  15:{\"a"]],"start1":7846,"start2":7846,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  16:{\"a"]],"start1":7891,"start2":7891,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  17:{\"a"]],"start1":7936,"start2":7936,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  18:{\"a"]],"start1":7981,"start2":7981,"length1":26,"length2":24},{"diffs":[[0,"\"faces\":[0,1"],[-1,",5"],[0,"]},\n  19:{\"a"]],"start1":8026,"start2":8026,"length1":26,"length2":24},{"diffs":[[0,"es\":[0,1"],[-1,",5"],[0,"]}\n};\nRu"]],"start1":8075,"start2":8075,"length1":18,"length2":16}]],"length":16816,"saved":false}
{"ts":1351007930141,"patch":[[{"diffs":[[0," \"faces\":[4,"],[-1,"1,5"],[1,"2,3"],[0,"]},\n   7:{\"a"]],"start1":7481,"start2":7481,"length1":27,"length2":27},{"diffs":[[0,"ces\":[4,"],[-1,"1"],[1,"3"],[0,",5]},\n  "]],"start1":7532,"start2":7532,"length1":17,"length2":17}]],"length":16816,"saved":false}
{"ts":1351007957081,"patch":[[{"diffs":[[0,"8],    \"faces\":["],[-1,"0"],[1,"4"],[0,",1]},\n  17:{\"abs"]],"start1":7929,"start2":7929,"length1":33,"length2":33},{"diffs":[[0,"1],    \"faces\":["],[-1,"0"],[1,"4"],[0,",1]},\n  18:{\"abs"]],"start1":7974,"start2":7974,"length1":33,"length2":33},{"diffs":[[0,"4],    \"faces\":["],[-1,"0"],[1,"4"],[0,",1]},\n  19:{\"abs"]],"start1":8019,"start2":8019,"length1":33,"length2":33},{"diffs":[[0,"   \"faces\":["],[-1,"0"],[1,"4"],[0,",1]}\n};\nRubi"]],"start1":8068,"start2":8068,"length1":25,"length2":25}]],"length":16816,"saved":false}
{"ts":1351007978131,"patch":[[{"diffs":[[0,"8],    \"faces\":["],[-1,"0"],[1,"5"],[0,",1]},\n  13:{\"abs"]],"start1":7749,"start2":7749,"length1":33,"length2":33}]],"length":16816,"saved":false}
{"ts":1351007990202,"patch":[[{"diffs":[[0,"   \"faces\":["],[-1,"0,1"],[1,"1,2"],[0,"]},\n  14:{\"a"]],"start1":7798,"start2":7798,"length1":27,"length2":27},{"diffs":[[0,"   \"faces\":["],[-1,"0,1"],[1,"2,3"],[0,"]},\n  15:{\"a"]],"start1":7843,"start2":7843,"length1":27,"length2":27},{"diffs":[[0,"   \"faces\":["],[-1,"0,1"],[1,"3,5"],[0,"]},\n  16:{\"a"]],"start1":7888,"start2":7888,"length1":27,"length2":27}]],"length":16816,"saved":false}
{"ts":1351008003851,"patch":[[{"diffs":[[0," \"faces\":[0,"],[-1,"1"],[1,"5"],[0,"]},\n   9:{\"a"]],"start1":7575,"start2":7575,"length1":25,"length2":25},{"diffs":[[0," \"faces\":[0,"],[-1,"1"],[1,"2"],[0,"]},\n  11:{\"a"]],"start1":7665,"start2":7665,"length1":25,"length2":25},{"diffs":[[0," \"faces\":[0,"],[-1,"1"],[1,"3"],[0,"]},\n  12:{\"a"]],"start1":7710,"start2":7710,"length1":25,"length2":25}]],"length":16816,"saved":false}
{"ts":1351008012526,"patch":[[{"diffs":[[0,"ces\":[0,"],[-1,"2"],[1,"3"],[0,"]},\n  11"]],"start1":7669,"start2":7669,"length1":17,"length2":17},{"diffs":[[0," \"faces\":[0,"],[-1,"3"],[1,"2"],[0,"]},\n  12:{\"a"]],"start1":7710,"start2":7710,"length1":25,"length2":25}]],"length":16816,"saved":false}
{"ts":1351008078129,"patch":[[{"diffs":[[0,"g[index]"],[1,".absolute[RubixState.cubieOutputMapping[index].state[index] & 7]"],[0,", state["]],"start1":8222,"start2":8222,"length1":16,"length2":80}]],"length":16880,"saved":false}
{"ts":1351008111972,"patch":[[{"diffs":[[0,"[index]."],[1,"faces["],[0,"state[in"]],"start1":8269,"start2":8269,"length1":16,"length2":22},{"diffs":[[0,"ex] & 7]"],[1,"]"],[0,", state["]],"start1":8292,"start2":8292,"length1":16,"length2":17}]],"length":16887,"saved":false}
{"ts":1351008124939,"patch":[[{"diffs":[[0,"x].faces"],[-1,"["],[1,".indexOf("],[0,"state[in"]],"start1":8274,"start2":8274,"length1":17,"length2":25},{"diffs":[[0,"dex] & 7"],[-1,"]"],[1,")"],[0,"], state"]],"start1":8299,"start2":8299,"length1":17,"length2":17}]],"length":16895,"saved":false}
{"ts":1351008140023,"patch":[[{"diffs":[[0,"ndex++) "],[-1,"{"],[1,"\n    {\n        "],[0,"console."]],"start1":8173,"start2":8173,"length1":17,"length2":31},{"diffs":[[0,"] >> 3);"],[1,"\n    "],[0,"}\n};\n\nRu"]],"start1":8336,"start2":8336,"length1":16,"length2":21}]],"length":16914,"saved":false}
{"ts":1351008156914,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    var tempIndex = [RubixState.cubieOutputMapping[index].faces.indexOf(state[index] & 7);\n"],[0,"    for(var "]],"start1":8117,"start2":8117,"length1":24,"length2":115},{"diffs":[[0,"index++) \n    {\n"],[1,"    \n"],[0,"        console."]],"start1":8263,"start2":8263,"length1":32,"length2":37},{"diffs":[[0,"lute"],[-1,"[RubixState.cubieOutputMapping[index].faces.indexOf(state[index] & 7)"],[0,"], s"]],"start1":8345,"start2":8345,"length1":77,"length2":8}]],"length":16941,"saved":false}
{"ts":1351008173177,"patch":[[{"diffs":[[0,"pIndex ="],[1," 0\n    for(var index=0; index < state.length; index++) \n    {\n        tempIndex ="],[0," [RubixS"]],"start1":8140,"start2":8140,"length1":16,"length2":97},{"diffs":[[0,"7);\n"],[-1,"    for(var index=0; index < state.length; index++) \n    {\n    \n"],[0,"    "]],"start1":8297,"start2":8297,"length1":72,"length2":8}]],"length":16958,"saved":false}
{"ts":1351008177567,"patch":[[{"diffs":[[0,"Index = "],[-1,"["],[0,"RubixSta"]],"start1":8222,"start2":8222,"length1":17,"length2":16}]],"length":16957,"saved":false}
{"ts":1351008183876,"patch":[[{"diffs":[[0,"absolute"],[-1,"]"],[0,", state["]],"start1":8357,"start2":8357,"length1":17,"length2":16}]],"length":16956,"saved":false}
{"ts":1351008203540,"patch":[[{"diffs":[[0,"ndex] & 7);\n"],[1,"        if(tempIndex == -1)\n        {\n        }\n        \n"],[0,"        cons"]],"start1":8288,"start2":8288,"length1":24,"length2":81}]],"length":17013,"saved":false}
{"ts":1351008207825,"patch":[[{"diffs":[[0,"= -1)\n        {\n"],[1,"            return \"\";\n"],[0,"        }\n      "]],"start1":8322,"start2":8322,"length1":32,"length2":55}]],"length":17036,"saved":false}
{"ts":1351008212518,"patch":[[{"diffs":[[0,"return \""],[1,"Bad State"],[0,"\";\n     "]],"start1":8350,"start2":8350,"length1":16,"length2":25}]],"length":17045,"saved":false}
{"ts":1351008232318,"patch":[[{"diffs":[[0,"ndex = 0"],[1,";\n    var output = ''"],[0,"\n    for"]],"start1":8142,"start2":8142,"length1":16,"length2":37}]],"length":17066,"saved":false}
{"ts":1351008249176,"patch":[[{"diffs":[[0,"ut = ''\n"],[1,"    output[4] = \"R\";\n"],[0,"    for("]],"start1":8164,"start2":8164,"length1":16,"length2":37}]],"length":17087,"saved":false}
{"ts":1351008252418,"patch":[[{"diffs":[[0,"put = ''"],[1,";"],[0,"\n    out"]],"start1":8163,"start2":8163,"length1":16,"length2":17}]],"length":17088,"saved":false}
{"ts":1351008261235,"patch":[[{"diffs":[[0," = \"R\";\n"],[1,"    console.log(output);\n"],[0,"    for("]],"start1":8186,"start2":8186,"length1":16,"length2":41}]],"length":17113,"saved":false}
{"ts":1351008290207,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    outputFaces.length = 54;\n"],[0,"    var temp"]],"start1":8117,"start2":8117,"length1":24,"length2":53}]],"length":17142,"saved":false}
{"ts":1351008295132,"patch":[[{"diffs":[[0,"tate)\n{\n    "],[1,"RubixState."],[0,"outputFaces."]],"start1":8121,"start2":8121,"length1":24,"length2":35}]],"length":17153,"saved":false}
{"ts":1351008310047,"patch":[[{"diffs":[[0,"    "],[1,"RubixState."],[0,"output"],[1,"Faces"],[0,"[4] = "],[-1,"\"R\""],[1,"'R'"],[0,";\n  "]],"start1":8213,"start2":8213,"length1":23,"length2":39}]],"length":17169,"saved":false}
{"ts":1351008315756,"patch":[[{"diffs":[[0," 0;\n"],[-1,"    var output = '';\n    "],[1,"\n"],[0,"Rubi"]],"start1":8188,"start2":8188,"length1":33,"length2":9},{"diffs":[[0," = 'R';\n"],[1,"    \n    \n    \n"],[0,"    cons"]],"start1":8218,"start2":8218,"length1":16,"length2":31}]],"length":17160,"saved":false}
{"ts":1351008317005,"patch":[[{"diffs":[[0,"Index = 0;\n\n"],[1,"    "],[0,"RubixState.o"]],"start1":8181,"start2":8181,"length1":24,"length2":28}]],"length":17164,"saved":false}
{"ts":1351008323871,"patch":[[{"diffs":[[0,"x = 0;\n\n"],[1,"    RubixState.outputFaces[4] = 'R';\n    RubixState.outputFaces[4] = 'R';\n    RubixState.outputFaces[4] = 'R';\n    RubixState.outputFaces[4] = 'R';\n    RubixState.outputFaces[4] = 'R';\n"],[0,"    Rubi"]],"start1":8185,"start2":8185,"length1":16,"length2":201}]],"length":17349,"saved":false}
{"ts":1351008337450,"patch":[[{"diffs":[[0,"ate.outputFaces["],[-1,"4"],[1,"19"],[0,"] = 'R';\n    Rub"]],"start1":8241,"start2":8241,"length1":33,"length2":34},{"diffs":[[0,"ate.outputFaces["],[-1,"4"],[1,"22"],[0,"] = 'R';\n    Rub"]],"start1":8279,"start2":8279,"length1":33,"length2":34},{"diffs":[[0,"ate.outputFaces["],[-1,"4"],[1,"25"],[0,"] = 'R';\n    Rub"]],"start1":8317,"start2":8317,"length1":33,"length2":34},{"diffs":[[0,"te.outputFaces[4"],[1,"0"],[0,"] = 'R';\n    Rub"]],"start1":8356,"start2":8356,"length1":32,"length2":33},{"diffs":[[0,"te.outputFaces[4"],[1,"9"],[0,"] = 'R';\n    \n  "]],"start1":8394,"start2":8394,"length1":32,"length2":33}]],"length":17354,"saved":false}
{"ts":1351008347355,"patch":[[{"diffs":[[0,"aces[19] = '"],[-1,"R"],[1,"G"],[0,"';\n    Rubix"]],"start1":8252,"start2":8252,"length1":25,"length2":25},{"diffs":[[0,"aces[22] = '"],[-1,"R"],[1,"Y"],[0,"';\n    Rubix"]],"start1":8290,"start2":8290,"length1":25,"length2":25},{"diffs":[[0,"aces[25] = '"],[-1,"R"],[1,"B"],[0,"';\n    Rubix"]],"start1":8328,"start2":8328,"length1":25,"length2":25},{"diffs":[[0,"aces[40] = '"],[-1,"R"],[1,"O"],[0,"';\n    Rubix"]],"start1":8366,"start2":8366,"length1":25,"length2":25},{"diffs":[[0,"aces[49] = '"],[-1,"R"],[1,"W"],[0,"';\n    \n    "]],"start1":8404,"start2":8404,"length1":25,"length2":25}]],"length":17354,"saved":false}
{"ts":1351008351409,"patch":[[{"diffs":[[0,"Faces[4]"],[1," "],[0," = 'R';\n"]],"start1":8214,"start2":8214,"length1":16,"length2":17}]],"length":17355,"saved":false}
{"ts":1351008365320,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState."],[0,"output"],[1,"Faces"],[0,");\n    f"]],"start1":8444,"start2":8444,"length1":22,"length2":38}]],"length":17371,"saved":false}
{"ts":1351008381175,"patch":[[{"diffs":[[0,"     }\n        \n"],[1,"        \n"],[0,"        console."]],"start1":8699,"start2":8699,"length1":32,"length2":41}]],"length":17380,"saved":false}
{"ts":1351008400013,"patch":[[{"diffs":[[0,"      \n        \n"],[1,"        \n"],[0,"        console."]],"start1":8708,"start2":8708,"length1":32,"length2":41},{"diffs":[[0,"absolute"],[1,"[tempIndex]"],[0,", state["]],"start1":8790,"start2":8790,"length1":16,"length2":27}]],"length":17400,"saved":false}
{"ts":1351008433810,"patch":[[{"diffs":[[0,"\":[4,1]}\n};\n"],[1,"\n\n"],[0,"RubixState.t"]],"start1":8077,"start2":8077,"length1":24,"length2":26}]],"length":17402,"saved":false}
{"ts":1351008451068,"patch":[[{"diffs":[[0,"       \n        "],[1,"RubixState.outputFaces[RubixState.cubieOutputMapping[index].absolute[tempIndex]];"],[0,"\n        console"]],"start1":8718,"start2":8718,"length1":32,"length2":113}]],"length":17483,"saved":false}
{"ts":1351008455394,"patch":[[{"diffs":[[0,"       \n        "],[1,"console.log("],[0,"RubixState.outpu"]],"start1":8718,"start2":8718,"length1":32,"length2":44},{"diffs":[[0,"pIndex]]"],[1,")"],[0,";\n      "]],"start1":8818,"start2":8818,"length1":16,"length2":17}]],"length":17496,"saved":false}
{"ts":1351008458541,"patch":[[{"diffs":[[0,"ndex]]);\n       "],[1,"//"],[0," console.log(Rub"]],"start1":8820,"start2":8820,"length1":32,"length2":34}]],"length":17498,"saved":false}
{"ts":1351008469958,"patch":[[{"diffs":[[0,"   \n        "],[-1,"console.log("],[0,"RubixState.o"]],"start1":8722,"start2":8722,"length1":36,"length2":24},{"diffs":[[0,"pIndex]]"],[-1,");"],[0,"\n       "]],"start1":8806,"start2":8806,"length1":18,"length2":16}]],"length":17484,"saved":false}
{"ts":1351008498538,"patch":[[{"diffs":[[0,"utFaces["],[1,"\n                "],[0,"RubixSta"]],"start1":8749,"start2":8749,"length1":16,"length2":33},{"diffs":[[0,"pIndex]]"],[1," =\n                    RubixState.faceValues[\n            \n        "],[0,"\n       "]],"start1":8823,"start2":8823,"length1":16,"length2":83}]],"length":17568,"saved":false}
{"ts":1351008512498,"patch":[[{"diffs":[[0,"eValues["],[1,"RubixState.cubieOutputMapping[index].faces[tempIndex];"],[0,"\n       "]],"start1":8868,"start2":8868,"length1":16,"length2":70}]],"length":17622,"saved":false}
{"ts":1351008517931,"patch":[[{"diffs":[[0,"mpIndex]"],[1,"]"],[0,";\n      "]],"start1":8921,"start2":8921,"length1":16,"length2":17}]],"length":17623,"saved":false}
{"ts":1351008532315,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"        console.log(RubixState.outputFaces);\n\n"],[0,"};\n\nRubi"]],"start1":9052,"start2":9052,"length1":16,"length2":62}]],"length":17669,"saved":false}
{"ts":1351008590457,"patch":[[{"diffs":[[0,"lute\":[ "],[-1,"2"],[1,"1"],[0,",52],   "]],"start1":7558,"start2":7558,"length1":17,"length2":17}]],"length":17669,"saved":false}
{"ts":1351008681482,"patch":[[{"diffs":[[0,"       \n        "],[1,"for(tempIndex; tempIndex < (index < 8 ? 3 : 2);tempIndex++)\n        {"],[0,"\n        RubixSt"]],"start1":8709,"start2":8709,"length1":32,"length2":101},{"diffs":[[0,"      {\n        "],[1,"    "],[0,"RubixState.outpu"]],"start1":8787,"start2":8787,"length1":32,"length2":36},{"diffs":[[0,"tFaces[\n"],[1,"    "],[0,"        "]],"start1":8823,"start2":8823,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"RubixState.faceV"]],"start1":8915,"start2":8915,"length1":32,"length2":36},{"diffs":[[0,"empIndex]];\n"],[1,"        }\n"],[0,"            "]],"start1":9001,"start2":9001,"length1":24,"length2":34}]],"length":17760,"saved":false}
{"ts":1351008732560,"patch":[[{"diffs":[[0,"empIndex]];\n"],[1,"            tempIndex = tempIndex % (index < 8 ? 3 : 2);\n"],[0,"        }\n  "]],"start1":9001,"start2":9001,"length1":24,"length2":81}]],"length":17817,"saved":false}
{"ts":1351008736457,"patch":[[{"diffs":[[0,"ex++)\n        {\n"],[1,"                        tempIndex = tempIndex % (index < 8 ? 3 : 2);\n\n"],[0,"            Rubi"]],"start1":8779,"start2":8779,"length1":32,"length2":102},{"diffs":[[0,"]];\n"],[-1,"            tempIndex = tempIndex % (index < 8 ? 3 : 2);\n"],[0,"    "]],"start1":9079,"start2":9079,"length1":65,"length2":8}]],"length":17830,"saved":false}
{"ts":1351008737648,"patch":[[{"diffs":[[0,")\n        {\n"],[-1,"            "],[0,"            "]],"start1":8783,"start2":8783,"length1":36,"length2":24}]],"length":17818,"saved":false}
{"ts":1351008773091,"patch":[[{"diffs":[[0,"ndex = 0"],[1,", toReturn"],[0,";\n\n    R"]],"start1":8184,"start2":8184,"length1":16,"length2":26},{"diffs":[[0,"'W';"],[-1,"\n"],[0,"    "],[-1,"\n  "],[0,"  \n"],[-1,"    \n    console.log(RubixState.outputFaces);\n    "],[1,"\n"],[0,"for("]],"start1":8428,"start2":8428,"length1":69,"length2":16},{"diffs":[[0,"> 3);\n    }\n"],[1,"    \n    \n"],[0,"        cons"]],"start1":9154,"start2":9154,"length1":24,"length2":34}]],"length":17785,"saved":false}
{"ts":1351008784577,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    var tempIndex = 0, toReturn =\"\";\n    \n"],[0,"    RubixSta"]],"start1":8119,"start2":8119,"length1":24,"length2":66},{"diffs":[[0,"54;\n"],[-1,"    var tempIndex = 0, toReturn;\n\n"],[0,"    "]],"start1":8209,"start2":8209,"length1":42,"length2":8}]],"length":17793,"saved":false}
{"ts":1351008796303,"patch":[[{"diffs":[[0,"3 : 2);\n"],[1,"            "],[0,"\n       "]],"start1":8809,"start2":8809,"length1":16,"length2":28},{"diffs":[[0,"  }\n"],[-1,"            \n        \n       // console.log(RubixState.cubieOutputMapping[index].absolute[tempIndex], state[index] >> 3);\n"],[0,"    "]],"start1":9054,"start2":9054,"length1":130,"length2":8}]],"length":17683,"saved":false}
{"ts":1351008813901,"patch":[[{"diffs":[[0," }\n    \n    "],[1,"for(index in RubixState.outputFaces)\n    {\n        \n    }"],[0,"\n        con"]],"start1":9061,"start2":9061,"length1":24,"length2":81}]],"length":17740,"saved":false}
{"ts":1351008839566,"patch":[[{"diffs":[[0,")\n    {\n        "],[1,"toReturn +=RubixState.outputFaces[index]"],[0,"\n    }\n        c"]],"start1":9108,"start2":9108,"length1":32,"length2":72}]],"length":17780,"saved":false}
{"ts":1351008841384,"patch":[[{"diffs":[[0,"s[index]"],[1,";"],[0,"\n    }\n "]],"start1":9156,"start2":9156,"length1":16,"length2":17}]],"length":17781,"saved":false}
{"ts":1351008888568,"patch":[[{"diffs":[[0,"index];\n"],[1,"        if(index === 2 || index === 5 || index === 8 ||\n            index === 2 || index === 5 || index === 8 ||\n"],[0,"    }\n  "]],"start1":9158,"start2":9158,"length1":16,"length2":129}]],"length":17894,"saved":false}
{"ts":1351008903042,"patch":[[{"diffs":[[0,"      index === "],[-1,"2"],[1,"17"],[0," || index === 5 "]],"start1":9228,"start2":9228,"length1":33,"length2":34},{"diffs":[[0,"17 || index === "],[-1,"5"],[1,"26"],[0," || index === 8 "]],"start1":9244,"start2":9244,"length1":33,"length2":34},{"diffs":[[0,"26 || index === "],[-1,"8"],[1,"35"],[0," ||\n    }\n      "]],"start1":9260,"start2":9260,"length1":33,"length2":34}]],"length":17897,"saved":false}
{"ts":1351008957759,"patch":[[{"diffs":[[0,"x === 35 ||\n"],[1,"            index === 38 || index === 41 || index === 44 ||\n            index === 47 || index === 50 || index === 53)\n        {\n            toReturn +=\"\\n\";    \n        }\n"],[0,"    }\n      "]],"start1":9270,"start2":9270,"length1":24,"length2":195}]],"length":18068,"saved":false}
{"ts":1351008966670,"patch":[[{"diffs":[[0,"Faces);\n"],[1,"    return toReturn;"],[0,"\n};\n\nRub"]],"start1":9496,"start2":9496,"length1":16,"length2":36}]],"length":18088,"saved":false}
{"ts":1351008976424,"patch":[[{"diffs":[[0,"index];\n"],[1,"        \n"],[0,"        "]],"start1":9158,"start2":9158,"length1":16,"length2":25}]],"length":18097,"saved":false}
{"ts":1351008993837,"patch":[[{"diffs":[[0,"r(index "],[-1,"in"],[1,"= 0; index <"],[0," RubixSt"]],"start1":9075,"start2":9075,"length1":18,"length2":28},{"diffs":[[0,".outputFaces"],[1,".length; index++"],[0,")\n    {\n    "]],"start1":9106,"start2":9106,"length1":24,"length2":40}]],"length":18123,"saved":false}
{"ts":1351009020486,"patch":[[{"diffs":[[0,"    "],[-1," index === 17 || index === 26 || index === 35 ||"],[0,"\n   "]],"start1":9264,"start2":9264,"length1":56,"length2":8}]],"length":18075,"saved":false}
{"ts":1351009024979,"patch":[[{"diffs":[[0,"rn +=\"\\n"],[1,"   "],[0,"\";    \n "]],"start1":9415,"start2":9415,"length1":16,"length2":19}]],"length":18078,"saved":false}
{"ts":1351009031897,"patch":[[{"diffs":[[0,";    \n        }\n"],[1,"        else if( index === 17 || index === 26 || index === 35 )\n"],[0,"    }\n        co"]],"start1":9427,"start2":9427,"length1":32,"length2":96}]],"length":18142,"saved":false}
{"ts":1351009033158,"patch":[[{"diffs":[[0,"== 35 )\n"],[1,"        {\n            \n        }\n"],[0,"    }\n  "]],"start1":9499,"start2":9499,"length1":16,"length2":49}]],"length":18175,"saved":false}
{"ts":1351009044663,"patch":[[{"diffs":[[0,"  {\n            "],[1,"toReturn +='\\n'   "],[0,"\n        }\n    }"]],"start1":9513,"start2":9513,"length1":32,"length2":50}]],"length":18193,"saved":false}
{"ts":1351009045957,"patch":[[{"diffs":[[0,"n +='\\n'"],[1,";"],[0,"   \n    "]],"start1":9536,"start2":9536,"length1":16,"length2":17}]],"length":18194,"saved":false}
{"ts":1351009069423,"patch":[[{"diffs":[[0,"eturn =\""],[1,"   "],[0,"\";\n    \n"]],"start1":8157,"start2":8157,"length1":16,"length2":19}]],"length":18197,"saved":false}
{"ts":1351009083084,"patch":[[{"diffs":[[0,"8 ||\n           "],[1," index === 17 || index === 26 || index === 35|| "],[0,"\n            ind"]],"start1":9255,"start2":9255,"length1":32,"length2":80},{"diffs":[[0,"if( "],[-1,"index === 17 || index === 26 || index === 35"],[0," )\n "]],"start1":9507,"start2":9507,"length1":52,"length2":8}]],"length":18201,"saved":false}
{"ts":1351009088131,"patch":[[{"diffs":[[0,"        }\n      "],[1,"/*"],[0,"  else if(  )\n  "]],"start1":9484,"start2":9484,"length1":32,"length2":34},{"diffs":[[0,"n';   \n        }"],[1,"*/"],[0,"\n    }\n        c"]],"start1":9551,"start2":9551,"length1":32,"length2":34}]],"length":18205,"saved":false}
{"ts":1351009119406,"patch":[[{"diffs":[[0," || "],[-1,"index === 8 ||\n            index === 17 || index === 26 ||"],[0," ind"]],"start1":9241,"start2":9241,"length1":66,"length2":8},{"diffs":[[0,"else if("],[1,"index === 8 ||\n            index === 17 || index === 26 "],[0,"  )\n    "]],"start1":9446,"start2":9446,"length1":16,"length2":72}]],"length":18203,"saved":false}
{"ts":1351009135342,"patch":[[{"diffs":[[0,"}\n      "],[-1,"/*"],[0,"  else i"]],"start1":9434,"start2":9434,"length1":18,"length2":16},{"diffs":[[0,"       }"],[-1,"*/"],[0,"\n    }\n "]],"start1":9555,"start2":9555,"length1":18,"length2":16}]],"length":18199,"saved":false}
{"ts":1351009179550,"patch":[[{"diffs":[[0,"  }\n"],[-1,"        console.log(RubixState.outputFaces);\n"],[0,"    "]],"start1":9566,"start2":9566,"length1":53,"length2":8}]],"length":18154,"saved":false}
{"ts":1351009236447,"patch":[[{"diffs":[[0,"ex++)\n        {\n"],[1,"            console.log(index,RubixState.cubieOutputMapping[index].faces.indexOf(state[index] & 7),state[index] & 7); \n"],[0,"            temp"]],"start1":8747,"start2":8747,"length1":32,"length2":151}]],"length":18273,"saved":false}
{"ts":1351009239983,"patch":[[{"diffs":[[0,"  }\n"],[-1,"        \n        for(tempIndex; tempIndex < (index < 8 ? 3 : 2);tempIndex++)\n        {\n"],[0,"    "]],"start1":8672,"start2":8672,"length1":95,"length2":8},{"diffs":[[0," & 7); \n"],[1,"        \n        for(tempIndex; tempIndex < (index < 8 ? 3 : 2);tempIndex++)\n        {\n"],[0,"        "]],"start1":8787,"start2":8787,"length1":16,"length2":103}]],"length":18273,"saved":false}
{"ts":1351009281963,"patch":[[{"diffs":[[0,"g(index,"],[1," "],[0,"RubixSta"]],"start1":8698,"start2":8698,"length1":16,"length2":17},{"diffs":[[0,"ex]."],[-1,"faces.indexOf(state[index] & 7)"],[1,"absolute[tempIndex]"],[0,",sta"]],"start1":8740,"start2":8740,"length1":39,"length2":27}]],"length":18262,"saved":false}
{"ts":1351009323599,"patch":[[{"diffs":[[0,"  }\n"],[-1,"            console.log(index, RubixState.cubieOutputMapping[index].absolute[tempIndex],state[index] & 7); \n"],[0,"    "]],"start1":8672,"start2":8672,"length1":116,"length2":8},{"diffs":[[0,"2);\n            "],[1,"            console.log(index, RubixState.cubieOutputMapping[index].absolute[tempIndex]); \n"],[0,"\n            Rub"]],"start1":8816,"start2":8816,"length1":32,"length2":123}]],"length":18245,"saved":false}
{"ts":1351009361727,"patch":[[{"diffs":[[0,"mpIndex]"],[1,", RubixState.faceValues[RubixState.cubieOutputMapping[index].faces[tempIndex]"],[0,"); \n\n   "]],"start1":8911,"start2":8911,"length1":16,"length2":93}]],"length":18322,"saved":false}
{"ts":1351009378316,"patch":[[{"diffs":[[0,"mpIndex]"],[1,"]"],[0,"); \n\n   "]],"start1":8988,"start2":8988,"length1":16,"length2":17}]],"length":18323,"saved":false}
{"ts":1351009412090,"patch":[[{"diffs":[[0," \"faces\":[0,"],[-1,"1,5"],[1,"3,2"],[0,"]},\n   4:{\"a"]],"start1":7340,"start2":7340,"length1":27,"length2":27}]],"length":18323,"saved":false}
{"ts":1351009443071,"patch":[[{"diffs":[[0," \"faces\":[4,"],[-1,"1"],[1,"2"],[0,"]},\n  18:{\"a"]],"start1":7980,"start2":7980,"length1":25,"length2":25},{"diffs":[[0," \"faces\":[4,"],[-1,"1"],[1,"3"],[0,"]},\n  19:{\"a"]],"start1":8025,"start2":8025,"length1":25,"length2":25},{"diffs":[[0,"ces\":[4,"],[-1,"1"],[1,"5"],[0,"]}\n};\n\n\n"]],"start1":8074,"start2":8074,"length1":17,"length2":17}]],"length":18323,"saved":false}
{"ts":1351009452559,"patch":[[{"diffs":[[0," 2);"],[-1,"\n                        console.log(index, RubixState.cubieOutputMapping[index].absolute[tempIndex], RubixState.faceValues[RubixState.cubieOutputMapping[index].faces[tempIndex]]); "],[0,"\n\n  "]],"start1":8815,"start2":8815,"length1":189,"length2":8}]],"length":18142,"saved":false}
{"ts":1351009623363,"patch":[[{"diffs":[[0,"      \n\n"],[1,"    conosole.log(RubixState.cubies.indexOf(\"RGW\"));\n    "],[0,"for(var "]],"start1":8443,"start2":8443,"length1":16,"length2":72}]],"length":18198,"saved":false}
{"ts":1351009630857,"patch":[[{"diffs":[[0,"\n    con"],[-1,"o"],[0,"sole.log"]],"start1":8450,"start2":8450,"length1":17,"length2":16}]],"length":18197,"saved":false}
{"ts":1351009762645,"patch":[[{"diffs":[[0,"  \n\n"],[-1,"    console.log(RubixState.cubies.indexOf(\"RGW\"));\n"],[0,"    "]],"start1":8447,"start2":8447,"length1":59,"length2":8},{"diffs":[[0,"s = {\n  "],[1,"  \"indicies\":["],[0,"\"RGW\":{\""]],"start1":17041,"start2":17041,"length1":16,"length2":30},{"diffs":[[0,":2}},\n  "],[1," "],[1," "],[0,"\"RWB\":{\""]],"start1":17114,"start2":17114,"length1":16,"length2":18},{"diffs":[[0,":2}},\n  "],[1," "],[1," "],[0,"\"RYG\":{\""]],"start1":17175,"start2":17175,"length1":16,"length2":18},{"diffs":[[0,":2}},\n  "],[1," "],[1," "],[0,"\"RBY\":{\""]],"start1":17236,"start2":17236,"length1":16,"length2":18},{"diffs":[[0,"1, \"Y\":2}},\n"],[1,"  "],[0,"  \"OWG\":{\"va"]],"start1":17291,"start2":17291,"length1":24,"length2":26},{"diffs":[[0,"1, \"G\":2}},\n"],[1,"  "],[0,"  \"OGY\":{\"va"]],"start1":17352,"start2":17352,"length1":24,"length2":26},{"diffs":[[0,"1, \"Y\":2}},\n"],[1,"  "],[0,"  \"OYB\":{\"va"]],"start1":17413,"start2":17413,"length1":24,"length2":26},{"diffs":[[0,":2}},\n  "],[1," "],[1," "],[0,"\"OBW\":{\""]],"start1":17480,"start2":17480,"length1":16,"length2":18},{"diffs":[[0,":2}},\n  "],[1," "],[1," "],[0,"\"RW\" :{\""]],"start1":17541,"start2":17541,"length1":16,"length2":18},{"diffs":[[0,"0, \"W\":1}},\n"],[1,"  "],[0,"  \"RG\" :{\"va"]],"start1":17589,"start2":17589,"length1":24,"length2":26},{"diffs":[[0,"0, \"G\":1}},\n"],[1,"  "],[0,"  \"RB\" :{\"va"]],"start1":17643,"start2":17643,"length1":24,"length2":26},{"diffs":[[0,"B\":1}},\n"],[1,"  "],[0,"  \"RY\" :"]],"start1":17701,"start2":17701,"length1":16,"length2":18},{"diffs":[[0,"Y\":1}},\n"],[1,"  "],[0,"  \"WG\" :"]],"start1":17755,"start2":17755,"length1":16,"length2":18},{"diffs":[[0,"G\":1}},\n"],[1,"  "],[0,"  \"GY\" :"]],"start1":17809,"start2":17809,"length1":16,"length2":18},{"diffs":[[0,":1}},\n  "],[1," "],[1," "],[0,"\"YB\" :{\""]],"start1":17865,"start2":17865,"length1":16,"length2":18},{"diffs":[[0,":1}},\n  "],[1," "],[1," "],[0,"\"BW\" :{\""]],"start1":17919,"start2":17919,"length1":16,"length2":18},{"diffs":[[0,"0, \"W\":1}},\n"],[1,"  "],[0,"  \"OG\" :{\"va"]],"start1":17967,"start2":17967,"length1":24,"length2":26},{"diffs":[[0,"0, \"G\":1}},\n"],[1,"  "],[0,"  \"OY\" :{\"va"]],"start1":18021,"start2":18021,"length1":24,"length2":26},{"diffs":[[0,"0, \"Y\":1}},\n"],[1,"  "],[0,"  \"OB\" :{\"va"]],"start1":18075,"start2":18075,"length1":24,"length2":26},{"diffs":[[0,"B\":1}},\n"],[1,"    \"OW\" :{\"value\":19,\"orientValues\":{\"O\":0, \"W\":1}}  ],\n    \"RGW\":{\"value\":0 ,\"orientValues\":{\"R\":0, \"G\":1, \"W\":2}},\n    \"RWB\":{\"value\":1 ,\"orientValues\":{\"R\":0, \"W\":1, \"B\":2}},\n    \"RYG\":{\"value\":2 ,\"orientValues\":{\"R\":0, \"Y\":1, \"G\":2}},\n    \"RBY\":{\"value\":3 ,\"orientValues\":{\"R\":0, \"B\":1, \"Y\":2}},\n    \"OWG\":{\"value\":4 ,\"orientValues\":{\"O\":0, \"W\":1, \"G\":2}},\n    \"OGY\":{\"value\":5 ,\"orientValues\":{\"O\":0, \"G\":1, \"Y\":2}},\n    \"OYB\":{\"value\":6 ,\"orientValues\":{\"O\":0, \"Y\":1, \"B\":2}},\n    \"OBW\":{\"value\":7 ,\"orientValues\":{\"O\":0, \"B\":1, \"W\":2}},\n    \"RW\" :{\"value\":8 ,\"orientValues\":{\"R\":0, \"W\":1}},\n    \"RG\" :{\"value\":9 ,\"orientValues\":{\"R\":0, \"G\":1}},\n    \"RB\" :{\"value\":10,\"orientValues\":{\"R\":0, \"B\":1}},\n    \"RY\" :{\"value\":11,\"orientValues\":{\"R\":0, \"Y\":1}},\n    \"WG\" :{\"value\":12,\"orientValues\":{\"W\":0, \"G\":1}},\n    \"GY\" :{\"value\":13,\"orientValues\":{\"G\":0, \"Y\":1}},\n    \"YB\" :{\"value\":14,\"orientValues\":{\"Y\":0, \"B\":1}},\n    \"BW\" :{\"value\":15,\"orientValues\":{\"B\":0, \"W\":1}},\n    \"OG\" :{\"value\":16,\"orientValues\":{\"O\":0, \"G\":1}},\n    \"OY\" :{\"value\":17,\"orientValues\":{\"O\":0, \"Y\":1}},\n    \"OB\" :{\"value\":18,\"orientValues\":{\"O\":0, \"B\":1}},\n  "],[0,"  \"OW\" :"]],"start1":18133,"start2":18133,"length1":16,"length2":1157}]],"length":19337,"saved":false}
{"ts":1351009809572,"patch":[[{"diffs":[[0,"OYB\""],[-1,":{\"value\":6 ,\"orientValues\":{\"O\":0, \"Y\":1, \"B\":2}},\n    \"OBW\":{\"value\":7 ,\"orientValues\":{\"O\":0, \"B\":1, \"W\":2}},\n    \"RW\" :{\"value\":8 ,\"orientValues\":{\"R\":0, \"W\":1}},\n    \"RG\" :{\"value\":9 ,\"orientValues\":{\"R\":0, \"G\":1}},\n    \"RB\" :{\"value\":10,\"orientValues\":{\"R\":0, \"B\":1}},\n    \"RY\" :{\"value\":11,\"orientValues\":{\"R\":0, \"Y\":1}},\n    \"WG\" :{\"value\":12,\"orientValues\":{\"W\":0, \"G\":1}},\n    \"GY\" :{\"value\":13,\"orientValues\":{\"G\":0, \"Y\":1}},\n    \"YB\" :{\"value\":14,\"orientValues\":{\"Y\":0, \"B\":1}},\n    \"BW\" :{\"value\":15,\"orientValues\":{\"B\":0, \"W\":1}},\n    \"OG\" :{\"value\":16,\"orientValues\":{\"O\":0, \"G\":1}},\n    \"OY\" :{\"value\":17,\"orientValues\":{\"O\":0, \"Y\":1}},\n    \"OB\" :{\"value\":18,\"orientValues\":{\"O\":0, \"B\":1}},\n    \"OW\" :{\"value\":19,\"orientValues\":{\"O\":0, \"W\":1}}"],[1,",\n    \"OBW\",\n    \"RW\",\n    \"RG\",\n    \"RB\",\n    \"RY\",\n    \"WG\",\n    \"GY\",\n    \"YB\",\n    \"BW\",\n    \"OG\" ,\n    \"OY\" ,\n    \"OB\" ,\n    \"OW\" "],[0,"  ],"]],"start1":17430,"start2":17430,"length1":767,"length2":143}]],"length":18713,"saved":false}
{"ts":1351009814767,"patch":[[{"diffs":[[0,"RWB\""],[-1,":{\"value\":1 ,\"orientValues\":{\"R\":0, \"W\":1, \"B\":2}}"],[0,",\n  "]],"start1":17125,"start2":17125,"length1":58,"length2":8}]],"length":18663,"saved":false}
{"ts":1351009915351,"patch":[[{"diffs":[[0,";      \n"],[1,"    console.log("],[0,"\n    for"]],"start1":8442,"start2":8442,"length1":16,"length2":32},{"diffs":[[0,"RGW\""],[-1,":{\"value\":0 ,\"orientValues\":{\"R\":0, \"G\":1, \"W\":2}},\n    \"RWB\",\n    \"RYG\":{\"value\":2 ,\"orientValues\":{\"R\":0, \"Y\":1, \"G\":2}},\n    \"RBY\":{\"value\":3 ,\"orientValues\":{\"R\":0, \"B\":1, \"Y\":2}},\n    \"OWG\":{\"value\":4 ,\"orientValues\":{\"O\":0, \"W\":1, \"G\":2}},\n    \"OGY\":{\"value\":5 ,\"orientValues\":{\"O\":0, \"G\":1, \"Y\":2}},\n    \"OYB\",\n    \"OBW\",\n    \"RW\",\n    \"RG\",\n    "],[1,", \"RWB\",\"RYG\",\"RBY\",\"OWG\",\"OGY\",\"OYB\",\"OBW\",\"RW\",\"RG\","],[0,"\"RB\""]],"start1":17080,"start2":17080,"length1":361,"length2":62},{"diffs":[[0,"    "],[1,"  "],[1,"  "],[0,"\"RY\","],[-1,"\n    \"WG\",\n    \"GY\",\n    \"YB\",\n    \"BW\",\n    \"OG\" ,\n    \"OY\" ,\n    \"OB\" ,\n    "],[1,"\"WG\",\"GY\",\"YB\",\"BW\",\"OG\",\"OY\",\"OB\","],[0,"\"OW\""],[-1,"   "],[0,"],\n "]],"start1":17144,"start2":17144,"length1":98,"length2":56}]],"length":18338,"saved":false}
{"ts":1351009955486,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState.cubies.indicies[0]);"],[0,"\n    for"]],"start1":8458,"start2":8458,"length1":16,"length2":47}]],"length":18369,"saved":false}
{"ts":1351009969801,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(RubixState.cubies.indicies[0]);\n"],[0,"    "]],"start1":8446,"start2":8446,"length1":56,"length2":8}]],"length":18321,"saved":false}
{"ts":1351009973120,"patch":[[{"diffs":[[0,"ndex] & 7);\n"],[1,"        \n"],[0,"        if(t"]],"start1":8587,"start2":8587,"length1":24,"length2":33}]],"length":18330,"saved":false}
{"ts":1351009992672,"patch":[[{"diffs":[[0,"    "],[-1,"RubixState.faceValues[RubixState.cubieOutputMapping[index].faces[tempIndex]];"],[1,"console.log(RubixState.cubies.indicies[0]);\n"],[0,"\n   "]],"start1":8969,"start2":8969,"length1":85,"length2":52}]],"length":18297,"saved":false}
{"ts":1351010037661,"patch":[[{"diffs":[[0,"0, \"G\":1, \"W\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"RWB\":{\"v"]],"start1":17200,"start2":17200,"length1":32,"length2":60}]],"length":18325,"saved":false}
{"ts":1351010053090,"patch":[[{"diffs":[[0,"0, \"W\":1, \"B\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"RYG\":{\"v"]],"start1":17289,"start2":17289,"length1":32,"length2":60},{"diffs":[[0,"0, \"Y\":1, \"G\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"RBY\":{\"v"]],"start1":17378,"start2":17378,"length1":32,"length2":60},{"diffs":[[0,"0, \"B\":1, \"Y\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"OWG\":{\"v"]],"start1":17467,"start2":17467,"length1":32,"length2":60},{"diffs":[[0,"W\":1, \"G\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"OGY\""]],"start1":17560,"start2":17560,"length1":24,"length2":52},{"diffs":[[0,"G\":1, \"Y\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"OYB\""]],"start1":17649,"start2":17649,"length1":24,"length2":52},{"diffs":[[0,"Y\":1, \"B\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"OBW\""]],"start1":17738,"start2":17738,"length1":24,"length2":52},{"diffs":[[0,", \"W\":2}"],[1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \""]],"start1":17831,"start2":17831,"length1":16,"length2":44}]],"length":18521,"saved":false}
{"ts":1351010090192,"patch":[[{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"G\",\"W"],[1,"W\",\"B"],[0,"\"]},\n    \"RYG\":{"]],"start1":17310,"start2":17310,"length1":37,"length2":37},{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"G\",\"W"],[1,"Y\",\"G"],[0,"\"]},\n    \"RBY\":{"]],"start1":17399,"start2":17399,"length1":37,"length2":37},{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"G\",\"W"],[1,"B\",\"Y"],[0,"\"]},\n    \"OWG\":{"]],"start1":17488,"start2":17488,"length1":37,"length2":37},{"diffs":[[0,"intOrder\":[\""],[-1,"R\",\"G\",\"W"],[1,"O\",\"W\",\"G"],[0,"\"]},\n    \"OG"]],"start1":17577,"start2":17577,"length1":33,"length2":33},{"diffs":[[0,"intOrder\":[\""],[-1,"R"],[1,"O"],[0,"\",\"G\",\""],[-1,"W"],[1,"Y"],[0,"\"]},\n    \"OY"]],"start1":17666,"start2":17666,"length1":33,"length2":33},{"diffs":[[0,"intOrder\":[\""],[-1,"R\",\"G\",\"W"],[1,"O\",\"Y\",\"B"],[0,"\"]},\n    \"OB"]],"start1":17755,"start2":17755,"length1":33,"length2":33},{"diffs":[[0," \"printOrder\":[\""],[-1,"R\",\"G"],[1,"O\",\"B"],[0,"\",\"W\"]},\n    \"RW"]],"start1":17840,"start2":17840,"length1":37,"length2":37}]],"length":18521,"saved":false}
{"ts":1351010098890,"patch":[[{"diffs":[[0,"\":{\"R\":0, \"W\":1}"],[1,"       , \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n    \"RG\" :{\"v"]],"start1":17905,"start2":17905,"length1":32,"length2":67}]],"length":18556,"saved":false}
{"ts":1351010103552,"patch":[[{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"G\",\""],[0,"W\"]},\n    \"RG\" :"]],"start1":17933,"start2":17933,"length1":36,"length2":32}]],"length":18552,"saved":false}
{"ts":1351010115627,"patch":[[{"diffs":[[0,", \"W\":1}"],[-1,"       "],[0,", \"print"]],"start1":17913,"start2":17913,"length1":23,"length2":16}]],"length":18545,"saved":false}
{"ts":1351010118076,"patch":[[{"diffs":[[0," \"W\":1},"],[1,"       "],[0," \"printO"]],"start1":17914,"start2":17914,"length1":16,"length2":23}]],"length":18552,"saved":false}
{"ts":1351010135370,"patch":[[{"diffs":[[0,"\":{\"R\":0, \"G\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"RB\" :{\"v"]],"start1":17990,"start2":17990,"length1":32,"length2":63},{"diffs":[[0,"\":{\"R\":0, \"B\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"RY\" :{\"v"]],"start1":18075,"start2":18075,"length1":32,"length2":63},{"diffs":[[0,"\":{\"R\":0, \"Y\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"WG\" :{\"v"]],"start1":18160,"start2":18160,"length1":32,"length2":63},{"diffs":[[0,"\":{\"W\":0, \"G\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"GY\" :{\"v"]],"start1":18245,"start2":18245,"length1":32,"length2":63},{"diffs":[[0,"\":{\"G\":0, \"Y\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"YB\" :{\"v"]],"start1":18330,"start2":18330,"length1":32,"length2":63},{"diffs":[[0,"\":{\"Y\":0, \"B\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"BW\" :{\"v"]],"start1":18415,"start2":18415,"length1":32,"length2":63},{"diffs":[[0,"B\":0, \"W\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"OG\" "]],"start1":18504,"start2":18504,"length1":24,"length2":55},{"diffs":[[0,"O\":0, \"G\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"OY\" "]],"start1":18589,"start2":18589,"length1":24,"length2":55},{"diffs":[[0,"O\":0, \"Y\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \"OB\" "]],"start1":18674,"start2":18674,"length1":24,"length2":55},{"diffs":[[0,", \"B\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n    \""]],"start1":18763,"start2":18763,"length1":16,"length2":47},{"diffs":[[0,", \"W\":1}"],[1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"}  \n};"]],"start1":18848,"start2":18848,"length1":14,"length2":45}]],"length":18893,"saved":false}
{"ts":1351010157086,"patch":[[{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"W"],[1,"G"],[0,"\"]},\n    \"RB\" :{"]],"start1":18018,"start2":18018,"length1":33,"length2":33},{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"W"],[1,"B"],[0,"\"]},\n    \"RY\" :{"]],"start1":18103,"start2":18103,"length1":33,"length2":33},{"diffs":[[0,"intOrder\":[\"R\",\""],[-1,"W"],[1,"Y"],[0,"\"]},\n    \"WG\" :{"]],"start1":18188,"start2":18188,"length1":33,"length2":33},{"diffs":[[0," \"printOrder\":[\""],[-1,"R\",\"W"],[1,"W\",\"G"],[0,"\"]},\n    \"GY\" :{"]],"start1":18269,"start2":18269,"length1":37,"length2":37},{"diffs":[[0," \"printOrder\":[\""],[-1,"R\",\"W"],[1,"G\",\"Y"],[0,"\"]},\n    \"YB\" :{"]],"start1":18354,"start2":18354,"length1":37,"length2":37},{"diffs":[[0," \"printOrder\":[\""],[-1,"R"],[1,"B"],[0,"\",\"W\"]},\n    \"BW"]],"start1":18439,"start2":18439,"length1":33,"length2":33}]],"length":18893,"saved":false}
{"ts":1351010176495,"patch":[[{"diffs":[[0,"rder\":[\""],[-1,"B\",\"W"],[1,"Y\",\"B"],[0,"\"]},\n   "]],"start1":18447,"start2":18447,"length1":21,"length2":21},{"diffs":[[0," \"printOrder\":[\""],[-1,"R"],[1,"B"],[0,"\",\"W\"]},\n    \"OG"]],"start1":18524,"start2":18524,"length1":33,"length2":33},{"diffs":[[0," \"printOrder\":[\""],[-1,"R\",\"W"],[1,"O\",\"G"],[0,"\"]},\n    \"OY\" :{"]],"start1":18609,"start2":18609,"length1":37,"length2":37},{"diffs":[[0," \"printOrder\":[\""],[-1,"R\",\"W"],[1,"O\",\"Y"],[0,"\"]},\n    \"OB\" :{"]],"start1":18694,"start2":18694,"length1":37,"length2":37},{"diffs":[[0," \"printOrder\":[\""],[-1,"R\",\"W"],[1,"O\",\"B"],[0,"\"]},\n    \"OW\" :{"]],"start1":18779,"start2":18779,"length1":37,"length2":37},{"diffs":[[0,"intOrder\":[\""],[-1,"R"],[1,"O"],[0,"\",\"W\"]}  \n};"]],"start1":18868,"start2":18868,"length1":25,"length2":25}]],"length":18893,"saved":false}
{"ts":1351010251482,"patch":[[{"diffs":[[0,"dex]] =\n"],[1,"                        RubixState.cubies.indicies[index];\n"],[0,"        "]],"start1":8941,"start2":8941,"length1":16,"length2":75}]],"length":18952,"saved":false}
{"ts":1351010264346,"patch":[[{"diffs":[[0,"ndicies["],[-1,"0"],[1,"index"],[0,"]);\n\n   "]],"start1":9063,"start2":9063,"length1":17,"length2":21}]],"length":18956,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351010274762,"patch":[[{"diffs":[[0,"0;\n    }"],[1,"\n    "],[0,"catch(er"]],"start1":5917,"start2":5917,"length1":16,"length2":21},{"diffs":[[0," 'W';      \n"],[1,"\n"],[0,"    for(var "]],"start1":8443,"start2":8443,"length1":24,"length2":25},{"diffs":[[0,"] & 7);\n"],[-1,"        \n"],[0,"        "]],"start1":8597,"start2":8597,"length1":25,"length2":16},{"diffs":[[0,"ate."],[-1,"cubies.indicies[index];\n                        console.log(RubixState.cubies.indicies[i"],[1,"faceValues[RubixState.cubieOutputMapping[index].faces[tempI"],[0,"ndex]"],[-1,")"],[1,"]"],[0,";\n"],[-1,"\n"],[0,"    "]],"start1":8977,"start2":8977,"length1":105,"length2":75},{"diffs":[[0,"Return;\n};\n\n"],[1,""],[0,"RubixState.p"]],"start1":9580,"start2":9580,"length1":24,"length2":24},{"diffs":[[0,"function"],[-1," "],[0,"(faces, "]],"start1":9618,"start2":9618,"length1":17,"length2":16},{"diffs":[[0,"indows ="],[1," "],[0,"{\n"],[-1,""],[0,"  8:0,\n "]],"start1":16889,"start2":16889,"length1":18,"length2":19},{"diffs":[[0,"RB\","],[-1,"\n        \"RY\",\"WG\",\"GY\",\"YB\",\"BW\",\"OG\",\"OY\",\"OB\","],[1,"\"RY\",\n    \"WG\",\n    \"GY\",\n    \"YB\",\n    \"BW\",\n    \"OG\" ,\n    \"OY\" ,\n    \"OB\" ,\n    "],[0,"\"OW\""],[1,"   "],[0,"],\n "]],"start1":17128,"start2":17128,"length1":61,"length2":98},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"R\",\"G\",\"W\"]"],[0,"},\n "]],"start1":17279,"start2":17279,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"R\",\"W\",\"B\"]"],[0,"},\n "]],"start1":17340,"start2":17340,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"R\",\"Y\",\"G\"]"],[0,"},\n "]],"start1":17401,"start2":17401,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"R\",\"B\",\"Y\"]"],[0,"},\n "]],"start1":17462,"start2":17462,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"O\",\"W\",\"G\"]"],[0,"},\n "]],"start1":17523,"start2":17523,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"O\",\"G\",\"Y\"]"],[0,"},\n "]],"start1":17584,"start2":17584,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"O\",\"Y\",\"B\"]"],[0,"},\n "]],"start1":17645,"start2":17645,"length1":36,"length2":8},{"diffs":[[0,"\":2}"],[-1,", \"printOrder\":[\"O\",\"B\",\"W\"]"],[0,"},\n "]],"start1":17706,"start2":17706,"length1":36,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"R\",\"W\"]"],[0,"},\n "]],"start1":17760,"start2":17760,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"R\",\"G\"]"],[0,"},\n "]],"start1":17814,"start2":17814,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"R\",\"B\"]"],[0,"},\n "]],"start1":17868,"start2":17868,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"R\",\"Y\"]"],[0,"},\n "]],"start1":17922,"start2":17922,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"W\",\"G\"]"],[0,"},\n "]],"start1":17976,"start2":17976,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"G\",\"Y\"]"],[0,"},\n "]],"start1":18030,"start2":18030,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"Y\",\"B\"]"],[0,"},\n "]],"start1":18084,"start2":18084,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"B\",\"W\"]"],[0,"},\n "]],"start1":18138,"start2":18138,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"O\",\"G\"]"],[0,"},\n "]],"start1":18192,"start2":18192,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"O\",\"Y\"]"],[0,"},\n "]],"start1":18246,"start2":18246,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"O\",\"B\"]"],[0,"},\n "]],"start1":18300,"start2":18300,"length1":39,"length2":8},{"diffs":[[0,"\":1}"],[-1,",        \"printOrder\":[\"O\",\"W\"]"],[0,"}  \n"]],"start1":18354,"start2":18354,"length1":39,"length2":8}]],"length":18364,"saved":false}
{"ts":1351010298526,"patch":[[{"diffs":[[0,"n =\"   \""],[1,", focusedCubie=\"\",offset "],[0,";\n    \n "]],"start1":8161,"start2":8161,"length1":16,"length2":41}]],"length":18981,"saved":false}
{"ts":1351010301287,"patch":[[{"diffs":[[0,"\",offset"],[-1," "],[0,";\n    \n "]],"start1":8185,"start2":8185,"length1":17,"length2":16}]],"length":18980,"saved":false}
{"ts":1351010306256,"patch":[[{"diffs":[[0,"ex++)\n        {\n"],[1,"            \n"],[0,"            temp"]],"start1":8783,"start2":8783,"length1":32,"length2":45}]],"length":18993,"saved":false}
{"ts":1351010314243,"patch":[[{"diffs":[[0,"empIndex"],[1,", offset = 0"],[0,"; tempIn"]],"start1":8734,"start2":8734,"length1":16,"length2":28}]],"length":19005,"saved":false}
{"ts":1351010328718,"patch":[[{"diffs":[[0,"\",offset"],[1," = 0"],[0,";\n    \n "]],"start1":8185,"start2":8185,"length1":16,"length2":20}]],"length":19009,"saved":false}
{"ts":1351010335835,"patch":[[{"diffs":[[0,";tempIndex++"],[1,",offset++"],[0,")\n        {\n"]],"start1":8791,"start2":8791,"length1":24,"length2":33}]],"length":19018,"saved":false}
{"ts":1351010350563,"patch":[[{"diffs":[[0,"      }\n        "],[1,"focusedCubie = "],[0,"\n        for(tem"]],"start1":8708,"start2":8708,"length1":32,"length2":47}]],"length":19033,"saved":false}
{"ts":1351010355812,"patch":[[{"diffs":[[0,"Cubie = "],[1,"RubixState.cubies.indicies[index];"],[0,"\n       "]],"start1":8731,"start2":8731,"length1":16,"length2":50},{"diffs":[[0,"    "],[-1,"RubixState.cubies.indicies[index]"],[0,";\n  "]],"start1":9080,"start2":9080,"length1":41,"length2":8}]],"length":19034,"saved":false}
{"ts":1351010388801,"patch":[[{"diffs":[[0,"        "],[1,"RubixState.cubies[focusedCubie].printOrder[offset]"],[0,";\n      "]],"start1":9076,"start2":9076,"length1":16,"length2":66}]],"length":19084,"saved":false}
{"ts":1351010409218,"patch":[[{"diffs":[[0,"et];"],[-1,"\n                        console.log(RubixState.cubies.indicies[index]);"],[0,"\n\n  "]],"start1":9131,"start2":9131,"length1":80,"length2":8}]],"length":19012,"saved":false}
{"ts":1351010450210,"patch":[[{"diffs":[[0,"ndicies[index];\n"],[1,"        \n"],[0,"        for(temp"]],"start1":8758,"start2":8758,"length1":32,"length2":41}]],"length":19021,"saved":false}
{"ts":1351010462410,"patch":[[{"diffs":[[0,"offset];"],[1,"\n                        \n            console.log(RubixState.cubies[focusedCubie].printOrder[offset]);"],[0,"\n\n      "]],"start1":9136,"start2":9136,"length1":16,"length2":118}]],"length":19123,"saved":false}
{"ts":1351010504567,"patch":[[{"diffs":[[0,"t];\n"],[-1,"                        \n            console.log(RubixState.cubies[focusedCubie].printOrder[offset]);\n\n"],[0,"    "]],"start1":9141,"start2":9141,"length1":111,"length2":8}]],"length":19020,"saved":false}
{"ts":1351010557707,"patch":[[{"diffs":[[0," 'W';      \n"],[1,"    \n"],[0,"    for(var "]],"start1":8466,"start2":8466,"length1":24,"length2":29}]],"length":19025,"saved":false}
{"ts":1351010593982,"patch":[[{"diffs":[[0,"ndicies["],[-1,"index"],[1,"state[index] >> 3"],[0,"];\n     "]],"start1":8763,"start2":8763,"length1":21,"length2":33}]],"length":19037,"saved":false}
{"ts":1351010670865,"patch":[[{"diffs":[[0," >> 3];\n"],[1,"        console.log(index, focusedCubie);\n"],[0,"        "]],"start1":8783,"start2":8783,"length1":16,"length2":58}]],"length":19079,"saved":false}
{"ts":1351011166507,"patch":[[{"diffs":[[0,"8],3]]);"],[1,"\n        console.log(RubixState.cubies.indicies[state[index] >> 3]);"],[0,"\n\n      "]],"start1":4240,"start2":4240,"length1":16,"length2":84}]],"length":19147,"saved":false}
{"ts":1351011170829,"patch":[[{"diffs":[[0,"icies[state["],[-1,"index"],[1,"1"],[0,"] >> 3]);\n\n "]],"start1":4290,"start2":4290,"length1":29,"length2":25}]],"length":19143,"saved":false}
{"ts":1351011231329,"patch":[[{"diffs":[[0,"1] >> 3]"],[1,",faces[0][2],faces[5][8],faces[3][2]"],[0,");\n\n    "]],"start1":4302,"start2":4302,"length1":16,"length2":52}]],"length":19179,"saved":false}
{"ts":1351011253915,"patch":[[{"diffs":[[0,"ces[1][0],1]]);\n"],[1,"        \n"],[0,"        state[1]"]],"start1":3561,"start2":3561,"length1":32,"length2":41},{"diffs":[[0,"ces[3][2],3]]);\n"],[1,"        \n"],[0,"        state[2]"]],"start1":3666,"start2":3666,"length1":32,"length2":41}]],"length":19197,"saved":false}
{"ts":1351011335097,"patch":[[{"diffs":[[0,"es[3][2]"],[1,", faces"],[0,");\n\n    "]],"start1":4356,"start2":4356,"length1":16,"length2":23}]],"length":19204,"saved":false}
{"ts":1351012043883,"patch":[[{"diffs":[[0,"3 : 2);\n"],[1,"    console.log(index, offset, RubixState.cubies[focusedCubie].printOrder[offset], focusedCubie);"],[0,"\n       "]],"start1":9128,"start2":9128,"length1":16,"length2":113}]],"length":19301,"saved":false}
{"ts":1351012048034,"patch":[[{"diffs":[[0,"3];\n"],[-1,"        console.log(index, focusedCubie);\n"],[0,"    "]],"start1":8912,"start2":8912,"length1":50,"length2":8}]],"length":19259,"saved":false}
{"ts":1351012095979,"patch":[[{"diffs":[[0,"offset ="],[1," 0, limit ="],[0," 0;\n    "]],"start1":8312,"start2":8312,"length1":16,"length2":27},{"diffs":[[0,"Index < "],[-1,"(index < 8 ? 3 : 2)"],[0,";tempInd"]],"start1":8975,"start2":8975,"length1":35,"length2":16}]],"length":19251,"saved":false}
{"ts":1351012100900,"patch":[[{"diffs":[[0," >> 3];\n        "],[1,"limit =(index < 8 ? 3 : 2);"],[0,"\n        for(tem"]],"start1":8919,"start2":8919,"length1":32,"length2":59}]],"length":19278,"saved":false}
{"ts":1351012106482,"patch":[[{"diffs":[[0,"Index < "],[1,"limit"],[0,";tempInd"]],"start1":9002,"start2":9002,"length1":16,"length2":21}]],"length":19283,"saved":false}
{"ts":1351012111957,"patch":[[{"diffs":[[0,"Index % "],[-1,"(index < 8 ? 3 : 2)"],[1,"limit"],[0,";\n    co"]],"start1":9089,"start2":9089,"length1":35,"length2":21}]],"length":19269,"saved":false}
{"ts":1351012116401,"patch":[[{"diffs":[[0," limit ="],[-1,"("],[1," "],[0,"index < "]],"start1":8934,"start2":8934,"length1":17,"length2":17},{"diffs":[[0," ? 3 : 2"],[-1,")"],[1," "],[0,";\n      "]],"start1":8952,"start2":8952,"length1":17,"length2":17}]],"length":19269,"saved":false}
{"ts":1351012171691,"patch":[[{"diffs":[[0,"ate\";\n        }\n"],[1,"        \n"],[0,"        focusedC"]],"start1":8841,"start2":8841,"length1":32,"length2":41},{"diffs":[[0," : 2"],[-1," "],[0,";"],[1,"\n        "],[0,"\n   "]],"start1":8965,"start2":8965,"length1":10,"length2":18},{"diffs":[[0," limit;\n"],[1,"         "],[0,"    cons"]],"start1":9113,"start2":9113,"length1":16,"length2":25},{"diffs":[[0,"usedCubie);\n"],[1," "],[0,"            "]],"start1":9216,"start2":9216,"length1":24,"length2":25}]],"length":19296,"saved":false}
{"ts":1351012180483,"patch":[[{"diffs":[[0,"et = 0; "],[-1,"tempIndex"],[1,"offset"],[0," < limit"]],"start1":9007,"start2":9007,"length1":25,"length2":22}]],"length":19293,"saved":false}
{"ts":1351012234113,"patch":[[{"diffs":[[0,"    "],[-1,"*/"],[0,"    "],[-1,"\n"],[0,"     "],[-1," /*"],[0,"\n   "]],"start1":3049,"start2":3049,"length1":23,"length2":17},{"diffs":[[0,"3\n  "],[1,"  */"],[0,"\n    "],[-1,"*/"],[0,"\n   "]],"start1":3319,"start2":3319,"length1":15,"length2":17},{"diffs":[[0,"eWindowSum ="],[1," "],[0,"0;\n         "]],"start1":5825,"start2":5825,"length1":24,"length2":25},{"diffs":[[0,"dowSum ="],[1," "],[0,"0;\n    }"]],"start1":5906,"start2":5906,"length1":16,"length2":17},{"diffs":[[0,")\n    {\n"],[-1,"\n"],[0,"        "]],"start1":5939,"start2":5939,"length1":17,"length2":16},{"diffs":[[0,"rror ==="],[1," "],[0,"\"CError\""]],"start1":5959,"start2":5959,"length1":16,"length2":17},{"diffs":[[0,"sition;\n};\n\n"],[-1,"\n"],[0,"RubixState.p"]],"start1":11935,"start2":11935,"length1":25,"length2":24},{"diffs":[[0,"n(faces,"],[1," "],[0,"cubieSum"]],"start1":11979,"start2":11979,"length1":16,"length2":17}]],"length":18362,"saved":false}
{"ts":1351012930855,"patch":[[{"diffs":[[0,"it;\n"],[-1,"             console.log(index, offset, RubixState.cubies[focusedCubie].printOrder[offset], focusedCubie);\n    "],[0,"    "]],"start1":9114,"start2":9114,"length1":119,"length2":8}]],"length":19182,"saved":false}
{"ts":1351012934532,"patch":[[{"diffs":[[0,"limit;\n         "],[1,"   "],[0,"RubixState.outpu"]],"start1":9111,"start2":9111,"length1":32,"length2":35}]],"length":19185,"saved":false}
{"ts":1351012936997,"patch":[[{"diffs":[[0,"set++)\n        {"],[-1,"\n    "],[0,"        \n       "]],"start1":9045,"start2":9045,"length1":37,"length2":32}]],"length":19180,"saved":false}
{"ts":1351012952698,"patch":[[{"diffs":[[0,"    }\n    }\n"],[1,"    \n"],[0,"    return t"]],"start1":9812,"start2":9812,"length1":24,"length2":29}]],"length":19185,"saved":false}
{"ts":1351012962356,"patch":[[{"diffs":[[0,"\n};\n"],[-1,"RubixState.outputFaces = [];\nRubixState.cubieOutputMapping={\n   0:{\"absolute\":[ 0, 9,51], \"faces\":[0,1,5]},\n   1:{\"absolute\":[ 2,53,17], \"faces\":[0,5,3]},\n   2:{\"absolute\":[ 6,12,11], \"faces\":[0,2,1]},\n   3:{\"absolute\":[ 8,15,14], \"faces\":[0,3,2]},\n   4:{\"absolute\":[42,45,27], \"faces\":[4,5,1]},\n   5:{\"absolute\":[36,29,30], \"faces\":[4,1,2]},\n   6:{\"absolute\":[38,32,33], \"faces\":[4,2,3]},\n   7:{\"absolute\":[44,35,47], \"faces\":[4,3,5]},\n   8:{\"absolute\":[ 1,52],    \"faces\":[0,5]},\n   9:{\"absolute\":[ 3,10],    \"faces\":[0,1]},\n  10:{\"absolute\":[ 5,16],    \"faces\":[0,3]},\n  11:{\"absolute\":[ 7,13],    \"faces\":[0,2]},\n  12:{\"absolute\":[48,18],    \"faces\":[5,1]},\n  13:{\"absolute\":[20,21],    \"faces\":[1,2]},\n  14:{\"absolute\":[23,24],    \"faces\":[2,3]},\n  15:{\"absolute\":[26,50],    \"faces\":[3,5]},\n  16:{\"absolute\":[39,28],    \"faces\":[4,1]},\n  17:{\"absolute\":[37,31],    \"faces\":[4,2]},\n  18:{\"absolute\":[41,34],    \"faces\":[4,3]},\n  19:{\"absolute\":[43,46],    \"faces\":[4,5]}\n};\n\n"],[0,"\nRub"]],"start1":7231,"start2":7231,"length1":988,"length2":8}]],"length":18205,"saved":false}
{"ts":1351012970434,"patch":[[{"diffs":[[0,"4  \n};\n\n"],[1,"RubixState.outputFaces = [];\n\nRubixState.cubieOutputMapping={\n   0:{\"absolute\":[ 0, 9,51], \"faces\":[0,1,5]},\n   1:{\"absolute\":[ 2,53,17], \"faces\":[0,5,3]},\n   2:{\"absolute\":[ 6,12,11], \"faces\":[0,2,1]},\n   3:{\"absolute\":[ 8,15,14], \"faces\":[0,3,2]},\n   4:{\"absolute\":[42,45,27], \"faces\":[4,5,1]},\n   5:{\"absolute\":[36,29,30], \"faces\":[4,1,2]},\n   6:{\"absolute\":[38,32,33], \"faces\":[4,2,3]},\n   7:{\"absolute\":[44,35,47], \"faces\":[4,3,5]},\n   8:{\"absolute\":[ 1,52],    \"faces\":[0,5]},\n   9:{\"absolute\":[ 3,10],    \"faces\":[0,1]},\n  10:{\"absolute\":[ 5,16],    \"faces\":[0,3]},\n  11:{\"absolute\":[ 7,13],    \"faces\":[0,2]},\n  12:{\"absolute\":[48,18],    \"faces\":[5,1]},\n  13:{\"absolute\":[20,21],    \"faces\":[1,2]},\n  14:{\"absolute\":[23,24],    \"faces\":[2,3]},\n  15:{\"absolute\":[26,50],    \"faces\":[3,5]},\n  16:{\"absolute\":[39,28],    \"faces\":[4,1]},\n  17:{\"absolute\":[37,31],    \"faces\":[4,2]},\n  18:{\"absolute\":[41,34],    \"faces\":[4,3]},\n  19:{\"absolute\":[43,46],    \"faces\":[4,5]}\n};\n"],[0,"\n//Leadi"]],"start1":16273,"start2":16273,"length1":16,"length2":996}]],"length":19185,"saved":false}
{"ts":1351012996261,"patch":[[{"diffs":[[0,"n true;\n};\n\n"],[-1,"\n"],[0,"RubixState.s"]],"start1":15674,"start2":15674,"length1":25,"length2":24},{"diffs":[[0,"ate."],[-1,"sortFac"],[1,"rotat"],[0,"e ="],[-1," "],[0,"func"]],"start1":15693,"start2":15693,"length1":19,"length2":16},{"diffs":[[0,"ion("],[-1,"faceA, faceB)\n{\n    return faceA[0].localeCompare(faceB[0]);"],[1,")\n{\n    "],[0,"\n}"],[-1,";"],[0,"\n\n//"]],"start1":15710,"start2":15710,"length1":71,"length2":18},{"diffs":[[0,"s.\n\n"],[-1,"//TODO verifier.\n"],[0,"// T"]],"start1":15741,"start2":15741,"length1":25,"length2":8}]],"length":19111,"saved":false}
{"ts":1351012998759,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n//TODO"]],"start1":15716,"start2":15716,"length1":16,"length2":17}]],"length":19112,"saved":false}
{"ts":1351013049918,"patch":[[{"diffs":[[0,"t = [];\n"],[1,"\n"],[0,"RubixSta"]],"start1":16044,"start2":16044,"length1":16,"length2":17}]],"length":19113,"saved":false}
{"ts":1351013084056,"patch":[[{"diffs":[[0,"faceMap = {\n"],[1,"    this.'R'\n"],[0,"    'R':{\"va"]],"start1":15886,"start2":15886,"length1":24,"length2":37},{"diffs":[[0,"e\":5}\n};"],[1,"\n/**\n * Defines cubie locations for a side.\n */\nRubixState.sideLookUpTable = [\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\n    [ 0,26, 6,34,15,40,12,32], // green, left\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\n    [ 9,28, 3,38,21,44,18,36], // blue, right\n    [15,42,18,44,21,46,12,40], // orange, front    \n    [12,46,21,38, 3,24, 0,32]  // white, bottom\n];"],[0,"\n\nRubixS"]],"start1":16030,"start2":16030,"length1":16,"length2":379}]],"length":19489,"saved":false}
{"ts":1351013089925,"patch":[[{"diffs":[[0,"= {\n    "],[1,"\"t\":"],[0,"this.'R'"]],"start1":15894,"start2":15894,"length1":16,"length2":20}]],"length":19493,"saved":false}
{"ts":1351013099212,"patch":[[{"diffs":[[0,"this"],[-1,"."],[1,"["],[0,"'R'"],[1,"];"],[0,"\n   "]],"start1":15906,"start2":15906,"length1":12,"length2":14}]],"length":19495,"saved":false}
{"ts":1351013102065,"patch":[[{"diffs":[[0,"his['R']"],[-1,";"],[1,","],[0,"\n    'R'"]],"start1":15907,"start2":15907,"length1":17,"length2":17}]],"length":19495,"saved":false}
{"ts":1351013108036,"patch":[[{"diffs":[[0,"\"t\":this"],[1,"."],[0,"['R'],\n "]],"start1":15902,"start2":15902,"length1":16,"length2":17}]],"length":19496,"saved":false}
{"ts":1351013111807,"patch":[[{"diffs":[[0,"= {\n"],[-1,"    \"t\":this.['R'],\n"],[0,"    "]],"start1":15894,"start2":15894,"length1":28,"length2":8}]],"length":19476,"saved":false}
{"ts":1351013172249,"patch":[[{"diffs":[[0,"[ 0,"],[-1,"24, 3,28, 9,30, 6,26"],[1," 8, 1,10, 3,11, 2,9"],[0,"], /"]],"start1":16108,"start2":16108,"length1":28,"length2":27}]],"length":19475,"saved":false}
{"ts":1351013174714,"patch":[[{"diffs":[[0,"3,11, 2,"],[1," "],[0,"9], // r"]],"start1":16122,"start2":16122,"length1":16,"length2":17}]],"length":19476,"saved":false}
{"ts":1351013183445,"patch":[[{"diffs":[[0,"    [ 0,"],[-1,"26"],[1," 9"],[0,", 6,34,1"]],"start1":16148,"start2":16148,"length1":18,"length2":18}]],"length":19476,"saved":false}
{"ts":1351013231116,"patch":[[{"diffs":[[0," 9, "],[-1,"6,34,15,40,12,3"],[1,"2,13, 5,16, 4,1"],[0,"2], "]],"start1":16156,"start2":16156,"length1":23,"length2":23}]],"length":19476,"saved":false}
{"ts":1351013255710,"patch":[[{"diffs":[[0,"  [ "],[-1,"6, 30,9,36,18,42,15,34"],[1,"2,11, 3,14, 6,17, 5,13"],[0,"], /"]],"start1":16196,"start2":16196,"length1":30,"length2":30}]],"length":19476,"saved":false}
{"ts":1351013308903,"patch":[[{"diffs":[[0,"  [ "],[-1,"9,28, 3,38,21,44,18,36"],[1,"3,10, 1,15, 7,18, 6,14"],[0,"], /"]],"start1":16242,"start2":16242,"length1":30,"length2":30}]],"length":19476,"saved":false}
{"ts":1351013397417,"patch":[[{"diffs":[[0,"   ["],[-1,"15,42,18,44,21,46,12,40"],[1," 5,17, 6,18, 7,19, 4,16"],[0,"], /"]],"start1":16287,"start2":16287,"length1":31,"length2":31},{"diffs":[[0,"   ["],[-1,"12,46,21,38, 3,24"],[1," 4,19, 7,15, 1, 8"],[0,", 0,"],[-1,"32"],[1,"1"],[0,"]  /"]],"start1":16339,"start2":16339,"length1":31,"length2":30}]],"length":19475,"saved":false}
{"ts":1351013490423,"patch":[[{"diffs":[[0,"unction()\n{\n"],[1,"    faceSet=[];\n"],[0,"    \n};\n\n//T"]],"start1":15706,"start2":15706,"length1":24,"length2":40},{"diffs":[[0,", 8, 0,1"],[1,"2"],[0,"]  // wh"]],"start1":16373,"start2":16373,"length1":16,"length2":17}]],"length":19492,"saved":false}
{"ts":1351013495540,"patch":[[{"diffs":[[0,"ion()\n{\n    "],[1,"RubixState."],[0,"faceSet=[];\n"]],"start1":15710,"start2":15710,"length1":24,"length2":35}]],"length":19503,"saved":false}
{"ts":1351013503464,"patch":[[{"diffs":[[0,"otate =function("],[1,"state, face, rotations"],[0,")\n{\n    RubixSta"]],"start1":15698,"start2":15698,"length1":32,"length2":54}]],"length":19525,"saved":false}
{"ts":1351013533135,"patch":[[{"diffs":[[0,"faceSet=[];\n"],[1,"    var indicies =RubixState.sideLookUpTable;\n"],[0,"    \n};\n\n//T"]],"start1":15755,"start2":15755,"length1":24,"length2":70}]],"length":19571,"saved":false}
{"ts":1351013536448,"patch":[[{"diffs":[[0,"kUpTable"],[1,"[face]"],[0,";\n    \n}"]],"start1":15803,"start2":15803,"length1":16,"length2":22}]],"length":19577,"saved":false}
{"ts":1351013539950,"patch":[[{"diffs":[[0,"dicies ="],[1," "],[0,"RubixSta"]],"start1":15777,"start2":15777,"length1":16,"length2":17}]],"length":19578,"saved":false}
{"ts":1351013554815,"patch":[[{"diffs":[[0,"];\n    \n"],[1,"     /*\n     * cubie - holds the cubie index.\n     * size - A generic size variable.\n     * newIndex - Holds a modified index.\n     * cFace - A cubieFace.\n     * offset - A generic offset variable.\n    */\n    var cubie, size, newIndex, cFace, offset;\n"],[0,"};\n\n//TO"]],"start1":15817,"start2":15817,"length1":16,"length2":267}]],"length":19829,"saved":false}
{"ts":1351014540403,"patch":[[{"diffs":[[0,"\",\"W\"]}  \n};"],[1,"\n\n/**\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\n * defines the new face for a cubie face. \n * \n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\n */\nRubixState.newFaceMap = {\n    0 : {\n        1 : {\n            1 : 5,\n            2 : 3,\n            3 : 2\n        },\n        2 : {\n            1 : 1,\n            2 : 5,\n            3 : 3\n        },\n        3 : {\n            1 : 2,\n            2 : 1,\n            3 : 5\n        },\n        5 : {\n            1 : 3,\n            2 : 2,\n            3 : 1\n        }\n    },\n    1 : {\n        0 : {\n            1 : 2,\n            2 : 4,\n            3 : 5\n        },\n        2 : {\n            1 : 4,\n            2 : 5,\n            3 : 0\n        },\n        4 : {\n            1 : 5,\n            2 : 0,\n            3 : 2\n        },\n        5 : {\n            1 : 0,\n            2 : 2,\n            3 : 4\n        }\n    },\n    2 : {\n        0 : {\n            1 : 3,\n            2 : 4,\n            3 : 1\n        },\n        1 : {\n            1 : 0,\n            2 : 3,\n            3 : 4\n        },\n        3 : {\n            1 : 4,\n            2 : 1,\n            3 : 0\n        },\n        4 : {\n            1 : 1,\n            2 : 0,\n            3 : 3\n        }\n    },\n    3 : {\n        0 : {\n            1 : 5,\n            2 : 4,\n            3 : 2\n        },\n        2 : {\n            1 : 0,\n            2 : 5,\n            3 : 4\n        },\n        4 : {\n            1 : 2,\n            2 : 0,\n            3 : 5\n        },\n        5 : {\n            1 : 4,\n            2 : 2,\n            3 : 0\n        }\n    },\n    4 : {\n        1 : {\n            1 : 2,\n            2 : 3,\n            3 : 5\n        },\n        2 : {\n            1 : 3,\n            2 : 5,\n            3 : 1\n        },\n        3 : {\n            1 : 5,\n            2 : 1,\n            3 : 2\n        },\n        5 : {\n            1 : 1,\n            2 : 2,\n            3 : 3\n        }\n    },\n    5 : {\n        0 : {\n            1 : 1,\n            2 : 4,\n            3 : 3\n        },\n        1 : {\n            1 : 4,\n            2 : 3,\n            3 : 0\n        },\n        3 : {\n            1 : 0,\n            2 : 1,\n            3 : 4\n        },\n        4 : {\n            1 : 3,\n            2 : 0,\n            3 : 1\n        }\n    }"]],"start1":19817,"start2":19817,"length1":12,"length2":2322}]],"length":22139,"saved":false}
{"ts":1351014544965,"patch":[[{"diffs":[[0,"       3 : 1\n        }\n    }"],[1,"\n};"]],"start1":22111,"start2":22111,"length1":28,"length2":31}]],"length":22142,"saved":false}
{"ts":1351014828123,"patch":[[{"diffs":[[0,"offset;\n"],[1,"    \n    // Iterate over the indicies and calculate values of the rotated cubies.\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\n    {\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 4\n        cubie = indicies[index];\n        size = cubie >=24 ? 2 : 3;\n        \n        // For the number of faces calculate individual face rotations and add them to our scratch.\n        for(cFace = 0; cFace < size; cFace++)\n        {\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\n                state.cubies[cubie+cFace], face, rotations);   \n        }\n    }\n"],[0,"};\n\n//TO"]],"start1":16068,"start2":16068,"length1":16,"length2":662}]],"length":22788,"saved":false}
{"ts":1351014840278,"patch":[[{"diffs":[[0,"tate"],[-1,".cubies[cubie+cFace]"],[0,", fa"]],"start1":16659,"start2":16659,"length1":28,"length2":8}]],"length":22768,"saved":false}
{"ts":1351014846325,"patch":[[{"diffs":[[0,"       state"],[1,"[cubie+cFace]"],[0,", face, rota"]],"start1":16651,"start2":16651,"length1":24,"length2":37}]],"length":22781,"saved":false}
{"ts":1351015142790,"patch":[[{"diffs":[[0,"5]}\n};\n\n"],[1,"/**\n * The scratch buffer for rotations. This reduces the number of times we have to \n * create a temporary buffer.\n */\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(9));\n\n"],[0,"//Leadin"]],"start1":18537,"start2":18537,"length1":16,"length2":200}]],"length":22965,"saved":false}
{"ts":1351015162509,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    RubixState.faceSet=[];\n"],[0,"    "]],"start1":15736,"start2":15736,"length1":35,"length2":8}]],"length":22938,"saved":false}
{"ts":1351015179007,"patch":[[{"diffs":[[0,"    }\n};"],[1,"\nRubixState.rotateFace = function()\n{\n    \n}"],[0,"\n\n//TODO"]],"start1":16682,"start2":16682,"length1":16,"length2":60}]],"length":22982,"saved":false}
{"ts":1351015180417,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n//TODO"]],"start1":16726,"start2":16726,"length1":16,"length2":17}]],"length":22983,"saved":false}
{"ts":1351015202198,"patch":[[{"diffs":[[0,"unction()\n{\n"],[1,"     // Shift right to get the value of the leading for bits.\n    var faceVal = Number(faceState >> 4);\n    \n    // Mask with 00000111 to retrieve the color from the faceState.\n    var colorVal = faceState & 7;\n\n    // If the mapping of face rotations is valid perform it, \n    // else it must be unaffected at this phase.\n    if ( RubixState.newFaceMap[face][faceVal])\n    {\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\n    }\n    else \n    {\n        return faceState;   \n    }\n"],[0,"    \n};\n\n//T"]],"start1":16716,"start2":16716,"length1":24,"length2":539}]],"length":23498,"saved":false}
{"ts":1351015218126,"patch":[[{"diffs":[[0,"Face = function("],[1,"faceState, face, rotations"],[0,")\n{\n     // Shif"]],"start1":16708,"start2":16708,"length1":32,"length2":58}]],"length":23524,"saved":false}
{"ts":1351015247363,"patch":[[{"diffs":[[0," 2 else "],[-1,"4"],[1,"3"],[0,"\n       "]],"start1":16293,"start2":16293,"length1":17,"length2":17}]],"length":23524,"saved":false}
{"ts":1351015272318,"patch":[[{"diffs":[[0,"    "],[-1," // Shift right to get the value of the leading for bits.\n    var fac"],[1,"var cubi"],[0,"eVal"]],"start1":16754,"start2":16754,"length1":77,"length2":16}]],"length":23463,"saved":false}
{"ts":1351015279951,"patch":[[{"diffs":[[0,"tate >> "],[-1,"4"],[1,"3"],[0,");\n    \n"]],"start1":16785,"start2":16785,"length1":17,"length2":17}]],"length":23463,"saved":false}
{"ts":1351015287279,"patch":[[{"diffs":[[0,"    var "],[-1,"color"],[1,"face"],[0,"Val = fa"]],"start1":16870,"start2":16870,"length1":21,"length2":20}]],"length":23462,"saved":false}
{"ts":1351015292505,"patch":[[{"diffs":[[0,"l = "],[-1,"Number("],[0,"face"]],"start1":16769,"start2":16769,"length1":15,"length2":8},{"diffs":[[0,"ate >> 3"],[-1,")"],[0,";\n    \n "]],"start1":16779,"start2":16779,"length1":17,"length2":16}]],"length":23454,"saved":false}
{"ts":1351015300770,"patch":[[{"diffs":[[0,"   \n"],[-1,"    // Mask with 00000111 to retrieve the color from the faceState.\n"],[0,"    "]],"start1":16790,"start2":16790,"length1":76,"length2":8}]],"length":23386,"saved":false}
{"ts":1351015309854,"patch":[[{"diffs":[[0,"unction("],[-1,"fac"],[1,"cubi"],[0,"eState, "]],"start1":16716,"start2":16716,"length1":19,"length2":20}]],"length":23387,"saved":false}
{"ts":1351015314219,"patch":[[{"diffs":[[0," cubieVal = "],[-1,"fac"],[1,"cubi"],[0,"eState >> 3;"]],"start1":16762,"start2":16762,"length1":27,"length2":28},{"diffs":[[0,"ceVal = "],[-1,"fac"],[1,"cubi"],[0,"eState &"]],"start1":16806,"start2":16806,"length1":19,"length2":20}]],"length":23389,"saved":false}
{"ts":1351015340803,"patch":[[{"diffs":[[0,"ceMap[face]["],[-1,"fac"],[1,"cubi"],[0,"eVal])\n    {"]],"start1":16967,"start2":16967,"length1":27,"length2":28},{"diffs":[[0,"p[face]["],[-1,"fac"],[1,"cubi"],[0,"eVal][ro"]],"start1":17032,"start2":17032,"length1":19,"length2":20}]],"length":23391,"saved":false}
{"ts":1351015344268,"patch":[[{"diffs":[[0,"<< 4) | "],[-1,"color"],[1,"face"],[0,"Val;\n   "]],"start1":17061,"start2":17061,"length1":21,"length2":20},{"diffs":[[0,"urn face"],[-1,"State"],[1,"Val"],[0,";   \n   "]],"start1":17111,"start2":17111,"length1":21,"length2":19}]],"length":23388,"saved":false}
{"ts":1351015350145,"patch":[[{"diffs":[[0,"ns] "],[-1,"<< 4"],[1,"* 8"],[0,") | "]],"start1":17057,"start2":17057,"length1":12,"length2":11}]],"length":23387,"saved":false}
{"ts":1351015361501,"patch":[[{"diffs":[[0,"7;\n\n"],[-1,"    // If the mapping of face rotations is valid perform it, \n    // else it must be unaffected at this phase.\n"],[0,"    "]],"start1":16827,"start2":16827,"length1":119,"length2":8}]],"length":23276,"saved":false}
{"ts":1351015390877,"patch":[[{"diffs":[[0,"}\n    }\n"],[1,"    \n    for (index = 0, size = indicies.length; index < size; index+=2)\n    {\n        // Calculate the index of the new cubie index after rotation.\n        newIndex = indicies[(index + (2 * rotations)) % 8];\n        \n        // Clear the face set of data.\n        RubixState.faceSet.length = 0;\n        RubixState.faceSet.length = 6;\n        \n        // Determine the face of each of the new buffer locations and load the \n        // new index in the appropriate position. This maps face to memory location.\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\n\n        // Place the cubie face data in the new position.\n        for(offset = 0; offset < 3; offset++)\n        {\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\n            \n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\n        }\n        \n        // See above.\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\n        \n        RubixState.faceSet.length = 0;\n        RubixState.faceSet.length = 6;\n        \n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\n        \n         for(offset = 3; offset < 5; offset++)\n        {\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\n            \n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\n        }\n    }\n"],[0,"};\nRubix"]],"start1":16680,"start2":16680,"length1":16,"length2":1579}]],"length":24839,"saved":false}
{"ts":1351015436259,"patch":[[{"diffs":[[0,"    "],[-1," // Clear the face set of data.\n        RubixState.faceSet.length = 0;\n        RubixState.faceSet.length = 6;\n        \n        // Determine the face of each of the new buffer locations and load the \n        // new index in the appropriate position. This maps face to memory location.\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\n\n        // Place the cubie face data in the new position.\n        for(offset = 0; offset < 3; offset++)\n        {\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\n            \n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\n        }\n        \n        // See above.\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\n        \n        RubixState.faceSet.length = 0;\n        RubixState.faceSet.length = 6;\n        \n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\n        \n         for(offset = 3; offset < 5; offset++)\n        {\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\n            \n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\n        }"],[0,"\n   "]],"start1":16909,"start2":16909,"length1":1339,"length2":8}]],"length":23508,"saved":false}
{"ts":1351015490887,"patch":[[{"diffs":[[0,"];\n        \n"],[1,"        RubixState.scratchBuffer[index]\n"],[0,"       \n    "]],"start1":16894,"start2":16894,"length1":24,"length2":64}]],"length":23548,"saved":false}
{"ts":1351015493454,"patch":[[{"diffs":[[0,"r[index]"],[1,";"],[0,"\n       "]],"start1":16937,"start2":16937,"length1":16,"length2":17}]],"length":23549,"saved":false}
{"ts":1351015503151,"patch":[[{"diffs":[[0,"        \n       "],[1," state[newIndex] ="],[0," RubixState.scra"]],"start1":16897,"start2":16897,"length1":32,"length2":50}]],"length":23567,"saved":false}
{"ts":1351015507003,"patch":[[{"diffs":[[0,"ffer[index];"],[-1,"\n "],[0,"      \n    }"]],"start1":16952,"start2":16952,"length1":26,"length2":24}]],"length":23565,"saved":false}
{"ts":1351015509843,"patch":[[{"diffs":[[0,"   }\n};\n"],[1,"\n"],[0,"RubixSta"]],"start1":16972,"start2":16972,"length1":16,"length2":17}]],"length":23566,"saved":false}
{"ts":1351015528890,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"//TODO rotations.\n"],[0,"\n// "]],"start1":17316,"start2":17316,"length1":26,"length2":8}]],"length":23548,"saved":false}
{"ts":1351015530802,"patch":[[{"diffs":[[0,"   \n};\n\n"],[-1,"\n"],[0,"// The f"]],"start1":17312,"start2":17312,"length1":17,"length2":16}]],"length":23547,"saved":false}
{"ts":1351015594363,"patch":[[{"diffs":[[0,"        "],[-1,"\t"],[1,"    "],[0," 36 37 3"]],"start1":3228,"start2":3228,"length1":17,"length2":20},{"diffs":[[0," 38\n    "],[-1,"\t\t"],[1,"        "],[0," 39  O 4"]],"start1":3246,"start2":3246,"length1":18,"length2":24},{"diffs":[[0," 41\n    "],[-1,"\t\t"],[1,"        "],[0," 42 43 4"]],"start1":3268,"start2":3268,"length1":18,"length2":24},{"diffs":[[0," 44\n    "],[-1,"\t\t"],[1,"        "],[0," 45 46 4"]],"start1":3290,"start2":3290,"length1":18,"length2":24},{"diffs":[[0," 47\n    "],[-1,"\t\t"],[1,"        "],[0," 48  W 5"]],"start1":3312,"start2":3312,"length1":18,"length2":24},{"diffs":[[0," 50\n    "],[-1,"\t\t"],[1,"        "],[0," 51 52 5"]],"start1":3334,"start2":3334,"length1":18,"length2":24},{"diffs":[[0," */\n"],[-1,"    console.log(\"start\");\n"],[0,"    "]],"start1":3366,"start2":3366,"length1":34,"length2":8},{"diffs":[[0," }\n\n"],[-1,"    console.log(\"end\");\n"],[0,"\n   "]],"start1":7101,"start2":7101,"length1":32,"length2":8}]],"length":23530,"saved":false}
{"ts":1351015598948,"patch":[[{"diffs":[[0,"*/    \n     "],[-1," "],[0,"/*\n         "]],"start1":3053,"start2":3053,"length1":25,"length2":24}]],"length":23529,"saved":false}
{"ts":1351015604009,"patch":[[{"diffs":[[0,"\n   "],[-1," */    \n     /*"],[0,"\n   "]],"start1":3048,"start2":3048,"length1":23,"length2":8}]],"length":23514,"saved":false}
{"ts":1351015607362,"patch":[[{"diffs":[[0,"1   \n   "],[1,"          "],[0,"\n       "]],"start1":3044,"start2":3044,"length1":16,"length2":26}]],"length":23524,"saved":false}
{"ts":1351015613163,"patch":[[{"diffs":[[0,"    "],[-1,"\n    var state = new Uint8Array(new ArrayBuffer(20));"],[0,"\n\n  "]],"start1":2689,"start2":2689,"length1":61,"length2":8},{"diffs":[[0,"3\n  \n    */\n"],[1,"        var state = new Uint8Array(new ArrayBuffer(20));\n\n"],[0,"    try{\n   "]],"start1":3299,"start2":3299,"length1":24,"length2":82}]],"length":23529,"saved":false}
{"ts":1351015614575,"patch":[[{"diffs":[[0,"\n    */\n"],[-1,"    "],[0,"    var "]],"start1":3303,"start2":3303,"length1":20,"length2":16}]],"length":23525,"saved":false}
{"ts":1351015638264,"patch":[[{"diffs":[[0,"]]);"],[-1,"\n        console.log(RubixState.cubies.indicies[state[1] >> 3],faces[0][2],faces[5][8],faces[3][2], faces);"],[0,"\n\n  "]],"start1":4264,"start2":4264,"length1":115,"length2":8}]],"length":23418,"saved":false}
{"ts":1351015657770,"patch":[[{"diffs":[[0,"ng(state));\n"],[1,"    RubixState.rotate(state);\n"],[0,"    //return"]],"start1":7032,"start2":7032,"length1":24,"length2":54}]],"length":23448,"saved":false}
{"ts":1351015660746,"patch":[[{"diffs":[[0,"te(state"],[1,", 0,1"],[0,");\n    /"]],"start1":7063,"start2":7063,"length1":16,"length2":21}]],"length":23453,"saved":false}
{"ts":1351015663223,"patch":[[{"diffs":[[0,"tate, 0,"],[1," "],[0,"1);\n    "]],"start1":7067,"start2":7067,"length1":16,"length2":17}]],"length":23454,"saved":false}
{"ts":1351015668518,"patch":[[{"diffs":[[0,"   }\n\n\n    \n"],[1,"    RubixState.rotate(state, 0, 1);\n    "],[0,"    console."]],"start1":6987,"start2":6987,"length1":24,"length2":64},{"diffs":[[0,"));\n"],[-1,"    RubixState.rotate(state, 0, 1);"],[0,"\n   "]],"start1":7080,"start2":7080,"length1":43,"length2":8}]],"length":23459,"saved":false}
{"ts":1351015684974,"patch":[[{"diffs":[[0,"(state, "],[-1,"0"],[1,"1"],[0,", 1);\n  "]],"start1":7020,"start2":7020,"length1":17,"length2":17}]],"length":23459,"saved":false}
{"ts":1351015707030,"patch":[[{"diffs":[[0,"(state, "],[-1,"1"],[1,"0"],[0,", 1);\n  "]],"start1":7020,"start2":7020,"length1":17,"length2":17}]],"length":23459,"saved":false}
{"ts":1351015743048,"patch":[[{"diffs":[[0,"ns] "],[-1,"* 8"],[1,"<<3"],[0,") | "]],"start1":17148,"start2":17148,"length1":11,"length2":11}]],"length":23459,"saved":false}
{"ts":1351015774817,"patch":[[{"diffs":[[0,"ubieVal])\n    {\n"],[1,"        console.log((RubixState.newFaceMap[face][cubieVal][rotations] <<3) | faceVal, cubieState);\n"],[0,"        return ("]],"start1":17071,"start2":17071,"length1":32,"length2":131}]],"length":23558,"saved":false}
{"ts":1351015795843,"patch":[[{"diffs":[[0,"log("],[-1,"(RubixState.newFaceMap[face][cubieVal][rotations] <<3) | fac"],[1,"cubi"],[0,"eVal"]],"start1":17103,"start2":17103,"length1":68,"length2":12}]],"length":23502,"saved":false}
{"ts":1351015803965,"patch":[[{"diffs":[[0,"ole.log("],[-1,"cubi"],[1,"(RubixState.newFaceMap[face][cubieVal][rotations] <<3) | fac"],[0,"eVal, cu"]],"start1":17099,"start2":17099,"length1":20,"length2":76},{"diffs":[[0,"l, cubie"],[-1,"State"],[1,"Val"],[0,");\n     "]],"start1":17170,"start2":17170,"length1":21,"length2":19}]],"length":23556,"saved":false}
{"ts":1351015809742,"patch":[[{"diffs":[[0,"s] <<3) "],[-1,"| faceVal"],[0,", cubieV"]],"start1":17154,"start2":17154,"length1":25,"length2":16}]],"length":23547,"saved":false}
{"ts":1351015833774,"patch":[[{"diffs":[[0,"ewFaceMap[face]["],[-1,"cubi"],[1,"fac"],[0,"eVal][rotations]"]],"start1":17120,"start2":17120,"length1":36,"length2":35}]],"length":23546,"saved":false}
{"ts":1351015859713,"patch":[[{"diffs":[[0,"ole.log("],[-1,"("],[1,"face,"],[0,"RubixSta"]],"start1":17099,"start2":17099,"length1":17,"length2":21},{"diffs":[[0,"ons]"],[-1," <<3) , cubieVal"],[0,");\n "]],"start1":17155,"start2":17155,"length1":24,"length2":8}]],"length":23534,"saved":false}
{"ts":1351015875541,"patch":[[{"diffs":[[0,"ole.log("],[-1,"face"],[1,"cubieState&7"],[0,",RubixSt"]],"start1":17099,"start2":17099,"length1":20,"length2":28}]],"length":23542,"saved":false}
{"ts":1351015890694,"patch":[[{"diffs":[[0,"eState&7"],[1,");"],[0,",RubixSt"]],"start1":17111,"start2":17111,"length1":16,"length2":18}]],"length":23544,"saved":false}
{"ts":1351015892318,"patch":[[{"diffs":[[0,"tate&7);"],[1,"//"],[0,",RubixSt"]],"start1":17113,"start2":17113,"length1":16,"length2":18}]],"length":23546,"saved":false}
{"ts":1351015919984,"patch":[[{"diffs":[[0,"x];\n"],[-1,"        size = cubie >=24 ? 2 : 3;\n        \n        // For the number of faces calculate individual face rotations and add them to our scratch.\n        for(cFace = 0; cFace < size; cFace++)\n        {\n     "],[0,"    "]],"start1":16244,"start2":16244,"length1":213,"length2":8},{"diffs":[[0,"ations);   \n"],[-1,"        }\n"],[0,"    }\n    \n "]],"start1":16367,"start2":16367,"length1":34,"length2":24}]],"length":23331,"saved":false}
{"ts":1351015927086,"patch":[[{"diffs":[[0,"ubie"],[-1,"+cFace"],[0,"], f"]],"start1":16345,"start2":16345,"length1":14,"length2":8}]],"length":23325,"saved":false}
{"ts":1351015932514,"patch":[[{"diffs":[[0,"ndex"],[-1,", cFace, offset"],[0,";\n  "]],"start1":15940,"start2":15940,"length1":23,"length2":8}]],"length":23310,"saved":false}
{"ts":1351015952491,"patch":[[{"diffs":[[0,"ndicies[index];\n"],[1,"        console.log(\"in\");\n"],[0,"        RubixSta"]],"start1":16217,"start2":16217,"length1":32,"length2":59}]],"length":23337,"saved":false}
{"ts":1351016036467,"patch":[[{"diffs":[[0,"ceMap[face]["],[-1,"cubi"],[1,"fac"],[0,"eVal])\n    {"]],"start1":16849,"start2":16849,"length1":28,"length2":27},{"diffs":[[0,"p[face]["],[-1,"cubi"],[1,"fac"],[0,"eVal][ro"]],"start1":17000,"start2":17000,"length1":20,"length2":19}]],"length":23335,"saved":false}
{"ts":1351016071174,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        console.log(cubieState&7);//,RubixState.newFaceMap[face][faceVal][rotations]);\n"],[0,"    "]],"start1":16873,"start2":16873,"length1":95,"length2":8},{"diffs":[[0," <<3) | "],[-1,"fac"],[1,"cubi"],[0,"eVal;\n  "]],"start1":16940,"start2":16940,"length1":19,"length2":20}]],"length":23249,"saved":false}
{"ts":1351016076021,"patch":[[{"diffs":[[0," return "],[-1,"faceVal"],[1,"cubieState"],[0,";   \n   "]],"start1":16987,"start2":16987,"length1":23,"length2":26}]],"length":23252,"saved":false}
{"ts":1351016112272,"patch":[[{"diffs":[[0,"(state, "],[-1,"0"],[1,"1"],[0,", 1);\n  "]],"start1":7020,"start2":7020,"length1":17,"length2":17}]],"length":23252,"saved":false}
{"ts":1351016118062,"patch":[[{"diffs":[[0,"(state, "],[-1,"1"],[1,"0"],[0,", 1);\n  "]],"start1":7020,"start2":7020,"length1":17,"length2":17}]],"length":23252,"saved":false}
{"ts":1351016119729,"patch":[[{"diffs":[[0,"ate, 0, "],[-1,"1"],[1,"2"],[0,");\n     "]],"start1":7023,"start2":7023,"length1":17,"length2":17}]],"length":23252,"saved":false}
{"ts":1351016169965,"patch":[[{"diffs":[[0,") % 8];\n"],[1,"        console.log(newIndex);\n"],[0,"        "]],"start1":16592,"start2":16592,"length1":16,"length2":47}]],"length":23283,"saved":false}
{"ts":1351016185971,"patch":[[{"diffs":[[0,"dex+"],[-1,"=2"],[1,"+"],[0,")\n  "]],"start1":16456,"start2":16456,"length1":10,"length2":9}]],"length":23282,"saved":false}
{"ts":1351016199646,"patch":[[{"diffs":[[0,"(state, "],[-1,"0"],[1,"1"],[0,", 2);\n  "]],"start1":7020,"start2":7020,"length1":17,"length2":17}]],"length":23282,"saved":false}
{"ts":1351016221122,"patch":[[{"diffs":[[0,"= -1)\n        {\n"],[1,"            console.log(state);\n"],[0,"            retu"]],"start1":7731,"start2":7731,"length1":32,"length2":64}]],"length":23314,"saved":false}
{"ts":1351016237238,"patch":[[{"diffs":[[0,"og(state"],[1,"[index] & 7"],[0,");\n     "]],"start1":7768,"start2":7768,"length1":16,"length2":27}]],"length":23325,"saved":false}
{"ts":1351016248294,"patch":[[{"diffs":[[0,"ole.log("],[1,"index,"],[0,"state[in"]],"start1":7763,"start2":7763,"length1":16,"length2":22}]],"length":23331,"saved":false}
{"ts":1351016249843,"patch":[[{"diffs":[[0,"g(index,"],[1," "],[0,"state[in"]],"start1":7769,"start2":7769,"length1":16,"length2":17}]],"length":23332,"saved":false}
{"ts":1351016261862,"patch":[[{"diffs":[[0,"state[index] & 7"],[1,", state[index] >> 3"],[0,");\n            r"]],"start1":7778,"start2":7778,"length1":32,"length2":51}]],"length":23351,"saved":false}
{"ts":1351016346364,"patch":[[{"diffs":[[0,"ate, 1, "],[-1,"2"],[1,"1"],[0,");\n     "]],"start1":7023,"start2":7023,"length1":17,"length2":17}]],"length":23351,"saved":false}
{"ts":1351016913061,"patch":[[{"diffs":[[0,"ole.log("],[1,"index, "],[0,"newIndex"]],"start1":16680,"start2":16680,"length1":16,"length2":23}]],"length":23358,"saved":false}
{"ts":1351016941830,"patch":[[{"diffs":[[0,"hBuffer["],[1,"indicies["],[0,"index]"],[1,"]"],[0,";      \n"]],"start1":16758,"start2":16758,"length1":22,"length2":32}]],"length":23368,"saved":false}
{"ts":1351016949703,"patch":[[{"diffs":[[0,"ole.log("],[1,"indicies["],[0,"index"],[1,"]"],[0,", newInd"]],"start1":16680,"start2":16680,"length1":21,"length2":31}]],"length":23378,"saved":false}
{"ts":1351016966690,"patch":[[{"diffs":[[0," \n    }\n"],[1,"    console.log(indicies);\n"],[0,"};\n\nRubi"]],"start1":16798,"start2":16798,"length1":16,"length2":43}]],"length":23405,"saved":false}
{"ts":1351017148560,"patch":[[{"diffs":[[0," return "],[1,"cubieVal"],[0,"(RubixSt"]],"start1":17037,"start2":17037,"length1":16,"length2":24},{"diffs":[[0,"<3) "],[-1,"| cubieVal"],[0,";\n  "]],"start1":17103,"start2":17103,"length1":18,"length2":8}]],"length":23403,"saved":false}
{"ts":1351017158245,"patch":[[{"diffs":[[0,"ieState "],[-1,">> 3"],[1," - "],[0,";\n    \n "]],"start1":16923,"start2":16923,"length1":20,"length2":19}]],"length":23402,"saved":false}
{"ts":1351017176762,"patch":[[{"diffs":[[0,"State  -"],[1," (cubieState & 7)"],[0," ;\n    \n"]],"start1":16925,"start2":16925,"length1":16,"length2":33}]],"length":23419,"saved":false}
{"ts":1351017191564,"patch":[[{"diffs":[[0,")\n{\n    "],[-1,"var cubi"],[1,"\n    var fac"],[0,"eVal = c"]],"start1":16897,"start2":16897,"length1":24,"length2":28},{"diffs":[[0,"ate "],[-1," - (cubieState & 7) ;\n "],[1,"& 7;"],[0,"   \n"]],"start1":16931,"start2":16931,"length1":31,"length2":12},{"diffs":[[0,"& 7;   \n    var "],[-1,"fac"],[1,"cubi"],[0,"eVal = cubieStat"]],"start1":16935,"start2":16935,"length1":35,"length2":36},{"diffs":[[0,"ieState "],[-1,"& 7;"],[1," -faceVal;\n"],[0,"\n\n    if"]],"start1":16965,"start2":16965,"length1":20,"length2":27}]],"length":23412,"saved":false}
{"ts":1351017193195,"patch":[[{"diffs":[[0,"State  -"],[1," "],[0,"faceVal;"]],"start1":16967,"start2":16967,"length1":16,"length2":17}]],"length":23413,"saved":false}
{"ts":1351017214229,"patch":[[{"diffs":[[0,"cubieVal"],[-1,"("],[1," | "],[0,"RubixSta"]],"start1":17055,"start2":17055,"length1":17,"length2":19},{"diffs":[[0,"ns] "],[-1,"<<3)"],[0," ;\n "]],"start1":17110,"start2":17110,"length1":12,"length2":8}]],"length":23411,"saved":false}
{"ts":1351017259682,"patch":[[{"diffs":[[0,"tations]"],[-1,"  "],[0,";\n    }\n"]],"start1":17105,"start2":17105,"length1":18,"length2":16}]],"length":23409,"saved":false}
{"ts":1351017287859,"patch":[[{"diffs":[[0,"faceVal])\n    {\n"],[1,"        console.log(cubieVal.toString(2), cubieState.toString(2));\n"],[0,"        return c"]],"start1":17024,"start2":17024,"length1":32,"length2":99}]],"length":23476,"saved":false}
{"ts":1351017329584,"patch":[[{"diffs":[[0,"tring(2)"],[1,",  ,cubieVal | RubixState.newFaceMap[face][faceVal][rotations])/toString(2)"],[0,");\n     "]],"start1":17096,"start2":17096,"length1":16,"length2":91}]],"length":23551,"saved":false}
{"ts":1351017332444,"patch":[[{"diffs":[[0,"ations])"],[-1,"/"],[1,"."],[0,"toString"]],"start1":17159,"start2":17159,"length1":17,"length2":17}]],"length":23551,"saved":false}
{"ts":1351017336027,"patch":[[{"diffs":[[0,"g(2),  ,"],[1,"("],[0,"cubieVal"]],"start1":17100,"start2":17100,"length1":16,"length2":17}]],"length":23552,"saved":false}
{"ts":1351017344891,"patch":[[{"diffs":[[0,"ring(2),"],[1,"(RubixState.newFaceMap[face][faceVal][rotations]).toString(2)"],[0,"  ,(cubi"]],"start1":17097,"start2":17097,"length1":16,"length2":77}]],"length":23613,"saved":false}
{"ts":1351017427360,"patch":[[{"diffs":[[0,"log("],[-1,"cubieVal.toString(2), cubieState.toString(2),("],[0,"Rubi"]],"start1":17056,"start2":17056,"length1":54,"length2":8},{"diffs":[[0,"ons]"],[-1,").toString(2)  ,(cubieVal | RubixState.newFaceMap[face][faceVal][rotations]).toString(2)"],[1,",faceVal"],[0,");\n "]],"start1":17103,"start2":17103,"length1":96,"length2":16}]],"length":23487,"saved":false}
{"ts":1351017443967,"patch":[[{"diffs":[[0,"log("],[-1,"\""],[0,"in"],[-1,"\""],[1,"dex"],[0,");\n "]],"start1":16318,"start2":16318,"length1":12,"length2":13}]],"length":23488,"saved":false}
{"ts":1351017449704,"patch":[[{"diffs":[[0,"ole.log("],[-1,"index"],[1,"cubie"],[0,");\n     "]],"start1":16314,"start2":16314,"length1":21,"length2":21}]],"length":23488,"saved":false}
{"ts":1351017473388,"patch":[[{"diffs":[[0,"    console.log("],[1,"faceVal,"],[0,"RubixState.newFa"]],"start1":17045,"start2":17045,"length1":32,"length2":40},{"diffs":[[0,"ons]"],[-1,",faceVal"],[0,");\n "]],"start1":17112,"start2":17112,"length1":16,"length2":8}]],"length":23488,"saved":false}
{"ts":1351017586842,"patch":[[{"diffs":[[0,") % 8];\n        "],[1,"//"],[0,"console.log(indi"]],"start1":16661,"start2":16661,"length1":32,"length2":34}]],"length":23490,"saved":false}
{"ts":1351017663160,"patch":[[{"diffs":[[0,"dicies[("],[1,"("],[0,"index + "]],"start1":16630,"start2":16630,"length1":16,"length2":17},{"diffs":[[0,"ations))"],[1,")"],[0," % 8];\n "]],"start1":16655,"start2":16655,"length1":16,"length2":17}]],"length":23492,"saved":false}
{"ts":1351017684551,"patch":[[{"diffs":[[0,"tations]"],[1,",cubieVal | RubixState.newFaceMap[face][faceVal][rotations"],[0,");\n     "]],"start1":17112,"start2":17112,"length1":16,"length2":74}]],"length":23550,"saved":false}
{"ts":1351017696117,"patch":[[{"diffs":[[0,"otations"],[1,"]"],[0,");\n     "]],"start1":17170,"start2":17170,"length1":16,"length2":17}]],"length":23551,"saved":false}
{"ts":1351017731996,"patch":[[{"diffs":[[0,"ole.log("],[1,"cubieStatem "],[0,"faceVal,"]],"start1":17057,"start2":17057,"length1":16,"length2":28}]],"length":23563,"saved":false}
{"ts":1351017733518,"patch":[[{"diffs":[[0,"bieState"],[-1,"m "],[1,","],[0,"faceVal,"]],"start1":17067,"start2":17067,"length1":18,"length2":17}]],"length":23562,"saved":false}
{"ts":1351017777258,"patch":[[{"diffs":[[0,"ole.log("],[-1,"indicies"],[1,"state.toString()"],[0,");\n};\n\nR"]],"start1":16819,"start2":16819,"length1":24,"length2":32}]],"length":23570,"saved":false}
{"ts":1351017780958,"patch":[[{"diffs":[[0,");   \n    }\n    "],[1,"    console.log(state.toString());\n"],[0,"\n    for (index "]],"start1":16449,"start2":16449,"length1":32,"length2":67}]],"length":23605,"saved":false}
{"ts":1351017797272,"patch":[[{"diffs":[[0,"console.log("],[-1,"state.toString("],[1,"JSON.stringify(state"],[0,"));\n\n    for"]],"start1":16469,"start2":16469,"length1":39,"length2":44}]],"length":23610,"saved":false}
{"ts":1351017800462,"patch":[[{"diffs":[[0,"     \n    }\n"],[1,"    "],[0,"    console."]],"start1":16839,"start2":16839,"length1":24,"length2":28},{"diffs":[[0,"log("],[-1,"state.toString("],[1,"JSON.stringify(state"],[0,"));\n"]],"start1":16867,"start2":16867,"length1":23,"length2":28}]],"length":23619,"saved":false}
{"ts":1351017817735,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"console."]],"start1":16711,"start2":16711,"length1":18,"length2":16}]],"length":23617,"saved":false}
{"ts":1351017862116,"patch":[[{"diffs":[[0,"   }"],[-1,"\n        console.log(JSON.stringify(state));"],[0,"\n\n  "]],"start1":16456,"start2":16456,"length1":52,"length2":8},{"diffs":[[0,"log("],[-1,"JSON.stringify("],[0,"state)"],[-1,")"],[0,";\n};"]],"start1":16821,"start2":16821,"length1":30,"length2":14}]],"length":23557,"saved":false}
{"ts":1351017924498,"patch":[[{"diffs":[[0,"ole.log("],[1,"JSON.stringify("],[0,"state)"],[1,")"],[0,";\n};\n\nRu"]],"start1":16817,"start2":16817,"length1":22,"length2":38}]],"length":23573,"saved":false}
{"ts":1351017963663,"patch":[[{"diffs":[[0,"fer["],[-1,"indicies["],[0,"index]"],[-1,"]"],[0,";   "]],"start1":16771,"start2":16771,"length1":24,"length2":14}]],"length":23563,"saved":false}
{"ts":1351017982703,"patch":[[{"diffs":[[0,"x];\n"],[-1,"        console.log(cubie);"],[0,"\n   "]],"start1":16298,"start2":16298,"length1":35,"length2":8},{"diffs":[[0,"  }\n"],[-1,"        console.log(JSON.stringify(state));\n"],[0,"};\n\n"]],"start1":16764,"start2":16764,"length1":52,"length2":8}]],"length":23492,"saved":false}
{"ts":1351017984830,"patch":[[{"diffs":[[0,"8];\n"],[-1,"        console.log(indicies[index], newIndex);\n"],[0,"    "]],"start1":16636,"start2":16636,"length1":56,"length2":8}]],"length":23444,"saved":false}
{"ts":1351017996647,"patch":[[{"diffs":[[0,"(state, "],[-1,"1"],[1,"0"],[0,", 1);\n  "]],"start1":7020,"start2":7020,"length1":17,"length2":17}]],"length":23444,"saved":false}
{"ts":1351018007863,"patch":[[{"diffs":[[0,"ole.log("],[1,"i,j"],[0,"RubixSta"]],"start1":7047,"start2":7047,"length1":16,"length2":19}]],"length":23447,"saved":false}
{"ts":1351018009388,"patch":[[{"diffs":[[0,".log(i,j"],[1,","],[0,"RubixSta"]],"start1":7050,"start2":7050,"length1":16,"length2":17}]],"length":23448,"saved":false}
{"ts":1351018049081,"patch":[[{"diffs":[[0,"    }\n\n\n    "],[1,"for(var i =0; i < 6; i++)\n    {\n        for(var j = 0; j < 3; j++)\n    }"],[0,"\n    RubixSt"]],"start1":6986,"start2":6986,"length1":24,"length2":96}]],"length":23520,"saved":false}
{"ts":1351018051738,"patch":[[{"diffs":[[0,"j < 3; j++)\n"],[1,"        {\n            \n        }\n"],[0,"    }\n    Ru"]],"start1":7053,"start2":7053,"length1":24,"length2":57}]],"length":23553,"saved":false}
{"ts":1351018062986,"patch":[[{"diffs":[[0,"       \n"],[-1,"        }\n    }\n"],[0,"    Rubi"]],"start1":7080,"start2":7080,"length1":32,"length2":16},{"diffs":[[0,"(state, "],[-1,"0, 1"],[1,"i, j"],[0,");\n     "]],"start1":7109,"start2":7109,"length1":20,"length2":20},{"diffs":[[0,"state));"],[1,"\n        }\n    }"],[0,"\n\n    //"]],"start1":7168,"start2":7168,"length1":16,"length2":32}]],"length":23553,"saved":false}
{"ts":1351018073772,"patch":[[{"diffs":[[0,"           \n"],[1,"    "],[0,"    RubixSta"]],"start1":7076,"start2":7076,"length1":24,"length2":28}]],"length":23557,"saved":false}
{"ts":1351018130039,"patch":[[{"diffs":[[0,"j = "],[-1,"0"],[1,"1"],[0,"; j < "],[-1,"3"],[1,"4"],[0,"; j+"]],"start1":7046,"start2":7046,"length1":16,"length2":16},{"diffs":[[0,"ng(state));\n"],[1,"        RubixState\n"],[0,"        }\n  "]],"start1":7169,"start2":7169,"length1":24,"length2":43}]],"length":23576,"saved":false}
{"ts":1351018134097,"patch":[[{"diffs":[[0,"));\n"],[-1,"        RubixState\n"],[0,"    "]],"start1":7177,"start2":7177,"length1":27,"length2":8}]],"length":23557,"saved":false}
{"ts":1351018186875,"patch":[[{"diffs":[[0,"ng(state));\n"],[1,"        \n"],[0,"        }\n  "]],"start1":7169,"start2":7169,"length1":24,"length2":33}]],"length":23566,"saved":false}
{"ts":1351018305661,"patch":[[{"diffs":[[0,"tate));\n        "],[1,"RubixState.rotate(state, i, (j);"],[0,"\n        }\n    }"]],"start1":7173,"start2":7173,"length1":32,"length2":64}]],"length":23598,"saved":false}
{"ts":1351018317887,"patch":[[{"diffs":[[0,", i,"],[-1," (j"],[1,"2 - (j - 2"],[0,");\n "]],"start1":7212,"start2":7212,"length1":11,"length2":18}]],"length":23605,"saved":false}
{"ts":1351018323997,"patch":[[{"diffs":[[0," (j - 2)"],[1,")"],[0,";\n      "]],"start1":7219,"start2":7219,"length1":16,"length2":17}]],"length":23606,"saved":false}
{"ts":1351018334855,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        console.log(cubieState,faceVal,RubixState.newFaceMap[face][faceVal][rotations],cubieVal | RubixState.newFaceMap[face][faceVal][rotations]);\n"],[0,"    "]],"start1":17085,"start2":17085,"length1":156,"length2":8}]],"length":23458,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351018956030,"patch":[[{"diffs":[[1,"function RubixState(){}\n\n\n/**\n * Creates a Rubik cube with the goal state.\n */\nRubixState.createWithGoalState = function()\n{\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\n};\n\n/**\n * Creates a Rubik Cube from an upper case String of characters from a string \n * from the alphabet: {R,G,Y,B,O,W}.\n * \n * @param text The textual representation of the rubik cube as specified in the \n *      assignment.\n * @return A state for the supplied text.\n */\nRubixState.createWithString = function(text)\n{\n    \n    if(text.length !=  54) \n    {\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\n            \" faces!\");\n        return null;\n    }\n    \n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\n    \n    if(error !== \"\")\n    {\n        console.log(error);\n        return null;\n    }\n    \n    // An array to hold the intermediate state.\n    var faces = [];\n    \n    // Iterate over the input string to organize our data.\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\n    {\n        line = text.substring(index*9,index*9 + 9);\n        \n        // Switch on indices in a manner befitting of a boss.\n        switch(index)\n        {\n            case 1:\n                faces.push(line.substring(0,3));\n                faces.push(line.substring(3,6));\n                faces.push(line.substring(6,9));\n                break;\n            case 2 :\n            case 3 :\n                faces[1] += line.substring(0,3);\n                faces[2] += line.substring(3,6);\n                faces[3] += line.substring(6,9);\n                break;\n            default:\n                faces.push(line);\n                break;\n        }        \n    }\n    \n    // Splits the strings into character arrays.\n    for(var face in faces)\n    {\n        faces[face] = faces[face].split('');\n    }\n    \n    // Check the center cubies before advancing.\n    for(index = 0; index < faces.length; index ++)\n    {\n        if(RubixState.faceValues[index] !== faces[index][4])\n        {\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\n                 \" is wrong!\");\n            return null;\n        }\n    }\n        \n\n    /*\n             00 08 01\n             09 -R 10\n             02 11 03\n    00 09 02 02 11 03 03 10 01\n    12 -G 13 13 -Y 14 14 -B 15\n    04 16 05 05 17 06 06 18 07\n             05 17 06\n             16 -O 18\n             04 19 07\n             04 19 07\n             12 -W 15\n             00 08 01   \n             \n              0  1  2\n              3  R  5\n              6  7  8\n     9 10 11 12 13 14 15 16 17\n    18  G 20 21  Y 23 24  B 26\n    27 28 29 30 31 32 33 34 35\n             36 37 38\n             39  O 41\n             42 43 44\n             45 46 47\n             48  W 50\n             51 52 53\n  \n    */\n    var state = new Uint8Array(new ArrayBuffer(20));\n\n    try{\n        RubixState.faceSet = [0,0,0,0,0,0];\n        RubixState.edgeWindowSum = 0;\n        \n        //corners\n        state[0]  = RubixState.processCubie([[faces[0][0],0],[faces[5][6],5],[faces[1][0],1]]);\n        \n        state[1]  = RubixState.processCubie([[faces[0][2],0],[faces[5][8],5],[faces[3][2],3]]);\n        \n        state[2]  = RubixState.processCubie([[faces[0][6],0],[faces[2][0],2],[faces[1][2],1]]);\n        state[3]  = RubixState.processCubie([[faces[0][8],0],[faces[2][2],2],[faces[3][0],3]]);\n        state[4]  = RubixState.processCubie([[faces[5][0],5],[faces[4][6],4],[faces[1][6],1]]);\n        state[5]  = RubixState.processCubie([[faces[2][6],2],[faces[4][0],4],[faces[1][8],1]]);\n        state[6]  = RubixState.processCubie([[faces[2][8],2],[faces[4][2],4],[faces[3][6],3]]);\n        state[7]  = RubixState.processCubie([[faces[5][2],5],[faces[4][8],4],[faces[3][8],3]]);\n\n        // Check the corners for validity before wasting cycles on the sides.\n        if(((RubixState.faceSet[0]+RubixState.faceSet[4]) % 3) + \n            ((RubixState.faceSet[1] + RubixState.faceSet[3]) % 3) + \n            ((RubixState.faceSet[2] + RubixState.faceSet[5]) % 3) !== 0)\n        {\n            RubixState.faceSet.length = 0;\n            throw \"RotCorner\";\n        }\n        \n        RubixState.faceSet.length = 0;\n        \n        //sides\n        state[8]  = RubixState.processCubie([[faces[0][1],0],[faces[5][7],5]], 8);\n        state[9]  = RubixState.processCubie([[faces[0][3],0],[faces[1][1],1]], 9);\n        state[10] = RubixState.processCubie([[faces[0][5],0],[faces[3][1],3]],10);\n        state[11] = RubixState.processCubie([[faces[0][7],0],[faces[2][1],2]],11);\n        state[12] = RubixState.processCubie([[faces[5][3],5],[faces[1][3],1]],12);\n        state[13] = RubixState.processCubie([[faces[2][3],2],[faces[1][5],1]],13);\n        state[14] = RubixState.processCubie([[faces[2][5],2],[faces[3][3],3]],14);\n        state[15] = RubixState.processCubie([[faces[5][5],5],[faces[3][5],3]],15);\n        state[16] = RubixState.processCubie([[faces[4][3],4],[faces[1][7],1]],16);\n        state[17] = RubixState.processCubie([[faces[2][7],2],[faces[4][1],4]],17);\n        state[18] = RubixState.processCubie([[faces[4][5],4],[faces[3][7],3]],18);\n        state[19] = RubixState.processCubie([[faces[5][1],5],[faces[4][7],4]],19);\n        \n        // Do the edge pairity check.\n        if(RubixState.edgeWindowSum % 2 === 1)\n        {\n            RubixState.edgeWindowSum =0;\n            throw \"RotEdge\";\n        }\n        RubixState.edgeWindowSum =0;\n    }catch(error)\n    {\n\n        if(error ===\"CError\")\n        {\n            console.log(\"One of your corners has an invalid configuration of colors.\");\n        }\n        else if(error === \"EError\")\n        {\n            console.log(\"One of your edges has an invalid configuration of colors.\");\n        }\n        else if (error === \"FError\")\n        {\n            console.log(\"One of your faces could not be found on a cubie.\");    \n        }\n        else if (error === \"DupeColorError\")\n        {\n            console.log(\"One of your cubies has duplicate colors.\");\n        }\n        else if (error === \"RotCorner\")\n        {\n            console.log(\"One of your corner cubies is rotated\");\n        }\n        else if (error === \"RotEdge\")\n        {\n            console.log(\"One of your edge cubies is rotated\");\n        }\n        else if (error === \"EWindowError\")\n        {\n            console.log(\"One of the edge cubies did not match a valid cube edge.\");\n        }        \n        else\n        {\n            console.log(error);   \n        }\n    }\n\n\n    for(var i =0; i < 6; i++)\n    {\n        for(var j = 1; j < 4; j++)\n        {\n            \n        RubixState.rotate(state, i, j);\n        console.log(i,j,RubixState.toString(state));\n        RubixState.rotate(state, i,2 - (j - 2));\n        }\n    }\n\n    //return RubixState.verifyState(state) ? state : null;\n};\n\nRubixState.toString = function(state)\n{\n    var tempIndex = 0, toReturn =\"   \", focusedCubie=\"\",offset = 0, limit = 0;\n    \n    RubixState.outputFaces.length = 54;\n    RubixState.outputFaces[4]  = 'R';\n    RubixState.outputFaces[19] = 'G';\n    RubixState.outputFaces[22] = 'Y';\n    RubixState.outputFaces[25] = 'B';\n    RubixState.outputFaces[40] = 'O';\n    RubixState.outputFaces[49] = 'W';      \n    \n    for(var index=0; index < state.length; index++) \n    {\n        tempIndex = RubixState.cubieOutputMapping[index].faces.indexOf(state[index] & 7);\n        \n        if(tempIndex == -1)\n        {\n            console.log(index, state[index] & 7, state[index] >> 3);\n            return \"Bad State\";\n        }\n        \n        focusedCubie = RubixState.cubies.indicies[state[index] >> 3];\n        limit = index < 8 ? 3 : 2;\n        \n        for(tempIndex, offset = 0; offset < limit;tempIndex++,offset++)\n        {        \n            tempIndex = tempIndex % limit;\n            RubixState.outputFaces[\n                    RubixState.cubieOutputMapping[index].absolute[tempIndex]] =\n                        RubixState.cubies[focusedCubie].printOrder[offset];\n        }\n    }\n    \n    for(index = 0; index < RubixState.outputFaces.length; index++)\n    {\n        toReturn +=RubixState.outputFaces[index];\n        \n        if(index === 2 || index === 5 ||  index === 35|| \n            index === 38 || index === 41 || index === 44 ||\n            index === 47 || index === 50 || index === 53)\n        {\n            toReturn +=\"\\n   \";    \n        }\n        else if(index === 8 ||\n            index === 17 || index === 26   )\n        {\n            toReturn +='\\n';   \n        }\n    }\n    \n    return toReturn;\n};\n\nRubixState.processCubie = function (faces, cubie)\n{\n    var cubieSum = 0;\n    for(var index in faces)\n    {\n        cubieSum += RubixState.faceMap[faces[index][0]].value;        \n    }\n    return (faces.length === 3 ? RubixState.processCorner:RubixState.processSide)(faces, cubieSum, cubie);\n};\n\n/**\n * Processes an array of faces and converts it to the representation for a cubie.\n * In all of these cases the ordering of the faces matters logically, eg RYB is oriented\n * by the red face and the preceding faces are Y then B.\n */\nRubixState.processCorner = function(faces, cubieSum)\n{\n    var composition = 0, testString ='';\n    \n    for(var index = 0; index <= faces.length;  index++)\n    {\n        if(index === faces.length)\n        {\n            throw \"CError\";    \n        }\n        else if(faces[index][0] === 'R' || faces[index][0] === 'O')\n        {\n            break;   \n        }\n    }    \n    switch (cubieSum)\n    {\n        // RYG\n        case 3:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // RBY\n        case 5:\n            testString = 'RBY';\n            composition = (RubixState.cubies.RBY.value*8)+faces[index][1];\n            break;\n        // RGW\n        case 6:\n            testString = 'RGW';\n            composition = (RubixState.cubies.RGW.value*8)+faces[index][1];\n            break;\n        // OGY\n        case 7:\n            testString = 'OGY';\n            composition = (RubixState.cubies.OGY.value*8)+faces[index][1];\n            break;\n        // RWB\n        case 8:\n            testString = 'RWB';\n            composition = (RubixState.cubies.RWB.value*8)+faces[index][1];\n            break;\n        // OYB\n        case 9:\n            testString = 'OYB';\n            composition = (RubixState.cubies.OYB.value*8)+faces[index][1];\n            break;\n        // OWG\n        case 10:\n            testString = 'OWG';\n            composition = (RubixState.cubies.OWG.value*8)+faces[index][1];\n            break;\n        // OBW\n        case 12:  \n            testString = 'OBW';\n            composition = (RubixState.cubies.OBW.value*8)+faces[index][1];\n            break;\n        default:\n            break;\n    }\n    \n    if(!RubixState.cubieIsValid(faces, testString))\n    {\n        throw \"CError\";\n    }\n    \n    return composition;\n};\n\n\nRubixState.processSide = function(faces,cubieSum, cubie)\n{\n    var testString = '',composition = 0;\n    \n    for(var index = 0; index < faces.length;  index++)\n    {\n        if(faces[index][0] === 'R' || faces[index][0] === 'O')\n        {\n            break;   \n        }\n    }    \n    \n    if(index === 2)\n    {\n        switch (cubieSum)\n        {\n            //GY\n            case 3:\n                index = RubixState.faceIndex(faces, 'G');\n                testString = 'GY';\n                composition = (RubixState.cubies.GY.value*8)+faces[index][1];\n                break;\n            // YB\n            case 5:\n                index = RubixState.faceIndex(faces, 'Y');\n                testString = 'YB';\n                composition = (RubixState.cubies.YB.value*8)+faces[index][1];\n                break;\n            // WG\n            case 6:\n                index = RubixState.faceIndex(faces, 'W');\n                testString = 'WG';\n                composition = (RubixState.cubies.WG.value*8)+faces[index][1];\n                break;\n            // BW\n            case 8:\n                index = RubixState.faceIndex(faces, 'B');\n                testString = 'BW';\n                composition = (RubixState.cubies.BW.value*8)+faces[index][1];\n                break;\n\t\t\t\n\t\t\tdefault:   \n                break;\n        }\n    }\n    else\n    {\n        switch(cubieSum)\n        {\n            // RG\n            case 1:\n                testString = 'RG';\n                composition = (RubixState.cubies.RG.value*8)+faces[index][1];\n                break;\n            // RY\n            case 2:\n                testString = 'RY';\n                composition = (RubixState.cubies.RY.value*8)+faces[index][1];\n                break;\n            // RB\n            case 3:\n                testString = 'RB';\n                composition = (RubixState.cubies.RB.value*8)+faces[index][1];\n                break;\n            // RW, OG\n            case 5:\n                if(faces[0][0] === 'R' || faces[0][0] === 'W')\n                {\n                    testString = 'RW';\n                    composition = (RubixState.cubies.RW.value*8)+faces[index][1];   \n                }\n                else\n                {\n                    testString = 'OG';\n                    composition = (RubixState.cubies.OG.value*8)+faces[index][1];                    \n                }\n                break;\n            // OY\n            case 6:\n                testString = 'OY';\n                composition = (RubixState.cubies.OY.value*8)+faces[index][1];\n                break;\n            //OB\n            case 7:\n                testString = 'OB';\n                composition = (RubixState.cubies.OB.value*8)+faces[index][1];\n                break;\n            //OW\n            case 9:\n                testString = 'OW';\n                composition = (RubixState.cubies.OW.value*8)+faces[index][1];\n                break;\n            default :\n                break;\n        \n        }\n    }\n    \n    if(!RubixState.cubieIsValid(faces, testString, cubie))\n    {\n        throw \"EError\";\n    }\n    \n    return composition;\n};\n\nRubixState.faceIndex = function(faces, faceChar)\n{\n    for(var index = 0; index < faces.length;  index++)\n    {\n        if(faces[index][0] == faceChar)\n        {\n            break;   \n        }\n    }    \n    \n    if(index == faces.length)\n    {\n        throw \"FError\";    \n    }\n    \n    return index;\n};\n\n\n\nRubixState.cubieIsValid = function(faces, faceComp, cubie)\n{    \n    var previousVals ='',found =false;\n    for(var index in faces)\n    {\n        // Verify that the colors in the cubie should be there.\n        if(faceComp.indexOf(faces[index][0]) === -1)\n        {\n            return false;   \n        }\n        \n        // Do parity checks\n        if(faces.length == 3)\n        {\n            RubixState.faceSet[faces[index][1]] += RubixState.cubies[faceComp].orientValues[faces[index][0]];\n        }\n        else if(cubie && RubixState.edgeWindows[cubie] == faces[index][1])\n\n        {\n            RubixState.edgeWindowSum += RubixState.cubies[faceComp].orientValues[faces[index][0]];\n            found = true;\n        }\n       \n        // Do dupe checking.\n        if(previousVals.indexOf(faces[index][0]) != -1)\n        {\n            throw \"DupeColorError\";    \n        }\n        \n        previousVals += faces[index][0];\n    }\n    \n    if(cubie && !found)\n    {\n        throw \"EWindowError\";   \n    }\n    \n    return true;\n};\n\nRubixState.rotate =function(state, face, rotations)\n{\n    var indicies = RubixState.sideLookUpTable[face];\n    \n     /*\n     * cubie - holds the cubie index.\n     * size - A generic size variable.\n     * newIndex - Holds a modified index.\n     * cFace - A cubieFace.\n     * offset - A generic offset variable.\n    */\n    var cubie, size, newIndex;\n    \n    // Iterate over the indicies and calculate values of the rotated cubies.\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\n    {\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 3\n        cubie = indicies[index];\n\n        RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\n                state[cubie], face, rotations);   \n    }\n\n    for (index = 0, size = indicies.length; index < size; index++)\n    {\n        // Calculate the index of the new cubie index after rotation.\n        newIndex = indicies[((index + (2 * rotations))) % 8];\n        \n        state[newIndex] = RubixState.scratchBuffer[index];      \n    }\n};\n\nRubixState.rotateFace = function(cubieState, face, rotations)\n{\n    \n    var faceVal = cubieState & 7;   \n    var cubieVal = cubieState  - faceVal;\n\n\n    if ( RubixState.newFaceMap[face][faceVal])\n    {\n        return cubieVal | RubixState.newFaceMap[face][faceVal][rotations];\n    }\n    else \n    {\n        return cubieState;   \n    }\n    \n};\n\nRubixState.isEqual = function(\n\n// The face value map used in tanslating moves to something human readable. \nRubixState.faceValues = ['R','G','Y','B','O','W'];\n\nRubixState.faceMap = {\n    'R':{\"value\":0},\n    'G':{\"value\":1},\n    'Y':{\"value\":2},\n    'B':{\"value\":3},\n    'O':{\"value\":4},\n    'W':{\"value\":5}\n};\n/**\n * Defines cubie locations for a side.\n */\nRubixState.sideLookUpTable = [\n    [ 0, 8, 1,10, 3,11, 2, 9], // red, back\n    [ 0, 9, 2,13, 5,16, 4,12], // green, left\n    [ 2,11, 3,14, 6,17, 5,13], // yellow, top\n    [ 3,10, 1,15, 7,18, 6,14], // blue, right\n    [ 5,17, 6,18, 7,19, 4,16], // orange, front    \n    [ 4,19, 7,15, 1, 8, 0,12]  // white, bottom\n];\n\nRubixState.faceSet = [];\n\nRubixState.edgeWindowSum = 0;\n\nRubixState.edgeWindows ={\n  8:0,\n  9:1,\n  10:3,\n  11:0,\n  12:5,\n  13:2,\n  14:2,\n  15:5,\n  16:1,\n  17:4,\n  18:3,\n  19:4  \n};\n\nRubixState.outputFaces = [];\n\nRubixState.cubieOutputMapping={\n   0:{\"absolute\":[ 0, 9,51], \"faces\":[0,1,5]},\n   1:{\"absolute\":[ 2,53,17], \"faces\":[0,5,3]},\n   2:{\"absolute\":[ 6,12,11], \"faces\":[0,2,1]},\n   3:{\"absolute\":[ 8,15,14], \"faces\":[0,3,2]},\n   4:{\"absolute\":[42,45,27], \"faces\":[4,5,1]},\n   5:{\"absolute\":[36,29,30], \"faces\":[4,1,2]},\n   6:{\"absolute\":[38,32,33], \"faces\":[4,2,3]},\n   7:{\"absolute\":[44,35,47], \"faces\":[4,3,5]},\n   8:{\"absolute\":[ 1,52],    \"faces\":[0,5]},\n   9:{\"absolute\":[ 3,10],    \"faces\":[0,1]},\n  10:{\"absolute\":[ 5,16],    \"faces\":[0,3]},\n  11:{\"absolute\":[ 7,13],    \"faces\":[0,2]},\n  12:{\"absolute\":[48,18],    \"faces\":[5,1]},\n  13:{\"absolute\":[20,21],    \"faces\":[1,2]},\n  14:{\"absolute\":[23,24],    \"faces\":[2,3]},\n  15:{\"absolute\":[26,50],    \"faces\":[3,5]},\n  16:{\"absolute\":[39,28],    \"faces\":[4,1]},\n  17:{\"absolute\":[37,31],    \"faces\":[4,2]},\n  18:{\"absolute\":[41,34],    \"faces\":[4,3]},\n  19:{\"absolute\":[43,46],    \"faces\":[4,5]}\n};\n\n/**\n * The scratch buffer for rotations. This reduces the number of times we have to \n * create a temporary buffer.\n */\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(9));\n\n//Leading character Dominates\nRubixState.cubies = {\n    \"indicies\":[\"RGW\", \"RWB\",\"RYG\",\"RBY\",\"OWG\",\"OGY\",\"OYB\",\"OBW\",\"RW\",\"RG\",\"RB\",\n        \"RY\",\"WG\",\"GY\",\"YB\",\"BW\",\"OG\",\"OY\",\"OB\",\"OW\"],\n    \"RGW\":{\"value\":0 ,\"orientValues\":{\"R\":0, \"G\":1, \"W\":2}, \"printOrder\":[\"R\",\"G\",\"W\"]},\n    \"RWB\":{\"value\":1 ,\"orientValues\":{\"R\":0, \"W\":1, \"B\":2}, \"printOrder\":[\"R\",\"W\",\"B\"]},\n    \"RYG\":{\"value\":2 ,\"orientValues\":{\"R\":0, \"Y\":1, \"G\":2}, \"printOrder\":[\"R\",\"Y\",\"G\"]},\n    \"RBY\":{\"value\":3 ,\"orientValues\":{\"R\":0, \"B\":1, \"Y\":2}, \"printOrder\":[\"R\",\"B\",\"Y\"]},\n    \"OWG\":{\"value\":4 ,\"orientValues\":{\"O\":0, \"W\":1, \"G\":2}, \"printOrder\":[\"O\",\"W\",\"G\"]},\n    \"OGY\":{\"value\":5 ,\"orientValues\":{\"O\":0, \"G\":1, \"Y\":2}, \"printOrder\":[\"O\",\"G\",\"Y\"]},\n    \"OYB\":{\"value\":6 ,\"orientValues\":{\"O\":0, \"Y\":1, \"B\":2}, \"printOrder\":[\"O\",\"Y\",\"B\"]},\n    \"OBW\":{\"value\":7 ,\"orientValues\":{\"O\":0, \"B\":1, \"W\":2}, \"printOrder\":[\"O\",\"B\",\"W\"]},\n    \"RW\" :{\"value\":8 ,\"orientValues\":{\"R\":0, \"W\":1},        \"printOrder\":[\"R\",\"W\"]},\n    \"RG\" :{\"value\":9 ,\"orientValues\":{\"R\":0, \"G\":1},        \"printOrder\":[\"R\",\"G\"]},\n    \"RB\" :{\"value\":10,\"orientValues\":{\"R\":0, \"B\":1},        \"printOrder\":[\"R\",\"B\"]},\n    \"RY\" :{\"value\":11,\"orientValues\":{\"R\":0, \"Y\":1},        \"printOrder\":[\"R\",\"Y\"]},\n    \"WG\" :{\"value\":12,\"orientValues\":{\"W\":0, \"G\":1},        \"printOrder\":[\"W\",\"G\"]},\n    \"GY\" :{\"value\":13,\"orientValues\":{\"G\":0, \"Y\":1},        \"printOrder\":[\"G\",\"Y\"]},\n    \"YB\" :{\"value\":14,\"orientValues\":{\"Y\":0, \"B\":1},        \"printOrder\":[\"Y\",\"B\"]},\n    \"BW\" :{\"value\":15,\"orientValues\":{\"B\":0, \"W\":1},        \"printOrder\":[\"B\",\"W\"]},\n    \"OG\" :{\"value\":16,\"orientValues\":{\"O\":0, \"G\":1},        \"printOrder\":[\"O\",\"G\"]},\n    \"OY\" :{\"value\":17,\"orientValues\":{\"O\":0, \"Y\":1},        \"printOrder\":[\"O\",\"Y\"]},\n    \"OB\" :{\"value\":18,\"orientValues\":{\"O\":0, \"B\":1},        \"printOrder\":[\"O\",\"B\"]},\n    \"OW\" :{\"value\":19,\"orientValues\":{\"O\":0, \"W\":1},        \"printOrder\":[\"O\",\"W\"]}  \n};\n\n/**\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\n * defines the new face for a cubie face. \n * \n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\n */\nRubixState.newFaceMap = {\n    0 : {\n        1 : {\n            1 : 5,\n            2 : 3,\n            3 : 2\n        },\n        2 : {\n            1 : 1,\n            2 : 5,\n            3 : 3\n        },\n        3 : {\n            1 : 2,\n            2 : 1,\n            3 : 5\n        },\n        5 : {\n            1 : 3,\n            2 : 2,\n            3 : 1\n        }\n    },\n    1 : {\n        0 : {\n            1 : 2,\n            2 : 4,\n            3 : 5\n        },\n        2 : {\n            1 : 4,\n            2 : 5,\n            3 : 0\n        },\n        4 : {\n            1 : 5,\n            2 : 0,\n            3 : 2\n        },\n        5 : {\n            1 : 0,\n            2 : 2,\n            3 : 4\n        }\n    },\n    2 : {\n        0 : {\n            1 : 3,\n            2 : 4,\n            3 : 1\n        },\n        1 : {\n            1 : 0,\n            2 : 3,\n            3 : 4\n        },\n        3 : {\n            1 : 4,\n            2 : 1,\n            3 : 0\n        },\n        4 : {\n            1 : 1,\n            2 : 0,\n            3 : 3\n        }\n    },\n    3 : {\n        0 : {\n            1 : 5,\n            2 : 4,\n            3 : 2\n        },\n        2 : {\n            1 : 0,\n            2 : 5,\n            3 : 4\n        },\n        4 : {\n            1 : 2,\n            2 : 0,\n            3 : 5\n        },\n        5 : {\n            1 : 4,\n            2 : 2,\n            3 : 0\n        }\n    },\n    4 : {\n        1 : {\n            1 : 2,\n            2 : 3,\n            3 : 5\n        },\n        2 : {\n            1 : 3,\n            2 : 5,\n            3 : 1\n        },\n        3 : {\n            1 : 5,\n            2 : 1,\n            3 : 2\n        },\n        5 : {\n            1 : 1,\n            2 : 2,\n            3 : 3\n        }\n    },\n    5 : {\n        0 : {\n            1 : 1,\n            2 : 4,\n            3 : 3\n        },\n        1 : {\n            1 : 4,\n            2 : 3,\n            3 : 0\n        },\n        3 : {\n            1 : 0,\n            2 : 1,\n            3 : 4\n        },\n        4 : {\n            1 : 3,\n            2 : 0,\n            3 : 1\n        }\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":23490}]],"length":23490,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351019083752,"patch":[[{"diffs":[[0," }\n    \n"],[1,"        var equal = true;  \n    \n    /**\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\n     */\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\n    {\n        equal = (state1.cubies[index] === state2.cubies[index]);     \n    }\n\n    return equal;\n    \n"],[0,"};\n\nRubi"]],"start1":17219,"start2":17219,"length1":16,"length2":354}]],"length":23828,"saved":false}
{"ts":1351019093740,"patch":[[{"diffs":[[0,"  }\n"],[-1,"    \n        var equal = true;  \n    \n    /**\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\n     */\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\n    {\n        equal = (state1.cubies[index] === state2.cubies[index]);     \n    }\n\n    return equal;\n    \n"],[0,"};\n\n"]],"start1":17218,"start2":17218,"length1":351,"length2":8}]],"length":23485,"saved":false}
{"ts":1351019097804,"patch":[[{"diffs":[[0,"unction("],[1,")\n{\n    \n}    var equal = true;  \n    \n    /**\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\n     */\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\n    {\n        equal = (state1.cubies[index] === state2.cubies[index]);     \n    }\n\n    return equal;"],[0,"\n\n// The"]],"start1":17248,"start2":17248,"length1":16,"length2":354}]],"length":23823,"saved":false}
{"ts":1351019099470,"patch":[[{"diffs":[[0,"  \n}"],[-1,"    var equal = true;  \n    \n    /**\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\n     */\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\n    {\n        equal = (state1.cubies[index] === state2.cubies[index]);     \n    }\n\n    return equal"],[0,";\n\n/"]],"start1":17262,"start2":17262,"length1":335,"length2":8}]],"length":23496,"saved":false}
{"ts":1351019101125,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"  var equal = true;  \n    \n    /**\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\n     */\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\n    {\n        equal = (state1.cubies[index] === state2.cubies[index]);     \n    }\n\n    return equal;  "],[0,"\n};\n\n// "]],"start1":17256,"start2":17256,"length1":16,"length2":344}]],"length":23824,"saved":false}
{"ts":1351019108928,"patch":[[{"diffs":[[0,"qual = function("],[1,"stateA, stateB"],[0,")\n{\n      var eq"]],"start1":17240,"start2":17240,"length1":32,"length2":46}]],"length":23838,"saved":false}
{"ts":1351019122148,"patch":[[{"diffs":[[0,"ngth = state"],[-1,"1"],[1,"A"],[0,".cubies.leng"]],"start1":17439,"start2":17439,"length1":25,"length2":25},{"diffs":[[0,"tate"],[-1,"1.cubies"],[1,"A"],[0,"[ind"]],"start1":17528,"start2":17528,"length1":16,"length2":9},{"diffs":[[0,"tate"],[-1,"2.cubies"],[1,"B"],[0,"[ind"]],"start1":17546,"start2":17546,"length1":16,"length2":9}]],"length":23824,"saved":false}
{"ts":1351019153239,"patch":[[{"diffs":[[0,"ions"],[-1,", leave if a bad state is found"],[0,".\n  "]],"start1":17369,"start2":17369,"length1":39,"length2":8}]],"length":23793,"saved":false}
{"ts":1351019174856,"patch":[[{"diffs":[[0,"        "],[-1,"equal ="],[1,"if"],[0," (stateA"]],"start1":17479,"start2":17479,"length1":23,"length2":18},{"diffs":[[0,"[index] "],[-1,"="],[1,"!"],[0,"== state"]],"start1":17497,"start2":17497,"length1":17,"length2":17},{"diffs":[[0,"[index])"],[-1,";     "],[1,"\n        {\n            \n        }"],[0,"\n    }\n\n"]],"start1":17515,"start2":17515,"length1":22,"length2":49}]],"length":23815,"saved":false}
{"ts":1351019179109,"patch":[[{"diffs":[[0,"  {\n            "],[1,"return false;    "],[0,"\n        }\n    }"]],"start1":17530,"start2":17530,"length1":32,"length2":49}]],"length":23832,"saved":false}
{"ts":1351019189280,"patch":[[{"diffs":[[0," return "],[-1,"equal"],[1,"true"],[0,";  \n};\n\n"]],"start1":17584,"start2":17584,"length1":21,"length2":20}]],"length":23831,"saved":false}
{"ts":1351019195537,"patch":[[{"diffs":[[0,"B)\n{"],[-1,"\n      var equal = true;  \n "],[0,"   \n"]],"start1":17269,"start2":17269,"length1":36,"length2":8}]],"length":23803,"saved":false}
{"ts":1351019295060,"patch":[[{"diffs":[[0,"gth)"],[-1," & equal"],[0,"; in"]],"start1":17421,"start2":17421,"length1":16,"length2":8}]],"length":23795,"saved":false}
{"ts":1351020571961,"patch":[[{"diffs":[[0,"    "],[-1,"//"],[0,"return "],[-1,"RubixState.verifyState(state) ? state : null"],[1," state"],[0,";\n};"]],"start1":7247,"start2":7247,"length1":61,"length2":21}]],"length":23755,"saved":false}
{"ts":1351020574273,"patch":[[{"diffs":[[0," return "],[-1," "],[0,"state;\n}"]],"start1":7250,"start2":7250,"length1":17,"length2":16}]],"length":23754,"saved":false}
{"ts":1351020961681,"patch":[[{"diffs":[[0,"ue;  \n};"],[1,"\nRubixState.copy = function(state)\n{\n}"],[0,"\n\n// The"]],"start1":17517,"start2":17517,"length1":16,"length2":54}]],"length":23792,"saved":false}
{"ts":1351020963334,"patch":[[{"diffs":[[0,"tate)\n{\n"],[-1,"}"],[1,"    \n};"],[0,"\n\n// The"]],"start1":17554,"start2":17554,"length1":17,"length2":23}]],"length":23798,"saved":false}
{"ts":1351020985977,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"return new Uint8Array(new ArrayBuffer(20)).set(state);"],[0,"\n};\n\n// "]],"start1":17558,"start2":17558,"length1":16,"length2":70}]],"length":23852,"saved":false}
{"ts":1351020987741,"patch":[[{"diffs":[[0,"e;  \n};\n"],[1,"\n"],[0,"RubixSta"]],"start1":17518,"start2":17518,"length1":16,"length2":17}]],"length":23853,"saved":false}
{"ts":1351022573985,"patch":[[{"diffs":[[0,"}\n    }\n    "],[1,"/*"],[0,"\n    for(ind"]],"start1":8435,"start2":8435,"length1":24,"length2":26},{"diffs":[[0,"\n        }\n    }"],[1,"*/"],[0,"\n    \n    return"]],"start1":8931,"start2":8931,"length1":32,"length2":34}]],"length":23857,"saved":false}
{"ts":1351022581991,"patch":[[{"diffs":[[0,"}\n    }\n    "],[-1,"/*"],[0,"\n    for(ind"]],"start1":8435,"start2":8435,"length1":26,"length2":24},{"diffs":[[0," }\n    }"],[-1,"*/"],[0,"\n    \n  "]],"start1":8937,"start2":8937,"length1":18,"length2":16}]],"length":23853,"saved":false}
{"ts":1351022588838,"patch":[[{"diffs":[[0,"\n    }\n\n"],[1,"/*"],[0,"\n    for"]],"start1":6985,"start2":6985,"length1":16,"length2":18},{"diffs":[[0,"        }\n    }\n"],[1,"*/"],[0,"\n    return stat"]],"start1":7232,"start2":7232,"length1":32,"length2":34}]],"length":23857,"saved":false}
{"ts":1351022600319,"patch":[[{"diffs":[[0,"    }\n*/"],[1," \n    console.log(RubixState.toString(state));"],[0,"\n    ret"]],"start1":7242,"start2":7242,"length1":16,"length2":62}]],"length":23903,"saved":false}
{"ts":1351022705293,"patch":[[{"diffs":[[0," stateA."],[-1,"cubies."],[0,"length; "]],"start1":17395,"start2":17395,"length1":23,"length2":16}]],"length":23896,"saved":false}
{"ts":1351022876033,"patch":[[{"diffs":[[0,"20))"],[-1,".set(state)"],[0,";\n};"]],"start1":17648,"start2":17648,"length1":19,"length2":8}]],"length":23885,"saved":false}
{"ts":1351022891227,"patch":[[{"diffs":[[0,"t8Array("],[-1,"new ArrayBuffer(2"],[1,"state.buffer.slice("],[0,"0));\n};\n"]],"start1":17624,"start2":17624,"length1":33,"length2":35}]],"length":23887,"saved":false}
{"ts":1351022912495,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    console.log(new Uint8Array(state.buffer.slice(0)));\n"],[0,"    return n"]],"start1":17594,"start2":17594,"length1":24,"length2":80}]],"length":23943,"saved":false}
{"ts":1351023022958,"patch":[[{"diffs":[[0,"ole.log("],[1,"statem"],[0,"new Uint"]],"start1":17614,"start2":17614,"length1":16,"length2":22}]],"length":23949,"saved":false}
{"ts":1351023024622,"patch":[[{"diffs":[[0,"og(state"],[-1,"m"],[1,","],[0,"new Uint"]],"start1":17619,"start2":17619,"length1":17,"length2":17}]],"length":23949,"saved":false}
{"ts":1351023074237,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    console.log(state)l\n"],[0,"    console."]],"start1":17594,"start2":17594,"length1":24,"length2":48}]],"length":23973,"saved":false}
{"ts":1351023077057,"patch":[[{"diffs":[[0,"g(state)"],[-1,"l"],[1,";"],[0,"\n    con"]],"start1":17620,"start2":17620,"length1":17,"length2":17}]],"length":23973,"saved":false}
{"ts":1351023110053,"patch":[[{"diffs":[[0,"console.log("],[1,"\"hello\","],[0,"state);\n    "]],"start1":17610,"start2":17610,"length1":24,"length2":32}]],"length":23981,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351023565569,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    console.log(\"hello\",state);\n    console.log(state,new Uint8Array(state.buffer.slice(0)));\n"],[0,"    "]],"start1":17602,"start2":17602,"length1":102,"length2":8},{"diffs":[[0,"}\n};"],[-1,"function RubixState(){}\n\n\n/**\n * Creates a Rubik cube with the goal state.\n */\nRubixState.createWithGoalState = function()\n{\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\n};\n\n/**\n * Creates a Rubik Cube from an upper case String of characters from a string \n * from the alphabet: {R,G,Y,B,O,W}.\n * \n * @param text The textual representation of the rubik cube as specified in the \n *      assignment.\n * @return A state for the supplied text.\n */\nRubixState.createWithString = function(text)\n{\n    \n    if(text.length !=  54) \n    {\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\n            \" faces!\");\n        return null;\n    }\n    \n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\n    \n    if(error !== \"\")\n    {\n        console.log(error);\n        return null;\n    }\n    \n    // An array to hold the intermediate state.\n    var faces = [];\n    \n    // Iterate over the input string to organize our data.\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\n    {\n        line = text.substring(index*9,index*9 + 9);\n        \n        // Switch on indices in a manner befitting of a boss.\n        switch(index)\n        {\n            case 1:\n                faces.push(line.substring(0,3));\n                faces.push(line.substring(3,6));\n                faces.push(line.substring(6,9));\n                break;\n            case 2 :\n            case 3 :\n                faces[1] += line.substring(0,3);\n                faces[2] += line.substring(3,6);\n                faces[3] += line.substring(6,9);\n                break;\n            default:\n                faces.push(line);\n                break;\n        }        \n    }\n    \n    // Splits the strings into character arrays.\n    for(var face in faces)\n    {\n        faces[face] = faces[face].split('');\n    }\n    \n    // Check the center cubies before advancing.\n    for(index = 0; index < faces.length; index ++)\n    {\n        if(RubixState.faceValues[index] !== faces[index][4])\n        {\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\n                 \" is wrong!\");\n            return null;\n        }\n    }\n        \n\n    /*\n             00 08 01\n             09 -R 10\n             02 11 03\n    00 09 02 02 11 03 03 10 01\n    12 -G 13 13 -Y 14 14 -B 15\n    04 16 05 05 17 06 06 18 07\n             05 17 06\n             16 -O 18\n             04 19 07\n             04 19 07\n             12 -W 15\n             00 08 01   \n                      0  1  2\n              3  R  5\n              6  7  8\n     9 10 11 12 13 14 15 16 17\n    18  G 20 21  Y 23 24  B 26\n    27 28 29 30 31 32 33 34 35\n             36 37 38\n             39  O 41\n             42 43 44\n             45 46 47\n             48  W 50\n             51 52 53\n    */\n    \n    var state = new Uint8Array(new ArrayBuffer(20));\n\n    try{\n        RubixState.faceSet = [0,0,0,0,0,0];\n        RubixState.edgeWindowSum = 0;\n        \n        //corners\n        state[0]  = RubixState.processCubie([[faces[0][0],0],[faces[5][6],5],[faces[1][0],1]]);\n        \n        state[1]  = RubixState.processCubie([[faces[0][2],0],[faces[5][8],5],[faces[3][2],3]]);\n        \n        state[2]  = RubixState.processCubie([[faces[0][6],0],[faces[2][0],2],[faces[1][2],1]]);\n        state[3]  = RubixState.processCubie([[faces[0][8],0],[faces[2][2],2],[faces[3][0],3]]);\n        state[4]  = RubixState.processCubie([[faces[5][0],5],[faces[4][6],4],[faces[1][6],1]]);\n        state[5]  = RubixState.processCubie([[faces[2][6],2],[faces[4][0],4],[faces[1][8],1]]);\n        state[6]  = RubixState.processCubie([[faces[2][8],2],[faces[4][2],4],[faces[3][6],3]]);\n        state[7]  = RubixState.processCubie([[faces[5][2],5],[faces[4][8],4],[faces[3][8],3]]);\n\n        // Check the corners for validity before wasting cycles on the sides.\n        if(((RubixState.faceSet[0]+RubixState.faceSet[4]) % 3) + \n            ((RubixState.faceSet[1] + RubixState.faceSet[3]) % 3) + \n            ((RubixState.faceSet[2] + RubixState.faceSet[5]) % 3) !== 0)\n        {\n            RubixState.faceSet.length = 0;\n            throw \"RotCorner\";\n        }\n        \n        RubixState.faceSet.length = 0;\n        \n        //sides\n        state[8]  = RubixState.processCubie([[faces[0][1],0],[faces[5][7],5]], 8);\n        state[9]  = RubixState.processCubie([[faces[0][3],0],[faces[1][1],1]], 9);\n        state[10] = RubixState.processCubie([[faces[0][5],0],[faces[3][1],3]],10);\n        state[11] = RubixState.processCubie([[faces[0][7],0],[faces[2][1],2]],11);\n        state[12] = RubixState.processCubie([[faces[5][3],5],[faces[1][3],1]],12);\n        state[13] = RubixState.processCubie([[faces[2][3],2],[faces[1][5],1]],13);\n        state[14] = RubixState.processCubie([[faces[2][5],2],[faces[3][3],3]],14);\n        state[15] = RubixState.processCubie([[faces[5][5],5],[faces[3][5],3]],15);\n        state[16] = RubixState.processCubie([[faces[4][3],4],[faces[1][7],1]],16);\n        state[17] = RubixState.processCubie([[faces[2][7],2],[faces[4][1],4]],17);\n        state[18] = RubixState.processCubie([[faces[4][5],4],[faces[3][7],3]],18);\n        state[19] = RubixState.processCubie([[faces[5][1],5],[faces[4][7],4]],19);\n        \n        // Do the edge pairity check.\n        if(RubixState.edgeWindowSum % 2 === 1)\n        {\n            RubixState.edgeWindowSum = 0;\n            throw \"RotEdge\";\n        }\n        RubixState.edgeWindowSum = 0;\n    }\n    catch(error)\n    {\n        if(error === \"CError\")\n        {\n            console.log(\"One of your corners has an invalid configuration of colors.\");\n        }\n        else if(error === \"EError\")\n        {\n            console.log(\"One of your edges has an invalid configuration of colors.\");\n        }\n        else if (error === \"FError\")\n        {\n            console.log(\"One of your faces could not be found on a cubie.\");    \n        }\n        else if (error === \"DupeColorError\")\n        {\n            console.log(\"One of your cubies has duplicate colors.\");\n        }\n        else if (error === \"RotCorner\")\n        {\n            console.log(\"One of your corner cubies is rotated\");\n        }\n        else if (error === \"RotEdge\")\n        {\n            console.log(\"One of your edge cubies is rotated\");\n        }\n        else if (error === \"EWindowError\")\n        {\n            console.log(\"One of the edge cubies did not match a valid cube edge.\");\n        }        \n        else\n        {\n            console.log(error);   \n        }\n    }\n\n\n    for(var i =0; i < 6; i++)\n    {\n        for(var j = 1; j < 4; j++)\n        {\n            \n        RubixState.rotate(state, i, j);\n        console.log(i,j,RubixState.toString(state));\n        RubixState.rotate(state, i,2 - (j - 2));\n        }\n    }\n\n    //return RubixState.verifyState(state) ? state : null;\n};\n\nRubixState.toString = function(state)\n{\n    var tempIndex = 0, toReturn =\"   \", focusedCubie=\"\",offset = 0, limit = 0;\n    \n    RubixState.outputFaces.length = 54;\n    RubixState.outputFaces[4]  = 'R';\n    RubixState.outputFaces[19] = 'G';\n    RubixState.outputFaces[22] = 'Y';\n    RubixState.outputFaces[25] = 'B';\n    RubixState.outputFaces[40] = 'O';\n    RubixState.outputFaces[49] = 'W';      \n\n    \n    for(var index=0; index < state.length; index++) \n    {\n        tempIndex = RubixState.cubieOutputMapping[index].faces.indexOf(state[index] & 7);\n        if(tempIndex == -1)\n        {\n            console.log(index, state[index] & 7, state[index] >> 3);\n            return \"Bad State\";\n        }\n        \n        focusedCubie = RubixState.cubies.indicies[state[index] >> 3];\n        limit = index < 8 ? 3 : 2;\n        \n        for(tempIndex, offset = 0; offset < limit;tempIndex++,offset++)\n        {        \n            tempIndex = tempIndex % limit;\n            RubixState.outputFaces[\n                    RubixState.cubieOutputMapping[index].absolute[tempIndex]] =\n                  RubixState.cubies[focusedCubie].printOrder[offset]\n    es[RubixState.cubieOutputMapping[index].faces[tempIndex]];\n        }\n    }\n    \n    for(index = 0; index < RubixState.outputFaces.length; index++)\n    {\n        toReturn +=RubixState.outputFac;\n        \n        if(index === 2 || index === 5 ||  index === 35|| \n            index === 38 || index === 41 || index === 44 ||\n            index === 47 || index === 50 || index === 53)\n        {\n            toReturn +=\"\\n   \";    \n        }\n        else if(index === 8 ||\n            index === 17 || index === 26   )\n        {\n            toReturn +='\\n';   \n        }\n    }\n    \n    return toReturn;\n};\n\nRubixState.processCubie = function(faces, cubie)\n{\n    var cubieSum = 0;\n    for(var index in faces)\n    {\n        cubieSum += RubixState.faceMap[faces[index][0]].value;        \n    }\n    return (faces.length === 3 ? RubixState.processCorner:RubixState.processSide)(faces, cubieSum, cubie);\n};\n\n/**\n * Processes an array of faces and converts it to the representation for a cubie.\n * In all of these cases the ordering of the faces matters logically, eg RYB is oriented\n * by the red face and the preceding faces are Y then B.\n */\nRubixState.processCorner = function(faces, cubieSum)\n{\n    var composition = 0, testString ='';\n    \n    for(var index = 0; index <= faces.length;  index++)\n    {\n        if(index === faces.length)\n        {\n            throw \"CError\";    \n        }\n        else if(faces[index][0] === 'R' || faces[index][0] === 'O')\n        {\n            break;   \n        }\n    }    \n    switch (cubieSum)\n    {\n        // RYG\n        case 3:\n            testString = 'RYG';\n            composition = (RubixState.cubies.RYG.value*8)+faces[index][1];\n            break;\n        // RBY\n        case 5:\n            testString = 'RBY';\n            composition = (RubixState.cubies.RBY.value*8)+faces[index][1];\n            break;\n        // RGW\n        case 6:\n            testString = 'RGW';\n            composition = (RubixState.cubies.RGW.value*8)+faces[index][1];\n            break;\n        // OGY\n        case 7:\n            testString = 'OGY';\n            composition = (RubixState.cubies.OGY.value*8)+faces[index][1];\n            break;\n        // RWB\n        case 8:\n            testString = 'RWB';\n            composition = (RubixState.cubies.RWB.value*8)+faces[index][1];\n            break;\n        // OYB\n        case 9:\n            testString = 'OYB';\n            composition = (RubixState.cubies.OYB.value*8)+faces[index][1];\n            break;\n        // OWG\n        case 10:\n            testString = 'OWG';\n            compositionRubixState.cubies.OWG.value*8)+faces[index][1];\n            break;\n        // OBW\n        case 12:  \n            testString = 'OBW';\n            composition = (RubixState.cubies.OBW.value*8)+faces[index][1];\n            break;\n        default:\n            break;\n    }\n    \n    if(!RubixState.cubieIsValid(faces, testString))\n    {\n        throw \"CError\";\n    }\n    \n    return composition;\n};\n\n\nRubixState.processSide = function(faces, cubieSum, cubie)\n{\n    var testString = '',composition = 0;\n    \n    for(var index = 0; index < faces.length;  index++)\n    {\n        if(faces[index][0] === 'R' || faces[index][0] === 'O')\n        {\n            break;   \n        }\n    }    \n    \n    if(index === 2)\n    {\n        switch (cubieSum)\n        {\n            //GY\n            case 3:\n                index = RubixState.faceIndex(faces, 'G');\n                testString = 'GY';\n                composition = (RubixState.cubies.GY.value*8)+faces[index][1];\n                break;\n            // YB\n            case 5:\n                index = RubixState.faceIndex(faces, 'Y');\n                testString = 'YB';\n                composition = (RubixState.cubies.YB.value*8)+faces[index][1];\n                break;\n            // WG\n            case 6:\n                index = RubixState.faceIndex(faces, 'W');\n                testString = 'WG';\n                composition = (RubixState.cubies.WG.value*8)+faces[index][1];\n                break;\n            // BW\n            case 8:\n                index = RubixState.faceIndex(faces, 'B');\n                testString = 'BW';\n                composition = (RubixState.cubies.BW.value*8)+faces[index][1];\n                break;\n\t\t\t\n\t\t\tdefault:   \n                break;\n        }\n    }\n    else\n    {\n        switch(cubieSum)\n        {\n            // RG\n            case 1:\n                testString = 'RG';\n                composition = (RubixState.cubies.RG.value*8)+faces[index][1];\n                break;\n            // RY\n            case 2:\n                testString = 'RY';\n                composition = (RubixState.cubies.RY.value*8)+faces[index][1];\n                break;\n            // RB\n            case 3:\n                testString = 'RB';\n                composition = (RubixState.cubies.RB.value*8)+faces[index][1];\n                break;\n            // RW, OG\n            case 5:\n                if(faces[0][0] === 'R' || faces[0][0] === 'W')\n                {\n                    testString = 'RW';\n                    composition = (RubixState.cubies.RW.value*8)+faces[index][1];   \n                }\n                else\n                {\n                    testString = 'OG';\n                    composition = (RubixState.cubies.OG.value*8)+faces[index][1];                    \n                }\n                break;\n            // OY\n            case 6:\n                testString = 'OY';\n                composition = (RubixState.cubies.OY.value*8)+faces[index][1];\n                break;\n            //OB\n            case 7:\n                testString = 'OB';\n                composition = (RubixState.cubies.OB.value*8)+faces[index][1];\n                break;\n            //OW\n            case 9:\n                testString = 'OW';\n                composition = (RubixState.cubies.OW.value*8)+faces[index][1];\n                break;\n            default :\n                break;\n        \n        }\n    }\n    \n    if(!RubixState.cubieIsValid(faces, testString, cubie))\n    {\n        throw \"EError\";\n    }\n    \n    return composition;\n};\n\nRubixState.faceIndex = function(faces, faceChar)\n{\n    for(var index = 0; index < faces.length;  index++)\n    {\n        if(faces[index][0] == faceChar)\n        {\n            break;   \n        }\n    }    \n    \n    if(index == faces.length)\n    {\n        throw \"FError\";    \n    }\n    \n    return index;\n};\n\n\n\nRubixState.cubieIsValid = function(faces, faceComp, cubie)\n{    \n    var previousVals ='',found =false;\n    for(var index in faces)\n    {\n        // Verify that the colors in the cubie should be there.\n        if(faceComp.indexOf(faces[index][0]) === -1)\n        {\n            return false;   \n        }\n        \n        // Do parity checks\n        if(faces.length == 3)\n        {\n            RubixState.faceSet[faces[index][1]] += RubixState.cubies[faceComp].orientValues[faces[index][0]];\n        }\n        else if(cubie && RubixState.edgeWindows[cubie] == faces[index][1])\n\n        {\n            RubixState.edgeWindowSum += RubixState.cubies[faceComp].orientValues[faces[index][0]];\n            found = true;\n        }\n       \n        // Do dupe checking.\n        if(previousVals.indexOf(faces[index][0]) != -1)\n        {\n            throw \"DupeColorError\";    \n        }\n        \n        previousVals += faces[index][0];\n    }\n    \n    if(cubie && !found)\n    {\n        throw \"EWindowError\";   \n    }\n    \n    return true;\n};\n\nRubixState.rotate =function(state, face, rotations)\n{\n    var indicies = RubixState.sideLookUpTable[face];\n    \n     /*\n     * cubie - holds the cubie index.\n     * size - A generic size variable.\n     * newIndex - Holds a modified index.\n     * cFace - A cubieFace.\n     * offset - A generic offset variable.\n    */\n    var cubie, size, newIndex;\n    \n    // Iterate over the indicies and calculate values of the rotated cubies.\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\n    {\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 3\n        cubie = indicies[index];\n\n        RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\n                state[cubie], face, rotations);   \n    }\n\n    for (index = 0, size = indicies.length; index < size; index++)\n    {\n        // Calculate the index of the new cubie index after rotation.\n        newIndex = indicies[((index + (2 * rotations))) % 8];\n        \n        state[newIndex] = RubixState.scratchBuffer[index];      \n    }\n};\n\nRubixState.rotateFace = function(cubieState, face, rotations)\n{\n    \n    var faceVal = cubieState & 7;   \n    var cubieVal = cubieState  - faceVal;\n\n\n    if ( RubixState.newFaceMap[face][faceVal])\n    {\n        return cubieVal | RubixState.newFaceMap[face][faceVal][rotations];\n    }\n    else \n    {\n        return cubieState;   \n    }\n    \n};\n\n// The face value map used in tanslating moves to something human readable. \nRubixState.faceValues = ['R','G','Y','B','O','W'];\n\nRubixState.faceMap = {\n    'R':{\"value\":0},\n    'G':{\"value\":1},\n    'Y':{\"value\":2},\n    'B':{\"value\":3},\n    'O':{\"value\":4},\n    'W':{\"value\":5}\n};\n/**\n * Defines cubie locations for a side.\n */\nRubixState.sideLookUpTable = [\n    [ 0, 8, 1,10, 3,11, 2, 9], // red, back\n    [ 0, 9, 2,13, 5,16, 4,12], // green, left\n    [ 2,11, 3,14, 6,17, 5,13], // yellow, top\n    [ 3,10, 1,15, 7,18, 6,14], // blue, right\n    [ 5,17, 6,18, 7,19, 4,16], // orange, front    \n    [ 4,19, 7,15, 1, 8, 0,12]  // white, bottom\n];\n\nRubixState.faceSet = [];\n\nRubixState.edgeWindowSum = 0;\n\nRubixState.edgeWindows = {\n  8:0,\n  9:1,\n  10:3,\n  11:0,\n  12:5,\n  13:2,\n  14:2,\n  15:5,\n  16:1,\n  17:4,\n  18:3,\n  19:4  \n};\n\nRubixState.outputFaces = [];\n\nRubixState.cubieOutputMapping={\n   0:{\"absolute\":[ 0, 9,51], \"faces\":[0,1,5]},\n   1:{\"absolute\":[ 2,53,17], \"faces\":[0,5,3]},\n   2:{\"absolute\":[ 6,12,11], \"faces\":[0,2,1]},\n   3:{\"absolute\":[ 8,15,14], \"faces\":[0,3,2]},\n   4:{\"absolute\":[42,45,27], \"faces\":[4,5,1]},\n   5:{\"absolute\":[36,29,30], \"faces\":[4,1,2]},\n   6:{\"absolute\":[38,32,33], \"faces\":[4,2,3]},\n   7:{\"absolute\":[44,35,47], \"faces\":[4,3,5]},\n   8:{\"absolute\":[ 1,52],    \"faces\":[0,5]},\n   9:{\"absolute\":[ 3,10],    \"faces\":[0,1]},\n  10:{\"absolute\":[ 5,16],    \"faces\":[0,3]},\n  11:{\"absolute\":[ 7,13],    \"faces\":[0,2]},\n  12:{\"absolute\":[48,18],    \"faces\":[5,1]},\n  13:{\"absolute\":[20,21],    \"faces\":[1,2]},\n  14:{\"absolute\":[23,24],    \"faces\":[2,3]},\n  15:{\"absolute\":[26,50],    \"faces\":[3,5]},\n  16:{\"absolute\":[39,28],    \"faces\":[4,1]},\n  17:{\"absolute\":[37,31],    \"faces\":[4,2]},\n  18:{\"absolute\":[41,34],    \"faces\":[4,3]},\n  19:{\"absolute\":[43,46],    \"faces\":[4,5]}\n};\n\n/**\n * The scratch buffer for rotations. This reduces the number of times we have to \n * create a temporary buffer.\n */\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(9));\n\n//Leading character Dominates\nRubixState.cubies = {\n    \"indicies\":[\"RGW\", \"RWB\",\"RYG\",\"RBY\",\"OWG\",\"OGY\",\"OYB\",\"OBW\",\"RW\",\"RG\",\"RB\",\"RY\",\n    \"WG\",\n    \"GY\",\n    \"YB\",\n    \"BW\",\n    \"OG\" ,\n    \"OY\" ,\n    \"OB\" ,\n    \"OW\"   ],\n    \"RGW\":{\"value\":0 ,\"orientValues\":{\"R\":0, \"G\":1, \"W\":2}},\n    \"RWB\":{\"value\":1 ,\"orientValues\":{\"R\":0, \"W\":1, \"B\":2}},\n    \"RYG\":{\"value\":2 ,\"orientValues\":{\"R\":0, \"Y\":1, \"G\":2}},\n    \"RBY\":{\"value\":3 ,\"orientValues\":{\"R\":0, \"B\":1, \"Y\":2}},\n    \"OWG\":{\"value\":4 ,\"orientValues\":{\"O\":0, \"W\":1, \"G\":2}},\n    \"OGY\":{\"value\":5 ,\"orientValues\":{\"O\":0, \"G\":1, \"Y\":2}},\n    \"OYB\":{\"value\":6 ,\"orientValues\":{\"O\":0, \"Y\":1, \"B\":2}},\n    \"OBW\":{\"value\":7 ,\"orientValues\":{\"O\":0, \"B\":1, \"W\":2}},\n    \"RW\" :{\"value\":8 ,\"orientValues\":{\"R\":0, \"W\":1}},\n    \"RG\" :{\"value\":9 ,\"orientValues\":{\"R\":0, \"G\":1}},\n    \"RB\" :{\"value\":10,\"orientValues\":{\"R\":0, \"B\":1}},\n    \"RY\" :{\"value\":11,\"orientValues\":{\"R\":0, \"Y\":1}},\n    \"WG\" :{\"value\":12,\"orientValues\":{\"W\":0, \"G\":1}},\n    \"GY\" :{\"value\":13,\"orientValues\":{\"G\":0, \"Y\":1}},\n    \"YB\" :{\"value\":14,\"orientValues\":{\"Y\":0, \"B\":1}},\n    \"BW\" :{\"value\":15,\"orientValues\":{\"B\":0, \"W\":1}},\n    \"OG\" :{\"value\":16,\"orientValues\":{\"O\":0, \"G\":1}},\n    \"OY\" :{\"value\":17,\"orientValues\":{\"O\":0, \"Y\":1}},\n    \"OB\" :{\"value\":18,\"orientValues\":{\"O\":0, \"B\":1}},\n    \"OW\" :{\"value\":19,\"orientValues\":{\"O\":0, \"W\":1}}  \n};\n\n/**\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\n * defines the new face for a cubie face. \n * \n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\n */\nRubixState.newFaceMap = {\n    0 : {\n        1 : {\n            1 : 5,\n            2 : 3,\n            3 : 2\n        },\n        2 : {\n            1 : 1,\n            2 : 5,\n            3 : 3\n        },\n        3 : {\n            1 : 2,\n            2 : 1,\n            3 : 5\n        },\n        5 : {\n            1 : 3,\n            2 : 2,\n            3 : 1\n        }\n    },\n    1 : {\n        0 : {\n            1 : 2,\n            2 : 4,\n            3 : 5\n        },\n        2 : {\n            1 : 4,\n            2 : 5,\n            3 : 0\n        },\n        4 : {\n            1 : 5,\n            2 : 0,\n            3 : 2\n        },\n        5 : {\n            1 : 0,\n            2 : 2,\n            3 : 4\n        }\n    },\n    2 : {\n        0 : {\n            1 : 3,\n            2 : 4,\n            3 : 1\n        },\n        1 : {\n            1 : 0,\n            2 : 3,\n            3 : 4\n        },\n        3 : {\n            1 : 4,\n            2 : 1,\n            3 : 0\n        },\n        4 : {\n            1 : 1,\n            2 : 0,\n            3 : 3\n        }\n    },\n    3 : {\n        0 : {\n            1 : 5,\n            2 : 4,\n            3 : 2\n        },\n        2 : {\n            1 : 0,\n            2 : 5,\n            3 : 4\n        },\n        4 : {\n            1 : 2,\n            2 : 0,\n            3 : 5\n        },\n        5 : {\n            1 : 4,\n            2 : 2,\n            3 : 0\n        }\n    },\n    4 : {\n        1 : {\n            1 : 2,\n            2 : 3,\n            3 : 5\n        },\n        2 : {\n            1 : 3,\n            2 : 5,\n            3 : 1\n        },\n        3 : {\n            1 : 5,\n            2 : 1,\n            3 : 2\n        },\n        5 : {\n            1 : 1,\n            2 : 2,\n            3 : 3\n        }\n    },\n    5 : {\n        0 : {\n            1 : 1,\n            2 : 4,\n            3 : 3\n        },\n        1 : {\n            1 : 4,\n            2 : 3,\n            3 : 0\n        },\n        3 : {\n            1 : 0,\n            2 : 1,\n            3 : 4\n        },\n        4 : {\n            1 : 3,\n            2 : 0,\n            3 : 1\n        }\n    }\n};"]],"start1":23883,"start2":23883,"length1":22942,"length2":4}]],"length":23887,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351029775428,"patch":[[{"diffs":[[0,"));\n};\n\n"],[1,"RubixState.hashCorners = function()\n{\n    \n};\n\n"],[0,"// The f"]],"start1":17652,"start2":17652,"length1":16,"length2":63}]],"length":23934,"saved":false}
{"ts":1351029781154,"patch":[[{"diffs":[[0,"ners = function("],[1,"state"],[0,")\n{\n    \n};\n\n// "]],"start1":17678,"start2":17678,"length1":32,"length2":37}]],"length":23939,"saved":false}
{"ts":1351029886305,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"for(var index = 0; index < state.length; index++)\n    {\n        \n    }"],[0,"\n};\n\n// "]],"start1":17699,"start2":17699,"length1":16,"length2":86}]],"length":24009,"saved":false}
{"ts":1351029929870,"patch":[[{"diffs":[[0,"on(state)\n{\n"],[1,"    var hashPos = 0;\n    var hashOrient = 0;\n"],[0,"    for(var "]],"start1":17691,"start2":17691,"length1":24,"length2":69},{"diffs":[[0,"  {\n        "],[1,"    "],[0,"\n    }\n};\n\n/"]],"start1":17804,"start2":17804,"length1":24,"length2":28}]],"length":24058,"saved":false}
{"ts":1351029959348,"patch":[[{"diffs":[[0," 0; index < "],[-1,"state.length"],[1,"8"],[0,"; index++)\n "]],"start1":17767,"start2":17767,"length1":36,"length2":25},{"diffs":[[0,"  {\n        "],[-1,"    "],[1,"hashPos += state[index]*index"],[0,"\n    }\n};\n\n/"]],"start1":17793,"start2":17793,"length1":28,"length2":53}]],"length":24072,"saved":false}
{"ts":1351029972182,"patch":[[{"diffs":[[0,"[index]*"],[1," Math.fact("],[0,"index"],[1,")"],[0,"\n    }\n}"]],"start1":17821,"start2":17821,"length1":21,"length2":33}]],"length":24084,"saved":false}
{"ts":1351030068349,"patch":[[{"diffs":[[0,"Orient = 0;\n"],[1,"    var fact = 1\n"],[0,"    for(var "]],"start1":17736,"start2":17736,"length1":24,"length2":41},{"diffs":[[0,"for(var index = "],[-1,"0"],[1,"1"],[0,"; index < 8; ind"]],"start1":17769,"start2":17769,"length1":33,"length2":33}]],"length":24101,"saved":false}
{"ts":1351030081000,"patch":[[{"diffs":[[0,"x]* "],[-1,"Math."],[0,"fact"],[-1,"("],[1," * "],[0,"index"],[-1,")"],[0,"\n   "]],"start1":17843,"start2":17843,"length1":24,"length2":20}]],"length":24097,"saved":false}
{"ts":1351030087375,"patch":[[{"diffs":[[0," index++)\n    {\n"],[1,"        fact *=index;\n"],[0,"        hashPos "]],"start1":17798,"start2":17798,"length1":32,"length2":54}]],"length":24119,"saved":false}
{"ts":1351030090970,"patch":[[{"diffs":[[0,"fact"],[-1," * index"],[1,";"],[0,"\n   "]],"start1":17869,"start2":17869,"length1":16,"length2":9}]],"length":24112,"saved":false}
{"ts":1351030094945,"patch":[[{"diffs":[[0,"e[index]"],[1," "],[0,"* fact;\n"]],"start1":17859,"start2":17859,"length1":16,"length2":17}]],"length":24113,"saved":false}
{"ts":1351030184910,"patch":[[{"diffs":[[0," fact *="],[1," ("],[0,"index"],[1,"+1"],[0,";\n      "]],"start1":17821,"start2":17821,"length1":21,"length2":25}]],"length":24117,"saved":false}
{"ts":1351030186813,"patch":[[{"diffs":[[0,"(index+1"],[1,")"],[0,";\n      "]],"start1":17830,"start2":17830,"length1":16,"length2":17}]],"length":24118,"saved":false}
{"ts":1351030188625,"patch":[[{"diffs":[[0,"= (index"],[-1,"+"],[1," + "],[0,"1);\n    "]],"start1":17828,"start2":17828,"length1":17,"length2":19}]],"length":24120,"saved":false}
{"ts":1351030236159,"patch":[[{"diffs":[[0,"hPos += "],[1,"("],[0,"state[in"]],"start1":17854,"start2":17854,"length1":16,"length2":17},{"diffs":[[0,"e[index]"],[1," >> 3)"],[0," * fact;"]],"start1":17867,"start2":17867,"length1":16,"length2":22}]],"length":24127,"saved":false}
{"ts":1351030317517,"patch":[[{"diffs":[[0,"hPos = 0"],[-1,";\n    var"],[1,","],[0," hashOri"]],"start1":17714,"start2":17714,"length1":25,"length2":17},{"diffs":[[0," = 0"],[-1,";\n    var"],[1,","],[0," fac"]],"start1":17734,"start2":17734,"length1":17,"length2":9},{"diffs":[[0,"fact = 1"],[1,", "],[0,"\n    for"]],"start1":17740,"start2":17740,"length1":16,"length2":18},{"diffs":[[0,"* fact;\n"],[1,"        hashOrient += \n"],[0,"    }\n};"]],"start1":17868,"start2":17868,"length1":16,"length2":39}]],"length":24136,"saved":false}
{"ts":1351030335645,"patch":[[{"diffs":[[0,"ct = 1, "],[1,"expo =1; "],[0,"\n    for"]],"start1":17742,"start2":17742,"length1":16,"length2":25}]],"length":24145,"saved":false}
{"ts":1351030337798,"patch":[[{"diffs":[[0,", expo ="],[1," "],[0,"1; \n    "]],"start1":17748,"start2":17748,"length1":16,"length2":17}]],"length":24146,"saved":false}
{"ts":1351030397277,"patch":[[{"diffs":[[0,"ient += "],[1,"(state[index] & 7) + expo;"],[0,"\n    }\n}"]],"start1":17900,"start2":17900,"length1":16,"length2":42}]],"length":24172,"saved":false}
{"ts":1351030407452,"patch":[[{"diffs":[[0,"+ expo;\n"],[1,"        expo *= 7;\n"],[0,"    }\n};"]],"start1":17927,"start2":17927,"length1":16,"length2":35}]],"length":24191,"saved":false}
{"ts":1351030446836,"patch":[[{"diffs":[[0,"expo *= "],[-1,"7"],[1,"3"],[0,";\n    }\n"]],"start1":17943,"start2":17943,"length1":17,"length2":17}]],"length":24191,"saved":false}
{"ts":1351030571689,"patch":[[{"diffs":[[0,"*= 3;\n    }\n"],[1,"    \n    return hashPos*12 + hashOrient;\n"],[0,"};\n\n// The f"]],"start1":17948,"start2":17948,"length1":24,"length2":65}]],"length":24232,"saved":false}
{"ts":1351030576099,"patch":[[{"diffs":[[0,"o = 1; \n"],[1,"    \n"],[0,"    for("]],"start1":17753,"start2":17753,"length1":16,"length2":21}]],"length":24237,"saved":false}
{"ts":1351030594079,"patch":[[{"diffs":[[1,"\n\n"],[0,"function RubixSt"]],"start1":0,"start2":0,"length1":16,"length2":18}]],"length":24239,"saved":false}
{"ts":1351030637659,"patch":[[{"diffs":[[-1,"\n"],[1,"/* ----------\n   rubixCube.js\n   \n   Represents the Rubik's cube as a JavaScript object.\n   ---------- */\n\n\n// Defines the function that has static functions attached."],[0,"\nfunctio"]],"start1":0,"start2":0,"length1":9,"length2":175}]],"length":24405,"saved":false}
{"ts":1351030675426,"patch":[[{"diffs":[[0,"52 53\n  "],[1,"  */"],[0,"\n    "],[-1,"*/"],[1,"\n    // Creates an array view to an array buffer."],[0,"\n    var"]],"start1":3463,"start2":3463,"length1":23,"length2":74}]],"length":24456,"saved":false}
{"ts":1351030702253,"patch":[[{"diffs":[[0,"  }\n"],[-1,"*/ \n"],[0,"    "]],"start1":7463,"start2":7463,"length1":12,"length2":8},{"diffs":[[0,"ng(state));\n"],[1,"    */\n    \n"],[0,"    return s"]],"start1":7500,"start2":7500,"length1":24,"length2":36}]],"length":24464,"saved":false}
{"ts":1351030704910,"patch":[[{"diffs":[[0,"\n    }\n\n"],[1,"    "],[0,"/*\n    f"]],"start1":7204,"start2":7204,"length1":16,"length2":20}]],"length":24468,"saved":false}
{"ts":1351030712886,"patch":[[{"diffs":[[0," state;\n};\n\n"],[1,"/**\n * \n */\n"],[0,"RubixState.t"]],"start1":7538,"start2":7538,"length1":24,"length2":36}]],"length":24480,"saved":false}
{"ts":1351030770189,"patch":[[{"diffs":[[0,"\n/**\n * "],[1," A toString function for a RubixState generated array.\n * @param state The state to convert to a human readable string."],[0,"\n */\nRub"]],"start1":7549,"start2":7549,"length1":16,"length2":135}]],"length":24599,"saved":false}
{"ts":1351030771997,"patch":[[{"diffs":[[0,"\n\n/**\n *"],[-1," "],[0," A toStr"]],"start1":7548,"start2":7548,"length1":17,"length2":16},{"diffs":[[0,"string.\n"],[1," * \n"],[0," */\nRubi"]],"start1":7668,"start2":7668,"length1":16,"length2":20}]],"length":24602,"saved":false}
{"ts":1351030805668,"patch":[[{"diffs":[[0,"ing.\n * "],[1,"@return A string containing the state organized as a rubik cube"],[0,"\n */\nRub"]],"start1":7671,"start2":7671,"length1":16,"length2":79}]],"length":24665,"saved":false}
{"ts":1351030807489,"patch":[[{"diffs":[[0,"bik cube"],[1,"."],[0,"\n */\nRub"]],"start1":7734,"start2":7734,"length1":16,"length2":17}]],"length":24666,"saved":false}
{"ts":1351030861812,"patch":[[{"diffs":[[0,"t = 0;\n    \n"],[1,"    // Set up the face array as a go between for the string and state.\n"],[0,"    RubixSta"]],"start1":7860,"start2":7860,"length1":24,"length2":95},{"diffs":[[0,"h = 54;\n"],[-1,""],[0,"    Rubi"]],"start1":7975,"start2":7975,"length1":16,"length2":16},{"diffs":[[0,"      \n    \n"],[1,"    // Load the cubies into the array.\n"],[0,"    for(var "]],"start1":8210,"start2":8210,"length1":24,"length2":63},{"diffs":[[0,"ndex == -1)\n"],[1,""],[0,"        {\n  "]],"start1":8435,"start2":8435,"length1":24,"length2":24},{"diffs":[[0,"  {\n"],[-1,"            console.log(index, state[index] & 7, state[index] >> 3);\n"],[0,"    "]],"start1":8453,"start2":8453,"length1":77,"length2":8}]],"length":24707,"saved":false}
{"ts":1351030863608,"patch":[[{"diffs":[[0,"index++) \n    {\n"],[1,"        /\n"],[0,"        tempInde"]],"start1":8304,"start2":8304,"length1":32,"length2":42}]],"length":24717,"saved":false}
{"ts":1351030924358,"patch":[[{"diffs":[[0,"       /"],[1,"/ Get the location that the index coresponds to."],[0,"\n       "]],"start1":8321,"start2":8321,"length1":16,"length2":64},{"diffs":[[0,"     }\n        \n"],[1,"        // Get the string for the cubie and determine if this is an edge or corner.\n"],[0,"        focusedC"]],"start1":8550,"start2":8550,"length1":32,"length2":116}]],"length":24849,"saved":false}
{"ts":1351030935146,"patch":[[{"diffs":[[0,"3 : 2;\n        \n"],[1,"        // For the \n"],[0,"        for(temp"]],"start1":8748,"start2":8748,"length1":32,"length2":52},{"diffs":[[0,"< limit;"],[1," "],[0,"tempInde"]],"start1":8826,"start2":8826,"length1":16,"length2":17}]],"length":24870,"saved":false}
{"ts":1351030965120,"patch":[[{"diffs":[[0,"For the "],[1,"number of faces use a lookaside mapping to place the correct color values in the array."],[0,"\n       "]],"start1":8775,"start2":8775,"length1":16,"length2":103}]],"length":24957,"saved":false}
{"ts":1351030977835,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    // Simply creates the String.\n"],[0,"    for(inde"]],"start1":9206,"start2":9206,"length1":24,"length2":58}]],"length":24991,"saved":false}
{"ts":1351030985993,"patch":[[{"diffs":[[0,"Return;\n};\n\n"],[1,"/**\n * \n */\n"],[0,"RubixState.p"]],"start1":9768,"start2":9768,"length1":24,"length2":36}]],"length":25003,"saved":false}
{"ts":1351031016649,"patch":[[{"diffs":[[0,"\n/**\n * "],[1,"Generically processes a cubie and selects whether it is a corner or an edge."],[0,"\n */\nRub"]],"start1":9779,"start2":9779,"length1":16,"length2":92}]],"length":25079,"saved":false}
{"ts":1351031042308,"patch":[[{"diffs":[[0,"bieSum = 0;\n"],[1,"    \n    // Calculate the sum of the faces to aid in determining which cubie this is.\n"],[0,"    for(var "]],"start1":9930,"start2":9930,"length1":24,"length2":110}]],"length":25165,"saved":false}
{"ts":1351031070995,"patch":[[{"diffs":[[0,"     \n    }\n"],[1,"    \n    // Run the specialized routine for either corner or edge.\n"],[0,"    return ("]],"start1":10127,"start2":10127,"length1":24,"length2":91}]],"length":25232,"saved":false}
{"ts":1351031201262,"patch":[[{"diffs":[[0,"n edge.\n"],[1," * \n * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * @param cubie The proposed index of the cubie in the final state.\n * @return A bit mapping of the cubie containing face and cubie number.\n"],[0," */\nRubi"]],"start1":9856,"start2":9856,"length1":16,"length2":295}]],"length":25511,"saved":false}
{"ts":1351031273409,"patch":[[{"diffs":[[0,"ers "],[-1,"logical"],[1,"implicit"],[0,"ly, "]],"start1":10737,"start2":10737,"length1":15,"length2":16},{"diffs":[[0,"then B.\n"],[1," * \n * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * @param cubieSum The sum of the cubie's faces.\n * @return A bit mapping of the cubie containing face and cubie number.\n"],[0," */\nRubi"]],"start1":10821,"start2":10821,"length1":16,"length2":276}]],"length":25772,"saved":false}
{"ts":1351031391269,"patch":[[{"diffs":[[0," faces.\n"],[1," * \n"],[0," * @retu"]],"start1":11009,"start2":11009,"length1":16,"length2":20},{"diffs":[[0,"d cubie number.\n"],[1," * \n * @throws CError A cubie error for corners that aren't properly specified (ordering/number of faces).\n"],[0," */\nRubixState.p"]],"start1":11077,"start2":11077,"length1":32,"length2":139}]],"length":25883,"saved":false}
{"ts":1351031455950,"patch":[[{"diffs":[[0,"cubieSum)\n{\n"],[1,"    // The composition is the combination of cubie number and face value.\n"],[0,"    var comp"]],"start1":11247,"start2":11247,"length1":24,"length2":98}]],"length":25957,"saved":false}
{"ts":1351031483424,"patch":[[{"diffs":[[0,"g ='';\n    \n"],[1,"    // Find the leading face or determine that there are too many faces.\n"],[0,"    for(var "]],"start1":11367,"start2":11367,"length1":24,"length2":97}]],"length":26030,"saved":false}
{"ts":1351031486327,"patch":[[{"diffs":[[0,"}\n    }    \n"],[1,"    \n"],[0,"    switch ("]],"start1":11709,"start2":11709,"length1":24,"length2":29}]],"length":26035,"saved":false}
{"ts":1351031522310,"patch":[[{"diffs":[[0,"  }    \n    "],[1,"// Determine the right cubie value and generate the composition and testString."],[0,"\n    switch "]],"start1":11713,"start2":11713,"length1":24,"length2":103}]],"length":26114,"saved":false}
{"ts":1351031579767,"patch":[[{"diffs":[[0,"eak;\n    }\n    \n"],[1,"    // Error check and execute parity checking.\n"],[0,"    if(!RubixSta"]],"start1":13124,"start2":13124,"length1":32,"length2":80}]],"length":26162,"saved":false}
{"ts":1351031589795,"patch":[[{"diffs":[[0,"execute "],[1,"a portion of "],[0,"parity c"]],"start1":13163,"start2":13163,"length1":16,"length2":29}]],"length":26175,"saved":false}
{"ts":1351031594823,"patch":[[{"diffs":[[0,"on;\n};\n\n"],[1,"/**\n * \n */"],[0,"\nRubixSt"]],"start1":13314,"start2":13314,"length1":16,"length2":27}]],"length":26186,"saved":false}
{"ts":1351031603029,"patch":[[{"diffs":[[0,".process"],[-1,"Sid"],[1,"Edg"],[0,"e = func"]],"start1":13344,"start2":13344,"length1":19,"length2":19}]],"length":26186,"saved":false}
{"ts":1351031611179,"patch":[[{"diffs":[[0,"cess"],[-1,"Sid"],[1,"Edg"],[0,"e)(f"]],"start1":10557,"start2":10557,"length1":11,"length2":11}]],"length":26186,"saved":false}
{"ts":1351031692380,"patch":[[{"diffs":[[0,"};\n\n/**\n"],[1," * Generates the encoded value for an edge cubie and does error checking.\n"],[0," * \n */\n"]],"start1":13318,"start2":13318,"length1":16,"length2":90}]],"length":26260,"saved":false}
{"ts":1351031720258,"patch":[[{"diffs":[[0,"corresponds to.\n"],[1," * \n"],[0," * @param cubieS"]],"start1":10952,"start2":10952,"length1":32,"length2":36}]],"length":26264,"saved":false}
{"ts":1351031764115,"patch":[[{"diffs":[[0,"ng.\n * \n"],[1," * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * \n * @param cubieSum The sum of the cubie's faces.\n * \n * @param cubie The index of the cubie in the proposed final state(needed for parity check)\n * \n"],[0," */\nRubi"]],"start1":13400,"start2":13400,"length1":16,"length2":304}]],"length":26552,"saved":false}
{"ts":1351031789630,"patch":[[{"diffs":[[0," edge pa"],[-1,"i"],[0,"rity che"]],"start1":5964,"start2":5964,"length1":17,"length2":16},{"diffs":[[0," array.\n"],[1," * \n"],[0," * @para"]],"start1":7602,"start2":7602,"length1":16,"length2":20},{"diffs":[[0,"string.\n"],[1," * \n"],[0," * @retu"]],"start1":7671,"start2":7671,"length1":16,"length2":20}]],"length":26559,"saved":false}
{"ts":1351031794952,"patch":[[{"diffs":[[0,"nds to.\n"],[1," * \n"],[0," * @para"]],"start1":10002,"start2":10002,"length1":16,"length2":20},{"diffs":[[0," state.\n"],[1," * \n"],[0," * @retu"]],"start1":10074,"start2":10074,"length1":16,"length2":20}]],"length":26567,"saved":false}
{"ts":1351031814844,"patch":[[{"diffs":[[0,"y check)"],[1,".\n * \n * @return A bit mapping of the cubie containing face and cubie number.\n * "],[0,"\n * \n */"]],"start1":13698,"start2":13698,"length1":16,"length2":97}]],"length":26648,"saved":false}
{"ts":1351031821701,"patch":[[{"diffs":[[0,"er.\n * \n"],[1," * @throws\n"],[0," * \n */\n"]],"start1":13780,"start2":13780,"length1":16,"length2":27}]],"length":26659,"saved":false}
{"ts":1351031831500,"patch":[[{"diffs":[[0," @throws"],[1," EError"],[0,"\n * \n */"]],"start1":13790,"start2":13790,"length1":16,"length2":23}]],"length":26666,"saved":false}
{"ts":1351031873357,"patch":[[{"diffs":[[0,"s EError"],[1," An Edge error triggered by an improperly specified edge."],[0,"\n * \n */"]],"start1":13797,"start2":13797,"length1":16,"length2":73}]],"length":26723,"saved":false}
{"ts":1351031876921,"patch":[[{"diffs":[[0,"d edge.\n"],[-1," * \n"],[0," */\nRubi"]],"start1":13855,"start2":13855,"length1":20,"length2":16}]],"length":26719,"saved":false}
{"ts":1351031914890,"patch":[[{"diffs":[[0,"\n    }    \n    \n"],[1,"    // If the leading value is neither R or O enter\n"],[0,"    if(index ==="]],"start1":14137,"start2":14137,"length1":32,"length2":84}]],"length":26771,"saved":false}
{"ts":1351031960681,"patch":[[{"diffs":[[0," O enter"],[1," the center edge cubie switch.\n    // Else enter the top and bottom cubie switch (this cuts down on value overlap."],[0,"\n    if("]],"start1":14196,"start2":14196,"length1":16,"length2":130}]],"length":26885,"saved":false}
{"ts":1351032000769,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    // Do error checking and contribute to the parity check.\n"],[0,"    if(!Rubi"]],"start1":17007,"start2":17007,"length1":24,"length2":85}]],"length":26946,"saved":false}
{"ts":1351032007301,"patch":[[{"diffs":[[0,"sition;\n};\n\n"],[1,"/**\n * \n */\n"],[0,"RubixState.f"]],"start1":17196,"start2":17196,"length1":24,"length2":36}]],"length":26958,"saved":false}
{"ts":1351032057461,"patch":[[{"diffs":[[0,"\n/**\n * "],[1,"A helper function to reduce cyclomatic complexity in processEdge. Finds the \n * index of a specified face character in a face array."],[0,"\n */\nRub"]],"start1":17207,"start2":17207,"length1":16,"length2":148}]],"length":27090,"saved":false}
{"ts":1351032066207,"patch":[[{"diffs":[[0," array.\n"],[1," * \n * @param faces \n"],[0," */\nRubi"]],"start1":17340,"start2":17340,"length1":16,"length2":37}]],"length":27111,"saved":false}
{"ts":1351032076744,"patch":[[{"diffs":[[0,"m faces "],[1,"An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to."],[0,"\n */\nRub"]],"start1":17360,"start2":17360,"length1":16,"length2":134}]],"length":27229,"saved":false}
{"ts":1351032127280,"patch":[[{"diffs":[[0,"nds to.\n"],[1," * \n * @param faceChar The face charcter to find the index for.\n"],[0," */\nRubi"]],"start1":17479,"start2":17479,"length1":16,"length2":80}]],"length":27293,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351032171833,"patch":[[{"diffs":[[0,"nter"],[-1," the center edge cubie switch.\n    // Else enter the top and bottom cubie switch (this cuts down on value overlap."],[0,"\n"],[1,""],[0,"    "]],"start1":14200,"start2":14200,"length1":123,"length2":9},{"diffs":[[0,"   \n"],[-1,"    // Do error checking and contribute to the parity check.\n"],[0,"    "]],"start1":16901,"start2":16901,"length1":69,"length2":8},{"diffs":[[0,"};\n\n"],[-1,"/**\n * A helper function to reduce cyclomatic complexity in processEdge. Finds the \n * index of a specified face character in a face array.\n * \n * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * \n * @param faceChar The face charcter to find the index for.\n */\n"],[0,"Rubi"]],"start1":17029,"start2":17029,"length1":355,"length2":8},{"diffs":[[0,"rotate ="],[1," "],[0,"function"]],"start1":18383,"start2":18383,"length1":16,"length2":17},{"diffs":[[0,"ate & 7;   \n"],[1,""],[0,"    var cubi"]],"start1":19524,"start2":19524,"length1":24,"length2":24},{"diffs":[[0,"ieState "],[-1," "],[0,"- faceVa"]],"start1":19558,"start2":19558,"length1":17,"length2":16}]],"length":26771,"saved":false}
{"ts":1351032332649,"patch":[[{"diffs":[[0," }    \n    \n"],[1,"    // The face wasn't found.\n"],[0,"    if(index"]],"start1":17752,"start2":17752,"length1":24,"length2":54}]],"length":27323,"saved":false}
{"ts":1351032369243,"patch":[[{"diffs":[[0,"ex for.\n"],[1," * \n * @return The index of the sought face.\n * \n * @throws FError The face was not found in the supplied faces.\n"],[0," */\nRubi"]],"start1":17543,"start2":17543,"length1":16,"length2":129}]],"length":27436,"saved":false}
{"ts":1351032378042,"patch":[[{"diffs":[[0,"x;\n};\n\n\n"],[1,"/**\n * \n */"],[0,"\nRubixSt"]],"start1":17997,"start2":17997,"length1":16,"length2":27}]],"length":27447,"saved":false}
{"ts":1351032435508,"patch":[[{"diffs":[[0,";\n\n\n/**\n"],[1," * Verifies some local orientation details about the cubie and contributes to the \n * global parity check for either the edges or corners (depending on the supplied cubie.\n"],[0," * \n */\n"]],"start1":18001,"start2":18001,"length1":16,"length2":188}]],"length":27619,"saved":false}
{"ts":1351032482164,"patch":[[{"diffs":[[0,"ie.\n * \n"],[1," * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * \n * @param faceComp A string representing the face.\n * \n * @param cubie \n"],[0," */\nRubi"]],"start1":18177,"start2":18177,"length1":16,"length2":227}]],"length":27830,"saved":false}
{"ts":1351032506196,"patch":[[{"diffs":[[0,"m cubie "],[1,"The index of the cubie in teh proposed final state (Optional)."],[0,"\n */\nRub"]],"start1":18387,"start2":18387,"length1":16,"length2":78}]],"length":27892,"saved":false}
{"ts":1351032510313,"patch":[[{"diffs":[[0,"in t"],[-1,"e"],[0,"h"],[1,"e"],[0," pro"]],"start1":18418,"start2":18418,"length1":10,"length2":10}]],"length":27892,"saved":false}
{"ts":1351032516415,"patch":[[{"diffs":[[0,"=false;\n"],[1,"    \n"],[0,"    for("]],"start1":18558,"start2":18558,"length1":16,"length2":21}]],"length":27897,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351032544253,"patch":[[{"diffs":[[0,"    "],[-1,"    // The face wasn't found.\n"],[0,"   R"]],"start1":17727,"start2":17727,"length1":38,"length2":8},{"diffs":[[0," hashPos"],[-1,"*"],[1," * "],[0,"12 + has"]],"start1":20514,"start2":20514,"length1":17,"length2":19}]],"length":26773,"saved":false}
{"ts":1351032553574,"patch":[[{"diffs":[[0,"ional).\n"],[1," * \n * @throws DupeColorError Thrown if any duplicate colors are detected in the cubie.\n * \n"],[0," */\nRubi"]],"start1":18450,"start2":18450,"length1":16,"length2":108}]],"length":27989,"saved":false}
{"ts":1351032557625,"patch":[[{"diffs":[[0,"ie.\n * \n"],[1," * @throws \n"],[0," */\nRubi"]],"start1":18542,"start2":18542,"length1":16,"length2":28}]],"length":28001,"saved":false}
{"ts":1351032582269,"patch":[[{"diffs":[[0,"@throws "],[1,"EWindowError Thrown if any "],[0,"\n */\nRub"]],"start1":18553,"start2":18553,"length1":16,"length2":43},{"diffs":[[0,"ex][1])\n"],[-1,"\n"],[0,"        "]],"start1":19166,"start2":19166,"length1":17,"length2":16}]],"length":28027,"saved":false}
{"ts":1351032617827,"patch":[[{"diffs":[[0,"rown if "],[-1,"any"],[1,"the cubie is an edge and it didn't exist on an edge window (pretty much impossible)."],[0," \n */\nRu"]],"start1":18576,"start2":18576,"length1":19,"length2":100}]],"length":28108,"saved":false}
{"ts":1351032653680,"patch":[[{"diffs":[[0,"te ("],[-1,"Optional"],[1,"not used on corners."],[0,").\n "]],"start1":18443,"start2":18443,"length1":16,"length2":28},{"diffs":[[0,"\n    }\n    \n"],[1,"    // IF this was an edge and the edge window wasn't found\n"],[0,"    if(cubie"]],"start1":19614,"start2":19614,"length1":24,"length2":84}]],"length":28180,"saved":false}
{"ts":1351032657930,"patch":[[{"diffs":[[0,"'t found"],[1,"."],[0,"\n    if("]],"start1":19677,"start2":19677,"length1":16,"length2":17}]],"length":28181,"saved":false}
{"ts":1351032666320,"patch":[[{"diffs":[[0,"== 3)\n        {\n"],[1,"            //Corner\n"],[0,"            Rubi"]],"start1":19056,"start2":19056,"length1":32,"length2":53}]],"length":28202,"saved":false}
{"ts":1351032672929,"patch":[[{"diffs":[[0,"][1])\n        {\n"],[1,"            \n            // Edge\n"],[0,"            Rubi"]],"start1":19282,"start2":19282,"length1":32,"length2":65}]],"length":28235,"saved":false}
{"ts":1351032676661,"patch":[[{"diffs":[[0,"      //"],[1," "],[0,"Corner\n "]],"start1":19078,"start2":19078,"length1":16,"length2":17}]],"length":28236,"saved":false}
{"ts":1351032683277,"patch":[[{"diffs":[[0,"n true;\n};\n\n"],[1,"/**\n * \n */\n"],[0,"RubixState.r"]],"start1":19825,"start2":19825,"length1":24,"length2":36}]],"length":28248,"saved":false}
{"ts":1351032694826,"patch":[[{"diffs":[[0,"};\n\n/**\n"],[1," * Performs a rotation of a single face in the state.\n"],[0," * \n */\n"]],"start1":19833,"start2":19833,"length1":16,"length2":70}]],"length":28302,"saved":false}
{"ts":1351032703525,"patch":[[{"diffs":[[0,"te.\n * \n"],[1," * @param state The state\n"],[0," */\nRubi"]],"start1":19891,"start2":19891,"length1":16,"length2":42}]],"length":28328,"saved":false}
{"ts":1351032720472,"patch":[[{"diffs":[[0,"ate The "],[-1,"state"],[1,"RubixState that is to be "],[0,"\n */\nRub"]],"start1":19911,"start2":19911,"length1":21,"length2":41}]],"length":28348,"saved":false}
{"ts":1351032734197,"patch":[[{"diffs":[[0,"ixState "],[1,"array "],[0,"that is "]],"start1":19922,"start2":19922,"length1":16,"length2":22},{"diffs":[[0,"s to be "],[1,"rotated on one face.\n * "],[0,"\n */\nRub"]],"start1":19942,"start2":19942,"length1":16,"length2":40}]],"length":28378,"saved":false}
{"ts":1351032748289,"patch":[[{"diffs":[[0,"ce.\n * \n"],[1," * @param face The face the rotation is to occur about.\n * \n"],[0," */\nRubi"]],"start1":19967,"start2":19967,"length1":16,"length2":76}]],"length":28438,"saved":false}
{"ts":1351032785954,"patch":[[{"diffs":[[0,"ut.\n * \n"],[1," * @param rotations The number of 90 degree motions to occur in one move (1-3)\n"],[0," */\nRubi"]],"start1":20027,"start2":20027,"length1":16,"length2":95}]],"length":28517,"saved":false}
{"ts":1351032798012,"patch":[[{"diffs":[[0,"e (1-3)\n"],[1," * \n * @return The revised state.\n"],[0," */\nRubi"]],"start1":20106,"start2":20106,"length1":16,"length2":50}]],"length":28551,"saved":false}
{"ts":1351032824909,"patch":[[{"diffs":[[0,"     \n    }\n};\n\n"],[1,"/**\n * Modifies the state of a single cubie in the rotation process.\n * \n */\n"],[0,"RubixState.rotat"]],"start1":21193,"start2":21193,"length1":32,"length2":109}]],"length":28628,"saved":false}
{"ts":1351032880445,"patch":[[{"diffs":[[0,"ess.\n * "],[1,"@param cubieState a bit mappping of the cubie that is to be rotated.\n * @param face The face that the rotation is occuring on.\n * @param rotations The number of 90 degree motions to occur in this move (1-3)"],[0,"\n */\nRub"]],"start1":21273,"start2":21273,"length1":16,"length2":222}]],"length":28834,"saved":false}
{"ts":1351032884282,"patch":[[{"diffs":[[0,"ccur in "],[-1,"one"],[1,"this"],[0," move (1"]],"start1":20091,"start2":20091,"length1":19,"length2":20}]],"length":28835,"saved":false}
{"ts":1351032909518,"patch":[[{"diffs":[[0,"e (1-3)\n"],[1," * @return The revised cubieState containg the new face.\n"],[0," */\nRubi"]],"start1":21481,"start2":21481,"length1":16,"length2":73}]],"length":28892,"saved":false}
{"ts":1351032913534,"patch":[[{"diffs":[[0,"ieState "],[-1,"a"],[1,"A"],[0," bit map"]],"start1":21292,"start2":21292,"length1":17,"length2":17}]],"length":28892,"saved":false}
{"ts":1351032918140,"patch":[[{"diffs":[[0,"rocess.\n"],[1," * \n"],[0," * @para"]],"start1":21271,"start2":21271,"length1":16,"length2":20},{"diffs":[[0,"otated.\n"],[1," * \n"],[0," * @para"]],"start1":21347,"start2":21347,"length1":16,"length2":20},{"diffs":[[0,"ing on.\n"],[1," * \n"],[0," * @para"]],"start1":21409,"start2":21409,"length1":16,"length2":20},{"diffs":[[0,"e (1-3)\n"],[1," * \n"],[0," * @retu"]],"start1":21493,"start2":21493,"length1":16,"length2":20}]],"length":28908,"saved":false}
{"ts":1351032923097,"patch":[[{"diffs":[[0,"rotations)\n{"],[-1,"\n"],[0,"    \n    var"]],"start1":21617,"start2":21617,"length1":25,"length2":24}]],"length":28907,"saved":false}
{"ts":1351032960375,"patch":[[{"diffs":[[0,"ceVal;\n\n"],[1,"    // If the face has a mapping "],[0,"\n    if "]],"start1":21706,"start2":21706,"length1":16,"length2":49},{"diffs":[[0,"    if ("],[-1," "],[0,"RubixSta"]],"start1":21748,"start2":21748,"length1":17,"length2":16}]],"length":28939,"saved":false}
{"ts":1351032981546,"patch":[[{"diffs":[[0,"mapping "],[1,"(isn't the same or opposite face) modify the state."],[0,"\n    if "]],"start1":21739,"start2":21739,"length1":16,"length2":67}]],"length":28990,"saved":false}
{"ts":1351032994709,"patch":[[{"diffs":[[0," \n    }\n};\n\n"],[1,"/**\n * \n */\n"],[0,"RubixState.i"]],"start1":21976,"start2":21976,"length1":24,"length2":36}]],"length":29002,"saved":false}
{"ts":1351033039071,"patch":[[{"diffs":[[0,"\n/**\n * "],[1,"Performs a check to determine if two states are equivalent.\n * \n * @param stateA The first RubixState ArrayBuffer to compare."],[0,"\n */\nRub"]],"start1":21987,"start2":21987,"length1":16,"length2":141}]],"length":29127,"saved":false}
{"ts":1351033047485,"patch":[[{"diffs":[[0,"ompare.\n"],[1," * @param stateA The first RubixState ArrayBuffer to compare.\n\n"],[0," */\nRubi"]],"start1":22113,"start2":22113,"length1":16,"length2":79}]],"length":29190,"saved":false}
{"ts":1351033051268,"patch":[[{"diffs":[[0,"aram stateA The "],[-1,"first"],[1,"second"],[0," RubixState Arra"]],"start1":22126,"start2":22126,"length1":37,"length2":38},{"diffs":[[0,"compare."],[1,"\n * "],[0,"\n\n */\nRu"]],"start1":22175,"start2":22175,"length1":16,"length2":20}]],"length":29195,"saved":false}
{"ts":1351033072153,"patch":[[{"diffs":[[0,"are.\n * "],[1,"@return True if equivalent, false if not."],[0,"\n\n */\nRu"]],"start1":22179,"start2":22179,"length1":16,"length2":57}]],"length":29236,"saved":false}
{"ts":1351033075696,"patch":[[{"diffs":[[0,"to compare.\n"],[1," * \n"],[0," * @param st"]],"start1":22109,"start2":22109,"length1":24,"length2":28},{"diffs":[[0,"ompare.\n"],[1," * \n"],[0," * @retu"]],"start1":22180,"start2":22180,"length1":16,"length2":20},{"diffs":[[0,"if not.\n"],[-1,"\n"],[0," */\nRubi"]],"start1":22229,"start2":22229,"length1":17,"length2":16}]],"length":29243,"saved":false}
{"ts":1351033079221,"patch":[[{"diffs":[[0,"true;  \n};\n\n"],[1,"/\n"],[0,"RubixState.c"]],"start1":22564,"start2":22564,"length1":24,"length2":26}]],"length":29245,"saved":false}
{"ts":1351033082874,"patch":[[{"diffs":[[0,";  \n};\n\n"],[1,"/**\n * \n *"],[0,"/\nRubixS"]],"start1":22568,"start2":22568,"length1":16,"length2":26}]],"length":29255,"saved":false}
{"ts":1351033111581,"patch":[[{"diffs":[[0,"};\n\n/**\n"],[1," * Creates a copy of the RubixState ArrayBuffer, prevents rotation clobbering.\n"],[0," * \n */\n"]],"start1":22572,"start2":22572,"length1":16,"length2":95}]],"length":29334,"saved":false}
{"ts":1351033152736,"patch":[[{"diffs":[[0,"ing.\n * "],[1,"@param state The RubixState to copy.\n * @return A copy of the ArrayBuffer and a new TypedArray view."],[0,"\n */\nRub"]],"start1":22654,"start2":22654,"length1":16,"length2":116}]],"length":29434,"saved":false}
{"ts":1351033156386,"patch":[[{"diffs":[[0,"bering.\n"],[1," \n"],[0," * @para"]],"start1":22651,"start2":22651,"length1":16,"length2":18},{"diffs":[[0,"o copy.\n"],[1," * \n"],[0," * @retu"]],"start1":22693,"start2":22693,"length1":16,"length2":20}]],"length":29440,"saved":false}
{"ts":1351033159926,"patch":[[{"diffs":[[0,"ering.\n "],[1,"* s"],[0,"\n * @par"]],"start1":22652,"start2":22652,"length1":16,"length2":19}]],"length":29443,"saved":false}
{"ts":1351033163597,"patch":[[{"diffs":[[0,"ce(0));\n};\n\n"],[1,"/**\n * \n */\n"],[0,"RubixState.h"]],"start1":22854,"start2":22854,"length1":24,"length2":36}]],"length":29455,"saved":false}
{"ts":1351033167233,"patch":[[{"diffs":[[0,"ing.\n * "],[-1,"s"],[0,"\n * @par"]],"start1":22654,"start2":22654,"length1":17,"length2":16}]],"length":29454,"saved":false}
{"ts":1351033185001,"patch":[[{"diffs":[[0,"\n/**\n * "],[1,"Hashes teh corners of a supplied state for table lookup."],[0,"\n */\nRub"]],"start1":22864,"start2":22864,"length1":16,"length2":72}]],"length":29510,"saved":false}
{"ts":1351033188775,"patch":[[{"diffs":[[0,"es t"],[-1,"e"],[0,"h"],[1,"e"],[0," cor"]],"start1":22876,"start2":22876,"length1":10,"length2":10}]],"length":29510,"saved":false}
{"ts":1351033211345,"patch":[[{"diffs":[[0,"lookup.\n"],[1," * \n * @param state The state to get a hash for.\n * \n"],[0," */\nRubi"]],"start1":22921,"start2":22921,"length1":16,"length2":69}]],"length":29563,"saved":false}
{"ts":1351033230079,"patch":[[{"diffs":[[0,"or.\n * \n"],[1," * @return A number with the hashed value.\n"],[0," */\nRubi"]],"start1":22974,"start2":22974,"length1":16,"length2":59}]],"length":29606,"saved":false}
{"ts":1351033364082,"patch":[[{"diffs":[[0,"nction(state)\n{\n"],[1,"    /*\n    *hashPos: aggregates the hash position total (f1())\n    *hashOrient: aggregates the hash orientation total (f2())\n    *fact: A factorial used in the position hash.\n    *expo: The exponential value used in calculating the orientation hash.\n    \n    */\n"],[0,"    var hashPos "]],"start1":23056,"start2":23056,"length1":32,"length2":294}]],"length":29868,"saved":false}
{"ts":1351033376767,"patch":[[{"diffs":[[0,"\n    /*\n    "],[1," "],[0,"*hashPos: ag"]],"start1":23071,"start2":23071,"length1":24,"length2":25},{"diffs":[[0,"otal (f1())\n"],[1," "],[0,"    *hashOri"]],"start1":23124,"start2":23124,"length1":24,"length2":25},{"diffs":[[0,"otal (f2())\n"],[1," "],[0,"    *fact: A"]],"start1":23187,"start2":23187,"length1":24,"length2":25},{"diffs":[[0,"he position "],[1,"portion of the "],[0,"hash.\n"],[1," "],[0,"    *expo: T"]],"start1":23232,"start2":23232,"length1":30,"length2":46},{"diffs":[[0,"tation hash."],[-1,"\n"],[0,"    \n    */\n"]],"start1":23328,"start2":23328,"length1":25,"length2":24}]],"length":29886,"saved":false}
{"ts":1351033384859,"patch":[[{"diffs":[[0,"ntation "],[1,"portion of the "],[0,"hash.   "]],"start1":23327,"start2":23327,"length1":16,"length2":31}]],"length":29901,"saved":false}
{"ts":1351033411722,"patch":[[{"diffs":[[0," = 1; \n    \n"],[1,"    // f(n) = 12*f1(n) + f2(n)\n"],[0,"    for(var "]],"start1":23418,"start2":23418,"length1":24,"length2":55}]],"length":29932,"saved":false}
{"ts":1351033512153,"patch":[[{"diffs":[[0,"+ f2(n)\n"],[1,"    // f1(n) = sum(n!*state[n].value) from n=1 to n=7\n"],[0,"    for("]],"start1":23453,"start2":23453,"length1":16,"length2":70},{"diffs":[[0,"* fact;\n"],[1,"        \n"],[0,"        "]],"start1":23632,"start2":23632,"length1":16,"length2":25}]],"length":29995,"saved":false}
{"ts":1351033564248,"patch":[[{"diffs":[[0,"= sum(n!"],[-1,"*"],[1," * "],[0,"state[n]"]],"start1":23474,"start2":23474,"length1":17,"length2":19},{"diffs":[[0," to n=7\n"],[1,"    // f2(n) = sum(3^n * )\n"],[0,"    for("]],"start1":23509,"start2":23509,"length1":16,"length2":43}]],"length":30024,"saved":false}
{"ts":1351033571621,"patch":[[{"diffs":[[0,"m(3^n * "],[1,"tate[n].face"],[0,")\n    fo"]],"start1":23534,"start2":23534,"length1":16,"length2":28}]],"length":30036,"saved":false}
{"ts":1351033579172,"patch":[[{"diffs":[[0,"n].face)"],[1," from n=0 to n =6"],[0,"\n    for"]],"start1":23547,"start2":23547,"length1":16,"length2":33}]],"length":30053,"saved":false}
{"ts":1351033582768,"patch":[[{"diffs":[[0,"0 to n ="],[1," "],[0,"6\n    fo"]],"start1":23563,"start2":23563,"length1":16,"length2":17}]],"length":30054,"saved":false}
{"ts":1351033595544,"patch":[[{"diffs":[[0,"    "],[-1,"// f1(n) = sum(n! * state[n].value) from n=1 to n=7\n"],[1,"for(var index = 1; index < 8; index++)\n    {\n    "],[0,"    // f"],[-1,"2"],[1,"1"],[0,"(n) "]],"start1":23461,"start2":23461,"length1":69,"length2":66},{"diffs":[[0,"sum("],[-1,"3^"],[0,"n"],[1,"!"],[0," * "],[1,"s"],[0,"tate[n]."],[-1,"fac"],[1,"valu"],[0,"e) f"]],"start1":23529,"start2":23529,"length1":25,"length2":26},{"diffs":[[0,"m n="],[-1,"0"],[1,"1"],[0," to n"],[-1," = 6\n    for(var index = 1; index < 8; index++)\n    {"],[1,"=7"],[0,"\n   "]],"start1":23557,"start2":23557,"length1":67,"length2":16},{"diffs":[[0,"* fact;\n        "],[-1,""],[0,""],[1,"    // f2(n) = sum(3^n * tate[n].face) from n=0 to n = 6\n"],[0,"\n        hashOri"]],"start1":23638,"start2":23638,"length1":32,"length2":89}]],"length":30058,"saved":false}
{"ts":1351033599968,"patch":[[{"diffs":[[0,"ct;\n        "],[1,"\n    "],[0,"    // f2(n)"]],"start1":23642,"start2":23642,"length1":24,"length2":29},{"diffs":[[0,"o n = 6\n"],[-1,"\n"],[0,"        "]],"start1":23708,"start2":23708,"length1":17,"length2":16}]],"length":30062,"saved":false}
{"ts":1351033603912,"patch":[[{"diffs":[[0,"m(3^n * "],[1,"s"],[0,"tate[n]."]],"start1":23676,"start2":23676,"length1":16,"length2":17}]],"length":30063,"saved":false}
{"ts":1351033609115,"patch":[[{"diffs":[[0,"   \n"],[-1,"    // f(n) = 12*f1(n) + f2(n)\n"],[0,"    "]],"start1":23426,"start2":23426,"length1":39,"length2":8},{"diffs":[[0,"*= 3;\n    }\n    "],[1,"    // f(n) = 12*f1(n) + f2(n)\n"],[0,"\n    return hash"]],"start1":23748,"start2":23748,"length1":32,"length2":63}]],"length":30063,"saved":false}
{"ts":1351033612842,"patch":[[{"diffs":[[0,";\n    }\n    "],[1,"\n"],[0,"    // f(n) "]],"start1":23752,"start2":23752,"length1":24,"length2":25},{"diffs":[[0,"+ f2(n)\n"],[-1,"\n"],[0,"    retu"]],"start1":23788,"start2":23788,"length1":17,"length2":16}]],"length":30063,"saved":false}
{"ts":1351033673798,"patch":[[{"diffs":[[0,",'O','W'];\n\n"],[1,"// A mapping of the face to it's arbitrary face value.\n"],[0,"RubixState.f"]],"start1":23953,"start2":23953,"length1":24,"length2":79}]],"length":30118,"saved":false}
{"ts":1351033726142,"patch":[[{"diffs":[[0,"m = 0;\n\n"],[1,"// The position of a cubie in the state and the face that corresponds to the edge window for it.\n"],[0,"RubixSta"]],"start1":24584,"start2":24584,"length1":16,"length2":113}]],"length":30215,"saved":false}
{"ts":1351033737892,"patch":[[{"diffs":[[0," bottom\n];\n\n"],[1,"//A face set for parity checks.\n"],[0,"RubixState.f"]],"start1":24523,"start2":24523,"length1":24,"length2":56}]],"length":30247,"saved":false}
{"ts":1351033741627,"patch":[[{"diffs":[[0,"m\n];\n\n//"],[1," "],[0,"A face s"]],"start1":24529,"start2":24529,"length1":16,"length2":17},{"diffs":[[0,".faceSet = [];\n\n"],[1,"// \n"],[0,"RubixState.edgeW"]],"start1":24578,"start2":24578,"length1":32,"length2":36}]],"length":30252,"saved":false}
{"ts":1351033767490,"patch":[[{"diffs":[[0,"[];\n\n// "],[1,"The sum of edge windows ."],[0,"\nRubixSt"]],"start1":24589,"start2":24589,"length1":16,"length2":41}]],"length":30277,"saved":false}
{"ts":1351033771126,"patch":[[{"diffs":[[0," windows"],[-1," "],[0,".\nRubixS"]],"start1":24612,"start2":24612,"length1":17,"length2":16}]],"length":30276,"saved":false}
{"ts":1351033774825,"patch":[[{"diffs":[[0,"face set for"],[1,"c orner"],[0," parity chec"]],"start1":24540,"start2":24540,"length1":24,"length2":31}]],"length":30283,"saved":false}
{"ts":1351033778479,"patch":[[{"diffs":[[0," set for"],[-1,"c"],[0," "],[1,"c"],[0,"orner pa"]],"start1":24544,"start2":24544,"length1":18,"length2":18}]],"length":30283,"saved":false}
{"ts":1351033804313,"patch":[[{"diffs":[[0,"4  \n};\n\n"],[1,"// An array used in data output for a state.\n"],[0,"RubixSta"]],"start1":24874,"start2":24874,"length1":16,"length2":61}]],"length":30328,"saved":false}
{"ts":1351033834564,"patch":[[{"diffs":[[0," = [];\n\n"],[1,"// A mapping that defines the translation of the state to a human readable form.\n"],[0,"RubixSta"]],"start1":24949,"start2":24949,"length1":16,"length2":97}]],"length":30409,"saved":false}
{"ts":1351034465964,"patch":[[{"diffs":[[0,"--- */\n\n"],[-1,"\n"],[0,"// Defin"]],"start1":99,"start2":99,"length1":17,"length2":16}]],"length":30408,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351041363374,"patch":[[{"diffs":[[0," O enter"],[-1,""],[0,""],[1," the center edge cubie switch.\n    // Else enter the top and bottom cubie switch (this cuts down on value overlap."],[0,"\n    if("]],"start1":14195,"start2":14195,"length1":16,"length2":130},{"diffs":[[0,"\n    }\n    \n"],[1,"    // Do error checking and contribute to the parity check.\n"],[0,"    if(!Rubi"]],"start1":17006,"start2":17006,"length1":24,"length2":85},{"diffs":[[0,"sition;\n};\n\n"],[1,"/**\n * A helper function to reduce cyclomatic complexity in processEdge. Finds the \n * index of a specified face character in a face array.\n * \n * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * \n * @param faceChar The face charcter to find the index for.\n * \n * @return The index of the sought face.\n * \n * @throws FError The face was not found in the supplied faces.\n */\n"],[0,"RubixState.f"]],"start1":17195,"start2":17195,"length1":24,"length2":484},{"diffs":[[0," }    \n    \n"],[1,"    // The face wasn't found.\n"],[0,"    if(index"]],"start1":17864,"start2":17864,"length1":24,"length2":54},{"diffs":[[0,"x;\n};\n\n\n"],[-1,""],[0,""],[1,"/**\n * Verifies some local orientation details about the cubie and contributes to the \n * global parity check for either the edges or corners (depending on the supplied cubie.\n * \n * @param faces An array of face arrays. Each face array contains a character and \n *      the face that the character corresponds to.\n * \n * @param faceComp A string representing the face.\n * \n * @param cubie The index of the cubie in the proposed final state (not used on corners.).\n * \n * @throws DupeColorError Thrown if any duplicate colors are detected in the cubie.\n * \n * @throws EWindowError Thrown if the cubie is an edge and it didn't exist on an edge window (pretty much impossible). \n */"],[0,"\nRubixSt"]],"start1":17996,"start2":17996,"length1":16,"length2":696},{"diffs":[[0,"=false;\n"],[1,"    \n"],[0,"    for("]],"start1":18781,"start2":18781,"length1":16,"length2":21},{"diffs":[[0,"== 3)\n        {\n"],[1,"            // Corner\n"],[0,"            Rubi"]],"start1":19055,"start2":19055,"length1":32,"length2":54},{"diffs":[[0,"ex][1])\n"],[-1,"\n"],[0,"        "]],"start1":19280,"start2":19280,"length1":17,"length2":16},{"diffs":[[0,"][1])\n        {\n"],[1,"            \n            // Edge\n"],[0,"            Rubi"]],"start1":19282,"start2":19282,"length1":32,"length2":65},{"diffs":[[0,"\n    }\n    \n"],[1,"    // IF this was an edge and the edge window wasn't found.\n"],[0,"    if(cubie"]],"start1":19668,"start2":19668,"length1":24,"length2":85},{"diffs":[[0,"n true;\n};\n\n"],[1,"/**\n * Performs a rotation of a single face in the state.\n * \n * @param state The RubixState array that is to be rotated on one face.\n * \n * @param face The face the rotation is to occur about.\n * \n * @param rotations The number of 90 degree motions to occur in this move (1-3)\n * \n * @return The revised state.\n */\n"],[0,"RubixState.r"]],"start1":19824,"start2":19824,"length1":24,"length2":340},{"diffs":[[0,"ate.rotate ="],[-1," "],[0,"function(sta"]],"start1":20159,"start2":20159,"length1":25,"length2":24},{"diffs":[[0,"ndicies[index];\n"],[1,"\n"],[0,"        RubixSta"]],"start1":20771,"start2":20771,"length1":32,"length2":33},{"diffs":[[0,"        "],[-1,"    // Corner\n        "],[0,""],[1,""],[0,"state[cu"]],"start1":20870,"start2":20870,"length1":38,"length2":16},{"diffs":[[0,"   \n"],[-1,"            \n            // Edge\n"],[0,"    "]],"start1":21130,"start2":21130,"length1":41,"length2":8},{"diffs":[[0," \n    }\n};\n\n"],[1,"/**\n * Modifies the state of a single cubie in the rotation process.\n * \n * @param cubieState A bit mappping of the cubie that is to be rotated.\n * \n * @param face The face that the rotation is occuring on.\n * \n * @param rotations The number of 90 degree motions to occur in this move (1-3)\n * \n * @return The revised cubieState containg the new face.\n */\n"],[0,"RubixState.r"]],"start1":21197,"start2":21197,"length1":24,"length2":380},{"diffs":[[0,"rotations)\n{"],[-1,"\n"],[0,""],[1,""],[0,"    \n    var"]],"start1":21616,"start2":21616,"length1":25,"length2":24},{"diffs":[[0,"ieState "],[1," "],[0,"- faceVa"]],"start1":21692,"start2":21692,"length1":16,"length2":17},{"diffs":[[0,"ceVal;\n\n"],[1,"    // If the face has a mapping (isn't the same or opposite face) modify the state."],[0,"\n    if "]],"start1":21705,"start2":21705,"length1":16,"length2":100},{"diffs":[[0,"    if ("],[-1," "],[0,"RubixSta"]],"start1":21798,"start2":21798,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"    // IF this was an edge and the edge window wasn't found.\n"],[0,"    "]],"start1":21850,"start2":21850,"length1":69,"length2":8},{"diffs":[[0,"s a "],[-1,"rotation of a single face in the state"],[1,"check to determine if two states are equivalent"],[0,".\n *"]],"start1":22001,"start2":22001,"length1":46,"length2":55},{"diffs":[[0,"\n * @param state"],[1,"A"],[0," The "],[1,"first "],[0,"RubixState array"]],"start1":22057,"start2":22057,"length1":37,"length2":44},{"diffs":[[0,"ate "],[-1,"a"],[1,"A"],[0,"rray"],[-1," that is to be rotated on one face.\n * \n * @param face The face the rotation is to occur about.\n * \n * @param rotations The number of 90 degree motions to occur in this move (1-3)\n * \n * @return The revised state"],[1,"Buffer to compare.\n * \n * @param stateA The second RubixState ArrayBuffer to compare.\n * \n * @return True if equivalent, false if not"],[0,".\n *"]],"start1":22092,"start2":22092,"length1":225,"length2":146},{"diffs":[[0,"};\n\n"],[-1,"RubixState.copy = function(state)\n{\n    return new Uint8Array(state.buffer.slice(0));\n};\n\nRubixState.hashCorners = function(state)\n{"],[1,"/**\n * Creates a copy of the RubixState ArrayBuffer, prevents rotation clobbering.\n * \n * @param state The RubixState to copy.\n * \n * @return A copy of the ArrayBuffer and a new TypedArray view.\n */\nRubixState.copy = function(state)\n{\n    return new Uint8Array(state.buffer.slice(0));\n};\n\n/**\n * Hashes the corners of a supplied state for table lookup.\n * \n * @param state The state to get a hash for.\n * \n * @return A number with the hashed value.\n */\nRubixState.hashCorners = function(state)\n{\n    /*\n     *hashPos: aggregates the hash position total (f1())\n     *hashOrient: aggregates the hash orientation total (f2())\n     *fact: A factorial used in the position portion of the hash.\n     *expo: The exponential value used in calculating the orientation portion of the hash.    \n    */"],[0,"\n   "]],"start1":22571,"start2":22571,"length1":140,"length2":798},{"diffs":[[0,"index = "],[-1,"1"],[1,"0"],[0,"; index "]],"start1":23441,"start2":23441,"length1":17,"length2":17},{"diffs":[[0," index++)\n    {\n"],[1,"        // f1(n) = sum(n! * state[n].value) from n=1 to n=7\n"],[0,"        fact *= "]],"start1":23462,"start2":23462,"length1":32,"length2":92},{"diffs":[[0,"* fact;\n"],[1,"        \n        // f2(n) = sum(3^n * state[n].face) from n=0 to n = 6\n"],[0,"        "]],"start1":23606,"start2":23606,"length1":16,"length2":87},{"diffs":[[0,"= 3;\n    }\n    \n"],[1,"    // f(n) = 12*f1(n) + f2(n)\n"],[0,"    return hashP"]],"start1":23748,"start2":23748,"length1":32,"length2":63},{"diffs":[[0," hashPos"],[-1," * "],[1,"*"],[0,"12 + has"]],"start1":23805,"start2":23805,"length1":19,"length2":17},{"diffs":[[0,",'O','W'];\n\n"],[1,"// A mapping of the face to it's arbitrary face value.\n"],[0,"RubixState.f"]],"start1":23952,"start2":23952,"length1":24,"length2":79},{"diffs":[[0,"de.\n"],[-1,"@param cubieState A bit mappping of the cubie that is to be rotated.\n * \n * @param face The face that the rotation is occuring on.\n * \n * \n * @param rotations The number of 90 degree motions to occur in this move (1-3) * \n * @return The revised cubieState containg the new face.\n"],[0," */\n"]],"start1":24209,"start2":24209,"length1":287,"length2":8},{"diffs":[[0,"];\n\n"],[-1,"RubixState.faceSet = [];\n\nRubixState.edgeWindowSum = 0;\n\nRubixState.edgeWindows ={\n  8:0,\n  9:1,\n  10:3,\n  11:0,\n  12:5,\n  13:2,\n  14:2,\n  15:5,\n  16:1,\n  17:4,\n  18:3,\n  19:4  \n};\n\n/**\n * Performs a check to determine if two states are equivalent.\n * \n * @param stateA The second RubixState ArrayBuffer to compare.\n * \n * @param stateA The first RubixState ArrayBuffer to compare.\n * \n * @return True if equivalent, false if not.\n */\nRubixState.outputFaces = [];\n"],[1,"// A face set for corner parity checks.\nRubixState.faceSet = [];\n\n// The sum of edge windows.\nRubixState.edgeWindowSum = 0;\n\n// The position of a cubie in the state and the face that corresponds to the edge window for it.\nRubixState.edgeWindows ={\n  8:0,\n  9:1,\n  10:3,\n  11:0,\n  12:5,\n  13:2,\n  14:2,\n  15:5,\n  16:1,\n  17:4,\n  18:3,\n  19:4  \n};\n\n// An array used in data output for a state.\nRubixState.outputFaces = [];\n\n// A mapping that defines the translation of the state to a human readable form."],[0,"\nRub"]],"start1":24530,"start2":24530,"length1":472,"length2":510},{"diffs":[[0,"rotation"],[-1,"portion of the "],[0,""],[1,""],[0,"s. This "]],"start1":26018,"start2":26018,"length1":31,"length2":16},{"diffs":[[0,"RB\","],[-1,"\n        \n    \n    // f2(n) = sum(3^n * state[n].face) from n=0 to n = 6"],[0,""],[1,""],[0,"\n   "]],"start1":26300,"start2":26300,"length1":80,"length2":8}]],"length":30408,"saved":false}
{"ts":1351041419881,"patch":[[{"diffs":[[0,"for(var index = "],[-1,"0"],[1,"1"],[0,"; index < 8; ind"]],"start1":23433,"start2":23433,"length1":33,"length2":33}]],"length":30408,"saved":false}
{"ts":1351041457998,"patch":[[{"diffs":[[0,"te()"],[1," "],[0,"{}\n\n"],[-1,"\n"],[0,"/**\n"]],"start1":184,"start2":184,"length1":13,"length2":13}]],"length":30408,"saved":false}
{"ts":1351041463770,"patch":[[{"diffs":[[0," \n    if"],[1," "],[0,"(text.le"]],"start1":715,"start2":715,"length1":16,"length2":17},{"diffs":[[0,"ength !="],[-1," "],[0," 54) \n  "]],"start1":731,"start2":731,"length1":17,"length2":16}]],"length":30408,"saved":false}
{"ts":1351041478674,"patch":[[{"diffs":[[0,"\n    \n    if"],[-1,""],[0,""],[1," "],[0,"(error !== \""]],"start1":1397,"start2":1397,"length1":24,"length2":25},{"diffs":[[0,"ur data.\n    for"],[-1,""],[0,""],[1," "],[0,"(var index = 0, "]],"start1":1614,"start2":1614,"length1":32,"length2":33},{"diffs":[[0,"  switch"],[-1,""],[0,""],[1," "],[0,"(index)\n"]],"start1":1843,"start2":1843,"length1":16,"length2":17},{"diffs":[[0,"ays.\n    for"],[-1,""],[0,""],[1," "],[0,"(var face in"]],"start1":2423,"start2":2423,"length1":24,"length2":25},{"diffs":[[0,"vancing.\n    for"],[1," "],[0,"(index = 0; inde"]],"start1":2558,"start2":2558,"length1":32,"length2":33},{"diffs":[[0,"    {\n        if"],[1," "],[0,"(RubixState.face"]],"start1":2619,"start2":2619,"length1":32,"length2":33}]],"length":30414,"saved":false}
{"ts":1351041539058,"patch":[[{"diffs":[[0,"\n    try"],[-1,""],[0,""],[1," "],[0,"{\n      "]],"start1":3588,"start2":3588,"length1":16,"length2":17},{"diffs":[[0,"      if"],[-1,""],[0,""],[1," "],[0,"(((Rubix"]],"start1":4575,"start2":4575,"length1":16,"length2":17},{"diffs":[[0,"      if"],[-1,""],[0,""],[1," "],[0,"(RubixSt"]],"start1":5993,"start2":5993,"length1":16,"length2":17},{"diffs":[[0,"   }"],[1," \n    "],[0,"catch"],[1," "],[0,"(err"]],"start1":6167,"start2":6167,"length1":13,"length2":20},{"diffs":[[0,"      if"],[1," "],[0,"(error ="]],"start1":6200,"start2":6200,"length1":16,"length2":17},{"diffs":[[0," else if"],[-1,""],[0,""],[1," "],[0,"(error ="]],"start1":6344,"start2":6344,"length1":16,"length2":17},{"diffs":[[0,"e array.\n    for"],[-1,""],[0,""],[1," "],[0,"(var index=0; in"]],"start1":8276,"start2":8276,"length1":32,"length2":33},{"diffs":[[0,"      if"],[-1,""],[0,""],[1," "],[0,"(tempInd"]],"start1":8504,"start2":8504,"length1":16,"length2":17},{"diffs":[[0,"     for"],[-1,""],[0,""],[1," "],[0,"(tempInd"]],"start1":8900,"start2":8900,"length1":16,"length2":17},{"diffs":[[0,"\n    for"],[-1,""],[0,""],[1," "],[0,"(index ="]],"start1":9278,"start2":9278,"length1":16,"length2":17},{"diffs":[[0,"     \n        if"],[-1,""],[0,""],[1," "],[0,"(index === 2 || "]],"start1":9406,"start2":9406,"length1":32,"length2":33},{"diffs":[[0," else if"],[-1,""],[0,""],[1," "],[0,"(index ="]],"start1":9652,"start2":9652,"length1":16,"length2":17},{"diffs":[[0,"this is.\n    for"],[-1,""],[0,""],[1," "],[0,"(var index in fa"]],"start1":10336,"start2":10336,"length1":32,"length2":33}]],"length":30433,"saved":false}
{"ts":1351041565282,"patch":[[{"diffs":[[0,"ssCorner"],[-1,":"],[1," : "],[0,"RubixSta"]],"start1":10573,"start2":10573,"length1":17,"length2":19}]],"length":30435,"saved":false}
{"ts":1351043298085,"patch":[[{"diffs":[[0,"nt;\n};\n\n"],[1,"/**\n * Hashes the corners of a supplied state for table lookup.\n * \n * @param state The state to get a hash for.\n * \n * @return A number with the hashed value.\n */\nRubixState.hashCorners_orig = function(state)\n{\n    /*\n     *hashPos: aggregates the hash position total (f1())\n     *hashOrient: aggregates the hash orientation total (f2())\n     *fact: A factorial used in the position portion of the hash.\n     *expo: The exponential value used in calculating the orientation portion of the hash.    \n    */\n    var hashPos = 0, hashOrient = 0, fact = 1, expo = 1; \n    \n    for(var index = 1; index < 8; index++)\n    {\n        // f1(n) = sum(n! * state[n].value) from n=1 to n=7\n        fact *= (index + 1);\n        hashPos += (state[index] >> 3) * fact;\n        \n        // f2(n) = sum(3^n * state[n].face) from n=0 to n = 6\n        hashOrient += (state[index] & 7) + expo;\n        expo *= 3;\n    }\n    \n    // f(n) = 12*f1(n) + f2(n)\n    return hashPos*12 + hashOrient;\n};\n\n"],[0,"// The f"]],"start1":23854,"start2":23854,"length1":16,"length2":992}]],"length":31411,"saved":false}
{"ts":1351043387488,"patch":[[{"diffs":[[0," n=7"],[-1,"\n        fact *= (index + 1);\n        hashPos += (state[index] >> 3) * fact;\n        \n        // f2(n) = sum(3^n * state[n].face) from n=0 to n = 6\n        hashOrient += (state[index] & 7) + expo;\n        expo *= 3;\n    }\n    \n    // f(n) = 12*f1(n) + f2(n)\n    return hashPos*12 + hashOrient;\n};\n\n/**\n * Hashes the corners of a supplied state for table lookup.\n * \n * @param state The state to get a hash for.\n * \n * @return A number with the hashed value.\n */\nRubixState.hashCorners_orig = function(state)\n{\n    /*\n     *hashPos: aggregates the hash position total (f1())\n     *hashOrient: aggregates the hash orientation total (f2())\n     *fact: A factorial used in the position portion of the hash.\n     *expo: The exponential value used in calculating the orientation portion of the hash.    \n    */\n    var hashPos = 0, hashOrient = 0, fact = 1, expo = 1; \n    \n    for(var index = 1; index < 8; index++)\n    {\n        // f1(n) = sum(n! * state[n].value) from n=1 to n=7"],[1," (n=0 is always 0)"],[0,"\n   "]],"start1":23560,"start2":23560,"length1":984,"length2":26}]],"length":30453,"saved":false}
{"ts":1351043426862,"patch":[[{"diffs":[[0,"+ f2(n)\n    "],[1,"//"],[0,"return hashP"]],"start1":23832,"start2":23832,"length1":24,"length2":26},{"diffs":[[0,"Orient;\n"],[1,"    return hashPos * 4096 + hashOrient;\n"],[0,"};\n\n// T"]],"start1":23870,"start2":23870,"length1":16,"length2":56}]],"length":30495,"saved":false}
{"ts":1351044747538,"patch":[[{"diffs":[[0,"Orient;\n"],[1,"    \n"],[0,"    retu"]],"start1":23870,"start2":23870,"length1":16,"length2":21}]],"length":30500,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351094781983,"patch":[[{"diffs":[[0," f(n) = "],[-1,"1"],[0,"2"],[1,"187"],[0,"*f1(n) +"]],"start1":23815,"start2":23815,"length1":18,"length2":20},{"diffs":[[0,"hashPos*"],[-1,"1"],[0,"2"],[1,"187"],[0," + hashO"]],"start1":23855,"start2":23855,"length1":18,"length2":20},{"diffs":[[0,"s * "],[-1,"4096"],[1,"2187"],[0," + h"]],"start1":23904,"start2":23904,"length1":12,"length2":12}]],"length":30504,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351117672079,"patch":[[{"diffs":[[0,"\n  8"],[-1,":"],[1," : "],[0,"0,\n  9"],[-1,":"],[1," : "],[0,"1,\n "]],"start1":24877,"start2":24877,"length1":16,"length2":20}]],"length":30508,"saved":false}
{"ts":1351117688920,"patch":[[{"diffs":[[0," ={\n  8 "],[1," "],[0,": 0,\n  9"]],"start1":24874,"start2":24874,"length1":16,"length2":17},{"diffs":[[0," 0,\n  9 "],[1," "],[0,": 1,\n  1"]],"start1":24884,"start2":24884,"length1":16,"length2":17},{"diffs":[[0,"  10"],[-1,":"],[1," : "],[0,"3,\n  11"],[-1,":"],[1," : "],[0,"0,\n  12"],[-1,":"],[1," : "],[0,"5,\n  13"],[-1,":"],[1," : "],[0,"2,\n  14"],[-1,":"],[1," : "],[0,"2,\n  15"],[-1,":"],[1," : "],[0,"5,\n  16"],[-1,":"],[1," : "],[0,"1,\n  17"],[-1,":"],[1," : "],[0,"4,\n  18"],[-1,":"],[1," : "],[0,"3,\n  19"],[-1,":"],[1," : "],[0,"4  \n"]],"start1":24898,"start2":24898,"length1":81,"length2":101}]],"length":30530,"saved":false}
{"ts":1351138588830,"patch":[[{"diffs":[[0,"   }"],[-1,"\n\n    /*\n    for(var i =0; i < 6; i++)\n    {\n        for(var j = 1; j < 4; j++)\n        {\n            \n        RubixState.rotate(state, i, j);\n        console.log(i,j,RubixState.toString(state));\n        RubixState.rotate(state, i,2 - (j - 2));\n        }\n    }\n    console.log(RubixState.toString(state));\n    */\n"],[0,"    "]],"start1":7222,"start2":7222,"length1":321,"length2":8},{"diffs":[[0," index=0"],[-1,"; index <"],[1,",size ="],[0," state.l"]],"start1":7984,"start2":7984,"length1":25,"length2":23},{"diffs":[[0," = state.length;"],[1," index < size ;"],[0," index++) \n    {"]],"start1":7997,"start2":7997,"length1":32,"length2":47}]],"length":30230,"saved":false}
{"ts":1351138591025,"patch":[[{"diffs":[[0,"x < size"],[-1," "],[0,"; index+"]],"start1":8018,"start2":8018,"length1":17,"length2":16}]],"length":30229,"saved":false}
{"ts":1351138601711,"patch":[[{"diffs":[[0,"  for (index = 0"],[1,", size =RubixState.outputFaces.length "],[0,"; index < RubixS"]],"start1":8980,"start2":8980,"length1":32,"length2":70}]],"length":30267,"saved":false}
{"ts":1351138608103,"patch":[[{"diffs":[[0,"ex <"],[-1," RubixState.outputFaces.length"],[1,"size"],[0,"; in"]],"start1":9039,"start2":9039,"length1":38,"length2":12}]],"length":30241,"saved":false}
{"ts":1351138610303,"patch":[[{"diffs":[[0," index <"],[1," "],[0,"size; in"]],"start1":9035,"start2":9035,"length1":16,"length2":17}]],"length":30242,"saved":false}
{"ts":1351138613408,"patch":[[{"diffs":[[0,", size ="],[1," "],[0,"RubixSta"]],"start1":8996,"start2":8996,"length1":16,"length2":17}]],"length":30243,"saved":false}
{"ts":1351138631308,"patch":[[{"diffs":[[0,"or(var index = 0"],[1,", size"],[0,"; index <= faces"]],"start1":11215,"start2":11215,"length1":32,"length2":38}]],"length":30249,"saved":false}
{"ts":1351138641102,"patch":[[{"diffs":[[0," 0, size"],[-1,"; index <"],[1," "],[0,"= faces."]],"start1":11229,"start2":11229,"length1":25,"length2":17},{"diffs":[[0," = faces.length;"],[1," index <= size;"],[0,"  index++)\n    {"]],"start1":11237,"start2":11237,"length1":32,"length2":47}]],"length":30256,"saved":false}
{"ts":1351138654186,"patch":[[{"diffs":[[0,"or(var index = 0"],[1,", size = faces.length"],[0,"; index < faces."]],"start1":13729,"start2":13729,"length1":32,"length2":53}]],"length":30277,"saved":false}
{"ts":1351138657452,"patch":[[{"diffs":[[0,"th; index < "],[-1,"faces.length"],[1,"size"],[0,";  index++)\n"]],"start1":13764,"start2":13764,"length1":36,"length2":28}]],"length":30269,"saved":false}
{"ts":1351138669824,"patch":[[{"diffs":[[0,"or(var index = 0"],[1,", size = faces.length"],[0,"; index < faces."]],"start1":17489,"start2":17489,"length1":32,"length2":53}]],"length":30290,"saved":false}
{"ts":1351138674902,"patch":[[{"diffs":[[0,"index < "],[-1,"faces.length"],[1,"size"],[0,";  index"]],"start1":17528,"start2":17528,"length1":28,"length2":20}]],"length":30282,"saved":false}
{"ts":1351138695215,"patch":[[{"diffs":[[0,"index < "],[-1,"indicies.length"],[1,"9"],[0,"; index "]],"start1":20402,"start2":20402,"length1":31,"length2":17}]],"length":30268,"saved":false}
{"ts":1351138714897,"patch":[[{"diffs":[[0,"Index =0"],[1,",size = indicies.length"],[0,"; index "]],"start1":20392,"start2":20392,"length1":16,"length2":39},{"diffs":[[0,"index < "],[-1,"9"],[1,"size"],[0,"; index "]],"start1":20425,"start2":20425,"length1":17,"length2":20}]],"length":30294,"saved":false}
{"ts":1351138719208,"patch":[[{"diffs":[[0,"ndex =0,"],[1," "],[0,"size = i"]],"start1":20393,"start2":20393,"length1":16,"length2":17}]],"length":30295,"saved":false}
{"ts":1351138724333,"patch":[[{"diffs":[[0," = 0"],[-1,", size = indicies.length"],[0,"; in"]],"start1":20726,"start2":20726,"length1":32,"length2":8}]],"length":30271,"saved":false}
{"ts":1351138738491,"patch":[[{"diffs":[[0,"ie, size"],[1," = indicies.length"],[0,", newInd"]],"start1":20259,"start2":20259,"length1":16,"length2":34},{"diffs":[[0," size = "],[-1,"indicies.length"],[0,"; index "]],"start1":20419,"start2":20419,"length1":31,"length2":16}]],"length":30274,"saved":false}
{"ts":1351138747449,"patch":[[{"diffs":[[0,"Index =0"],[-1,", size ="],[0," ; index"]],"start1":20410,"start2":20410,"length1":24,"length2":16}]],"length":30266,"saved":false}
{"ts":1351138749511,"patch":[[{"diffs":[[0,"Index =0"],[-1," "],[0,"; index "]],"start1":20410,"start2":20410,"length1":17,"length2":16}]],"length":30265,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351182486113,"patch":[[{"diffs":[[0,"tateB)\n{   \n"],[1,"    console.log(stateA,stateB);\n"],[0,"    /**\n    "]],"start1":22041,"start2":22041,"length1":24,"length2":56}]],"length":30297,"saved":false}
{"ts":1351182845788,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(stateA,stateB);\n"],[0,"    "]],"start1":22049,"start2":22049,"length1":40,"length2":8}]],"length":30265,"saved":false}
