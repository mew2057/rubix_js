{"ts":1350431624818,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n\r\n\r\n// I can actually halve the size of this,but I'm not doing that unless I have to(it's hard...)\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState()\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = null;   \r\n    \r\n}\r\n\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n// The logic behind this still works and only one copy of this need exist.\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\nRubixState.faceSet = [];\r\n\r\n/**\r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n */\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    var cubie, size,newIndex, cFace,offset;\r\n    \r\n    for (var index = 0, scratchIndex = 0; index < indicies.length; index ++)\r\n    {\r\n        cubie = indicies[index];\r\n        size = cubie >= 24 ? 2 : 3;\r\n        for (cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    //3,2, 3,2, 3,2, 3,2    \r\n    for (index = 0; index < indicies.length; index+=2)\r\n    {\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        for (offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n\r\n        \r\n        for (offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    var faceVal = Number(faceState >> 4);\r\n    var colorVal = faceState & 7;\r\n\r\n    if (RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\r\n    }\r\n    else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA -John\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\nRubixState.createWithString = function(text)\r\n{\r\n     var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line = \" \", length = text.length / 9; index < length; index++)\r\n    {\r\n        line = text.substring(index*9, index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n\r\n    return state;\r\n};\r\n\r\n//*=face +=color -=unused\r\n//-***-+++ \r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\nRubixState.copy = function(state)\r\n{\r\n    var newState = new RubixState(), copy = state.cubies.buffer.slice(0);\r\n    newState.cubies = new Uint8Array(copy);\r\n   \r\n    return newState;\r\n};\r\n\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n\r\n    for (var index = 0, length = state1.cubies.length; index < length; index++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);\r\n        \r\n        if (!equal)\r\n        {\r\n            break;    \r\n        }\r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\nRubixState.colorID = function(face)\r\n{\r\n    return RubixState.faceValues[face & 7];\r\n};\r\n\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\nRubixState.findCubie = function(state, cubie)\r\n{\r\n    var cubies = [];\r\n};\r\n\r\nRubixState.cubieMap = {\r\n    0 : [0, 1, 2],\r\n    1 : [],\r\n    2 : [3, 4, 5],\r\n    3 : [],\r\n    4 : [],\r\n    5 : [6, 7, 8],\r\n    6 : [],\r\n    7 : [9, 10, 11],\r\n    8 : [],\r\n    9 : [],\r\n    10 : [],\r\n    11 : [],\r\n    12 : [15, 16, 17],\r\n    13 : [],\r\n    14 : [18, 19, 20],\r\n    15 : [],\r\n    16 : [],\r\n    17 : [12, 13, 14],\r\n    18 : [],\r\n    19 : [21, 22, 23],\r\n    20 : []\r\n};\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n * \r\n * There's probably a better way to do this...\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":15553}]],"length":15553}
