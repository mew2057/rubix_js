{"ts":1349923997524,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1349923974034,"patch":[[{"diffs":[[1,"function node()\n{\n    \n}"]],"start1":0,"start2":0,"length1":0,"length2":24}]],"length":24,"saved":false}
{"ts":1349924001528,"patch":[[{"diffs":[[0,"ion "],[-1,"n"],[1,"N"],[0,"ode("],[1,"state"],[0,")\n{\n    "],[1,"this.state=statel\n}\n"],[0,"\n"],[-1,"}"]],"start1":5,"start2":5,"length1":19,"length2":43}]],"length":48,"saved":false}
{"ts":1349924002387,"patch":[[{"diffs":[[0,"tate"],[-1,"l"],[1,";"],[0,"\n}\n\n"]],"start1":39,"start2":39,"length1":9,"length2":9}]],"length":48,"saved":false}
{"ts":1349924079771,"patch":[[{"diffs":[[0,"de(state"],[1,",parent"],[0,")\n{\n    "]],"start1":11,"start2":11,"length1":16,"length2":23},{"diffs":[[0,"=state;\n"],[1,"    this.parent=parent;\n"],[0,"}\n\n"]],"start1":44,"start2":44,"length1":11,"length2":35}]],"length":79,"saved":false}
{"ts":1349924083578,"patch":[[{"diffs":[[0,"s.state="],[1,"_"],[0,"state;\n "]],"start1":37,"start2":37,"length1":16,"length2":17},{"diffs":[[0,".parent="],[1,"_"],[0,"parent;\n"]],"start1":61,"start2":61,"length1":16,"length2":17}]],"length":81,"saved":false}
{"ts":1349924085856,"patch":[[{"diffs":[[0,"on Node("],[1,"_"],[0,"state,pa"]],"start1":6,"start2":6,"length1":16,"length2":17}]],"length":82,"saved":false}
{"ts":1349924091770,"patch":[[{"diffs":[[0,"(_state,"],[1,"_"],[0,"parent)\n"]],"start1":13,"start2":13,"length1":16,"length2":17}]],"length":83,"saved":false}
{"ts":1349924121858,"patch":[[{"diffs":[[0,"is.state"],[-1,"="],[1," = "],[0,"_state;\n"]],"start1":38,"start2":38,"length1":17,"length2":19},{"diffs":[[0,"s.parent"],[-1,"="],[1," = "],[0,"_parent;"]],"start1":64,"start2":64,"length1":17,"length2":19},{"diffs":[[0,"parent;\n"],[1,"    this.action = null;\n"],[0,"}\n\n"]],"start1":76,"start2":76,"length1":11,"length2":35}]],"length":111,"saved":false}
{"ts":1349924248828,"patch":[[{"diffs":[[0,"= null;\n"],[1,"    this.depth = null;\n    this.calculatedPathCost = null;\n"],[0,"}\n\n"]],"start1":100,"start2":100,"length1":11,"length2":70}]],"length":170,"saved":false}
{"ts":1349924269476,"patch":[[{"diffs":[[0,"unction "],[1,"Rubix"],[0,"Node(_st"]],"start1":1,"start2":1,"length1":16,"length2":21},{"diffs":[[0,"ull;\n}\n\n"],[1,"\n"]],"start1":167,"start2":167,"length1":8,"length2":9}]],"length":176,"saved":false}
{"ts":1349924297751,"patch":[[{"diffs":[[0,"ull;\n}\n\n"],[1,"RubixNode.prototype.pathCost = function()\n{\n    \n}"],[0,"\n"]],"start1":167,"start2":167,"length1":9,"length2":59}]],"length":226,"saved":false}
{"ts":1349924299556,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n"]],"start1":217,"start2":217,"length1":9,"length2":10}]],"length":227,"saved":false}
{"ts":1349924326330,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"if(this.calculatedPathCost)\n    {\n        \n    }"],[0,"\n};\n"]],"start1":215,"start2":215,"length1":12,"length2":60}]],"length":275,"saved":false}
{"ts":1349924335222,"patch":[[{"diffs":[[0,"        "],[1,"return    calculatedPathCost;"],[0,"\n    }\n}"]],"start1":257,"start2":257,"length1":16,"length2":45}]],"length":304,"saved":false}
{"ts":1349924342640,"patch":[[{"diffs":[[0,"return  "],[-1,"  "],[1,"this."],[0,"calculat"]],"start1":265,"start2":265,"length1":18,"length2":21}]],"length":307,"saved":false}
{"ts":1349924346956,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    else{\n        \n    }\n"],[0,"};\n"]],"start1":296,"start2":296,"length1":11,"length2":36}]],"length":332,"saved":false}
{"ts":1349924359984,"patch":[[{"diffs":[[0,"    else"],[1,"\n    "],[0,"{\n      "]],"start1":304,"start2":304,"length1":16,"length2":21},{"diffs":[[0,"        "],[1,"//TODO path calculations    "],[0,"\n    }\n}"]],"start1":319,"start2":319,"length1":16,"length2":44}]],"length":365,"saved":false}
{"ts":1349924360825,"patch":[[{"diffs":[[0,"ulations"],[1,"."],[0,"    \n   "]],"start1":343,"start2":343,"length1":16,"length2":17}]],"length":366,"saved":false}
{"ts":1349924393406,"patch":[[{"diffs":[[0," else\n    {\n"],[1,"        var tempCost = this.parent.path();\n"],[0,"        //TO"]],"start1":307,"start2":307,"length1":24,"length2":67}]],"length":409,"saved":false}
{"ts":1349924397411,"patch":[[{"diffs":[[0,"ent.path"],[1,"Cost"],[0,"();\n    "]],"start1":350,"start2":350,"length1":16,"length2":20}]],"length":413,"saved":false}
{"ts":1349924410758,"patch":[[{"diffs":[[0,"l;\n    this."],[-1,"calculatedP"],[1,"p"],[0,"athCost = nu"]],"start1":133,"start2":133,"length1":35,"length2":25},{"diffs":[[0,"Cost();\n"],[1,"        \n"],[0,"        "]],"start1":348,"start2":348,"length1":16,"length2":25}]],"length":412,"saved":false}
{"ts":1349924414333,"patch":[[{"diffs":[[0,"\n}\n\n"],[-1,"RubixNode.prototype.pathCost = function()\n{\n    if(this.calculatedPathCost)\n    {\n        return  this.calculatedPathCost;\n    }\n    else\n    {\n        var tempCost = this.parent.pathCost();\n        \n        //TODO path calculations.    \n    }\n};"],[0,"\n"]],"start1":161,"start2":161,"length1":251,"length2":5}]],"length":166,"saved":false}
{"ts":1349924448939,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n   --------------*/\n"],[0,"function"]],"start1":0,"start2":0,"length1":8,"length2":62}]],"length":220,"saved":false}
{"ts":1349924485774,"patch":[[{"diffs":[[0,"ode("],[-1,"_"],[0,"state,"],[-1,"_"],[0,"pare"]],"start1":69,"start2":69,"length1":16,"length2":14},{"diffs":[[0,"state = "],[-1,"_"],[0,"state;\n "]],"start1":98,"start2":98,"length1":17,"length2":16},{"diffs":[[0,"rent"],[1,"Node"],[0," = "],[-1,"_"],[0,"pare"]],"start1":124,"start2":124,"length1":12,"length2":15}]],"length":220,"saved":false}
{"ts":1349924493628,"patch":[[{"diffs":[[0,"   this."],[-1,"s"],[1,"rubixS"],[0,"tate = s"]],"start1":90,"start2":90,"length1":17,"length2":22}]],"length":225,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350134945687,"patch":[[{"diffs":[[0,"= null;\n"],[1,"    this.totalPathCost = 0;\n"],[0,"}\n\n\n"]],"start1":213,"start2":213,"length1":12,"length2":40}]],"length":253,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350233021539,"patch":[[{"diffs":[[0,"= 0;\n}\n\n"],[1,"RubixNode.prototype.getSuccessors()\n{\n    \n}\n\n"],[0,"\n"]],"start1":244,"start2":244,"length1":9,"length2":55}]],"length":299,"saved":false}
{"ts":1350233023040,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n\n"]],"start1":288,"start2":288,"length1":11,"length2":12}]],"length":300,"saved":false}
{"ts":1350233031388,"patch":[[{"diffs":[[0,"ccessors"],[1," = function"],[0,"()\n{\n   "]],"start1":277,"start2":277,"length1":16,"length2":27}]],"length":311,"saved":false}
{"ts":1350233115053,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"for(int i = 0; i < 6; i++)\n    {\n        \n    }"],[0,"\n};\n\n\n"]],"start1":297,"start2":297,"length1":14,"length2":61}]],"length":358,"saved":false}
{"ts":1350233162271,"patch":[[{"diffs":[[0,"= 0;\n}\n\n"],[1,"/**\n * Retrieves and generates nodes for all possible states that may follow the present state.\n */\n"],[0,"RubixNod"]],"start1":244,"start2":244,"length1":16,"length2":116}]],"length":458,"saved":false}
{"ts":1350233169828,"patch":[[{"diffs":[[0,"the "],[-1,"present"],[1,"invoking node's"],[0," sta"]],"start1":329,"start2":329,"length1":15,"length2":23}]],"length":466,"saved":false}
{"ts":1350233193052,"patch":[[{"diffs":[[0,"        "],[1,"for(int i = 0; i < 3; j++)\n        {\n            \n        }\n    \n    "],[0,"\n    }\n}"]],"start1":446,"start2":446,"length1":16,"length2":85}]],"length":535,"saved":false}
{"ts":1350233196160,"patch":[[{"diffs":[[0,"       }"],[-1,"\n    \n "],[0,"   \n    "]],"start1":505,"start2":505,"length1":23,"length2":16}]],"length":528,"saved":false}
{"ts":1350233200613,"patch":[[{"diffs":[[0,"ion()\n{\n    for("],[-1,"int"],[1,"var"],[0," i = 0; i < 6; i"]],"start1":401,"start2":401,"length1":35,"length2":35}]],"length":528,"saved":false}
{"ts":1350233203946,"patch":[[{"diffs":[[0,"for("],[-1,"int"],[1,"var"],[0," i ="]],"start1":454,"start2":454,"length1":11,"length2":11}]],"length":528,"saved":false}
{"ts":1350233209200,"patch":[[{"diffs":[[0,"for(var "],[-1,"i"],[1,"j"],[0," = 0; "],[-1,"i"],[1,"j"],[0," < 3; j+"]],"start1":454,"start2":454,"length1":24,"length2":24}]],"length":528,"saved":false}
{"ts":1350233226965,"patch":[[{"diffs":[[0,"        "],[1,"this.rubixState.rotate("],[0,"\n       "]],"start1":495,"start2":495,"length1":16,"length2":39}]],"length":551,"saved":false}
{"ts":1350233249820,"patch":[[{"diffs":[[0,".rotate("],[1,"i,j);"],[0,"\n       "]],"start1":518,"start2":518,"length1":16,"length2":21}]],"length":556,"saved":false}
{"ts":1350233289366,"patch":[[{"diffs":[[0,"ixState."],[1,"copy()."],[0,"rotate(i"]],"start1":511,"start2":511,"length1":16,"length2":23}]],"length":563,"saved":false}
{"ts":1350233304949,"patch":[[{"diffs":[[0,"unction()\n{\n"],[1,"    var successors = [];\n"],[0,"    for(var "]],"start1":397,"start2":397,"length1":24,"length2":49},{"diffs":[[0,"e.copy()"],[-1,"."],[1,"\n            "],[0,"rotate(i"]],"start1":542,"start2":542,"length1":17,"length2":29}]],"length":600,"saved":false}
{"ts":1350233333713,"patch":[[{"diffs":[[0,"            "],[1,"\n            successors.push(new RubixNode("],[0,"this.rubixSt"]],"start1":516,"start2":516,"length1":24,"length2":67},{"diffs":[[0,"e.copy()"],[1,", this)"],[0,"\n       "]],"start1":585,"start2":585,"length1":16,"length2":23}]],"length":650,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350233447459,"patch":[[{"diffs":[[0,"parent;\n"],[1,"    if(parent)\n    {\n    "],[0,"    this"]],"start1":140,"start2":140,"length1":16,"length2":41},{"diffs":[[0,"ction = "],[-1,"null"],[1,"parent.action"],[0,";\n    th"]],"start1":183,"start2":183,"length1":20,"length2":29},{"diffs":[[0,"depth = "],[-1,"null"],[1,"parent.depth+1"],[0,";\n    th"]],"start1":215,"start2":215,"length1":20,"length2":30},{"diffs":[[0,"t = "],[-1,"null"],[1,"parent.depth + RubixNode.stepCost"],[0,";\n  "]],"start1":255,"start2":255,"length1":12,"length2":41}]],"length":723,"saved":false}
{"ts":1350233476642,"patch":[[{"diffs":[[0,"action;\n"],[1,"    "],[0,"    this"]],"start1":198,"start2":198,"length1":16,"length2":20},{"diffs":[[0,"epth+1;\n"],[1,"    "],[0,"    this"]],"start1":235,"start2":235,"length1":16,"length2":20},{"diffs":[[0,"   this."],[-1,"p"],[1,"totalP"],[0,"athCost "]],"start1":248,"start2":248,"length1":17,"length2":22},{"diffs":[[0,"ent."],[-1,"depth + "],[1,"totalPathCost+"],[0,"Rubi"]],"start1":275,"start2":275,"length1":16,"length2":22},{"diffs":[[0,"st;\n"],[-1,"    this.totalPathCost = 0;\n"],[0,"}\n\n/"]],"start1":309,"start2":309,"length1":36,"length2":8}]],"length":714,"saved":false}
{"ts":1350233478393,"patch":[[{"diffs":[[0,"epCost;\n"],[1,"    }\n"],[0,"}\n\n/**\n "]],"start1":305,"start2":305,"length1":16,"length2":22}]],"length":720,"saved":false}
{"ts":1350233517468,"patch":[[{"diffs":[[0,"-----*/\n"],[1,"   \nRubixNode.stepCost = 1; //Each step only takes one move\n"],[0,"function"]],"start1":46,"start2":46,"length1":16,"length2":76}]],"length":780,"saved":false}
{"ts":1350233523102,"patch":[[{"diffs":[[0,"-*/\n"],[-1,"   \nRubixNode.stepCost = 1;"],[0," //E"]],"start1":50,"start2":50,"length1":35,"length2":8},{"diffs":[[0,"ne move\n"],[1,"RubixNode.stepCost = 1; \n"],[0,"function"]],"start1":79,"start2":79,"length1":16,"length2":41}]],"length":778,"saved":false}
{"ts":1350233524965,"patch":[[{"diffs":[[0,"-----*/\n"],[-1," "],[0,"//Each s"]],"start1":46,"start2":46,"length1":17,"length2":16}]],"length":777,"saved":false}
{"ts":1350233529028,"patch":[[{"diffs":[[0,"t = 1; \n"],[1,"\n"],[0,"function"]],"start1":103,"start2":103,"length1":16,"length2":17}]],"length":778,"saved":false}
{"ts":1350233530399,"patch":[[{"diffs":[[0,"-----*/\n"],[1,"\n"],[0,"//Each s"]],"start1":46,"start2":46,"length1":16,"length2":17}]],"length":779,"saved":false}
{"ts":1350233541393,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    else\n"],[0,"}\n\n/**\n "]],"start1":370,"start2":370,"length1":16,"length2":25}]],"length":788,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350233973047,"patch":[[{"diffs":[[0,"e,parent"],[-1,""],[0,""],[1,",action"],[0,")\n{\n    "]],"start1":136,"start2":136,"length1":16,"length2":23},{"diffs":[[0,"    "],[-1,"if(parent)\n    {\n    "],[1,"\n    // This is a two tuple object containing a face and the number of rotations.\n"],[0,"    "]],"start1":214,"start2":214,"length1":29,"length2":90},{"diffs":[[0,"his."],[-1,"a"],[1,"nodeA"],[0,"ction = "],[-1,"parent."],[0,"action;"],[1,"\n    \n    if(parent)\n    {        "],[0,"\n   "]],"start1":305,"start2":305,"length1":31,"length2":62},{"diffs":[[0,"   else\n"],[1,"    {\n        this.depth = this.totalPathCost = 0;\n    }\n"],[0,"}\n\n/**\n "]],"start1":478,"start2":478,"length1":16,"length2":73},{"diffs":[[0,"s = [];\n"],[1,"    var tempNode = null;\n"],[0,"    for("]],"start1":720,"start2":720,"length1":16,"length2":41},{"diffs":[[0,"    "],[-1,"\n            successors.push("],[1,"tempNode = "],[0,"new "]],"start1":843,"start2":843,"length1":37,"length2":19},{"diffs":[[0,"(), this"],[-1,")"],[1,", [i,j]);"],[0,"\n       "]],"start1":892,"start2":892,"length1":17,"length2":25},{"diffs":[[0,"        "],[1,"tempNode.rubixState."],[0,"rotate(i"]],"start1":914,"start2":914,"length1":16,"length2":36},{"diffs":[[0,"    "],[-1,"}   \n    }"],[1,"    successors.push(tempNode);\n        }   \n    }\n    return successors;"],[0,"\n};\n"]],"start1":959,"start2":959,"length1":18,"length2":80}]],"length":1041,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350259414939,"patch":[[{"diffs":[[0," = 1; \n\n"],[1,"//TODO add heuristic calculation to this.\n"],[0,"function"]],"start1":105,"start2":105,"length1":16,"length2":58},{"diffs":[[0,"low the "],[1,"\n * "],[0,"invoking"]],"start1":661,"start2":661,"length1":16,"length2":20},{"diffs":[[0," state.\n"],[1," * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n"],[0," */\nRubi"]],"start1":688,"start2":688,"length1":16,"length2":162},{"diffs":[[0,"unction()\n{\n"],[1,"    //Initialize placeholders\n"],[0,"    var succ"]],"start1":883,"start2":883,"length1":24,"length2":54},{"diffs":[[0,"= null;\n"],[1,"    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n"],[0,"    for("]],"start1":967,"start2":967,"length1":16,"length2":122},{"diffs":[[0,"j = "],[-1,"0"],[1,"1"],[0,"; j < "],[-1,"3"],[1,"4"],[0,"; j+"]],"start1":1134,"start2":1134,"length1":16,"length2":16},{"diffs":[[0,")\n        {\n"],[1,"            // Create a new node with a copy of the data then rotate the state.\n"],[0,"            "]],"start1":1151,"start2":1151,"length1":24,"length2":104},{"diffs":[[0,"e(i,j);\n"],[-1,"            "],[1,"\n"],[0,"successo"]],"start1":1355,"start2":1355,"length1":28,"length2":17},{"diffs":[[0,"  }   \n    }"],[1,"    \n    "],[0,"\n    return "]],"start1":1397,"start2":1397,"length1":24,"length2":33},{"diffs":[[0,"rs;\n};\n\n"],[1,"RubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n"],[0,"\n"]],"start1":1438,"start2":1438,"length1":9,"length2":114}]],"length":1552,"saved":false}
{"ts":1350259416595,"patch":[[{"diffs":[[0,"(i,j);\n\n"],[1,"            "],[0,"successo"]],"start1":1356,"start2":1356,"length1":16,"length2":28}]],"length":1564,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350272067868,"patch":[[{"diffs":[[0," i++)\n    {\n"],[1,"        if(this.nodeAction && i == this.nodeAction[0])\n        {\n            continue;\n        }\n"],[0,"        for("]],"start1":1106,"start2":1106,"length1":24,"length2":121}]],"length":1661,"saved":false}
{"ts":1350272185524,"patch":[[{"diffs":[[0," j++)\n        {\n"],[1,"             if(this.nodeAction && i == this.nodeAction[0])\n            {\n            }\n"],[0,"            // C"]],"start1":1244,"start2":1244,"length1":32,"length2":120}]],"length":1749,"saved":false}
{"ts":1350272186620,"patch":[[{"diffs":[[0,"            "],[-1," "],[0,"if(this.node"]],"start1":1260,"start2":1260,"length1":25,"length2":24}]],"length":1748,"saved":false}
{"ts":1350272200878,"patch":[[{"diffs":[[0,"s.nodeAction && "],[-1,"i"],[1,"j"],[0," == this.nodeAct"]],"start1":1278,"start2":1278,"length1":33,"length2":33}]],"length":1748,"saved":false}
{"ts":1350272310883,"patch":[[{"diffs":[[0,"    "],[-1,"if(this.nodeAction && j == this.nodeAction[0])\n            {\n            }"],[0,"\n   "]],"start1":1268,"start2":1268,"length1":82,"length2":8}]],"length":1674,"saved":false}
{"ts":1350272419899,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            \n"],[0,"    "]],"start1":1256,"start2":1256,"length1":21,"length2":8}]],"length":1661,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350403687100,"patch":[[{"diffs":[[0,"PathCost"],[-1,"+"],[1," + "],[0,"RubixNod"]],"start1":484,"start2":484,"length1":17,"length2":19},{"diffs":[[0,";\n        }\n"],[1,"        \n"],[0,"        for("]],"start1":1205,"start2":1205,"length1":24,"length2":33},{"diffs":[[0,"]);\n            "],[1,"RubixState.rotate("],[0,"tempNode.rubixSt"]],"start1":1422,"start2":1422,"length1":32,"length2":50},{"diffs":[[0,"empNode."],[-1,"r"],[1,"R"],[0,"ubixStat"]],"start1":1457,"start2":1457,"length1":17,"length2":17},{"diffs":[[0,"bixState"],[-1,".rotate("],[1,","],[0,"i,j);\n\n "]],"start1":1467,"start2":1467,"length1":24,"length2":17},{"diffs":[[0,"rs;\n};\n\n"],[1,"\n"],[0,"RubixNod"]],"start1":1569,"start2":1569,"length1":16,"length2":17}]],"length":1684,"saved":false}
{"ts":1350403701703,"patch":[[{"diffs":[[0,"bixNode("],[1,"RubixState.copy("],[0,"this"],[-1,"."],[0,"rubixSta"]],"start1":1380,"start2":1380,"length1":21,"length2":36}]],"length":1699,"saved":false}
{"ts":1350403702455,"patch":[[{"diffs":[[0,"opy(this"],[1,"."],[0,"rubixSta"]],"start1":1400,"start2":1400,"length1":16,"length2":17}]],"length":1700,"saved":false}
{"ts":1350403706473,"patch":[[{"diffs":[[0,"bixState"],[-1,".copy("],[0,"), this,"]],"start1":1411,"start2":1411,"length1":22,"length2":16}]],"length":1694,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350409637156,"patch":[[{"diffs":[[0,"[i,j]);\n"],[1,"            console.log(RubixState.toString(tempNode.rubixState);\n            \n"],[0,"        "]],"start1":1428,"start2":1428,"length1":16,"length2":95},{"diffs":[[0,"empNode."],[-1,"R"],[1,"r"],[0,"ubixStat"]],"start1":1546,"start2":1546,"length1":17,"length2":17},{"diffs":[[0,"  }    \n"],[-1,""],[0,"    "],[1,"console.log(successors);"],[0,"\n    ret"]],"start1":1626,"start2":1626,"length1":20,"length2":44}]],"length":1797,"saved":false}
{"ts":1350409638823,"patch":[[{"diffs":[[0,"ixState)"],[1,"_"],[0,";\n      "]],"start1":1492,"start2":1492,"length1":16,"length2":17}]],"length":1798,"saved":false}
{"ts":1350409640372,"patch":[[{"diffs":[[0,"ate)"],[-1,"_"],[1,")"],[0,";\n  "]],"start1":1496,"start2":1496,"length1":9,"length2":9}]],"length":1798,"saved":false}
{"ts":1350409644961,"patch":[[{"diffs":[[0,"        "],[-1,"console.log("],[1,"\n            "],[0,"RubixSta"]],"start1":1440,"start2":1440,"length1":28,"length2":29},{"diffs":[[0,"ate."],[-1,"toString"],[1,"rotate"],[0,"(tem"]],"start1":1468,"start2":1468,"length1":16,"length2":14},{"diffs":[[0,"bixState"],[-1,")"],[1,",i,j"],[0,");\n     "]],"start1":1490,"start2":1490,"length1":17,"length2":20},{"diffs":[[0,"            "],[-1,"\n            "],[1,"console.log("],[0,"RubixState.r"]],"start1":1505,"start2":1505,"length1":37,"length2":36},{"diffs":[[0,".log(RubixState."],[-1,"rotate"],[1,"toString"],[0,"(tempNode.rubixS"]],"start1":1524,"start2":1524,"length1":38,"length2":40},{"diffs":[[0,"bixState"],[-1,",i,j"],[1,")"],[0,");\n\n    "]],"start1":1560,"start2":1560,"length1":20,"length2":17}]],"length":1798,"saved":false}
{"ts":1350409716639,"patch":[[{"diffs":[[0,"ixState)"],[1,". this.rubixState"],[0,");\n\n    "]],"start1":1561,"start2":1561,"length1":16,"length2":33}]],"length":1815,"saved":false}
{"ts":1350409719699,"patch":[[{"diffs":[[0,"ixState)"],[-1,"."],[1,","],[0," this.ru"]],"start1":1561,"start2":1561,"length1":17,"length2":17}]],"length":1815,"saved":false}
{"ts":1350409747700,"patch":[[{"diffs":[[0,"ubixState), "],[1,"RubixState.toString("],[0,"this.rubixSt"]],"start1":1559,"start2":1559,"length1":24,"length2":44},{"diffs":[[0,"ixState)"],[1,")"],[0,";\n\n     "]],"start1":1599,"start2":1599,"length1":16,"length2":17}]],"length":1836,"saved":false}
{"ts":1350409781977,"patch":[[{"diffs":[[0,"ixState)"],[1,",i,j"],[0,");\n\n    "]],"start1":1599,"start2":1599,"length1":16,"length2":20}]],"length":1840,"saved":false}
{"ts":1350413925999,"patch":[[{"diffs":[[0,"e,i,j);\n"],[1,"//"],[0,"        "]],"start1":1497,"start2":1497,"length1":16,"length2":18}]],"length":1842,"saved":false}
{"ts":1350413927957,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(successors);\n    "],[1,"\n"],[0,"retu"]],"start1":1675,"start2":1675,"length1":41,"length2":9}]],"length":1810,"saved":false}
{"ts":1350413929349,"patch":[[{"diffs":[[0," }    \n\n"],[1,"    "],[0,"return s"]],"start1":1672,"start2":1672,"length1":16,"length2":20}]],"length":1814,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350433768615,"patch":[[{"diffs":[[0,"ate;"],[1,"    "],[0,"\n    "],[-1,"this."],[1,"if("],[0,"parent"],[-1,"Node = parent;"],[1,")"],[0,"\n    "],[-1,"\n"],[1,"{"],[0,"    "],[-1,"// This is a two tuple object containing a face and the number of rotations.\n    this.nodeAction = action;\n    \n    if(parent)\n    {        \n        this.depth = parent"],[1,"    \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this"],[0,".depth"],[-1,"+1"],[1,"))"],[0,";\n  "]],"start1":221,"start2":221,"length1":224,"length2":145},{"diffs":[[0,"his."],[-1,"totalPathCost = parent.totalPathCost + RubixNode.stepCost;"],[1,"actions = this.actions.set(this.parent.actions, 1);\n        "],[0,"\n   "]],"start1":373,"start2":373,"length1":66,"length2":68},{"diffs":[[0,"th ="],[-1," this.totalPathCost ="],[0," 0;\n"]],"start1":475,"start2":475,"length1":29,"length2":8}]],"length":1716,"saved":false}
{"ts":1350433779688,"patch":[[{"diffs":[[0,"th = 0;\n"],[1,"        this.actions =  new Uint8Array(new ArrayBuffer(this.depth));\n"],[0,"    }\n}\n"]],"start1":475,"start2":475,"length1":16,"length2":85}]],"length":1785,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350433971944,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n   --------------*/\n\n//Each step only takes one move\nRubixNode.stepCost = 1; \n\n//TODO add heuristic calculation to this.\nfunction RubixNode(state,parent,action)\n{\n    this.rubixState = state;\n\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this.depth));\n        this.actions = this.actions.set(this.parent.actions, 1);\n        \n    }\n    else\n    {\n        this.depth = 0;\n    }\n}\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    var tempNode = null;\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i == node.nodeAction[0])\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.\n            tempNode = new RubixNode(RubixState.copy(node.rubixState), node, [i,j]);\n            \n            RubixState.rotate(tempNode.rubixState,i,j);\n\n            successors.push(tempNode);\n        }   \n    }    \n\n    return successors;\n};\n\n\nRubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1601}]],"length":1601,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350433959624,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n   --------------*/\n\n//Each step only takes one move\nRubixNode.stepCost = 1; \n\n//TODO add heuristic calculation to this.\nfunction RubixNode(state,parent,action)\n{\n    this.rubixState = state;\n\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this.depth));\n        this.actions = this.actions.set(this.parent.actions, 1);\n        \n    }\n    else\n    {\n        this.depth = 0;\n    }\n}\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    var tempNode = null;\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i == node.nodeAction[0])\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.\n            tempNode = new RubixNode(RubixState.copy(node.rubixState), node, [i,j]);\n            \n            RubixState.rotate(tempNode.rubixState,i,j);\n\n            successors.push(tempNode);\n        }   \n    }    \n\n    return successors;\n};\n\n\nRubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1601}]],"length":1601,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350433956139,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n   --------------*/\n\n//Each step only takes one move\nRubixNode.stepCost = 1; \n\n//TODO add heuristic calculation to this.\nfunction RubixNode(state,parent,action)\n{\n    this.rubixState = state;\n\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this.depth));\n        this.actions = this.actions.set(this.parent.actions, 1);\n        \n    }\n    else\n    {\n        this.depth = 0;\n    }\n}\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    var tempNode = null;\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i == node.nodeAction[0])\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.\n            tempNode = new RubixNode(RubixState.copy(node.rubixState), node, [i,j]);\n            \n            RubixState.rotate(tempNode.rubixState,i,j);\n\n            successors.push(tempNode);\n        }   \n    }    \n\n    return successors;\n};\n\n\nRubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1601}]],"length":1601,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350433981122,"patch":[[{"diffs":[[0,"his.actions.set("],[-1,"this."],[0,"parent.actions, "]],"start1":390,"start2":390,"length1":37,"length2":32},{"diffs":[[0,";\n\n\n"],[-1,"/* -------------\n    RubixNode.js\n   --------------*/\n\n//Each step only takes one move\nRubixNode.stepCost = 1; \n\n//TODO add heuristic calculation to this.\nfunction RubixNode(state,parent,action)\n{\n    this.rubixState = state;\n\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this.depth));\n        this.actions = this.actions.set(this.parent.actions, 1);\n        \n    }\n    else\n    {\n        this.depth = 0;\n    }\n}\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    var tempNode = null;\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i == node.nodeAction[0])\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.\n            tempNode = new RubixNode(RubixState.copy(node.rubixState), node, [i,j]);\n            \n            RubixState.rotate(tempNode.rubixState,i,j);\n\n            successors.push(tempNode);\n        }   \n    }    \n\n    return successors;\n};\n\n\nRubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n/* -------------\n    RubixNode.js\n   --------------*/\n\n//Each step only takes one move\nRubixNode.stepCost = 1; \n\n//TODO add heuristic calculation to this.\nfunction RubixNode(state,parent,action)\n{\n    this.rubixState = state;\n\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this.depth));\n        this.actions = this.actions.set(this.parent.actions, 1);\n        \n    }\n    else\n    {\n        this.depth = 0;\n    }\n}\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    var tempNode = null;\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i == node.nodeAction[0])\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.\n            tempNode = new RubixNode(RubixState.copy(node.rubixState), node, [i,j]);\n            \n            RubixState.rotate(tempNode.rubixState,i,j);\n\n            successors.push(tempNode);\n        }   \n    }    \n\n    return successors;\n};\n\n\nRubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n/* -------------\n    RubixNode.js\n   --------------*/\n\n//Each step only takes one move\nRubixNode.stepCost = 1; \n\n//TODO add heuristic calculation to this.\nfunction RubixNode(state,parent,action)\n{\n    this.rubixState = state;    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.actions = new Uint8Array(new ArrayBuffer(this.depth));\n        this.actions = this.actions.set(this.parent.actions, 1);\n        \n    }\n    else\n    {\n        this.depth = 0;\n        this.actions =  new Uint8Array(new ArrayBuffer(this.depth));\n    }\n}\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.prototype.getSuccessors = function()\n{\n    //Initialize placeholders\n    var successors = [];\n    var tempNode = null;\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(this.nodeAction && i == this.nodeAction[0])\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.\n            tempNode = new RubixNode(RubixState.copy(this.rubixState), this, [i,j]);\n            \n            RubixState.rotate(tempNode.rubixState,i,j);\n//            console.log(RubixState.toString(tempNode.rubixState), RubixState.toString(this.rubixState),i,j);\n\n            successors.push(tempNode);\n        }   \n    }    \n\n    return successors;\n};\n\n\nRubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n"]],"start1":1592,"start2":1592,"length1":4991,"length2":4}]],"length":1596,"saved":false}
{"ts":1350434046337,"patch":[[{"diffs":[[0,"ons.set("],[1,"\n            "],[0,"parent.a"]],"start1":398,"start2":398,"length1":16,"length2":29},{"diffs":[[0,"ctions, "],[1,"\n            "],[0,"1);\n    "]],"start1":427,"start2":427,"length1":16,"length2":29}]],"length":1622,"saved":false}
{"ts":1350434056742,"patch":[[{"diffs":[[0,"de, "],[-1,"["],[0,"i,j"],[-1,"]"],[0,");\n "]],"start1":1343,"start2":1343,"length1":13,"length2":11}]],"length":1620,"saved":false}
{"ts":1350434061449,"patch":[[{"diffs":[[0,",parent,"],[1,"face, "],[0,"action)\n"]],"start1":179,"start2":179,"length1":16,"length2":22}]],"length":1626,"saved":false}
{"ts":1350434100468,"patch":[[{"diffs":[[0,"epth));\n"],[1,"        this.actions[0] = (face << 4) | action\n"],[0,"        "]],"start1":364,"start2":364,"length1":16,"length2":63}]],"length":1673,"saved":false}
{"ts":1350434124939,"patch":[[{"diffs":[[0,"| action"],[1,";"],[0,"\n       "]],"start1":410,"start2":410,"length1":16,"length2":17}]],"length":1674,"saved":false}
{"ts":1350434270251,"patch":[[{"diffs":[[0,"action;\n        "],[1,"/*"],[0,"this.actions = t"]],"start1":412,"start2":412,"length1":32,"length2":34},{"diffs":[[0,"     1);"],[1,"*/"],[0,"\n       "]],"start1":499,"start2":499,"length1":16,"length2":18}]],"length":1678,"saved":false}
{"ts":1350434320010,"patch":[[{"diffs":[[0,"action;\n"],[1,"        \n        for(var index in parent.actions)\n        {\n            \n        }\n"],[0,"        "]],"start1":412,"start2":412,"length1":16,"length2":99}]],"length":1761,"saved":false}
{"ts":1350434338284,"patch":[[{"diffs":[[0,"  {\n            "],[1,"this.actions[index + 1] = parent.actions[index]"],[0,"\n        }\n     "]],"start1":476,"start2":476,"length1":32,"length2":79}]],"length":1808,"saved":false}
{"ts":1350434338841,"patch":[[{"diffs":[[0,"s[index]"],[1,";"],[0,"\n       "]],"start1":531,"start2":531,"length1":16,"length2":17}]],"length":1809,"saved":false}
{"ts":1350434374700,"patch":[[{"diffs":[[0,"action;\n        "],[1,"console.log(parent.actions);"],[0,"\n        for(var"]],"start1":412,"start2":412,"length1":32,"length2":60}]],"length":1837,"saved":false}
{"ts":1350434381034,"patch":[[{"diffs":[[0,"tions);\n"],[1,"        /*\n"],[0,"        "]],"start1":449,"start2":449,"length1":16,"length2":27},{"diffs":[[0,"        "],[-1,"/*"],[0,"this.act"]],"start1":590,"start2":590,"length1":18,"length2":16}]],"length":1846,"saved":false}
{"ts":1350434464279,"patch":[[{"diffs":[[0,"if(node."],[-1,"nodeA"],[1,"a"],[0,"ction"],[1,"s[0]"],[0," && i =="]],"start1":1273,"start2":1273,"length1":26,"length2":26},{"diffs":[[0,"ode."],[-1,"nodeA"],[1,"a"],[0,"ction"],[1,"s"],[0,"[0]"],[1," >> 4"],[0,")\n  "]],"start1":1301,"start2":1301,"length1":21,"length2":23}]],"length":1848,"saved":false}
{"ts":1350434484407,"patch":[[{"diffs":[[0,".actions"],[-1,"[0"],[0,"] && i ="]],"start1":1280,"start2":1280,"length1":18,"length2":16}]],"length":1846,"saved":false}
{"ts":1350434485662,"patch":[[{"diffs":[[0,".actions"],[-1,"]"],[0," && i =="]],"start1":1280,"start2":1280,"length1":17,"length2":16}]],"length":1845,"saved":false}
{"ts":1350434616655,"patch":[[{"diffs":[[0,"dex];\n        }\n"],[1,"        &/\n"],[0,"        this.act"]],"start1":574,"start2":574,"length1":32,"length2":43},{"diffs":[[0,"     1);"],[-1,"*/"],[0,"\n       "]],"start1":678,"start2":678,"length1":18,"length2":16}]],"length":1854,"saved":false}
{"ts":1350434619580,"patch":[[{"diffs":[[0,"        "],[-1,"&"],[1,"*"],[0,"/\n      "]],"start1":590,"start2":590,"length1":17,"length2":17}]],"length":1854,"saved":false}
{"ts":1350434623191,"patch":[[{"diffs":[[0,".actions"],[1,".buffer"],[0,", \n     "]],"start1":660,"start2":660,"length1":16,"length2":23}]],"length":1861,"saved":false}
{"ts":1350434650779,"patch":[[{"diffs":[[0,"g(parent"],[-1,".actions"],[0,");\n     "]],"start1":438,"start2":438,"length1":24,"length2":16}]],"length":1853,"saved":false}
{"ts":1350434677127,"patch":[[{"diffs":[[0,"     */\n"],[1,"        \n"],[0,"        "]],"start1":585,"start2":585,"length1":16,"length2":25}]],"length":1862,"saved":false}
{"ts":1350434686409,"patch":[[{"diffs":[[0,"th = 0;\n"],[1,"        this.actions = null;\n"],[0,"    }\n}\n"]],"start1":741,"start2":741,"length1":16,"length2":45}]],"length":1891,"saved":false}
{"ts":1350434695327,"patch":[[{"diffs":[[0,"    */\n        \n"],[1,"        if(parent,actions)\n"],[0,"        this.act"]],"start1":586,"start2":586,"length1":32,"length2":59}]],"length":1918,"saved":false}
{"ts":1350434698785,"patch":[[{"diffs":[[0,"ctions)\n        "],[1,"    "],[0,"this.actions = t"]],"start1":621,"start2":621,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"parent.a"]],"start1":678,"start2":678,"length1":16,"length2":20},{"diffs":[[0,"uffer, \n"],[1,"    "],[0,"        "]],"start1":706,"start2":706,"length1":16,"length2":20}]],"length":1930,"saved":false}
{"ts":1350434700802,"patch":[[{"diffs":[[0,"    1);\n"],[1,"    }\n"],[0,"        "]],"start1":726,"start2":726,"length1":16,"length2":22}]],"length":1936,"saved":false}
{"ts":1350434702830,"patch":[[{"diffs":[[0,"    1);\n    "],[-1,"}\n"],[1,"    }\n    "],[0,"        \n   "]],"start1":726,"start2":726,"length1":26,"length2":34}]],"length":1944,"saved":false}
{"ts":1350434704508,"patch":[[{"diffs":[[0,"parent,actions)\n"],[1,"        {\n"],[0,"            this"]],"start1":613,"start2":613,"length1":32,"length2":42}]],"length":1954,"saved":false}
{"ts":1350434708173,"patch":[[{"diffs":[[0,"f(parent"],[-1,","],[1,"."],[0,"actions)"]],"start1":611,"start2":611,"length1":17,"length2":17}]],"length":1954,"saved":false}
{"ts":1350434756586,"patch":[[{"diffs":[[0,"g(parent"],[1,".actions"],[0,");\n     "]],"start1":438,"start2":438,"length1":16,"length2":24}]],"length":1962,"saved":false}
{"ts":1350434788699,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"console."]],"start1":420,"start2":420,"length1":16,"length2":18}]],"length":1964,"saved":false}
{"ts":1350434809192,"patch":[[{"diffs":[[0,"buffer, "],[-1,"\n                "],[0,"1);\n    "]],"start1":725,"start2":725,"length1":33,"length2":16}]],"length":1947,"saved":false}
{"ts":1350434813723,"patch":[[{"diffs":[[0,".buffer,"],[-1," "],[0,"1);\n    "]],"start1":724,"start2":724,"length1":17,"length2":16}]],"length":1946,"saved":false}
{"ts":1350434868421,"patch":[[{"diffs":[[0,"yBuffer("],[1,"parent.actions.buffer,1,"],[0,"this.dep"]],"start1":350,"start2":350,"length1":16,"length2":40},{"diffs":[[0,"        "],[-1,"parent.actions.buffer"],[0,",1);\n   "]],"start1":726,"start2":726,"length1":37,"length2":16}]],"length":1949,"saved":false}
{"ts":1350434874623,"patch":[[{"diffs":[[0,"     */\n        "],[1,"/*"],[0,"\n        if(pare"]],"start1":619,"start2":619,"length1":32,"length2":34},{"diffs":[[0,"  ,1);\n        }"],[1,"*/"],[0,"\n            \n  "]],"start1":734,"start2":734,"length1":32,"length2":34}]],"length":1953,"saved":false}
{"ts":1350434885888,"patch":[[{"diffs":[[0,".actions = n"],[-1,"ull"],[1,"ew Uint8Array(new ArrayBuffer())"],[0,";\n    }\n}\n\n/"]],"start1":823,"start2":823,"length1":27,"length2":56}]],"length":1982,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350438120466,"patch":[[{"diffs":[[0,"nt,face,"],[-1," "],[0,""],[1,""],[0,"action)\n"]],"start1":184,"start2":184,"length1":17,"length2":16},{"diffs":[[0,"epth+1;\n"],[1,"        //this.actions = [];\n"],[0,"        "]],"start1":295,"start2":295,"length1":16,"length2":45},{"diffs":[[0,"fer,"],[1," "],[0,"1,"],[1," "],[0,"this"]],"start1":404,"start2":404,"length1":10,"length2":12},{"diffs":[[0,"s[0] = ("],[-1,"face"],[1,"7"],[0," << 4) |"]],"start1":445,"start2":445,"length1":20,"length2":17},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"//console.log(parent.actions);\n        /*\n        for(var index in parent.actions)\n    "],[1,"else\n"],[0,"    "]],"start1":471,"start2":471,"length1":99,"length2":19},{"diffs":[[0,"    "],[-1,"    "],[0,"this."],[-1,"actions[index + 1] = parent.actions[index];\n        }\n        */\n        /*\n        if(parent.actions)\n        {\n            this.actions = this.actions.set(\n                ,1);\n        }*/\n            \n    }\n    else\n    {\n        this.depth = 0;"],[1,"depth = 0;\n        //this.actions = [];\n"],[0,"\n   "]],"start1":496,"start2":496,"length1":265,"length2":53},{"diffs":[[0,"yBuffer("],[1,"0"],[0,"));\n    "]],"start1":592,"start2":592,"length1":16,"length2":17},{"diffs":[[0,"&& i == "],[1,"("],[0,"node.act"]],"start1":1162,"start2":1162,"length1":16,"length2":17},{"diffs":[[0,"0] >> 4)"],[1,")"],[0,"\n       "]],"start1":1184,"start2":1184,"length1":16,"length2":17},{"diffs":[[0,"e,i,j);\n"],[-1,"\n"],[0,"        "]],"start1":1514,"start2":1514,"length1":17,"length2":16},{"diffs":[[0,"   }    "],[-1,"\n"],[0,""],[1,""],[0,"\n    ret"]],"start1":1575,"start2":1575,"length1":17,"length2":16}]],"length":1718,"saved":false}
{"ts":1350438126268,"patch":[[{"diffs":[[0," = ("],[-1,"7"],[1,"0"],[0," << "]],"start1":449,"start2":449,"length1":9,"length2":9}]],"length":1718,"saved":false}
{"ts":1350438175196,"patch":[[{"diffs":[[0,"Buffer(0));\n"],[1,"        \n"],[0,"    }\n}\n\n/**"]],"start1":593,"start2":593,"length1":24,"length2":33}]],"length":1727,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350489136671,"patch":[[{"diffs":[[0,"ent,"],[-1,"face,"],[1,""],[0,"acti"]],"start1":183,"start2":183,"length1":13,"length2":8},{"diffs":[[0,"te;\n"],[-1,"\n    \n    if(parent)\n    {        \n        this.depth"],[1,"    this.parentNode"],[0," = p"]],"start1":222,"start2":222,"length1":61,"length2":27},{"diffs":[[0,"rent"],[-1,".depth+1"],[0,";\n    "],[1,"\n"],[0,"    //"],[-1,"this.actions = [];\n        this.actions = new Uint8Array(new ArrayBuffer(parent.actions.buffer, 1, this.depth));\n        this."],[1," This is a two tuple object containing a face and the number of rotations.\n    this.nodeAction = ((('o' & 0) | "],[0,"action"],[-1,"s"],[0,"[0]"],[-1," = (0 <<"],[1,") >>"],[0," 4) "]],"start1":250,"start2":250,"length1":172,"length2":145},{"diffs":[[0,"tion"],[1,"[1]"],[0,";\n    "],[-1,"}"],[0,"\n    "],[-1,"else\n    {"],[1,"if(parent)\n    {        "],[0,"\n   "]],"start1":399,"start2":399,"length1":30,"length2":46},{"diffs":[[0,"depth = "],[-1,"0"],[1,"parent.depth+1"],[0,";\n      "]],"start1":455,"start2":455,"length1":17,"length2":30},{"diffs":[[0,"    "],[-1,"//"],[0,"this."],[-1,"actions = [];\n\n        this.actions = new Uint8Array(new ArrayBuffer(0));\n        "],[1,"totalPathCost = parent.totalPathCost + RubixNode.stepCost;\n    }\n    else\n    {\n        this.depth = this.totalPathCost = 0;"],[0,"\n   "]],"start1":483,"start2":483,"length1":97,"length2":137},{"diffs":[[0,"bixNode."],[1,"prototype."],[0,"getSucce"]],"start1":886,"start2":886,"length1":16,"length2":26},{"diffs":[[0,"sors = function("],[-1,"node"],[0,")\n{\n    //Initia"]],"start1":913,"start2":913,"length1":36,"length2":32},{"diffs":[[0,"     if("],[1,"this."],[0,"node"],[-1,".a"],[1,"A"],[0,"ction"],[-1,"s"],[0," && i =="]],"start1":1159,"start2":1159,"length1":28,"length2":31},{"diffs":[[0," == "],[-1,"("],[1,"this."],[0,"node"],[-1,".a"],[1,"A"],[0,"ction"],[-1,"s"],[0,"[0]"],[-1," >> 4)"],[0,")\n  "]],"start1":1187,"start2":1187,"length1":30,"length2":26},{"diffs":[[0,"te.copy("],[-1,"node"],[1,"this"],[0,".rubixSt"]],"start1":1432,"start2":1432,"length1":20,"length2":20},{"diffs":[[0,"e), "],[-1,"node"],[1,"this"],[0,", "],[1,"["],[0,"i,j"],[1,"]"],[0,");\n "]],"start1":1454,"start2":1454,"length1":17,"length2":19},{"diffs":[[0,"e,i,j);\n"],[1,"\n"],[0,"        "]],"start1":1533,"start2":1533,"length1":16,"length2":17},{"diffs":[[0,"  \n    }    "],[-1,""],[1,"\n"],[0,"\n    return "]],"start1":1591,"start2":1591,"length1":24,"length2":25}]],"length":1739,"saved":false}
{"ts":1350489140161,"patch":[[{"diffs":[[0,"0]) "],[-1,">>"],[1,"<<"],[0," 4) "]],"start1":385,"start2":385,"length1":10,"length2":10}]],"length":1739,"saved":false}
{"ts":1350489163361,"patch":[[{"diffs":[[0,"st = 0;\n"],[1,"        this.nodeAction = 'o' &0;\n"],[0,"    }\n}\n"]],"start1":609,"start2":609,"length1":16,"length2":50}]],"length":1773,"saved":false}
{"ts":1350489171113,"patch":[[{"diffs":[[0," 0;\n"],[-1,"        this.nodeAction = 'o' &0;\n"],[0,"    "]],"start1":613,"start2":613,"length1":42,"length2":8}]],"length":1739,"saved":false}
{"ts":1350489181638,"patch":[[{"diffs":[[0," && i =="],[1,"="],[0," this.no"]],"start1":1182,"start2":1182,"length1":16,"length2":17},{"diffs":[[0,"deAction"],[-1,"[0]"],[1," >> 4"],[0,")\n      "]],"start1":1199,"start2":1199,"length1":19,"length2":21}]],"length":1742,"saved":false}
{"ts":1350489416746,"patch":[[{"diffs":[[0,"ent;\n    \n  "],[1,"\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.totalPathCost = parent.totalPathCost + RubixNode.stepCost;\n        "],[0,"  // This is"]],"start1":251,"start2":251,"length1":24,"length2":176},{"diffs":[[0,"n[1]"],[-1,";\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.totalPathCost = parent.totalPathCost + RubixNode.stepCost"],[0,";\n  "]],"start1":554,"start2":554,"length1":151,"length2":8}]],"length":1751,"saved":false}
{"ts":1350489419873,"patch":[[{"diffs":[[0,"ations.\n"],[1,"      "],[0,"    this"]],"start1":486,"start2":486,"length1":16,"length2":22}]],"length":1757,"saved":false}
{"ts":1350489440459,"patch":[[{"diffs":[[0," \n  "],[-1,"\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.totalPathCost = parent.totalPathCost + RubixNode.stepCost;\n        "],[0,"  //"]],"start1":259,"start2":259,"length1":160,"length2":8},{"diffs":[[0,"ations.\n"],[-1,"      "],[0,"    this"]],"start1":334,"start2":334,"length1":22,"length2":16},{"diffs":[[0,"Action ="],[1," action ?"],[0," ((('o' "]],"start1":355,"start2":355,"length1":16,"length2":25},{"diffs":[[0,"ction[1]"],[1," : null;\n    \n    if(parent)\n    {        \n        this.depth = parent.depth+1;\n        this.totalPathCost = parent.totalPathCost + RubixNode.stepCost"],[0,";\n    }\n"]],"start1":407,"start2":407,"length1":16,"length2":166}]],"length":1758,"saved":false}
{"ts":1350489493840,"patch":[[{"diffs":[[0,"? (("],[-1,"('o' & 0)"],[1,"0"],[0," | a"]],"start1":371,"start2":371,"length1":17,"length2":9}]],"length":1750,"saved":false}
{"ts":1350489522870,"patch":[[{"diffs":[[0," null;\n    \n"],[1,"    console.log(this.nodeAction.toString(2));\n    \n"],[0,"    if(paren"]],"start1":409,"start2":409,"length1":24,"length2":75}]],"length":1801,"saved":false}
{"ts":1350489547314,"patch":[[{"diffs":[[0," null;\n    \n"],[1,"    if(this.nodeAction)\n    {\n    "],[0,"    console."]],"start1":409,"start2":409,"length1":24,"length2":58},{"diffs":[[0,"ng(2));\n"],[1,"    }\n"],[0,"    \n   "]],"start1":493,"start2":493,"length1":16,"length2":22}]],"length":1841,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350491446124,"patch":[[{"diffs":[[0,"   \n"],[-1,"    if(this.nodeAction)\n    {\n        console.log(this.nodeAction.toString(2));\n    }\n    \n"],[0,"    "]],"start1":417,"start2":417,"length1":99,"length2":8},{"diffs":[[0,"epCost;\n"],[1,"        this.fn = ;\n"],[0,"    }\n  "]],"start1":551,"start2":551,"length1":16,"length2":36}]],"length":1770,"saved":false}
{"ts":1350491458367,"patch":[[{"diffs":[[0,"+1;\n"],[-1,"        this.totalPathCost = parent.totalPathCost + RubixNode.stepCost;\n"],[0,"    "]],"start1":483,"start2":483,"length1":80,"length2":8},{"diffs":[[0,"th ="],[-1," this.totalPathCost ="],[0," 0;\n"]],"start1":544,"start2":544,"length1":29,"length2":8}]],"length":1677,"saved":false}
{"ts":1350491462128,"patch":[[{"diffs":[[0,"*/\n\n"],[-1,"//Each step only takes one move\nRubixNode.stepCost = 1; "],[0,"\n\n//"]],"start1":51,"start2":51,"length1":64,"length2":8}]],"length":1621,"saved":false}
{"ts":1350491478786,"patch":[[{"diffs":[[0,"his.fn ="],[1,"0"],[0," ;\n    }"]],"start1":440,"start2":440,"length1":16,"length2":17}]],"length":1622,"saved":false}
{"ts":1350491481207,"patch":[[{"diffs":[[0,"nt.depth"],[-1,"+"],[1," + "],[0,"1;\n     "]],"start1":419,"start2":419,"length1":17,"length2":19}]],"length":1624,"saved":false}
{"ts":1350491485181,"patch":[[{"diffs":[[0,"bixNode."],[-1,"prototype."],[0,"getSucce"]],"start1":768,"start2":768,"length1":26,"length2":16}]],"length":1614,"saved":false}
{"ts":1350491488315,"patch":[[{"diffs":[[0,"unction("],[1,"node"],[0,")\n{\n    "]],"start1":793,"start2":793,"length1":16,"length2":20}]],"length":1618,"saved":false}
{"ts":1350491495191,"patch":[[{"diffs":[[0,"     if("],[-1,"this"],[1,"node"],[0,".nodeAct"]],"start1":1035,"start2":1035,"length1":20,"length2":20},{"diffs":[[0,"& i === "],[-1,"this"],[1,"node"],[0,".nodeAct"]],"start1":1060,"start2":1060,"length1":20,"length2":20}]],"length":1618,"saved":false}
{"ts":1350491496929,"patch":[[{"diffs":[[0,"te.copy("],[-1,"this"],[1,"node"],[0,".rubixSt"]],"start1":1311,"start2":1311,"length1":20,"length2":20}]],"length":1618,"saved":false}
{"ts":1350491499420,"patch":[[{"diffs":[[0,"tate), t"],[1,"node"],[0,"his, [i,"]],"start1":1330,"start2":1330,"length1":16,"length2":20}]],"length":1622,"saved":false}
{"ts":1350491502885,"patch":[[{"diffs":[[0,";\n\n\n"],[-1,"RubixNode.prototype.compareTo = function(node)\n{\n    return this.totalPathCost - node.totalPathCost;\n};\n\n\n"]],"start1":1512,"start2":1512,"length1":110,"length2":4}]],"length":1516,"saved":false}
{"ts":1350491505434,"patch":[[{"diffs":[[0,"ors;\n};\n"],[-1,"\n\n"]],"start1":1506,"start2":1506,"length1":10,"length2":8}]],"length":1514,"saved":false}
{"ts":1350491507992,"patch":[[{"diffs":[[0,"e), "],[-1,"t"],[0,"node"],[-1,"his"],[0,", [i"]],"start1":1333,"start2":1333,"length1":16,"length2":12}]],"length":1510,"saved":false}
{"ts":1350491544284,"patch":[[{"diffs":[[0," state.\n"],[1," * @param node The node to retrieve successors for.\n"],[0," * @retu"]],"start1":608,"start2":608,"length1":16,"length2":68}]],"length":1562,"saved":false}
{"ts":1350491600632,"patch":[[{"diffs":[[0,"his.fn ="],[-1,"0"],[0," "],[1,"0"],[0,";\n    }\n"]],"start1":442,"start2":442,"length1":18,"length2":18}]],"length":1562,"saved":false}
{"ts":1350491630114,"patch":[[{"diffs":[[0,"is.fn = "],[-1,"0"],[1,"CubeHeuristics.heuristic(this.rubixState) + this.depth"],[0,";\n    }\n"]],"start1":443,"start2":443,"length1":17,"length2":70}]],"length":1615,"saved":false}
{"ts":1350491643401,"patch":[[{"diffs":[[0,"th = 0;\n"],[1,"        this.fn = CubeHeuristics.heuristic(this.rubixState)\n"],[0,"    }\n}\n"]],"start1":544,"start2":544,"length1":16,"length2":76}]],"length":1675,"saved":false}
{"ts":1350491644654,"patch":[[{"diffs":[[0,"ixState)"],[1,";"],[0,"\n    }\n}"]],"start1":603,"start2":603,"length1":16,"length2":17}]],"length":1676,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350607469472,"patch":[[{"diffs":[[0,"ors;\n};\n"],[1,"\nRubixNode.nodeActionToString = function()\n{\n    \n}l\n"]],"start1":1668,"start2":1668,"length1":8,"length2":61}]],"length":1729,"saved":false}
{"ts":1350607470637,"patch":[[{"diffs":[[0,"{\n    \n}"],[-1,"l"],[1,"'"],[0,"\n"]],"start1":1719,"start2":1719,"length1":10,"length2":10}]],"length":1729,"saved":false}
{"ts":1350607471568,"patch":[[{"diffs":[[0,"{\n    \n}"],[-1,"'"],[1,";"],[0,"\n"]],"start1":1719,"start2":1719,"length1":10,"length2":10}]],"length":1729,"saved":false}
{"ts":1350607485629,"patch":[[{"diffs":[[0,"n()\n{\n  "],[1,"return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);"],[0,"  \n};\n"]],"start1":1715,"start2":1715,"length1":14,"length2":95}]],"length":1810,"saved":false}
{"ts":1350607489003,"patch":[[{"diffs":[[0,"unction("],[1,"node"],[0,")\n{\n  re"]],"start1":1709,"start2":1709,"length1":16,"length2":20}]],"length":1814,"saved":false}
{"ts":1350607758449,"patch":[[{"diffs":[[0,"\n   "],[-1,"--------------*/\n\n\n\n//TODO add heuristic calculation to this."],[1,"     Requires - priorityQueue.js, rubixNode.js, rubixState.js\n\n   --------------*/\n\n\n"],[0,"\nfun"]],"start1":33,"start2":33,"length1":69,"length2":93}]],"length":1838,"saved":false}
{"ts":1350607763684,"patch":[[{"diffs":[[0,"Node.js\n"],[-1,"    "],[0,"    Requ"]],"start1":26,"start2":26,"length1":20,"length2":16},{"diffs":[[0,"es -"],[-1," priorityQueue.js, rubixNode.js,"],[0," rub"]],"start1":44,"start2":44,"length1":40,"length2":8}]],"length":1802,"saved":false}
{"ts":1350607784078,"patch":[[{"diffs":[[0,"State.js"],[1,"\n    A node representation of state for search trees."],[0,"\n\n   ---"]],"start1":54,"start2":54,"length1":16,"length2":69}]],"length":1855,"saved":false}
{"ts":1350607784798,"patch":[[{"diffs":[[0," trees.\n"],[-1,"\n"],[0,"   -----"]],"start1":108,"start2":108,"length1":17,"length2":16}]],"length":1854,"saved":false}
{"ts":1350607792723,"patch":[[{"diffs":[[0,"---*/\n\n\n"],[1,"/**\n * \n */"],[0,"\nfunctio"]],"start1":130,"start2":130,"length1":16,"length2":27}]],"length":1865,"saved":false}
{"ts":1350607837833,"patch":[[{"diffs":[[0,"\n/**\n * "],[1,"Defines an object to represent a node on the IDA* search tree for a rubik's cube."],[0,"\n */\nfun"]],"start1":137,"start2":137,"length1":16,"length2":97}]],"length":1946,"saved":false}
{"ts":1350607976321,"patch":[[{"diffs":[[0,"s cube.\n"],[1," * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n"],[0," */\n"],[-1,""],[0,"function"]],"start1":219,"start2":219,"length1":20,"length2":286},{"diffs":[[0,"nt;\n"],[1,""],[0,"    \n"],[-1,"    // This is a two tuple object containing a face and the number of rotations.\n"],[0,"    "]],"start1":594,"start2":594,"length1":94,"length2":13}]],"length":2131,"saved":false}
{"ts":1350607986965,"patch":[[{"diffs":[[0,"node"],[-1," h"],[1,".\n *          H"],[0,"as t"]],"start1":416,"start2":416,"length1":10,"length2":23}]],"length":2144,"saved":false}
{"ts":1350607990875,"patch":[[{"diffs":[[0,"tations\n"],[1," * \n"],[0," */\nfunc"]],"start1":498,"start2":498,"length1":16,"length2":20}]],"length":2148,"saved":false}
{"ts":1350608016452,"patch":[[{"diffs":[[0,"rs;\n};\n\n"],[1,"/**\n * Returns a string with the node action pair for the supplied node.\n */\n"],[0,"RubixNod"]],"start1":2003,"start2":2003,"length1":16,"length2":93}]],"length":2225,"saved":false}
{"ts":1350608059784,"patch":[[{"diffs":[[0,"turns a "],[-1,"s"],[1,"S"],[0,"tring wi"]],"start1":2020,"start2":2020,"length1":17,"length2":17},{"diffs":[[0,"d node.\n"],[1," * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n"],[0," */\nRubi"]],"start1":2076,"start2":2076,"length1":16,"length2":119}]],"length":2328,"saved":false}
{"ts":1350608061194,"patch":[[{"diffs":[[0,"plied node.\n"],[1," * \n"],[0," * @param no"]],"start1":2072,"start2":2072,"length1":24,"length2":28}]],"length":2332,"saved":false}
{"ts":1350608065696,"patch":[[{"diffs":[[0," state.\n"],[1," * \n"],[0," * @para"]],"start1":1056,"start2":1056,"length1":16,"length2":20}]],"length":2336,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350672023438,"patch":[[{"diffs":[[0,"  this.r"],[-1,"ubixState"],[1,"S"],[0," = state"]],"start1":558,"start2":558,"length1":25,"length2":17}]],"length":2328,"saved":false}
{"ts":1350672026680,"patch":[[{"diffs":[[0,"is.p"],[-1,"arentNode"],[1,"N"],[0," = p"]],"start1":583,"start2":583,"length1":17,"length2":9}]],"length":2320,"saved":false}
{"ts":1350672030199,"patch":[[{"diffs":[[0,"  this.n"],[-1,"odeAction"],[1,"A"],[0," = actio"]],"start1":606,"start2":606,"length1":25,"length2":17}]],"length":2312,"saved":false}
{"ts":1350672082889,"patch":[[{"diffs":[[0,"t,action)\n{\n"],[1,"    // rubixState\n"],[0,"    this.rS "]],"start1":544,"start2":544,"length1":24,"length2":42}]],"length":2330,"saved":false}
{"ts":1350672090680,"patch":[[{"diffs":[[0," state;\n"],[1,"    // parentNode\n"],[0,"    this"]],"start1":587,"start2":587,"length1":16,"length2":34}]],"length":2348,"saved":false}
{"ts":1350672096182,"patch":[[{"diffs":[[0,"arent;\n    \n"],[1,"    // nodeAction\n"],[0,"    this.nA "]],"start1":628,"start2":628,"length1":24,"length2":42}]],"length":2366,"saved":false}
{"ts":1350672106002,"patch":[[{"diffs":[[0,")\n    {        \n"],[1,"        // depth\n"],[0,"        this.dep"]],"start1":742,"start2":742,"length1":32,"length2":49},{"diffs":[[0,"  this.d"],[-1,"epth"],[0," = paren"]],"start1":781,"start2":781,"length1":20,"length2":16},{"diffs":[[0,"parent.d"],[-1,"epth"],[0," + 1;\n  "]],"start1":792,"start2":792,"length1":20,"length2":16}]],"length":2375,"saved":false}
{"ts":1350672109664,"patch":[[{"diffs":[[0,"  this.d"],[-1,"epth"],[0," = 0;\n  "]],"start1":907,"start2":907,"length1":20,"length2":16}]],"length":2371,"saved":false}
{"ts":1350672116456,"patch":[[{"diffs":[[0,"c(this.r"],[-1,"ubixState"],[1,"S"],[0,");\n    }"]],"start1":962,"start2":962,"length1":25,"length2":17}]],"length":2363,"saved":false}
{"ts":1350672121077,"patch":[[{"diffs":[[0,"c(this.r"],[-1,"ubixState"],[1,"S"],[0,") + this"]],"start1":847,"start2":847,"length1":25,"length2":17}]],"length":2355,"saved":false}
{"ts":1350672124521,"patch":[[{"diffs":[[0,"+ this.d"],[-1,"epth"],[0,";\n    }\n"]],"start1":858,"start2":858,"length1":20,"length2":16}]],"length":2351,"saved":false}
{"ts":1350672131004,"patch":[[{"diffs":[[0,"mpNode.r"],[-1,"ubixState"],[1,"S"],[0,",i,j);\n\n"]],"start1":1915,"start2":1915,"length1":25,"length2":17}]],"length":2343,"saved":false}
{"ts":1350672137631,"patch":[[{"diffs":[[0,"y(node.r"],[-1,"ubixState"],[1,"S"],[0,"), node,"]],"start1":1836,"start2":1836,"length1":25,"length2":17}]],"length":2335,"saved":false}
{"ts":1350672143530,"patch":[[{"diffs":[[0,"f(node.n"],[-1,"odeAction"],[1,"A"],[0," && i =="]],"start1":1560,"start2":1560,"length1":25,"length2":17}]],"length":2327,"saved":false}
{"ts":1350672147518,"patch":[[{"diffs":[[0,"i === node.n"],[-1,"odeAction"],[1,"A"],[0," >> 4)\n     "]],"start1":1573,"start2":1573,"length1":33,"length2":25}]],"length":2319,"saved":false}
{"ts":1350672153218,"patch":[[{"diffs":[[0,"s[node.n"],[-1,"odeAction"],[1,"A"],[0," >> 4] +"]],"start1":2259,"start2":2259,"length1":25,"length2":17}]],"length":2311,"saved":false}
{"ts":1350672156531,"patch":[[{"diffs":[[0," (node.n"],[-1,"odeAction"],[1,"A"],[0," & 7);  "]],"start1":2282,"start2":2282,"length1":25,"length2":17}]],"length":2303,"saved":false}
{"ts":1350672635905,"patch":[[{"diffs":[[0,"de(s"],[-1,"tate,parent"],[1,",p"],[0,",act"]],"start1":530,"start2":530,"length1":19,"length2":10},{"diffs":[[0,"s.rS = s"],[-1,"tate"],[0,";\n    //"]],"start1":572,"start2":572,"length1":20,"length2":16},{"diffs":[[0,"    if(p"],[-1,"arent"],[0,")\n    { "]],"start1":716,"start2":716,"length1":21,"length2":16},{"diffs":[[0,"is.d = p"],[-1,"arent"],[0,".d + 1;\n"]],"start1":767,"start2":767,"length1":21,"length2":16}]],"length":2280,"saved":false}
{"ts":1350672641488,"patch":[[{"diffs":[[0,"de(s,p,a"],[-1,"ction"],[0,")\n{\n    "]],"start1":530,"start2":530,"length1":21,"length2":16},{"diffs":[[0,"s.nA = a"],[-1,"ction"],[0," ? ((0 |"]],"start1":647,"start2":647,"length1":21,"length2":16},{"diffs":[[0,"< 4) | a"],[-1,"ction"],[0,"[1] : nu"]],"start1":676,"start2":676,"length1":21,"length2":16}]],"length":2265,"saved":false}
{"ts":1350672665802,"patch":[[{"diffs":[[0," ((0 | a"],[-1,"ction"],[0,"[0]) << "]],"start1":657,"start2":657,"length1":21,"length2":16}]],"length":2260,"saved":false}
{"ts":1350672700966,"patch":[[{"diffs":[[0,"s.pN = p"],[-1,"arent"],[0,";\n    \n "]],"start1":602,"start2":602,"length1":21,"length2":16}]],"length":2255,"saved":false}
{"ts":1350672834140,"patch":[[{"diffs":[[0,"s.rS = s"],[1,".cubies"],[0,";\n    //"]],"start1":567,"start2":567,"length1":16,"length2":23}]],"length":2262,"saved":false}
{"ts":1350672842630,"patch":[[{"diffs":[[0,"uristic("],[-1,"this.rS"],[1,"s"],[0,") + this"]],"start1":800,"start2":800,"length1":23,"length2":17}]],"length":2256,"saved":false}
{"ts":1350672845026,"patch":[[{"diffs":[[0,"uristic("],[-1,"this.rS"],[1,"s"],[0,");\n    }"]],"start1":897,"start2":897,"length1":23,"length2":17}]],"length":2250,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350750312105,"patch":[[{"diffs":[[0,"de(s"],[-1,",p,a"],[1,"tate, parent, action"],[0,")\n{\n    "],[-1,"// "],[1,"this."],[0,"rubi"]],"start1":530,"start2":530,"length1":23,"length2":41},{"diffs":[[0,"tate"],[-1,"\n    this.rS = s.cubies"],[1," = state"],[0,";\n    "],[-1,"// "],[1,"this."],[0,"pare"]],"start1":573,"start2":573,"length1":40,"length2":27},{"diffs":[[0,"Node"],[-1,"\n    this.pN = p"],[1," = parent"],[0,";\n  "]],"start1":602,"start2":602,"length1":24,"length2":17},{"diffs":[[0,"   \n    "],[-1,"// "],[1,"this."],[0,"nodeActi"]],"start1":618,"start2":618,"length1":19,"length2":21},{"diffs":[[0,"tion"],[-1,"\n    this.nA = a"],[1," = action"],[0," ? ("]],"start1":637,"start2":637,"length1":24,"length2":17},{"diffs":[[0," ((0 | a"],[1,"ction"],[0,"[0]) << "]],"start1":652,"start2":652,"length1":16,"length2":21},{"diffs":[[0,"< 4) | a"],[1,"ction"],[0,"[1] : nu"]],"start1":671,"start2":671,"length1":16,"length2":21},{"diffs":[[0,"  if"],[1," "],[0,"(p"],[1,"arent"],[0,")\n  "]],"start1":703,"start2":703,"length1":10,"length2":16},{"diffs":[[0,"    "],[-1,"// depth\n        this.d = p.d"],[1,"this.depth = parent.depth"],[0," + 1"]],"start1":735,"start2":735,"length1":37,"length2":33},{"diffs":[[0,"uristic("],[-1,"s"],[1,"this.rubixState"],[0,") + this"]],"start1":805,"start2":805,"length1":17,"length2":31},{"diffs":[[0,"+ this.d"],[1,"epth"],[0,";\n    }\n"]],"start1":830,"start2":830,"length1":16,"length2":20},{"diffs":[[0,"  this.d"],[1,"epth"],[0," = 0;\n  "]],"start1":871,"start2":871,"length1":16,"length2":20},{"diffs":[[0,"uristic("],[-1,"s"],[1,"this.rubixState"],[0,");\n    }"]],"start1":924,"start2":924,"length1":17,"length2":31},{"diffs":[[0,"f(node.n"],[-1,"A"],[1,"odeAction"],[0," && i =="]],"start1":1548,"start2":1548,"length1":17,"length2":25},{"diffs":[[0,"i === node.n"],[-1,"A"],[1,"odeAction"],[0," >> 4)\n     "]],"start1":1569,"start2":1569,"length1":25,"length2":33},{"diffs":[[0,"y(node.r"],[-1,"S"],[1,"ubixState"],[0,"), node,"]],"start1":1824,"start2":1824,"length1":17,"length2":25},{"diffs":[[0,"mpNode.r"],[-1,"S"],[1,"ubixState"],[0,",i,j);\n\n"]],"start1":1903,"start2":1903,"length1":17,"length2":25},{"diffs":[[0,"s[node.n"],[-1,"A"],[1,"odeAction"],[0," >> 4] +"]],"start1":2279,"start2":2279,"length1":17,"length2":25},{"diffs":[[0," (node.n"],[-1,"A"],[1,"odeAction"],[0," & 7);  "]],"start1":2310,"start2":2310,"length1":17,"length2":25}]],"length":2339,"saved":false}
{"ts":1350750416530,"patch":[[{"diffs":[[0,"ode, [i,"],[1," "],[0,"j]);\n   "]],"start1":1845,"start2":1845,"length1":16,"length2":17},{"diffs":[[0,"ixState,"],[1," "],[0,"i,"],[1," "],[0,"j);\n\n   "]],"start1":1914,"start2":1914,"length1":18,"length2":20}]],"length":2342,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350752007730,"patch":[[{"diffs":[[0,"[1] : null;\n"],[1,"    this.rc = 0;\n"],[0,"    \n    if "]],"start1":684,"start2":684,"length1":24,"length2":41}]],"length":2359,"saved":false}
{"ts":1350752033958,"patch":[[{"diffs":[[0,".depth;\n"],[1,"        parent.rc++;\n"],[0,"    }\n  "]],"start1":853,"start2":853,"length1":16,"length2":37}]],"length":2380,"saved":false}
{"ts":1350752056788,"patch":[[{"diffs":[[0,"rs;\n};\n\n"],[1,"RubixNode.wipeBadChain = function(node)\n{\n    \n}\n\n"],[0,"/**\n * R"]],"start1":2051,"start2":2051,"length1":16,"length2":66}]],"length":2430,"saved":false}
{"ts":1350752057537,"patch":[[{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n/**\n *"]],"start1":2099,"start2":2099,"length1":16,"length2":17}]],"length":2431,"saved":false}
{"ts":1350752084218,"patch":[[{"diffs":[[0,")\n{\n    "],[1,"node.parent.rc--;\n    \n    if(node.parent.rc === 0)\n    {\n        \n    }"],[0,"\n};\n\n/**"]],"start1":2097,"start2":2097,"length1":16,"length2":88}]],"length":2503,"saved":false}
{"ts":1350752096780,"patch":[[{"diffs":[[0,"  {\n        "],[1,"RubixNode.wipeBadChain(node.parent);    "],[0,"\n    }\n};\n\n/"]],"start1":2159,"start2":2159,"length1":24,"length2":64}]],"length":2543,"saved":false}
{"ts":1350752104352,"patch":[[{"diffs":[[0," \n    }\n"],[1,"    \n    delete node;\n"],[0,"};\n\n/**\n"]],"start1":2210,"start2":2210,"length1":16,"length2":38}]],"length":2565,"saved":false}
{"ts":1350752158412,"patch":[[{"diffs":[[0,"e.parent"],[1,"Node"],[0,".rc--;\n "]],"start1":2108,"start2":2108,"length1":16,"length2":20}]],"length":2569,"saved":false}
{"ts":1350752162663,"patch":[[{"diffs":[[0,"e.parent"],[1,"Node"],[0,".rc === "]],"start1":2142,"start2":2142,"length1":16,"length2":20},{"diffs":[[0,"e.parent"],[1,"Node"],[0,");    \n "]],"start1":2205,"start2":2205,"length1":16,"length2":20}]],"length":2577,"saved":false}
{"ts":1350752191747,"patch":[[{"diffs":[[0,"ion(node)\n{\n"],[1,"    if(node.parentNode)\n"],[0,"    node.par"]],"start1":2089,"start2":2089,"length1":24,"length2":48}]],"length":2601,"saved":false}
{"ts":1350752198595,"patch":[[{"diffs":[[0,"ntNode)\n"],[1,"    {\n"],[0,"    node"]],"start1":2117,"start2":2117,"length1":16,"length2":22},{"diffs":[[0," \n    }\n    "],[1,"}"],[0,"\n    delete "]],"start1":2252,"start2":2252,"length1":24,"length2":25}]],"length":2608,"saved":false}
{"ts":1350752200883,"patch":[[{"diffs":[[0,"Node)\n    {\n"],[1,"    "],[0,"    node.par"]],"start1":2119,"start2":2119,"length1":24,"length2":28},{"diffs":[[0,"e.rc--;\n    "],[-1,"\n"],[1,"    \n    "],[0,"    if(node."]],"start1":2153,"start2":2153,"length1":25,"length2":33},{"diffs":[[0," === 0)\n    "],[-1,"{\n"],[1,"    {\n    "],[0,"        Rubi"]],"start1":2199,"start2":2199,"length1":26,"length2":34},{"diffs":[[0,"tNode);    \n"],[1,"    "],[0,"    }\n    }\n"]],"start1":2262,"start2":2262,"length1":24,"length2":28}]],"length":2632,"saved":false}
{"ts":1350752322695,"patch":[[{"diffs":[[0,"ion(node)\n{\n"],[1,"    console.log(\"in bad chain wipe\");\n"],[0,"    if(node."]],"start1":2089,"start2":2089,"length1":24,"length2":62}]],"length":2670,"saved":false}
{"ts":1350752477679,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    console.log(\"in bad chain wipe\");\n"],[0,"    "]],"start1":2097,"start2":2097,"length1":46,"length2":8}]],"length":2632,"saved":false}
{"ts":1350752506413,"patch":[[{"diffs":[[0,"    "],[-1,"delete "],[0,"node"],[1," ={}"],[0,";\n};"]],"start1":2290,"start2":2290,"length1":19,"length2":16}]],"length":2629,"saved":false}
{"ts":1350752648415,"patch":[[{"diffs":[[0,"    "],[-1,"node ={}"],[1,"window.removeChild(node)"],[0,";\n};"]],"start1":2290,"start2":2290,"length1":16,"length2":32}]],"length":2645,"saved":false}
{"ts":1350752691313,"patch":[[{"diffs":[[0,"    "],[-1,"window"],[1,"Object"],[0,".rem"]],"start1":2290,"start2":2290,"length1":14,"length2":14}]],"length":2645,"saved":false}
{"ts":1350752753949,"patch":[[{"diffs":[[0,"    "],[-1,"Object.removeChild"],[1,"console.log"],[0,"(nod"]],"start1":2290,"start2":2290,"length1":26,"length2":19}]],"length":2638,"saved":false}
{"ts":1350752761976,"patch":[[{"diffs":[[0,"ole.log("],[1,"typeof "],[0,"node);\n}"]],"start1":2298,"start2":2298,"length1":16,"length2":23}]],"length":2645,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350752834486,"patch":[[{"diffs":[[0,"log("],[-1,"typeof nod"],[1,"node.toSourc"],[0,"e);\n"]],"start1":2302,"start2":2302,"length1":18,"length2":20}]],"length":2647,"saved":false}
{"ts":1350752835653,"patch":[[{"diffs":[[0,"toSource"],[1,"()"],[0,");\n};\n\n/"]],"start1":2311,"start2":2311,"length1":16,"length2":18}]],"length":2649,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350752885715,"patch":[[{"diffs":[[0,"node"],[-1,".toSource()"],[0,");\n}"]],"start1":2306,"start2":2306,"length1":19,"length2":8}]],"length":2638,"saved":false}
{"ts":1350753138479,"patch":[[{"diffs":[[0,"ole.log("],[1,"delete "],[0,"node);\n}"]],"start1":2298,"start2":2298,"length1":16,"length2":23}]],"length":2645,"saved":false}
{"ts":1350753193529,"patch":[[{"diffs":[[0,"[];\n    "],[-1,"var "],[0,"tempNode"]],"start1":1405,"start2":1405,"length1":20,"length2":16}]],"length":2641,"saved":false}
{"ts":1350753208568,"patch":[[{"diffs":[[0,"s = [];\n    "],[1,"var "],[0,"tempNode = n"]],"start1":1401,"start2":1401,"length1":24,"length2":28}]],"length":2645,"saved":false}
{"ts":1350753257658,"patch":[[{"diffs":[[0,"    }\n    }\n"],[1,"    delete node.rubixState;\n    delete node.parentNode;\n"],[0,"    console."]],"start1":2278,"start2":2278,"length1":24,"length2":80}]],"length":2701,"saved":false}
{"ts":1350753297007,"patch":[[{"diffs":[[0,"ntNode;\n"],[1,"    delete node.fn;\n    delete node.rc;\n    delete node.nodeAction;\n"],[0,"    cons"]],"start1":2338,"start2":2338,"length1":16,"length2":84}]],"length":2769,"saved":false}
{"ts":1350753314200,"patch":[[{"diffs":[[0,"Action;\n"],[1,"    delete node.depth;\n"],[0,"    cons"]],"start1":2406,"start2":2406,"length1":16,"length2":39}]],"length":2792,"saved":false}
{"ts":1350753361222,"patch":[[{"diffs":[[0,"te;\n"],[-1,"    delete node.parentNode;\n"],[0,"    "]],"start1":2314,"start2":2314,"length1":36,"length2":8}]],"length":2764,"saved":false}
{"ts":1350753363744,"patch":[[{"diffs":[[0,"th;\n"],[-1,"    console.log(delete node);\n"],[0,"};\n\n"]],"start1":2405,"start2":2405,"length1":38,"length2":8}]],"length":2734,"saved":false}
{"ts":1350753379795,"patch":[[{"diffs":[[0,"}\n    }\n    "],[1,"//"],[0,"delete node."]],"start1":2282,"start2":2282,"length1":24,"length2":26}]],"length":2736,"saved":false}
{"ts":1350753405066,"patch":[[{"diffs":[[0,"  }\n    "],[-1,"//"],[0,"delete n"]],"start1":2286,"start2":2286,"length1":18,"length2":16},{"diffs":[[0,"e.rubixState"],[1,".cubies"],[0,";\n    delete"]],"start1":2304,"start2":2304,"length1":24,"length2":31}]],"length":2741,"saved":false}
{"ts":1350753483736,"patch":[[{"diffs":[[0,"    "],[-1,"delete node.rubixState.cubies;\n    delete node.fn;\n    delete node.rc;\n    delete node.nodeAction;\n    delete node.depth;"],[1,"node.parentNode = null;\n    "],[0,"\n};\n"]],"start1":2290,"start2":2290,"length1":129,"length2":36}]],"length":2648,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350753671801,"patch":[[{"diffs":[[0,"ode = null;\n"],[1,"    node.nodeAction = null;\n    \n"],[0,"    \n};\n\n/**"]],"start1":2306,"start2":2306,"length1":24,"length2":57}]],"length":2681,"saved":false}
{"ts":1350753693485,"patch":[[{"diffs":[[0,"eAction = null;\n"],[1,"    node.rubixState = null;\n    node.depth = null;\n    node.fn = null;\n"],[0,"    \n    \n};\n\n/*"]],"start1":2330,"start2":2330,"length1":32,"length2":103}]],"length":2752,"saved":false}
{"ts":1350753711334,"patch":[[{"diffs":[[0,"= null;\n    "],[1,"node.rc = null;"],[0,"\n    \n};\n\n/*"]],"start1":2409,"start2":2409,"length1":24,"length2":39}]],"length":2767,"saved":false}
{"ts":1350753714730,"patch":[[{"diffs":[[0,"    }\n    }\n"],[1,"    \n"],[0,"    node.par"]],"start1":2278,"start2":2278,"length1":24,"length2":29}]],"length":2772,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350753858913,"patch":[[{"diffs":[[0,"ubixState);\n"],[1,"        this.rc++;\n"],[0,"    }\n}\n\n/**"]],"start1":976,"start2":976,"length1":24,"length2":43}]],"length":2791,"saved":false}
{"ts":1350753883214,"patch":[[{"diffs":[[0,"e);\n"],[-1,"        this.rc++;\n"],[0,"    "]],"start1":984,"start2":984,"length1":27,"length2":8}]],"length":2772,"saved":false}
{"ts":1350753891002,"patch":[[{"diffs":[[0,"ull;"],[-1,"\n    node.nodeAction = null;\n    node.rubixState = null;\n    node.depth = null;\n    node.fn = null;\n    node.rc = null;\n"],[0,"    "]],"start1":2318,"start2":2318,"length1":128,"length2":8}]],"length":2652,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350759199568,"patch":[[{"diffs":[[0,"    "],[-1,"}\n    \n"],[0,"    "]],"start1":2284,"start2":2284,"length1":15,"length2":8},{"diffs":[[0,"ull;    "],[1,"\n\n    }\n    "],[0,"\n};\n\n/**"]],"start1":2311,"start2":2311,"length1":16,"length2":28}]],"length":2657,"saved":false}
{"ts":1350759238036,"patch":[[{"diffs":[[0," = null;    "],[1,"\n        node.successors = null;\n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;"],[0,"\n\n    }\n    "]],"start1":2307,"start2":2307,"length1":24,"length2":163}]],"length":2796,"saved":false}
{"ts":1350759251711,"patch":[[{"diffs":[[0,"= null;\n"],[-1,"\n"],[0,"    }\n  "]],"start1":2451,"start2":2451,"length1":17,"length2":16}]],"length":2795,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350766765859,"patch":[[{"diffs":[[0,"on[1] : "],[-1,"null"],[1,"0"],[0,";\n    th"]],"start1":682,"start2":682,"length1":20,"length2":17},{"diffs":[[0,"his."],[-1,"rc = 0;"],[1,"nodeAction"],[0,"\n   "]],"start1":698,"start2":698,"length1":15,"length2":18}]],"length":2795,"saved":false}
{"ts":1350766769473,"patch":[[{"diffs":[[0,"on[1] : "],[-1,"0"],[1,"null"],[0,";\n    th"]],"start1":682,"start2":682,"length1":17,"length2":20}]],"length":2798,"saved":false}
{"ts":1350766772077,"patch":[[{"diffs":[[0,"ll;\n"],[-1,"    this.nodeAction\n"],[0,"    "]],"start1":692,"start2":692,"length1":28,"length2":8}]],"length":2778,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350777949276,"patch":[[{"diffs":[[0,"[1] : null;\n"],[1,"//this.rc = 0;\n"],[0,"    \n    if "]],"start1":684,"start2":684,"length1":24,"length2":39},{"diffs":[[0,"        "],[1,"//"],[0,"parent.r"]],"start1":859,"start2":859,"length1":16,"length2":18}]],"length":2795,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350797733294,"patch":[[{"diffs":[[0,": null;\n"],[-1,"//"],[1,"    "],[0,"this.rc "]],"start1":688,"start2":688,"length1":18,"length2":20},{"diffs":[[0,"        "],[-1,"//"],[0,"parent.r"]],"start1":861,"start2":861,"length1":18,"length2":16},{"diffs":[[0,"e = "],[-1,"new RubixNode(RubixState.copy(node.rubixState), node, [i, j]);"],[0,"\n   "]],"start1":1830,"start2":1830,"length1":70,"length2":8},{"diffs":[[0,"rs.push("],[-1,"tempNode"],[1,"new RubixNode(RubixState.copy(node.rubixState), node, [i, j]);"],[0,");\n     "]],"start1":1927,"start2":1927,"length1":24,"length2":78}]],"length":2787,"saved":false}
{"ts":1350797745656,"patch":[[{"diffs":[[0,"e state."],[-1,"\n"],[0,"        "]],"start1":1802,"start2":1802,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"tempNode = \n            \n            RubixState.rotate(tempNode.rubixState, i, j);"],[0,"\n\n  "]],"start1":1818,"start2":1818,"length1":90,"length2":8},{"diffs":[[0," [i, j])"],[-1,";"],[0,");\n     "]],"start1":1905,"start2":1905,"length1":17,"length2":16}]],"length":2703,"saved":false}
{"ts":1350797748922,"patch":[[{"diffs":[[0,"           \n"],[-1,"\n"],[0,"            "]],"start1":1811,"start2":1811,"length1":25,"length2":24}]],"length":2702,"saved":false}
{"ts":1350797752535,"patch":[[{"diffs":[[0,"[];\n"],[-1,"    var tempNode = null;\n"],[0,"    "]],"start1":1405,"start2":1405,"length1":33,"length2":8}]],"length":2677,"saved":false}
{"ts":1350797767930,"patch":[[{"diffs":[[0,"[1] : null;\n"],[1,"    if(action)\n    {\n                 RubixState.rotate(tempNode.rubixState, i, j);\n   \n    }\n"],[0,"    this.rc "]],"start1":684,"start2":684,"length1":24,"length2":118}]],"length":2771,"saved":false}
{"ts":1350797789237,"patch":[[{"diffs":[[0,")\n    {\n"],[-1,"         "],[0,"        "]],"start1":709,"start2":709,"length1":25,"length2":16},{"diffs":[[0,"xState, "],[-1,"i, j"],[1,"action[0], action[1["],[0,");\n   \n "]],"start1":756,"start2":756,"length1":20,"length2":36}]],"length":2778,"saved":false}
{"ts":1350797791522,"patch":[[{"diffs":[[0,"action[1"],[-1,"["],[1,"]"],[0,");\n   \n "]],"start1":775,"start2":775,"length1":17,"length2":17}]],"length":2778,"saved":false}
{"ts":1350797796918,"patch":[[{"diffs":[[0,"te(t"],[-1,"empNode"],[1,"his"],[0,".rub"]],"start1":740,"start2":740,"length1":15,"length2":11}]],"length":2774,"saved":false}
{"ts":1350797823111,"patch":[[{"diffs":[[0,"on ="],[-1," action ? ((0 | action[0]) << 4) | action[1] :"],[0," nul"]],"start1":639,"start2":639,"length1":54,"length2":8},{"diffs":[[0,"on[1]);\n"],[1,"        this.nodeAction =  ((0 | action[0]) << 4) | action[1]);\n"],[0,"   \n    "]],"start1":729,"start2":729,"length1":16,"length2":80}]],"length":2792,"saved":false}
{"ts":1350797824606,"patch":[[{"diffs":[[0," | action[1]"],[-1,")"],[0,";\n   \n    }\n"]],"start1":786,"start2":786,"length1":25,"length2":24}]],"length":2791,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350797893473,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    this.rubixState = state;\n    this.parentNode = parent;\n    \n"],[0,"    "]],"start1":554,"start2":554,"length1":72,"length2":8},{"diffs":[[0,".rotate("],[-1,"this.rubixS"],[1,"s"],[0,"tate, ac"]],"start1":625,"start2":625,"length1":27,"length2":17},{"diffs":[[0,";\n   \n    }\n"],[1,"    this.rubixState = state;\n    this.parentNode = parent;\n    \n    \n"],[0,"    this.rc "]],"start1":724,"start2":724,"length1":24,"length2":93}]],"length":2786,"saved":false}
{"ts":1350797962853,"patch":[[{"diffs":[[0,";\n   \n    }\n"],[1,"    \n"],[0,"    this.rub"]],"start1":724,"start2":724,"length1":24,"length2":29}]],"length":2791,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350859987179,"patch":[[{"diffs":[[0,"----*/\n\n"],[1,"RubixNode.statePool = [];\nRubixNode.nodePool = [];\n"],[0,"\n/**\n * "]],"start1":129,"start2":129,"length1":16,"length2":67},{"diffs":[[0,"c = 0;\n    \n"],[1,"    \n}\nRubixNode.prototype.initParentDetails = function(parent)\n{\n"],[0,"    if (pare"]],"start1":871,"start2":871,"length1":24,"length2":90},{"diffs":[[0,";\n    }\n"],[-1,"}"],[1,"    \n};"],[0,"\n\n/**\n *"]],"start1":1217,"start2":1217,"length1":17,"length2":23},{"diffs":[[0,"ate.copy"],[1,"Into"],[0,"(node.ru"]],"start1":2084,"start2":2084,"length1":16,"length2":20},{"diffs":[[0,"bixState"],[1,", RubixNode.statePool.pop()"],[0,"), node,"]],"start1":2104,"start2":2104,"length1":16,"length2":43},{"diffs":[[0,"rs;\n};\n\n"],[1,"RubixNode.buildNode  = function(node, parentNode, face, rots)\n{\n    if(node)\n    {\n            \n    }\n};\n\n"],[0,"RubixNod"]],"start1":2201,"start2":2201,"length1":16,"length2":122}]],"length":3051,"saved":false}
{"ts":1350859994582,"patch":[[{"diffs":[[0,"n(parent)\n{\n"],[1,"    this.rc = 0\n"],[0,"    if (pare"]],"start1":937,"start2":937,"length1":24,"length2":40}]],"length":3067,"saved":false}
{"ts":1350859997005,"patch":[[{"diffs":[[0,"s.rc = 0"],[1,";"],[0,"\n    if "]],"start1":956,"start2":956,"length1":16,"length2":17}]],"length":3068,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350867967861,"patch":[[{"diffs":[[0,"his."],[-1,"node"],[1,"set"],[0,"Action"],[-1," = null;\n    if(action)\n    {\n        RubixState.rotate(state, action[0], action[1]);\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }\n"],[1,"(state, action);"],[0,"    "]],"start1":614,"start2":614,"length1":177,"length2":33},{"diffs":[[0,"his."],[-1,"rc = 0;\n    "],[1,"initParentDetails(parent);"],[0,"\n    \n}\n"],[1,"\n"],[0,"Rubi"]],"start1":722,"start2":722,"length1":28,"length2":43},{"diffs":[[0,")\n{\n"],[-1,"    this.rc = 0;\n"],[0,"    "]],"start1":816,"start2":816,"length1":25,"length2":8},{"diffs":[[0,"tate);\n    }"],[-1,"\n"],[0,"    \n};\n\n/**"]],"start1":1083,"start2":1083,"length1":25,"length2":24},{"diffs":[[0,";\n    }    \n};\n\n"],[1,"RubixNode.prototype.setAction = function(state, action)\n{\n     this.nodeAction = null;\n    if(action)\n    {\n        RubixState.rotate(state, action[0], action[1]);\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }  \n};\n\n"],[0,"/**\n * Retrieves"]],"start1":1088,"start2":1088,"length1":32,"length2":275},{"diffs":[[0,"ush("],[-1,"new RubixNode(RubixState.copyInto(node.rubixState, RubixNode.statePool.pop()), node,"],[1,"\n                RubixNode.buildNode(RubixNode.nodePool.pop(),\n                                    RubixState.copyInto(node.rubixState, \n                                                        RubixNode.statePool.pop()), \n                                    node, \n                                   "],[0," [i,"]],"start1":2172,"start2":2172,"length1":92,"length2":308},{"diffs":[[0,"on(node,"],[1," state,"],[0," parentN"]],"start1":2567,"start2":2567,"length1":16,"length2":23},{"diffs":[[0,"de, "],[-1,"f"],[0,"ac"],[-1,"e, rots)\n{\n    if(node)\n    {\n            \n    }"],[1,"tion)\n{\n    if(node)\n    {\n        node.setAction(state, action);\n        node.parentNode  = parentNode; \n        node.rubixState = state;\n        node.initParentDetails(parentNode);\n    }\n    else\n    {\n        console.log(\"making new node\"\n        node = new RubixNode(state, parentNode, action);\n    }\n    \n    return node;"],[0,"\n};\n"]],"start1":2591,"start2":2591,"length1":59,"length2":336},{"diffs":[[0,";    \n        }\n"],[1,"        RubixNode.statePool.push(node.rubixState);\n        node.rubixState = null;\n"],[0,"        node.par"]],"start1":3137,"start2":3137,"length1":32,"length2":115},{"diffs":[[0,"   \n"],[-1,"        node.successors = null;\n"],[0,"    "]],"start1":3268,"start2":3268,"length1":40,"length2":8},{"diffs":[[0,"de.fn = null"],[-1,""],[0,""],[1,";\n        RubixNode.nodePool.push(node)"],[0,";\n    }\n    "]],"start1":3365,"start2":3365,"length1":24,"length2":63}]],"length":3754,"saved":false}
{"ts":1350867970120,"patch":[[{"diffs":[[0,"ew node\""],[1,");"],[0,"\n       "]],"start1":2830,"start2":2830,"length1":16,"length2":18}]],"length":3756,"saved":false}
{"ts":1350867982584,"patch":[[{"diffs":[[0,"arentNode);\n"],[1,"        console.log(\"reviving old node\");\n"],[0,"    }\n    el"]],"start1":2768,"start2":2768,"length1":24,"length2":66}]],"length":3798,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350874408768,"patch":[[{"diffs":[[0,"ntNode);\n       "],[1,"//"],[0," console.log(\"re"]],"start1":2771,"start2":2771,"length1":32,"length2":34},{"diffs":[[0,"        "],[1,"//"],[0,"console."]],"start1":2845,"start2":2845,"length1":16,"length2":18},{"diffs":[[0,"== 0)\n        {\n"],[1,"            console.log(node);\n"],[0,"            Rubi"]],"start1":3118,"start2":3118,"length1":32,"length2":63}]],"length":3833,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350874711862,"patch":[[{"diffs":[[0,"ole.log("],[-1,"node"],[1,"\"a\""],[0,");\n     "]],"start1":3150,"start2":3150,"length1":20,"length2":19}]],"length":3832,"saved":false}
{"ts":1350875071880,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            console.log(\"a\");\n"],[0,"    "]],"start1":3130,"start2":3130,"length1":38,"length2":8}]],"length":3802,"saved":false}
{"ts":1350875088787,"patch":[[{"diffs":[[0,"\n       "],[-1,"//"],[0," console"]],"start1":2779,"start2":2779,"length1":18,"length2":16},{"diffs":[[0,"old node\");\n"],[1,"       \n"],[0,"    }\n    el"]],"start1":2810,"start2":2810,"length1":24,"length2":32}]],"length":3808,"saved":false}
{"ts":1350875113107,"patch":[[{"diffs":[[0,"== 0)\n        {\n"],[1,"            console.log(\"a\");\n"],[0,"            Rubi"]],"start1":3124,"start2":3124,"length1":32,"length2":62}]],"length":3838,"saved":false}
{"ts":1350875138286,"patch":[[{"diffs":[[0,"old node\");\n"],[1,"        console.log(node);\n"],[0,"       \n    "]],"start1":2810,"start2":2810,"length1":24,"length2":51}]],"length":3865,"saved":false}
{"ts":1350875165318,"patch":[[{"diffs":[[0,"ole.log(node"],[1,".parentNode"],[0,");\n       \n "]],"start1":2834,"start2":2834,"length1":24,"length2":35}]],"length":3876,"saved":false}
{"ts":1350875209640,"patch":[[{"diffs":[[0,"og(node."],[-1,"parentNode"],[1,"stringify()"],[0,");\n     "]],"start1":2839,"start2":2839,"length1":26,"length2":27}]],"length":3877,"saved":false}
{"ts":1350875223735,"patch":[[{"diffs":[[0,"ole.log("],[-1,"node"],[1,"JSON"],[0,".stringi"]],"start1":2834,"start2":2834,"length1":20,"length2":20},{"diffs":[[0,"ringify("],[1,"node"],[0,"));\n    "]],"start1":2849,"start2":2849,"length1":16,"length2":20}]],"length":3881,"saved":false}
{"ts":1350875391096,"patch":[[{"diffs":[[0,"le.log(\""],[-1,"a"],[1,"wipe node"],[0,"\");\n    "]],"start1":3200,"start2":3200,"length1":17,"length2":25}]],"length":3889,"saved":false}
{"ts":1350875398179,"patch":[[{"diffs":[[0,"ify(node"],[1,".rubixState"],[0,"));\n    "]],"start1":2853,"start2":2853,"length1":16,"length2":27}]],"length":3900,"saved":false}
{"ts":1350875561259,"patch":[[{"diffs":[[0,"node\");\n        "],[1,"//"],[0,"console.log(JSON"]],"start1":2814,"start2":2814,"length1":32,"length2":34}]],"length":3902,"saved":false}
{"ts":1350875799304,"patch":[[{"diffs":[[0,"\");\n"],[-1,"        //console.log(JSON.stringify(node.rubixState));\n"],[0,"    "]],"start1":2818,"start2":2818,"length1":64,"length2":8},{"diffs":[[0,"og(\""],[-1,"wipe node"],[1,"a"],[0,"\");\n"]],"start1":3161,"start2":3161,"length1":17,"length2":9}]],"length":3838,"saved":false}
{"ts":1350875961567,"patch":[[{"diffs":[[0,"    "],[-1,"parent.rc++"],[1,"\n        parent.rc = parent.rc ?parent.rc : 0"],[0,";\n  "]],"start1":967,"start2":967,"length1":19,"length2":53}]],"length":3872,"saved":false}
{"ts":1350875963727,"patch":[[{"diffs":[[0,"ent.rc ?"],[1," "],[0,"parent.r"]],"start1":995,"start2":995,"length1":16,"length2":17}]],"length":3873,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350876464278,"patch":[[{"diffs":[[0,".rotate("],[1,"this."],[0,"state, a"]],"start1":1265,"start2":1265,"length1":16,"length2":21}]],"length":3878,"saved":false}
{"ts":1350876471996,"patch":[[{"diffs":[[0," if(node)\n    {\n"],[1,"                node.rubixState = state;\n\n"],[0,"        node.set"]],"start1":2648,"start2":2648,"length1":32,"length2":74},{"diffs":[[0,"e; \n"],[-1,"        node.rubixState = state;\n"],[0,"    "]],"start1":2781,"start2":2781,"length1":41,"length2":8}]],"length":3887,"saved":false}
{"ts":1350876473084,"patch":[[{"diffs":[[0,"            "],[-1,"    "],[0,"node.rubixSt"]],"start1":2664,"start2":2664,"length1":28,"length2":24}]],"length":3883,"saved":false}
{"ts":1350876473631,"patch":[[{"diffs":[[0,"  {\n        "],[-1,"    "],[0,"node.rubixSt"]],"start1":2660,"start2":2660,"length1":28,"length2":24}]],"length":3879,"saved":false}
{"ts":1350876497158,"patch":[[{"diffs":[[0,"ion = null;\n"],[1,"     \n"],[0,"    if(actio"]],"start1":1214,"start2":1214,"length1":24,"length2":30},{"diffs":[[0,"   {"],[-1,"\n        node.rubixState = state;"],[0,"\n\n  "]],"start1":2665,"start2":2665,"length1":41,"length2":8}]],"length":3852,"saved":false}
{"ts":1350876499195,"patch":[[{"diffs":[[0," null;\n     "],[1,"        node.rubixState = state;\n"],[0,"\n    if(acti"]],"start1":1219,"start2":1219,"length1":24,"length2":57}]],"length":3885,"saved":false}
{"ts":1350876505410,"patch":[[{"diffs":[[0,"ll;\n    "],[-1,"         node"],[1,"this."],[0,".rubixSt"]],"start1":1222,"start2":1222,"length1":29,"length2":21}]],"length":3877,"saved":false}
{"ts":1350876512934,"patch":[[{"diffs":[[0,"ull;"],[-1,"\n    this..rubixState = state;"],[0,"\n\n  "]],"start1":1221,"start2":1221,"length1":38,"length2":8},{"diffs":[[0,"te(this."],[-1,"s"],[1,"rubixS"],[0,"tate, ac"]],"start1":1271,"start2":1271,"length1":17,"length2":22}]],"length":3852,"saved":false}
{"ts":1350876531149,"patch":[[{"diffs":[[0,")\n    {\n"],[1,"        node.RubixState = state"],[0,"\n       "]],"start1":2662,"start2":2662,"length1":16,"length2":47}]],"length":3883,"saved":false}
{"ts":1350876531810,"patch":[[{"diffs":[[0," = state"],[1,";"],[0,"\n       "]],"start1":2693,"start2":2693,"length1":16,"length2":17}]],"length":3884,"saved":false}
{"ts":1350876534867,"patch":[[{"diffs":[[0," node.setAction("],[-1,"state, "],[0,"action);\n       "]],"start1":2710,"start2":2710,"length1":39,"length2":32}]],"length":3877,"saved":false}
{"ts":1350876541016,"patch":[[{"diffs":[[0,"s.setAction("],[-1,"state,"],[0," action);   "]],"start1":616,"start2":616,"length1":30,"length2":24}]],"length":3871,"saved":false}
{"ts":1350876543291,"patch":[[{"diffs":[[0,"tAction("],[-1," "],[0,"action);"]],"start1":620,"start2":620,"length1":17,"length2":16}]],"length":3870,"saved":false}
{"ts":1350876546471,"patch":[[{"diffs":[[0,"his."],[-1,"setAction(action);    \n    this.rubixState = state;"],[1,"rubixState = state;\n        this.setAction(action);    \n"],[0,"\n   "]],"start1":614,"start2":614,"length1":59,"length2":64}]],"length":3875,"saved":false}
{"ts":1350876547187,"patch":[[{"diffs":[[0,"te = state;\n"],[-1,"    "],[0,"    this.set"]],"start1":626,"start2":626,"length1":28,"length2":24}]],"length":3871,"saved":false}
{"ts":1350876571561,"patch":[[{"diffs":[[0,"unction("],[-1,"state, "],[0,"action)\n"]],"start1":1166,"start2":1166,"length1":23,"length2":16}]],"length":3864,"saved":false}
{"ts":1350877388543,"patch":[[{"diffs":[[0,"rc === 0"],[1," && ode.parentNode.depth !== 9"],[0,")\n      "]],"start1":3146,"start2":3146,"length1":16,"length2":46}]],"length":3894,"saved":false}
{"ts":1350877390032,"patch":[[{"diffs":[[0,"!== "],[-1,"9"],[1,"0"],[0,")\n  "]],"start1":3179,"start2":3179,"length1":9,"length2":9}]],"length":3894,"saved":false}
{"ts":1350877432843,"patch":[[{"diffs":[[0," if(node)\n    {\n"],[1,"                console.log(\"reviving old node\");\n\n"],[0,"        node.Rub"]],"start1":2641,"start2":2641,"length1":32,"length2":83},{"diffs":[[0,"e);\n"],[-1,"        console.log(\"reviving old node\");\n"],[0,"    "]],"start1":2853,"start2":2853,"length1":50,"length2":8}]],"length":3903,"saved":false}
{"ts":1350877465209,"patch":[[{"diffs":[[0,"== 0 && "],[1,"n"],[0,"ode.pare"]],"start1":3159,"start2":3159,"length1":16,"length2":17}]],"length":3904,"saved":false}
{"ts":1350877505387,"patch":[[{"diffs":[[0,"log("],[-1,"\"reviving old node\""],[1,"n"],[0,");\n\n"]],"start1":2681,"start2":2681,"length1":27,"length2":9},{"diffs":[[0,"   node."],[-1,"R"],[1,"r"],[0,"ubixStat"]],"start1":2695,"start2":2695,"length1":17,"length2":17}]],"length":3886,"saved":false}
{"ts":1350877509040,"patch":[[{"diffs":[[0,"\n               "],[1,"//"],[0," console.log(n);"]],"start1":2656,"start2":2656,"length1":32,"length2":34}]],"length":3888,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350877618999,"patch":[[{"diffs":[[0,"arentNode);\n"],[1,"        console.log(RubixState.toString(node.rubixState);\n"],[0,"       \n    "]],"start1":2829,"start2":2829,"length1":24,"length2":82}]],"length":3946,"saved":false}
{"ts":1350877620935,"patch":[[{"diffs":[[0,"node.rubixState)"],[1,")"],[0,";\n       \n    }\n"]],"start1":2881,"start2":2881,"length1":32,"length2":33}]],"length":3947,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350877719559,"patch":[[{"diffs":[[0,"oString("],[1,"state),RubixState.toString("],[0,"node.rub"]],"start1":2873,"start2":2873,"length1":16,"length2":43}]],"length":3974,"saved":false}
{"ts":1350877727030,"patch":[[{"diffs":[[0,"ixState)"],[1,", action[0], action[1]"],[0,");\n     "]],"start1":2916,"start2":2916,"length1":16,"length2":38}]],"length":3996,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350877987145,"patch":[[{"diffs":[[0,")\n    {\n        "],[1,"//"],[0,"RubixState.rotat"]],"start1":1227,"start2":1227,"length1":32,"length2":34}]],"length":3998,"saved":false}
{"ts":1350877992789,"patch":[[{"diffs":[[0,"tion)\n{\n    "],[-1," "],[0,"this.nodeAct"]],"start1":1176,"start2":1176,"length1":25,"length2":24}]],"length":3997,"saved":false}
{"ts":1350878014354,"patch":[[{"diffs":[[0,".cop"],[-1,"yInto"],[1,"copyAndRotate"],[0,"(nod"]],"start1":2319,"start2":2319,"length1":13,"length2":21},{"diffs":[[0,"ol.pop()"],[1,",\n                                                        [i,j]"],[0,"), \n    "]],"start1":2428,"start2":2428,"length1":16,"length2":79}]],"length":4068,"saved":false}
{"ts":1350878039629,"patch":[[{"diffs":[[0,"ixState."],[-1,"cop"],[0,"copyAndR"]],"start1":2312,"start2":2312,"length1":19,"length2":16}]],"length":4065,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350878213758,"patch":[[{"diffs":[[0,"log("],[-1,"RubixState.toString(state),RubixState.toString(node.rubixState), action[0], action[1]"],[1,"node"],[0,");\n "]],"start1":2926,"start2":2926,"length1":93,"length2":12}]],"length":3984,"saved":false}
{"ts":1350878279844,"patch":[[{"diffs":[[0,"ubixState);\n"],[1,"        /*\n"],[0,"        node"]],"start1":3422,"start2":3422,"length1":24,"length2":35},{"diffs":[[0," node.fn = null;"],[1,"*/"],[0,"\n        RubixNo"]],"start1":3603,"start2":3603,"length1":32,"length2":34}]],"length":3997,"saved":false}
{"ts":1350878310446,"patch":[[{"diffs":[[0,"dePool.push("],[1,"node.depth, "],[0,"node);\n    }"]],"start1":3642,"start2":3642,"length1":24,"length2":36}]],"length":4009,"saved":false}
{"ts":1350878335654,"patch":[[{"diffs":[[0,"ush("],[-1,"node.depth, "],[0,"node"]],"start1":3650,"start2":3650,"length1":20,"length2":8}]],"length":3997,"saved":false}
{"ts":1350878350487,"patch":[[{"diffs":[[0,"null;*/\n"],[1,"        console.log(node, node.depth);\n"],[0,"        "]],"start1":3614,"start2":3614,"length1":16,"length2":55}]],"length":4036,"saved":false}
{"ts":1350878470519,"patch":[[{"diffs":[[0,"arentNode)\n    {"],[1,"   "],[0,"\n"],[-1,""],[0,"        node.par"]],"start1":3152,"start2":3152,"length1":33,"length2":36},{"diffs":[[0,"      }\n        "],[1,"//"],[0,"RubixNode.stateP"]],"start1":3378,"start2":3378,"length1":32,"length2":34},{"diffs":[[0,"null;*/\n        "],[1,"node = {};\n        //"],[0,"console.log(node"]],"start1":3619,"start2":3619,"length1":32,"length2":53},{"diffs":[[0,"depth);\n        "],[1,"//"],[0,"RubixNode.nodePo"]],"start1":3679,"start2":3679,"length1":32,"length2":34}]],"length":4064,"saved":false}
{"ts":1350878486537,"patch":[[{"diffs":[[0,"e);\n"],[-1,"        console.log(node);\n"],[0,"    "]],"start1":2906,"start2":2906,"length1":35,"length2":8}]],"length":4037,"saved":false}
{"ts":1350878492032,"patch":[[{"diffs":[[0,"  {\n"],[-1,"               // console.log(n);\n\n"],[0,"    "]],"start1":2722,"start2":2722,"length1":43,"length2":8},{"diffs":[[0,"ntNode);"],[-1,"\n     "],[0,"  \n    }"]],"start1":2866,"start2":2866,"length1":22,"length2":16}]],"length":3996,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350878689088,"patch":[[{"diffs":[[0,";*/\n"],[-1,"        node = {};\n"],[0,"    "]],"start1":3555,"start2":3555,"length1":27,"length2":8}]],"length":3977,"saved":false}
{"ts":1350878690529,"patch":[[{"diffs":[[0," = null;"],[-1,"*/"],[0,"\n       "]],"start1":3548,"start2":3548,"length1":18,"length2":16}]],"length":3975,"saved":false}
{"ts":1350878693425,"patch":[[{"diffs":[[0,"      }\n        "],[-1,"//"],[0,"RubixNode.stateP"]],"start1":3310,"start2":3310,"length1":34,"length2":32},{"diffs":[[0,"        "],[-1,"/*"],[0,"\n       "]],"start1":3369,"start2":3369,"length1":18,"length2":16}]],"length":3971,"saved":false}
{"ts":1350878695876,"patch":[[{"diffs":[[0,"= null;\n        "],[-1,"//"],[0,"console.log(node"]],"start1":3545,"start2":3545,"length1":34,"length2":32},{"diffs":[[0,"h);\n        "],[-1,"//"],[0,"RubixNode.no"]],"start1":3588,"start2":3588,"length1":26,"length2":24}]],"length":3967,"saved":false}
{"ts":1350878700765,"patch":[[{"diffs":[[0,"ll;\n"],[-1,"        console.log(node, node.depth);\n"],[0,"    "]],"start1":3549,"start2":3549,"length1":47,"length2":8}]],"length":3928,"saved":false}
{"ts":1350878704628,"patch":[[{"diffs":[[0,"de.rc = "],[-1,"null"],[1,"0"],[0,";\n      "]],"start1":3488,"start2":3488,"length1":20,"length2":17}]],"length":3925,"saved":false}
{"ts":1350878706533,"patch":[[{"diffs":[[0,"depth = "],[-1,"null"],[1,"0"],[0,";\n      "]],"start1":3512,"start2":3512,"length1":20,"length2":17}]],"length":3922,"saved":false}
{"ts":1350878708497,"patch":[[{"diffs":[[0,"  node.fn = "],[-1,"null"],[1,"0"],[0,";\n        Ru"]],"start1":3529,"start2":3529,"length1":28,"length2":25}]],"length":3919,"saved":false}
{"ts":1350878711608,"patch":[[{"diffs":[[0,"ction = "],[-1,"null"],[1,"0"],[0,";\n      "]],"start1":3464,"start2":3464,"length1":20,"length2":17}]],"length":3916,"saved":false}
{"ts":1350878716631,"patch":[[{"diffs":[[0,"tNode = "],[-1,"null"],[1,"0"],[0,";    \n  "]],"start1":3428,"start2":3428,"length1":20,"length2":17}]],"length":3913,"saved":false}
{"ts":1350878756747,"patch":[[{"diffs":[[0,"State = "],[-1,"null"],[1,"0"],[0,";\n      "]],"start1":3396,"start2":3396,"length1":20,"length2":17}]],"length":3910,"saved":false}
{"ts":1350878856303,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            console.log(\"a\");\n"],[0,"    "]],"start1":3217,"start2":3217,"length1":38,"length2":8}]],"length":3880,"saved":false}
{"ts":1350878878707,"patch":[[{"diffs":[[0,", action)\n{\n"],[1,"    var fixedNode\n"],[0,"    if(node)"]],"start1":2695,"start2":2695,"length1":24,"length2":42}]],"length":3898,"saved":false}
{"ts":1350878886422,"patch":[[{"diffs":[[0,"\n    if("],[-1,"n"],[1,"fixedN"],[0,"ode)\n   "]],"start1":2724,"start2":2724,"length1":17,"length2":22},{"diffs":[[0,")\n    {\n        "],[-1,"n"],[1,"fixedN"],[0,"ode.rubixState ="]],"start1":2741,"start2":2741,"length1":33,"length2":38},{"diffs":[[0,"te;\n        "],[-1,"n"],[1,"fixedN"],[0,"ode.setActio"]],"start1":2783,"start2":2783,"length1":25,"length2":30},{"diffs":[[0,"ction);\n        "],[-1,"n"],[1,"fixedN"],[0,"ode.parentNode  "]],"start1":2816,"start2":2816,"length1":33,"length2":38},{"diffs":[[0,"e; \n        "],[-1,"n"],[1,"fixedN"],[0,"ode.initPare"]],"start1":2865,"start2":2865,"length1":25,"length2":30}]],"length":3923,"saved":false}
{"ts":1350878890989,"patch":[[{"diffs":[[0,"ixedNode"],[1," = nudel"],[0,"\n    if("]],"start1":2716,"start2":2716,"length1":16,"length2":24}]],"length":3931,"saved":false}
{"ts":1350878892677,"patch":[[{"diffs":[[0,"e = nude"],[-1,"l"],[1,";"],[0,"\n    if("]],"start1":2723,"start2":2723,"length1":17,"length2":17}]],"length":3931,"saved":false}
{"ts":1350878896174,"patch":[[{"diffs":[[0,"Node = n"],[-1,"u"],[1,"0"],[0,"de;\n    "]],"start1":2720,"start2":2720,"length1":17,"length2":17}]],"length":3931,"saved":false}
{"ts":1350878898868,"patch":[[{"diffs":[[0,"Node = n"],[-1,"0"],[1,"o"],[0,"de;\n    "]],"start1":2720,"start2":2720,"length1":17,"length2":17}]],"length":3931,"saved":false}
{"ts":1350878912090,"patch":[[{"diffs":[[0," return "],[-1,"n"],[1,"fixedN"],[0,"ode;\n};\n"]],"start1":3062,"start2":3062,"length1":17,"length2":22}]],"length":3936,"saved":false}
{"ts":1350878913398,"patch":[[{"diffs":[[0,"        "],[-1,"n"],[1,"fixedN"],[0,"ode = ne"]],"start1":2991,"start2":2991,"length1":17,"length2":22}]],"length":3941,"saved":false}
{"ts":1350878929062,"patch":[[{"diffs":[[0,"tNode); "],[-1," "],[1,"\n        console.log(fixedNode);"],[0,"\n    }\n "]],"start1":2918,"start2":2918,"length1":17,"length2":48}]],"length":3972,"saved":false}
{"ts":1350878958065,"patch":[[{"diffs":[[0,"ole.log("],[1,"JSON.stringify("],[0,"fixedNod"]],"start1":2939,"start2":2939,"length1":16,"length2":31}]],"length":3987,"saved":false}
{"ts":1350878959485,"patch":[[{"diffs":[[0,"y(fixedNode)"],[1,")"],[0,";\n    }\n    "]],"start1":2960,"start2":2960,"length1":24,"length2":25}]],"length":3988,"saved":false}
{"ts":1350879070746,"patch":[[{"diffs":[[0,"\n    \n}\n"],[1,"RubixNode.init(state, parent, action);"],[0,"\nRubixNo"]],"start1":746,"start2":746,"length1":16,"length2":54}]],"length":4026,"saved":false}
{"ts":1350879081273,"patch":[[{"diffs":[[0," action)"],[-1,";"],[1,"\n{\n    \n}"],[0,"\nRubixNo"]],"start1":783,"start2":783,"length1":17,"length2":25}]],"length":4034,"saved":false}
{"ts":1350879082093,"patch":[[{"diffs":[[0,"on)\n{\n    \n}"],[1,";"],[0,"\nRubixNode.p"]],"start1":788,"start2":788,"length1":24,"length2":25}]],"length":4035,"saved":false}
{"ts":1350879083090,"patch":[[{"diffs":[[0,"    \n};\n"],[1,"\n"],[0,"RubixNod"]],"start1":794,"start2":794,"length1":16,"length2":17}]],"length":4036,"saved":false}
{"ts":1350879089113,"patch":[[{"diffs":[[0,"ode.init"],[1," = function "],[0,"(state, "]],"start1":760,"start2":760,"length1":16,"length2":28}]],"length":4048,"saved":false}
{"ts":1350879089784,"patch":[[{"diffs":[[0,"function"],[-1," "],[0,"(state, "]],"start1":771,"start2":771,"length1":17,"length2":16}]],"length":4047,"saved":false}
{"ts":1350879096325,"patch":[[{"diffs":[[0,"arent, action)\n{"],[1,"\n\n    \n}\nRubixNode.init = function(state, parent, action)\n{"],[0,"\n    this.rubixS"]],"start1":592,"start2":592,"length1":32,"length2":91},{"diffs":[[0,"t);\n"],[-1,"    \n}\nRubixNode.init = function(state, parent, action)\n{\n    \n"],[0,"};\n\n"]],"start1":802,"start2":802,"length1":71,"length2":8}]],"length":4043,"saved":false}
{"ts":1350879098722,"patch":[[{"diffs":[[0,"tion);  "],[-1,"  "],[0,"\n\n    th"]],"start1":718,"start2":718,"length1":18,"length2":16}]],"length":4041,"saved":false}
{"ts":1350879111043,"patch":[[{"diffs":[[0,"tion)\n{\n"],[1,"    this.init(state,parent,action)"],[0,"\n    \n}\n"]],"start1":601,"start2":601,"length1":16,"length2":50}]],"length":4075,"saved":false}
{"ts":1350879111822,"patch":[[{"diffs":[[0,"rent,action)"],[1,";"],[0,"\n    \n}\nRubi"]],"start1":631,"start2":631,"length1":24,"length2":25}]],"length":4076,"saved":false}
{"ts":1350879119172,"patch":[[{"diffs":[[0,"on);"],[-1,"\n"],[0,"    \n}\n"],[1,"\n"],[0,"Rubi"]],"start1":640,"start2":640,"length1":16,"length2":16},{"diffs":[[0," parent;"],[-1,"\n"],[0,"    \n   "]],"start1":784,"start2":784,"length1":17,"length2":16}]],"length":4075,"saved":false}
{"ts":1350879136062,"patch":[[{"diffs":[[0,"xedNode."],[-1,"rubixState = state"],[1,"init(state,parentNode,action)"],[0,";\n      "]],"start1":2854,"start2":2854,"length1":34,"length2":45}]],"length":4086,"saved":false}
{"ts":1350879139736,"patch":[[{"diffs":[[0,"n);\n"],[-1,"        fixedNode.setAction(action);\n        fixedNode.parentNode  = parentNode; \n        fixedNode.initParentDetails(parentNode); \n"],[0,"    "]],"start1":2889,"start2":2889,"length1":140,"length2":8}]],"length":3954,"saved":false}
{"ts":1350879145886,"patch":[[{"diffs":[[0,"log("],[-1,"JSON.stringify("],[0,"fixe"]],"start1":2909,"start2":2909,"length1":23,"length2":8},{"diffs":[[0,"xedNode)"],[-1,")"],[0,";\n    }\n"]],"start1":2915,"start2":2915,"length1":17,"length2":16}]],"length":3938,"saved":false}
{"ts":1350879172321,"patch":[[{"diffs":[[0,"\n\nRubixNode."],[1,"prototype."],[0,"init = funct"]],"start1":650,"start2":650,"length1":24,"length2":34}]],"length":3948,"saved":false}
{"ts":1350879226351,"patch":[[{"diffs":[[0,"        "],[-1,"fixedN"],[1,"n"],[0,"ode.init"]],"start1":2854,"start2":2854,"length1":22,"length2":17}]],"length":3943,"saved":false}
{"ts":1350879228241,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    var fixedNode = node;\n"],[0,"    "]],"start1":2800,"start2":2800,"length1":34,"length2":8}]],"length":3917,"saved":false}
{"ts":1350879235889,"patch":[[{"diffs":[[0,"\n    if("],[-1,"fixedN"],[1,"n"],[0,"ode)\n   "]],"start1":2803,"start2":2803,"length1":22,"length2":17},{"diffs":[[0,"ole.log("],[-1,"fixedN"],[1,"n"],[0,"ode);\n  "]],"start1":2879,"start2":2879,"length1":22,"length2":17},{"diffs":[[0,"        "],[-1,"fixedN"],[1,"n"],[0,"ode = ne"]],"start1":2957,"start2":2957,"length1":22,"length2":17},{"diffs":[[0,"urn "],[-1,"fixedN"],[1,"n"],[0,"ode;"]],"start1":3032,"start2":3032,"length1":14,"length2":9}]],"length":3897,"saved":false}
{"ts":1350879239598,"patch":[[{"diffs":[[0,"ole.log(node"],[1,".parentNode"],[0,");\n    }\n   "]],"start1":2879,"start2":2879,"length1":24,"length2":35}]],"length":3908,"saved":false}
{"ts":1350879270892,"patch":[[{"diffs":[[0,"t(state,"],[-1,"parentNod"],[1,"rubixStat"],[0,"e,action"]],"start1":2839,"start2":2839,"length1":25,"length2":25}]],"length":3908,"saved":false}
{"ts":1350879290174,"patch":[[{"diffs":[[0,"t(state,"],[-1,"rubixStat"],[1,"parentNod"],[0,"e,action"]],"start1":2839,"start2":2839,"length1":25,"length2":25},{"diffs":[[0,"le.log(node."],[-1,"parentN"],[1,"n"],[0,"ode);\n    }\n"]],"start1":2880,"start2":2880,"length1":31,"length2":25}]],"length":3902,"saved":false}
{"ts":1350879294686,"patch":[[{"diffs":[[0,"og(node."],[-1,"nod"],[1,"rubixStat"],[0,"e);\n    "]],"start1":2884,"start2":2884,"length1":19,"length2":25}]],"length":3908,"saved":false}
{"ts":1350879324189,"patch":[[{"diffs":[[0,"n);\n"],[-1,"        console.log(node.rubixState);\n"],[0,"    "]],"start1":2863,"start2":2863,"length1":46,"length2":8}]],"length":3870,"saved":false}
{"ts":1350879348430,"patch":[[{"diffs":[[0,"rent, action)\n{\n"],[1,"    console.log(this.rubixState == state);\n"],[0,"    this.rubixSt"]],"start1":697,"start2":697,"length1":32,"length2":75}]],"length":3913,"saved":false}
{"ts":1350879368111,"patch":[[{"diffs":[[0," state;\n"],[1,"        console.log(this.rubixState == state);\n\n"],[0,"    this"]],"start1":777,"start2":777,"length1":16,"length2":64},{"diffs":[[0,"ction); "],[1,"\n   "],[0," \n\n    t"]],"start1":853,"start2":853,"length1":16,"length2":20}]],"length":3965,"saved":false}
{"ts":1350879382428,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    console.log(this.rubixState == state);\n"],[0,"    "]],"start1":709,"start2":709,"length1":51,"length2":8}]],"length":3922,"saved":false}
{"ts":1350879385725,"patch":[[{"diffs":[[0,"te;\n"],[-1,"        console.log(this.rubixState == state);\n\n"],[0,"    "]],"start1":738,"start2":738,"length1":56,"length2":8}]],"length":3874,"saved":false}
{"ts":1350879391924,"patch":[[{"diffs":[[0," parent;"],[-1,"    \n    "],[0,"\n    thi"]],"start1":798,"start2":798,"length1":25,"length2":16}]],"length":3865,"saved":false}
{"ts":1350879410044,"patch":[[{"diffs":[[0,"e.rc--;\n        "],[1,"console.log(node.parentNode.rc_)"],[0,"\n        if(node"]],"start1":3111,"start2":3111,"length1":32,"length2":64}]],"length":3897,"saved":false}
{"ts":1350879411724,"patch":[[{"diffs":[[0,"e.rc"],[-1,"_"],[0,")"],[1,";"],[0,"\n   "]],"start1":3153,"start2":3153,"length1":10,"length2":10}]],"length":3897,"saved":false}
{"ts":1350879424875,"patch":[[{"diffs":[[0,"--;\n"],[-1,"        console.log(node.parentNode.rc);\n"],[0,"    "]],"start1":3115,"start2":3115,"length1":49,"length2":8}]],"length":3856,"saved":false}
{"ts":1350879433721,"patch":[[{"diffs":[[0,"rent.rc "],[1,"+1 "],[0,": 0;\n   "]],"start1":1092,"start2":1092,"length1":16,"length2":19}]],"length":3859,"saved":false}
{"ts":1350879434373,"patch":[[{"diffs":[[0,"ent.rc +"],[1," "],[0,"1 : 0;\n "]],"start1":1093,"start2":1093,"length1":16,"length2":17}]],"length":3860,"saved":false}
{"ts":1350879460913,"patch":[[{"diffs":[[0,"e.rc--;\n"],[1,"        console.log(node.parentNode.rc);\n"],[0,"        "]],"start1":3115,"start2":3115,"length1":16,"length2":57}]],"length":3901,"saved":false}
{"ts":1350879492462,"patch":[[{"diffs":[[0,"c + 1 : "],[-1,"0"],[1,"1"],[0,";\n    }\n"]],"start1":1098,"start2":1098,"length1":17,"length2":17}]],"length":3901,"saved":false}
{"ts":1350879519917,"patch":[[{"diffs":[[0,"--;\n"],[-1,"        console.log(node.parentNode.rc);\n"],[0,"    "]],"start1":3119,"start2":3119,"length1":49,"length2":8}]],"length":3860,"saved":false}
{"ts":1350879557988,"patch":[[{"diffs":[[0,".depth;\n        "],[1,"console.log(parent.rc);"],[0,"\n        parent."]],"start1":1041,"start2":1041,"length1":32,"length2":55}]],"length":3883,"saved":false}
{"ts":1350879602055,"patch":[[{"diffs":[[0,"th;\n"],[-1,"        console.log(parent.rc);"],[0,"\n   "]],"start1":1045,"start2":1045,"length1":39,"length2":8}]],"length":3852,"saved":false}
{"ts":1350879624701,"patch":[[{"diffs":[[0,"ubixState);\n"],[1,"        this.rc = 0;\n"],[0,"    }    \n};"]],"start1":1195,"start2":1195,"length1":24,"length2":45}]],"length":3873,"saved":false}
{"ts":1350879634081,"patch":[[{"diffs":[[0,".rc "],[-1,"= parent.rc ? parent.rc + 1 : 1;"],[1,"++"],[0,"\n   "]],"start1":1064,"start2":1064,"length1":40,"length2":10}]],"length":3843,"saved":false}
{"ts":1350879634852,"patch":[[{"diffs":[[0,"nt.rc ++"],[1,";"],[0,"\n    }\n "]],"start1":1062,"start2":1062,"length1":16,"length2":17}]],"length":3844,"saved":false}
{"ts":1350879713031,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    console.log(RubixState.isEqual(AStar.goalState,node.rubixState);\n    \n"],[0,"    return n"]],"start1":2969,"start2":2969,"length1":24,"length2":98}]],"length":3918,"saved":false}
{"ts":1350879714967,"patch":[[{"diffs":[[0,".rubixState)"],[1,")"],[0,";\n    \n    r"]],"start1":3036,"start2":3036,"length1":24,"length2":25}]],"length":3919,"saved":false}
{"ts":1350879798063,"patch":[[{"diffs":[[0,"ixState)"],[1,", node.rubixState"],[0,");\n    \n"]],"start1":3040,"start2":3040,"length1":16,"length2":33}]],"length":3936,"saved":false}
{"ts":1350879832934,"patch":[[{"diffs":[[0,"e.rubixState"],[1,"[0]"],[0,");\n    \n    "]],"start1":3053,"start2":3053,"length1":24,"length2":27}]],"length":3939,"saved":false}
{"ts":1350879958592,"patch":[[{"diffs":[[0,"bixState"],[1,".cubies"],[0,"[0]);\n  "]],"start1":3057,"start2":3057,"length1":16,"length2":23}]],"length":3946,"saved":false}
{"ts":1350880080250,"patch":[[{"diffs":[[0,"      }\n        "],[1,"//"],[0,"RubixNode.stateP"]],"start1":3346,"start2":3346,"length1":32,"length2":34},{"diffs":[[0,"  node.fn = "],[-1,"0"],[1,"null"],[0,";\n        Ru"]],"start1":3558,"start2":3558,"length1":25,"length2":28},{"diffs":[[0,"= null;\n        "],[1,"//"],[0,"RubixNode.nodePo"]],"start1":3568,"start2":3568,"length1":32,"length2":34}]],"length":3953,"saved":false}
{"ts":1350880083406,"patch":[[{"diffs":[[0,"   node.depth = "],[-1,"0"],[1,"null"],[0,";\n        node.f"]],"start1":3533,"start2":3533,"length1":33,"length2":36}]],"length":3956,"saved":false}
{"ts":1350880085426,"patch":[[{"diffs":[[0,"  node.rc = "],[-1,"0"],[1,"null"],[0,";\n        no"]],"start1":3513,"start2":3513,"length1":25,"length2":28}]],"length":3959,"saved":false}
{"ts":1350880088066,"patch":[[{"diffs":[[0,"ction = "],[-1,"0"],[1,"null"],[0,";\n      "]],"start1":3496,"start2":3496,"length1":17,"length2":20}]],"length":3962,"saved":false}
{"ts":1350880091803,"patch":[[{"diffs":[[0,"tNode = "],[-1,"0"],[1,"null"],[0,";    \n  "]],"start1":3463,"start2":3463,"length1":17,"length2":20}]],"length":3965,"saved":false}
{"ts":1350880093957,"patch":[[{"diffs":[[0,"State = "],[-1,"0"],[1,"null"],[0,";\n      "]],"start1":3434,"start2":3434,"length1":17,"length2":20}]],"length":3968,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350880150582,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n    Requires - rubixState.js\n    A node representation of state for search trees.\n   --------------*/\n\n//RubixNode.statePool = [];\nRubixNode.nodePool = [];\n\n/**\n * Defines an object to represent a node on the IDA* search tree for a rubik's cube.\n * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n * \n */\nfunction RubixNode(state, parent, action)\n{\n    this.init(state,parent,action);    \n}\n\nRubixNode.prototype.init = function(state, parent, action)\n{\n    this.rubixState = state;\n    this.setAction(action); \n    \n\n    this.parentNode = parent;\n    this.initParentDetails(parent);\n};\n\nRubixNode.prototype.initParentDetails = function(parent)\n{\n    if (parent)\n    {        \n        this.depth = parent.depth + 1;\n        this.fn = CubeHeuristics.heuristic(this.rubixState) + this.depth;\n\n        parent.rc ++;\n    }\n    else\n    {\n        this.depth = 0;\n        this.fn = CubeHeuristics.heuristic(this.rubixState);\n        this.rc = 0;\n    }    \n};\n\nRubixNode.prototype.setAction = function(action)\n{\n    this.nodeAction = null;\n\n    if(action)\n    {\n        //RubixState.rotate(this.rubixState, action[0], action[1]);\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }  \n};\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * \n * @param node The node to retrieve successors for.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i === node.nodeAction >> 4)\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.            \n            successors.push(\n                RubixNode.buildNode(RubixNode.nodePool.pop(),\n                                    RubixState.copyAndRotate(node.rubixState, \n                                                        RubixNode.statePool.pop(),\n                                                        [i,j]), \n                                    node, \n                                    [i, j]));\n        }   \n    }    \n\n    return successors;\n};\n\nRubixNode.buildNode  = function(node, state, parentNode, action)\n{\n    if(node)\n    {\n        node.init(state,parentNode,action);\n    }\n    else\n    {\n        //console.log(\"making new node\");\n        node = new RubixNode(state, parentNode, action);\n    }\n    \n    console.log(RubixState.isEqual(AStar.goalState,node.rubixState), node.rubixState.cubies[0]);\n    \n    return node;\n};\n\nRubixNode.wipeBadChain = function(node)\n{\n    if(node.parentNode)\n    {   \n        node.parentNode.rc--;\n        if(node.parentNode.rc === 0 && node.parentNode.depth !== 0)\n        {\n            RubixNode.wipeBadChain(node.parentNode);    \n        }\n        //RubixNode.statePool.push(node.rubixState);\n        \n        node.rubixState = null;\n        node.parentNode = null;    \n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;\n        //RubixNode.nodePool.push(node);\n    }\n    \n};\n\n/**\n * Returns a String with the node action pair for the supplied node.\n * \n * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n */\nRubixNode.nodeActionToString = function(node)\n{\n  return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);  \n};\n"]],"start1":0,"start2":0,"length1":0,"length2":3970}]],"length":3970,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350880152025,"patch":[[{"diffs":[[0,"l = [];\n"],[1,"//"],[0,"RubixNod"]],"start1":157,"start2":157,"length1":16,"length2":18}]],"length":3972,"saved":false}
{"ts":1350880170162,"patch":[[{"diffs":[[0,"ode("],[-1,"RubixNode.nodePool.pop()"],[1,"null"],[0,",\n  "]],"start1":2327,"start2":2327,"length1":32,"length2":12}]],"length":3952,"saved":false}
{"ts":1350880199145,"patch":[[{"diffs":[[0,", action)\n{\n"],[1,"    /*\n"],[0,"    if(node)"]],"start1":2759,"start2":2759,"length1":24,"length2":31},{"diffs":[[0,"}\n    else\n    {"],[1,"*/"],[0,"\n        //conso"]],"start1":2845,"start2":2845,"length1":32,"length2":34},{"diffs":[[0,"ction);\n    "],[1,"//"],[0,"}\n    \n    c"]],"start1":2955,"start2":2955,"length1":24,"length2":26}]],"length":3963,"saved":false}
{"ts":1350880203052,"patch":[[{"diffs":[[0,"    "],[-1,"\n    console.log(RubixState.isEqual(AStar.goalState,node.rubixState), node.rubixState.cubies[0]);\n"],[0,"    "]],"start1":2971,"start2":2971,"length1":106,"length2":8}]],"length":3865,"saved":false}
{"ts":1350880273946,"patch":[[{"diffs":[[0,"xState, "],[1,"null,"],[0,"\n       "]],"start1":2407,"start2":2407,"length1":16,"length2":21}]],"length":3870,"saved":false}
{"ts":1350880277426,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0," RubixNode.state"]],"start1":2460,"start2":2460,"length1":32,"length2":34}]],"length":3872,"saved":false}
{"ts":1350880287524,"patch":[[{"diffs":[[0,"ldNode(null,"],[1,"//RubixNode.statePool.pop(),"],[0,"\n           "]],"start1":2324,"start2":2324,"length1":24,"length2":52}]],"length":3900,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350881016490,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n    Requires - rubixState.js\n    A node representation of state for search trees.\n   --------------*/\n\n//RubixNode.statePool = [];\n//RubixNode.nodePool = [];\n\n/**\n * Defines an object to represent a node on the IDA* search tree for a rubik's cube.\n * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n * \n */\nfunction RubixNode(state, parent, action)\n{\n    this.init(state,parent,action);    \n}\n\nRubixNode.prototype.init = function(state, parent, action)\n{\n    this.rubixState = state;\n    this.setAction(action); \n    \n\n    this.parentNode = parent;\n    this.initParentDetails(parent);\n};\n\nRubixNode.prototype.initParentDetails = function(parent)\n{\n    if (parent)\n    {        \n        this.depth = parent.depth + 1;\n        this.fn = CubeHeuristics.heuristic(this.rubixState) + this.depth;\n\n        parent.rc ++;\n    }\n    else\n    {\n        this.depth = 0;\n        this.fn = CubeHeuristics.heuristic(this.rubixState);\n        this.rc = 0;\n    }    \n};\n\nRubixNode.prototype.setAction = function(action)\n{\n    this.nodeAction = null;\n\n    if(action)\n    {\n        //RubixState.rotate(this.rubixState, action[0], action[1]);\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }  \n};\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * \n * @param node The node to retrieve successors for.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i === node.nodeAction >> 4)\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.            \n            successors.push(\n                RubixNode.buildNode(null,//RubixNode.statePool.pop(),\n                                    RubixState.copyAndRotate(node.rubixState, null,\n                                                       // RubixNode.statePool.pop(),\n                                                        [i,j]), \n                                    node, \n                                    [i, j]));\n        }   \n    }    \n\n    return successors;\n};\n\nRubixNode.buildNode  = function(node, state, parentNode, action)\n{\n    \n    if(node)\n    {\n        node.init(state,parentNode,action);\n    }\n    else\n    {\n        //console.log(\"making new node\");\n        node = new RubixNode(state, parentNode, action);\n    }\n        \n    return node;\n};\n\nRubixNode.wipeBadChain = function(node)\n{\n    if(node.parentNode)\n    {   \n        node.parentNode.rc--;\n        if(node.parentNode.rc === 0 && node.parentNode.depth !== 0)\n        {\n            RubixNode.wipeBadChain(node.parentNode);    \n        }\n        //RubixNode.statePool.push(node.rubixState);\n        \n        node.rubixState = null;\n        node.parentNode = null;    \n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;\n        //RubixNode.nodePool.push(node);\n    }\n    \n};\n\n/**\n * Returns a String with the node action pair for the supplied node.\n * \n * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n */\nRubixNode.nodeActionToString = function(node)\n{\n  return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);  \n};\n"]],"start1":0,"start2":0,"length1":0,"length2":3894}]],"length":3894,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350881028296,"patch":[[{"diffs":[[0,"ull,//RubixNode."],[-1,"stat"],[1,"node"],[0,"ePool.pop(),\n   "]],"start1":2332,"start2":2332,"length1":36,"length2":36}]],"length":3894,"saved":false}
{"ts":1350881029458,"patch":[[{"diffs":[[0,"ode.node"],[-1,"e"],[0,"Pool.pop"]],"start1":2344,"start2":2344,"length1":17,"length2":16}]],"length":3893,"saved":false}
{"ts":1350881032698,"patch":[[{"diffs":[[0,"ode("],[-1,"null,//"],[0,"Rubi"]],"start1":2327,"start2":2327,"length1":15,"length2":8}]],"length":3886,"saved":false}
{"ts":1350881038970,"patch":[[{"diffs":[[0,"l = [];\n"],[-1,"//"],[0,"RubixNod"]],"start1":157,"start2":157,"length1":18,"length2":16}]],"length":3884,"saved":false}
{"ts":1350881047489,"patch":[[{"diffs":[[0," null;\n        /"],[1,"0"],[0,"/RubixNode.nodeP"]],"start1":3500,"start2":3500,"length1":32,"length2":33}]],"length":3885,"saved":false}
{"ts":1350881049316,"patch":[[{"diffs":[[0,"    "],[-1,"/0/"],[0,"Rubi"]],"start1":3511,"start2":3511,"length1":11,"length2":8}]],"length":3882,"saved":false}
{"ts":1350881056928,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        //RubixState.rotate(this.rubixState, action[0], action[1]);\n"],[0,"    "]],"start1":1312,"start2":1312,"length1":76,"length2":8}]],"length":3814,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350882516115,"patch":[[{"diffs":[[0,"------------*/\n\n"],[-1,"//"],[0,"RubixNode.stateP"]],"start1":121,"start2":121,"length1":34,"length2":32},{"diffs":[[0,"statePool = [];\n"],[1,""],[0,"RubixNode.nodePo"]],"start1":147,"start2":147,"length1":32,"length2":32},{"diffs":[[0,"                "],[-1," //"],[0," RubixNode.state"]],"start1":2407,"start2":2407,"length1":35,"length2":32},{"diffs":[[0,"node.fn = null;\n"],[1,""],[0,"        RubixNod"]],"start1":3418,"start2":3418,"length1":32,"length2":32},{"diffs":[[0,"\n};\n"],[-1,"/* -------------\n    RubixNode.js\n    Requires - rubixState.js\n    A node representation of state for search trees.\n   --------------*/\n\n//RubixNode.statePool = [];\n//RubixNode.nodePool = [];\n\n/**\n * Defines an object to represent a node on the IDA* search tree for a rubik's cube.\n * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n * \n */\nfunction RubixNode(state, parent, action)\n{\n    this.init(state,parent,action);    \n}\n\nRubixNode.prototype.init = function(state, parent, action)\n{\n    this.rubixState = state;\n    this.setAction(action); \n    \n\n    this.parentNode = parent;\n    this.initParentDetails(parent);\n};\n\nRubixNode.prototype.initParentDetails = function(parent)\n{\n    if (parent)\n    {        \n        this.depth = parent.depth + 1;\n        this.fn = CubeHeuristics.heuristic(this.rubixState) + this.depth;\n\n        parent.rc ++;\n    }\n    else\n    {\n        this.depth = 0;\n        this.fn = CubeHeuristics.heuristic(this.rubixState);\n        this.rc = 0;\n    }    \n};\n\nRubixNode.prototype.setAction = function(action)\n{\n    this.nodeAction = null;\n\n    if(action)\n    {\n        //RubixState.rotate(this.rubixState, action[0], action[1]);\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }  \n};\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * \n * @param node The node to retrieve successors for.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i === node.nodeAction >> 4)\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.            \n            successors.push(\n                RubixNode.buildNode(null,//RubixNode.statePool.pop(),\n                                    RubixState.copyAndRotate(node.rubixState, null,\n                                                       // RubixNode.statePool.pop(),\n                                                        [i,j]), \n                                    node, \n                                    [i, j]));\n        }   \n    }    \n\n    return successors;\n};\n\nRubixNode.buildNode  = function(node, state, parentNode, action)\n{\n    /*\n    if(node)\n    {\n        node.init(state,parentNode,action);\n    }\n    else\n    {*/\n        //console.log(\"making new node\");\n        node = new RubixNode(state, parentNode, action);\n    //}\n        \n    return node;\n};\n\nRubixNode.wipeBadChain = function(node)\n{\n    if(node.parentNode)\n    {   \n        node.parentNode.rc--;\n        if(node.parentNode.rc === 0 && node.parentNode.depth !== 0)\n        {\n            RubixNode.wipeBadChain(node.parentNode);    \n        }\n        //RubixNode.statePool.push(node.rubixState);\n        \n        node.rubixState = null;\n        node.parentNode = null;    \n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;\n        //RubixNode.nodePool.push(node);\n    }\n    \n};\n\n/**\n * Returns a String with the node action pair for the supplied node.\n * \n * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n */\nRubixNode.nodeActionToString = function(node)\n{\n  return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);  \n};\n/* -------------\n    RubixNode.js\n    Requires - rubixState.js\n    A node representation of state for search trees.\n   --------------*/\n\nRubixNode.statePool = [];\nRubixNode.nodePool = [];\n\n/**\n * Defines an object to represent a node on the IDA* search tree for a rubik's cube.\n * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n * \n */\nfunction RubixNode(state, parent, action)\n{\n    this.init(state,parent,action);    \n}\n\nRubixNode.prototype.init = function(state, parent, action)\n{\n    this.rubixState = state;\n    this.setAction(action); \n    \n\n    this.parentNode = parent;\n    this.initParentDetails(parent);\n};\n\nRubixNode.prototype.initParentDetails = function(parent)\n{\n    if (parent)\n    {        \n        this.depth = parent.depth + 1;\n        this.fn = CubeHeuristics.heuristic(this.rubixState) + this.depth;\n\n        parent.rc ++;\n    }\n    else\n    {\n        this.depth = 0;\n        this.fn = CubeHeuristics.heuristic(this.rubixState);\n        this.rc = 0;\n    }    \n};\n\nRubixNode.prototype.setAction = function(action)\n{\n    this.nodeAction = null;\n\n    if(action)\n    {\n        //RubixState.rotate(this.rubixState, action[0], action[1]);\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }  \n};\n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * \n * @param node The node to retrieve successors for.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i === node.nodeAction >> 4)\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            // Create a new node with a copy of the data then rotate the state.            \n            successors.push(\n                RubixNode.buildNode(RubixNode.nodePool.pop(),\n                                    RubixState.copyAndRotate(node.rubixState, \n                                                        RubixNode.statePool.pop(),\n                                                        [i,j]), \n                                    node, \n                                    [i, j]));\n        }   \n    }    \n\n    return successors;\n};\n\nRubixNode.buildNode  = function(node, state, parentNode, action)\n{\n    if(node)\n    {\n        node.init(state,parentNode,action);\n    }\n    else\n    {\n        //console.log(\"making new node\");\n        node = new RubixNode(state, parentNode, action);\n    }\n    \n    console.log(RubixState.isEqual(AStar.goalState,node.rubixState), node.rubixState.cubies[0]);\n    \n    return node;\n};\n\nRubixNode.wipeBadChain = function(node)\n{\n    if(node.parentNode)\n    {   \n        node.parentNode.rc--;\n        if(node.parentNode.rc === 0 && node.parentNode.depth !== 0)\n        {\n            RubixNode.wipeBadChain(node.parentNode);    \n        }\n        //RubixNode.statePool.push(node.rubixState);\n        \n        node.rubixState = null;\n        node.parentNode = null;    \n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;\n        //RubixNode.nodePool.push(node);\n    }\n    \n};\n\n/**\n * Returns a String with the node action pair for the supplied node.\n * \n * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n */\nRubixNode.nodeActionToString = function(node)\n{\n  return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);  \n};\n"]],"start1":3805,"start2":3805,"length1":7872,"length2":4}]],"length":3809,"saved":false}
{"ts":1350882519402,"patch":[[{"diffs":[[0,"xState, "],[1,"//"],[0,"null,\n  "]],"start1":2355,"start2":2355,"length1":16,"length2":18}]],"length":3811,"saved":false}
{"ts":1350882523823,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"RubixNod"]],"start1":3199,"start2":3199,"length1":18,"length2":16}]],"length":3809,"saved":false}
{"ts":1350882603889,"patch":[[{"diffs":[[0,"te.            \n"],[1,"            console.log(node.rubixState.cubies[0]);\n"],[0,"            succ"]],"start1":2178,"start2":2178,"length1":32,"length2":84}]],"length":3861,"saved":false}
{"ts":1350882878555,"patch":[[{"diffs":[[0,"   \n"],[-1,"            console.log(node.rubixState.cubies[0]);\n"],[0,"    "]],"start1":2190,"start2":2190,"length1":60,"length2":8}]],"length":3809,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350885608383,"patch":[[{"diffs":[[0,"            "],[-1,"               "],[0,"RubixNode.st"]],"start1":2399,"start2":2399,"length1":39,"length2":24},{"diffs":[[0,".pop(),\n"],[-1,"                "],[0,"        "]],"start1":2430,"start2":2430,"length1":32,"length2":16}]],"length":3778,"saved":false}
{"ts":1350885614645,"patch":[[{"diffs":[[0,"p(),"],[-1,"\n                                       "],[0," [i,"]],"start1":2433,"start2":2433,"length1":48,"length2":8}]],"length":3738,"saved":false}
{"ts":1350885618813,"patch":[[{"diffs":[[0,"de, "],[-1,"\n                                    "],[0,"[i, "]],"start1":2485,"start2":2485,"length1":45,"length2":8}]],"length":3701,"saved":false}
{"ts":1350885622447,"patch":[[{"diffs":[[0,"te, "],[-1,"//null,"],[0,"\n   "]],"start1":2359,"start2":2359,"length1":15,"length2":8}]],"length":3694,"saved":false}
{"ts":1350885634032,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"console."]],"start1":2699,"start2":2699,"length1":18,"length2":16}]],"length":3692,"saved":false}
{"ts":1350885674442,"patch":[[{"diffs":[[0," if(node)\n    {\n"],[1,"                console.log(\"reusing node\");\n\n"],[0,"        node.ini"]],"start1":2618,"start2":2618,"length1":32,"length2":78}]],"length":3738,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350885718262,"patch":[[{"diffs":[[0,"  {\n"],[-1,"                console.log(\"reusing node\");\n\n"],[0,"    "]],"start1":2630,"start2":2630,"length1":54,"length2":8}]],"length":3692,"saved":false}
{"ts":1350885720509,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        console.log(\"making new node\");\n"],[0,"    "]],"start1":2695,"start2":2695,"length1":48,"length2":8}]],"length":3652,"saved":false}
{"ts":1350885729993,"patch":[[{"diffs":[[0," if(node)\n    {\n"],[1,"                console.log(\"reusing node\");\n\n"],[0,"        node.ini"]],"start1":2618,"start2":2618,"length1":32,"length2":78},{"diffs":[[0,"\n    else\n    {\n"],[1,"        console.log(\"making new node\");\n"],[0,"        node = n"]],"start1":2729,"start2":2729,"length1":32,"length2":72}]],"length":3738,"saved":false}
{"ts":1350885811222,"patch":[[{"diffs":[[0,", parent, action"],[1,",setNew"],[0,")\n{\n    this.rub"]],"start1":693,"start2":693,"length1":32,"length2":39},{"diffs":[[0,"ion); \n    \n"],[1,"    this.isnew = setNew;"],[0,"\n    this.pa"]],"start1":771,"start2":771,"length1":24,"length2":48}]],"length":3769,"saved":false}
{"ts":1350885817488,"patch":[[{"diffs":[[0,"Node, action"],[1,",true"],[0,");\n    }\n   "]],"start1":2858,"start2":2858,"length1":24,"length2":29}]],"length":3774,"saved":false}
{"ts":1350885855135,"patch":[[{"diffs":[[0,"e,action"],[1,",false"],[0,");\n    }"]],"start1":2744,"start2":2744,"length1":16,"length2":22}]],"length":3780,"saved":false}
{"ts":1350886171905,"patch":[[{"diffs":[[0,"tion"],[-1,",false"],[0,");\n "]],"start1":2748,"start2":2748,"length1":14,"length2":8}]],"length":3774,"saved":false}
{"ts":1350886174679,"patch":[[{"diffs":[[0,"tion"],[-1,",true"],[0,");\n "]],"start1":2866,"start2":2866,"length1":13,"length2":8}]],"length":3769,"saved":false}
{"ts":1350886180390,"patch":[[{"diffs":[[0,"   \n"],[-1,"    this.isnew = setNew;\n"],[0,"    "]],"start1":779,"start2":779,"length1":33,"length2":8}]],"length":3744,"saved":false}
{"ts":1350886184365,"patch":[[{"diffs":[[0,"tion"],[-1,",setNew"],[0,")\n{\n"]],"start1":705,"start2":705,"length1":15,"length2":8}]],"length":3737,"saved":false}
{"ts":1350886187303,"patch":[[{"diffs":[[0,"ction); "],[-1,"\n"],[0,"    \n   "]],"start1":762,"start2":762,"length1":17,"length2":16}]],"length":3736,"saved":false}
{"ts":1350886203642,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        console.log(\"making new node\");\n"],[0,"    "]],"start1":2739,"start2":2739,"length1":48,"length2":8}]],"length":3696,"saved":false}
{"ts":1350886206902,"patch":[[{"diffs":[[0,"  {\n"],[-1,"                console.log(\"reusing node\");\n\n"],[0,"    "]],"start1":2628,"start2":2628,"length1":54,"length2":8}]],"length":3650,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350918902356,"patch":[[{"diffs":[[0,"    "],[1,"\n     "],[0,"this."],[-1,"set"],[1,"node"],[0,"Action"],[1," = null;\n\n    if"],[0,"(action)"],[-1,";"],[1,"\n "],[0,"   "],[1,"{\n"],[0,"  "],[-1,"\n"],[1," "],[0,"    "],[1," "],[0,"this."],[-1,"parentNode = parent;\n    this.initParentDetails(parent);\n};\n\nRubixNode.prototype.initParentDetails = function(parent)\n{"],[1,"nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }  \n    \n    this.parentNode = parent;\n    \n    "],[0,"\n   "]],"start1":742,"start2":742,"length1":165,"length2":179},{"diffs":[[0,"ype."],[-1,"setAction = function(action)\n{\n    this.nodeAction = null;\n\n    if(action)\n    {\n        this.nodeAction =  ((0 | action[0]) << 4) | action[1];\n   \n    }"],[1,"initParentDetails = function(parent)\n{\n};\n\nRubixNode.prototype.setAction = function(action)\n{\n "],[0,"  \n}"]],"start1":1241,"start2":1241,"length1":161,"length2":103},{"diffs":[[0," if(node)\n    {\n"],[1,"        \n"],[0,"        node.ini"]],"start1":2572,"start2":2572,"length1":32,"length2":41}]],"length":3615,"saved":false}
{"ts":1350918904982,"patch":[[{"diffs":[[0,"e;\n    \n    "],[-1," "],[0,"this.nodeAct"]],"start1":739,"start2":739,"length1":25,"length2":24}]],"length":3614,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350918958180,"patch":[[{"diffs":[[0,"e;\n    \n    "],[1," "],[0,"this.nodeAct"]],"start1":739,"start2":739,"length1":24,"length2":25},{"diffs":[[0,"   }"],[-1,"    \n};\n\nRubixNode.prototype.initParentDetails = function(parent)\n{\n};\n\nRubixNode.prototype.setAction = function(action)\n{"],[0,"\n   "],[-1,"\n};"],[0,"\n\n/*"]],"start1":1212,"start2":1212,"length1":137,"length2":12}]],"length":3490,"saved":false}
{"ts":1350918962322,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"};\n"],[0,"   \n\n/**"]],"start1":1209,"start2":1209,"length1":16,"length2":19}]],"length":3493,"saved":false}
{"ts":1350919014477,"patch":[[{"diffs":[[0,"    "],[-1,"}\n};"],[0,"\n   "]],"start1":1211,"start2":1211,"length1":12,"length2":8},{"diffs":[[0,")\n    {\n        "],[1,"console.log(\"pulling from pool\");"],[0,"\n        node.in"]],"start1":2454,"start2":2454,"length1":32,"length2":65},{"diffs":[[0,"\n    else\n    {\n"],[1,"        console.log(\"removing from pool\");\n"],[0,"        node = n"]],"start1":2553,"start2":2553,"length1":32,"length2":75}]],"length":3565,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350919401617,"patch":[[{"diffs":[[0,"e;\n    \n    "],[-1," "],[0,"this.nodeAct"]],"start1":739,"start2":739,"length1":25,"length2":24},{"diffs":[[0,"his.rc = 0;\n"],[1,"    }\n};\n"],[0,"    \n   \n\n/*"]],"start1":1198,"start2":1198,"length1":24,"length2":33},{"diffs":[[0,"  {\n"],[-1,"        console.log(\"pulling from pool\");\n"],[0,"    "]],"start1":2466,"start2":2466,"length1":50,"length2":8},{"diffs":[[0,"  {\n"],[-1,"        console.log(\"removing from pool\");\n"],[0,"    "]],"start1":2531,"start2":2531,"length1":51,"length2":8}]],"length":3488,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350921414588,"patch":[[{"diffs":[[0,"(state, parent, "],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e, rots"],[0,")\n{\n    this.ini"]],"start1":583,"start2":583,"length1":38,"length2":42},{"diffs":[[0," if(node)\n    {\n"],[1,"        console.log(\"The pool gets smaller\");\n"],[0,"        node.ini"]],"start1":2458,"start2":2458,"length1":32,"length2":78}]],"length":3538,"saved":false}
{"ts":1350921418431,"patch":[[{"diffs":[[0,",parent,"],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e, rots"],[0,");    \n}"]],"start1":632,"start2":632,"length1":22,"length2":26}]],"length":3542,"saved":false}
{"ts":1350921420740,"patch":[[{"diffs":[[0,"parent, "],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e, rots"],[0,")\n{\n    "]],"start1":703,"start2":703,"length1":22,"length2":26}]],"length":3546,"saved":false}
{"ts":1350921427193,"patch":[[{"diffs":[[0,"\n    if("],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e &&, rots"],[0,")\n    {\n"]],"start1":787,"start2":787,"length1":22,"length2":29}]],"length":3553,"saved":false}
{"ts":1350921428133,"patch":[[{"diffs":[[0,"(face &&"],[-1,","],[0," rots)\n "]],"start1":794,"start2":794,"length1":17,"length2":16}]],"length":3552,"saved":false}
{"ts":1350921438791,"patch":[[{"diffs":[[0,"0 | "],[1,"f"],[0,"ac"],[-1,"tion[0]"],[1,"e"],[0,") <<"]],"start1":844,"start2":844,"length1":17,"length2":12},{"diffs":[[0,") | "],[-1,"action[1]"],[1,"rots"],[0,";\n  "]],"start1":858,"start2":858,"length1":17,"length2":12}]],"length":3542,"saved":false}
{"ts":1350921449058,"patch":[[{"diffs":[[0,"de, "],[-1,"["],[0,"i, j"],[-1,"]"],[0,"));\n"]],"start1":2322,"start2":2322,"length1":14,"length2":12}]],"length":3540,"saved":false}
{"ts":1350921453674,"patch":[[{"diffs":[[0,"(), "],[-1,"["],[0,"i,j"],[-1,"]"],[0,"), \n"]],"start1":2271,"start2":2271,"length1":13,"length2":11}]],"length":3538,"saved":false}
{"ts":1350921665771,"patch":[[{"diffs":[[0,"ntNode, "],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e, rots"],[0,")\n{\n    "]],"start1":2432,"start2":2432,"length1":22,"length2":26}]],"length":3542,"saved":false}
{"ts":1350921669968,"patch":[[{"diffs":[[0,"entNode,"],[-1,"action"],[1," face, rots"],[0,");\n    }"]],"start1":2551,"start2":2551,"length1":22,"length2":27}]],"length":3547,"saved":false}
{"ts":1350921672782,"patch":[[{"diffs":[[0,"ntNode, "],[-1,"action"],[1," face, rots"],[0,");\n    }"]],"start1":2634,"start2":2634,"length1":22,"length2":27}]],"length":3552,"saved":false}
{"ts":1350921795814,"patch":[[{"diffs":[[0,"ce, rots)\n{\n"],[1,"    console.log(rots);\n"],[0,"    \n    if("]],"start1":2442,"start2":2442,"length1":24,"length2":47}]],"length":3575,"saved":false}
{"ts":1350921892215,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    console.log(rots);\n"],[0,"    \n"],[1,""],[0,"    "]],"start1":2450,"start2":2450,"length1":36,"length2":13},{"diffs":[[0,"ller\");\n"],[-1,""],[0,"        "]],"start1":2516,"start2":2516,"length1":16,"length2":16},{"diffs":[[0,"e, face, rots);\n"],[1,"        \n        if(RubixState.isEqual(node.rubixState, AStar.goalNode))\n        {\n            \n    console.log(rots);    \n        }\n"],[0,"    }\n    else\n "]],"start1":2557,"start2":2557,"length1":32,"length2":165}]],"length":3685,"saved":false}
{"ts":1350921908599,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"oyo\","],[0,"rots);  "]],"start1":2677,"start2":2677,"length1":16,"length2":22}]],"length":3691,"saved":false}
{"ts":1350921926569,"patch":[[{"diffs":[[0,"tar.goal"],[-1,"Nod"],[1,"Stat"],[0,"e))\n    "]],"start1":2631,"start2":2631,"length1":19,"length2":20}]],"length":3692,"saved":false}
{"ts":1350921990598,"patch":[[{"diffs":[[0,"isEqual("],[-1,"node.rubixS"],[1,"s"],[0,"tate, AS"]],"start1":2604,"start2":2604,"length1":27,"length2":17}]],"length":3682,"saved":false}
{"ts":1350922007724,"patch":[[{"diffs":[[0,"    "],[-1," if(RubixState.isEqual(state, AStar.goalState))\n        {\n            "],[0,"\n   "]],"start1":2585,"start2":2585,"length1":78,"length2":8},{"diffs":[[0,",rots);    \n"],[-1,"        }\n"],[0,"    }\n    el"]],"start1":2611,"start2":2611,"length1":34,"length2":24}]],"length":3602,"saved":false}
{"ts":1350922022271,"patch":[[{"diffs":[[0,"face, rots);"],[-1,"\n"],[0,"        \n   "]],"start1":2560,"start2":2560,"length1":25,"length2":24},{"diffs":[[0,"   \n"],[-1,"       \n    console.log(\"oyo\",rots);    "],[0,"\n   "]],"start1":2577,"start2":2577,"length1":48,"length2":8}]],"length":3561,"saved":false}
{"ts":1350922046803,"patch":[[{"diffs":[[0,"node)\n{\n"],[1,"    \n    console.log(\"oyo\",node.nodeAction.toString(2));    \n"],[0,"  return"]],"start1":3464,"start2":3464,"length1":16,"length2":77}]],"length":3622,"saved":false}
{"ts":1350922093058,"patch":[[{"diffs":[[0,"tion"],[-1,".toString(2)"],[0,");  "]],"start1":3510,"start2":3510,"length1":20,"length2":8}]],"length":3610,"saved":false}
{"ts":1350922546859,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(\"The pool gets smaller\");"],[0,"\n   "]],"start1":2482,"start2":2482,"length1":45,"length2":8},{"diffs":[[0,");      "],[1,"\n"],[0,"  "],[1,"      console.log(node.nodeAction, face,rots);"],[0,"\n\n    }\n"]],"start1":2533,"start2":2533,"length1":18,"length2":65}]],"length":3620,"saved":false}
{"ts":1350922689909,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    \n    console.log(\"oyo\",node.nodeAction);    \n"],[0,"  re"]],"start1":3489,"start2":3489,"length1":57,"length2":8}]],"length":3582,"saved":false}
{"ts":1350922695296,"patch":[[{"diffs":[[0,"ts);"],[-1,"      \n        console.log(node.nodeAction, face,rots);"],[0,"\n\n  "]],"start1":2542,"start2":2542,"length1":63,"length2":8}]],"length":3527,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350927478836,"patch":[[{"diffs":[[0,"ol = [];"],[1,"\nRubixNode.faceCulling = {\n    \"0\":4,\n    \"1\":3,\n    \"2\":5\n}"],[0,"\n\n/**\n *"]],"start1":179,"start2":179,"length1":16,"length2":76},{"diffs":[[0,"ace "],[1,">= 0 "],[0,"&& rots"],[1," >= 0 "],[0,")\n  "]],"start1":856,"start2":856,"length1":15,"length2":26}]],"length":3587,"saved":false}
{"ts":1350927480715,"patch":[[{"diffs":[[0," \"2\":5\n}"],[1,";"],[0,"\n\n/**\n *"]],"start1":239,"start2":239,"length1":16,"length2":17}]],"length":3588,"saved":false}
{"ts":1350927541666,"patch":[[{"diffs":[[0,"      this.fn = "],[1,"this.depth +"],[0,"CubeHeuristics.h"]],"start1":1068,"start2":1068,"length1":32,"length2":44},{"diffs":[[0,"ate)"],[-1," + this.depth"],[0,";\n\n "]],"start1":1133,"start2":1133,"length1":21,"length2":8}]],"length":3587,"saved":false}
{"ts":1350927543479,"patch":[[{"diffs":[[0,".depth +"],[1," "],[0,"CubeHeur"]],"start1":1088,"start2":1088,"length1":16,"length2":17}]],"length":3588,"saved":false}
{"ts":1350927557226,"patch":[[{"diffs":[[0,"s.depth "],[1,"//"],[0,"+ CubeHe"]],"start1":1087,"start2":1087,"length1":16,"length2":18},{"diffs":[[0,"is.fn = "],[1,"this.depth //"],[0,"CubeHeur"]],"start1":1220,"start2":1220,"length1":16,"length2":29}]],"length":3603,"saved":false}
{"ts":1350927568729,"patch":[[{"diffs":[[0,")\n    {\n"],[-1,"        \n"],[0,"        "]],"start1":2557,"start2":2557,"length1":25,"length2":16},{"diffs":[[0," rots);\n"],[-1,"\n"],[0,"    }\n  "]],"start1":2606,"start2":2606,"length1":17,"length2":16}]],"length":3593,"saved":false}
{"ts":1350927570841,"patch":[[{"diffs":[[0,"rots)\n{\n"],[-1,"    \n"],[0,"    if(n"]],"start1":2533,"start2":2533,"length1":21,"length2":16}]],"length":3588,"saved":false}
{"ts":1350927629906,"patch":[[{"diffs":[[0,")\n        {\n    "],[1,"    if(node.nodeAction && (node.nodeAction >> 4)\n"],[0,"        // Creat"]],"start1":2021,"start2":2021,"length1":32,"length2":81}]],"length":3637,"saved":false}
{"ts":1350927648946,"patch":[[{"diffs":[[0,"tion && "],[1,"faceCulling"],[0,"(node.no"]],"start1":2055,"start2":2055,"length1":16,"length2":27}]],"length":3648,"saved":false}
{"ts":1350927662837,"patch":[[{"diffs":[[0,"eCulling"],[1,"[\"\\\"\""],[0,"(node.no"]],"start1":2066,"start2":2066,"length1":16,"length2":21},{"diffs":[[0,"nodeAction >> 4)"],[1,"\"\\\"\""],[0,"\n        // Crea"]],"start1":2085,"start2":2085,"length1":32,"length2":36}]],"length":3657,"saved":false}
{"ts":1350927671333,"patch":[[{"diffs":[[0,"Culling["],[-1,"\"\\\"\""],[0,"(node.no"]],"start1":2067,"start2":2067,"length1":20,"length2":16},{"diffs":[[0,"> 4)"],[-1,"\"\\\"\""],[0,"\n   "]],"start1":2093,"start2":2093,"length1":12,"length2":8}]],"length":3649,"saved":false}
{"ts":1350927675241,"patch":[[{"diffs":[[0,"nodeAction >> 4)"],[1,"])"],[0,"\n        // Crea"]],"start1":2081,"start2":2081,"length1":32,"length2":34}]],"length":3651,"saved":false}
{"ts":1350927680243,"patch":[[{"diffs":[[0,"tion && "],[1,"RubixNode."],[0,"faceCull"]],"start1":2055,"start2":2055,"length1":16,"length2":26}]],"length":3661,"saved":false}
{"ts":1350927682274,"patch":[[{"diffs":[[0,">> 4)])\n"],[1,"        {\n            \n        }\n"],[0,"        "]],"start1":2102,"start2":2102,"length1":16,"length2":49}]],"length":3694,"saved":false}
{"ts":1350927698525,"patch":[[{"diffs":[[0,"n >> 4)]"],[1," == i"],[0,")\n      "]],"start1":2100,"start2":2100,"length1":16,"length2":21},{"diffs":[[0,"  {\n            "],[1,"console.log(    "],[0,"\n        }\n     "]],"start1":2121,"start2":2121,"length1":32,"length2":48}]],"length":3715,"saved":false}
{"ts":1350927705953,"patch":[[{"diffs":[[0,"ole.log(    "],[1,"node.nodeAction);"],[0,"\n        }\n "]],"start1":2141,"start2":2141,"length1":24,"length2":41}]],"length":3732,"saved":false}
{"ts":1350927709348,"patch":[[{"diffs":[[0,"deAction"],[1," >> 4"],[0,");\n     "]],"start1":2160,"start2":2160,"length1":16,"length2":21}]],"length":3737,"saved":false}
{"ts":1350927765098,"patch":[[{"diffs":[[0,"le.log( "],[1,"i,"],[0,"   node."]],"start1":2142,"start2":2142,"length1":16,"length2":18}]],"length":3739,"saved":false}
{"ts":1350927805104,"patch":[[{"diffs":[[0,"rs.push("],[1,"//"],[0,"\n       "]],"start1":2296,"start2":2296,"length1":16,"length2":18}]],"length":3741,"saved":false}
{"ts":1350927808293,"patch":[[{"diffs":[[0,"rs.push("],[-1,"//"],[0,"\n       "]],"start1":2296,"start2":2296,"length1":18,"length2":16}]],"length":3739,"saved":false}
{"ts":1350927815403,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            console.log( i,   node.nodeAction >> 4);\n"],[0,"    "]],"start1":2121,"start2":2121,"length1":61,"length2":8}]],"length":3686,"saved":false}
{"ts":1350927819899,"patch":[[{"diffs":[[0,"== i)\n        {\n"],[1,"            \n"],[0,"        }\n      "]],"start1":2109,"start2":2109,"length1":32,"length2":45}]],"length":3699,"saved":false}
{"ts":1350927856807,"patch":[[{"diffs":[[0,"  {\n            "],[1,"console.log(node.nodeAction&7);"],[0,"\n        }\n     "]],"start1":2121,"start2":2121,"length1":32,"length2":63}]],"length":3730,"saved":false}
{"ts":1350928229695,"patch":[[{"diffs":[[0,"ole.log("],[1,"2-("],[0,"node.nod"]],"start1":2141,"start2":2141,"length1":16,"length2":19},{"diffs":[[0,"Action&7"],[1,"-2)"],[0,");\n     "]],"start1":2161,"start2":2161,"length1":16,"length2":19}]],"length":3736,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350944174239,"patch":[[{"diffs":[[0,"fn ="],[-1," this.depth //+"],[0," Cub"]],"start1":1079,"start2":1079,"length1":23,"length2":8}]],"length":3721,"saved":false}
{"ts":1350944177299,"patch":[[{"diffs":[[0,"n = "],[-1,"this.depth //"],[0,"Cube"]],"start1":1209,"start2":1209,"length1":21,"length2":8}]],"length":3708,"saved":false}
{"ts":1350944184447,"patch":[[{"diffs":[[0,"       this.fn ="],[1," this.dept +"],[0," CubeHeuristics."]],"start1":1067,"start2":1067,"length1":32,"length2":44},{"diffs":[[0,"is.fn = "],[1,"this.depth //"],[0,"CubeHeur"]],"start1":1217,"start2":1217,"length1":16,"length2":29}]],"length":3733,"saved":false}
{"ts":1350944188147,"patch":[[{"diffs":[[0,"n = "],[-1,"this.depth //"],[0,"Cube"]],"start1":1221,"start2":1221,"length1":21,"length2":8}]],"length":3720,"saved":false}
{"ts":1350944246870,"patch":[[{"diffs":[[0,"      {\n        "],[1,"    "],[0,"if(node.nodeActi"]],"start1":2009,"start2":2009,"length1":32,"length2":36},{"diffs":[[0,"] == i)\n        "],[-1,"{\n"],[1,"    {\n                continue;\n    "],[0,"            cons"]],"start1":2095,"start2":2095,"length1":34,"length2":68},{"diffs":[[0,"tion&7-2));\n"],[1,"    "],[0,"        }\n  "]],"start1":2185,"start2":2185,"length1":24,"length2":28}]],"length":3762,"saved":false}
{"ts":1350944282099,"patch":[[{"diffs":[[0,"4)] == i"],[1," && (2 - (node.nodeAction & 7 - 2)) == j"],[0,")\n      "]],"start1":2093,"start2":2093,"length1":16,"length2":56},{"diffs":[[0,"log("],[-1,"2-(node.nodeAction&7-2)"],[0,");\n "]],"start1":2207,"start2":2207,"length1":31,"length2":8}]],"length":3779,"saved":false}
{"ts":1350944286157,"patch":[[{"diffs":[[0,"ue;\n"],[-1,"                console.log();\n"],[0,"    "]],"start1":2179,"start2":2179,"length1":39,"length2":8}]],"length":3748,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350944346402,"patch":[[{"diffs":[[1,"/* -------------\n    RubixNode.js\n    Requires - rubixState.js\n    A node representation of state for search trees.\n   --------------*/\n\nRubixNode.statePool = [];\nRubixNode.nodePool = [];\nRubixNode.faceCulling = {\n    \"0\":4,\n    \"1\":3,\n    \"2\":5\n};\n\n/**\n * Defines an object to represent a node on the IDA* search tree for a rubik's cube.\n * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n * \n */\nfunction RubixNode(state, parent, face, rots)\n{\n    this.init(state,parent,face, rots);    \n}\n\nRubixNode.prototype.init = function(state, parent, face, rots)\n{\n    this.rubixState = state;\n    \n    this.nodeAction = null;\n\n    if(face >= 0 && rots >= 0 )\n    {\n        this.nodeAction =  ((0 | face) << 4) | rots;\n   \n    }  \n    \n    this.parentNode = parent;\n    \n    \n    if (parent)\n    {        \n        this.depth = parent.depth + 1;\n        this.fn = this.dept + CubeHeuristics.heuristic(this.rubixState);\n\n        parent.rc ++;\n    }\n    else\n    {\n        this.depth = 0;\n        this.fn = CubeHeuristics.heuristic(this.rubixState);\n        this.rc = 0;\n    }\n};\n    \n   \n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * \n * @param node The node to retrieve successors for.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i === node.nodeAction >> 4)\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            if(node.nodeAction && RubixNode.faceCulling[(node.nodeAction >> 4)] == i \n                && (2 - (node.nodeAction & 7 - 2)) == j)\n            {\n                continue;\n            }\n        // Create a new node with a copy of the data then rotate the state.            \n            successors.push(\n                RubixNode.buildNode(RubixNode.nodePool.pop(),\n                                    RubixState.copyAndRotate(node.rubixState, \n                                        RubixNode.statePool.pop(), i,j), \n                                    node, i, j));\n        }   \n    }    \n\n    return successors;\n};\n\nRubixNode.buildNode  = function(node, state, parentNode, face, rots)\n{\n    if(node)\n    {\n        node.init(state,parentNode, face, rots);\n    }\n    else\n    {\n        node = new RubixNode(state, parentNode,  face, rots);\n    }\n        \n    return node;\n};\n\nRubixNode.wipeBadChain = function(node)\n{\n    if(node.parentNode)\n    {   \n        node.parentNode.rc--;\n        if(node.parentNode.rc === 0 && node.parentNode.depth !== 0)\n        {\n            RubixNode.wipeBadChain(node.parentNode);    \n        }\n        RubixNode.statePool.push(node.rubixState);\n        \n        node.rubixState = null;\n        node.parentNode = null;    \n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;\n        RubixNode.nodePool.push(node);\n    }\n    \n};\n\n/**\n * Returns a String with the node action pair for the supplied node.\n * \n * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n */\nRubixNode.nodeActionToString = function(node)\n{\n  return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);  \n};\n"]],"start1":0,"start2":0,"length1":0,"length2":3765}]],"length":3765,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350944554267,"patch":[[{"diffs":[[0,")] == i "],[1,")"],[0,"\n       "]],"start1":2094,"start2":2094,"length1":16,"length2":17},{"diffs":[[0,"        "],[1,"//"],[0," && (2 -"]],"start1":2111,"start2":2111,"length1":16,"length2":18},{"diffs":[[0,"\n               "],[1,"//"],[0," continue;\n     "]],"start1":2176,"start2":2176,"length1":32,"length2":34},{"diffs":[[0,"   // continue;\n"],[1,"               console.log(2-(node.nodeAction&7-2));\n"],[0,"            }\n  "]],"start1":2189,"start2":2189,"length1":32,"length2":85}]],"length":3823,"saved":false}
{"ts":1350944563697,"patch":[[{"diffs":[[0,"ion&7-2)"],[1," === j"],[0,");\n     "]],"start1":2247,"start2":2247,"length1":16,"length2":22}]],"length":3829,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350944697514,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"console."]],"start1":2212,"start2":2212,"length1":16,"length2":18},{"diffs":[[0,"= j)"],[-1,";\n            }\n        // Create a new node with a copy of the data then rotate the state.            \n            successors.push(\n                RubixNode.buildNode(RubixNode.nodePool.pop(),\n                                    RubixState.copyAndRotate(node.rubixState, \n                                        RubixNode.statePool.pop(), i,j), \n                                    node, i, j));\n        }   \n    }    \n\n    return successors;\n};\n\nRubixNode.buildNode  = function(node, state, parentNode, face, rots)\n{\n    if(node)\n    {\n        node.init(state,parentNode, face, rots);\n    }\n    else\n    {\n        node = new RubixNode(state, parentNode,  face, rots);\n    }\n        \n    return node;\n};\n\nRubixNode.wipeBadChain = function(node)\n{\n    if(node.parentNode)\n    {   \n        node.parentNode.rc--;\n        if(node.parentNode.rc === 0 && node.parentNode.depth !== 0)\n        {\n            RubixNode.wipeBadChain(node.parentNode);    \n        }\n        RubixNode.statePool.push(node.rubixState);\n        \n        node.rubixState = null;\n        node.parentNode = null;    \n        node.nodeAction = null;\n        node.rc = null;\n        node.depth = null;\n        node.fn = null;\n        RubixNode.nodePool.push(node);\n    }\n    \n};\n\n/**\n * Returns a String with the node action pair for the supplied node.\n * \n * @param node the node that the action is to be retrieved from.\n * @return A String \"face:rotations\".\n */\nRubixNode.nodeActionToString = function(node)\n{\n  return RubixState.faceValues[node.nodeAction >> 4] + \":\" + (node.nodeAction & 7);  \n};\n/* -------------\n    RubixNode.js\n    Requires - rubixState.js\n    A node representation of state for search trees.\n   --------------*/\n\nRubixNode.statePool = [];\nRubixNode.nodePool = [];\nRubixNode.faceCulling = {\n    \"0\":4,\n    \"1\":3,\n    \"2\":5\n};\n\n/**\n * Defines an object to represent a node on the IDA* search tree for a rubik's cube.\n * @param state The state to be wrapped by the node.\n * @param parent Optional - The parent used in retrieving the path.\n * @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations\n * \n */\nfunction RubixNode(state, parent, face, rots)\n{\n    this.init(state,parent,face, rots);    \n}\n\nRubixNode.prototype.init = function(state, parent, face, rots)\n{\n    this.rubixState = state;\n    \n    this.nodeAction = null;\n\n    if(face >= 0 && rots >= 0 )\n    {\n        this.nodeAction =  ((0 | face) << 4) | rots;\n   \n    }  \n    \n    this.parentNode = parent;\n    \n    \n    if (parent)\n    {        \n        this.depth = parent.depth + 1;\n        this.fn = this.dept + CubeHeuristics.heuristic(this.rubixState);\n\n        parent.rc ++;\n    }\n    else\n    {\n        this.depth = 0;\n        this.fn = CubeHeuristics.heuristic(this.rubixState);\n        this.rc = 0;\n    }\n};\n    \n   \n\n/**\n * Retrieves and generates nodes for all possible states that may follow the \n * invoking node's state.\n * \n * @param node The node to retrieve successors for.\n * @return The array of successors for the rubix cube, if a solution is found \n *         within the array return the solution alone in an array.\n */\nRubixNode.getSuccessors = function(node)\n{\n    //Initialize placeholders\n    var successors = [];\n    \n    // For each face iterate over the three possible movements for the cube and \n    // Record them.\n    for(var i = 0; i < 6; i++)\n    {\n        if(node.nodeAction && i === node.nodeAction >> 4)\n        {\n            continue;\n        }\n        \n        for(var j = 1; j < 4; j++)\n        {\n            if(node.nodeAction && RubixNode.faceCulling[(node.nodeAction >> 4)] == i && (2 - (node.nodeAction & 7 - 2)) == j)\n            {\n                continue"],[0,";\n  "]],"start1":2260,"start2":2260,"length1":3756,"length2":8}]],"length":3831,"saved":false}
{"ts":1350944897357,"patch":[[{"diffs":[[0,"his.dept"],[1,"h"],[0," + CubeH"]],"start1":1085,"start2":1085,"length1":16,"length2":17}]],"length":3832,"saved":false}
{"ts":1350944903488,"patch":[[{"diffs":[[0,"        "],[-1," //"],[0," && (2 -"]],"start1":2111,"start2":2111,"length1":19,"length2":16}]],"length":3829,"saved":false}
{"ts":1350944905288,"patch":[[{"diffs":[[0,")] == i "],[-1,")"],[0,"\n       "]],"start1":2095,"start2":2095,"length1":17,"length2":16}]],"length":3828,"saved":false}
{"ts":1350944907879,"patch":[[{"diffs":[[0,"        "],[-1," //"],[0," continu"]],"start1":2180,"start2":2180,"length1":19,"length2":16}]],"length":3825,"saved":false}
{"ts":1350944931486,"patch":[[{"diffs":[[0,"ue;\n"],[-1,"               //console.log(2-(node.nodeAction&7-2) === j);\n"],[0,"    "]],"start1":2195,"start2":2195,"length1":69,"length2":8}]],"length":3764,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351019405685,"patch":[[{"diffs":[[0,"*/\n\n"],[-1,"RubixNode.statePool = [];\n"],[0,"Rubi"]],"start1":133,"start2":133,"length1":34,"length2":8}]],"length":3738,"saved":false}
{"ts":1351019435920,"patch":[[{"diffs":[[0,"p(),"],[-1,"\n                                    RubixState.copyAndRotate(node.rubixState, \n                                        RubixNode.statePool.pop(), i,j)"],[1,"node.rubixState"],[0,", \n "]],"start1":2361,"start2":2361,"length1":159,"length2":23}]],"length":3602,"saved":false}
{"ts":1351019437902,"patch":[[{"diffs":[[0,"ixState,"],[1,","],[0," \n      "]],"start1":2373,"start2":2373,"length1":16,"length2":17}]],"length":3603,"saved":false}
{"ts":1351019439733,"patch":[[{"diffs":[[0,"ixState,"],[-1,","],[0," \n      "]],"start1":2373,"start2":2373,"length1":17,"length2":16}]],"length":3602,"saved":false}
{"ts":1351019461917,"patch":[[{"diffs":[[0,"ors = []"],[1,",tempNode"],[0,";\n    \n "]],"start1":1685,"start2":1685,"length1":16,"length2":25}]],"length":3611,"saved":false}
{"ts":1351019489020,"patch":[[{"diffs":[[0,"state.  "],[-1,"         "],[1,"\n        \n            tempNode ="],[0," \n      "]],"start1":2265,"start2":2265,"length1":25,"length2":48},{"diffs":[[0,"p(),"],[-1,"node.rubixState,"],[0," \n  "]],"start1":2393,"start2":2393,"length1":24,"length2":8}]],"length":3618,"saved":false}
{"ts":1351019494646,"patch":[[{"diffs":[[0,"(), "],[-1,"\n                                    "],[0,"node"]],"start1":2394,"start2":2394,"length1":45,"length2":8}]],"length":3581,"saved":false}
{"ts":1351019497928,"patch":[[{"diffs":[[0,"   \n"],[-1,"            tempNode = \n"],[0,"    "]],"start1":2279,"start2":2279,"length1":32,"length2":8}]],"length":3557,"saved":false}
{"ts":1351019501240,"patch":[[{"diffs":[[0,"ode,"],[-1," state,"],[0," par"]],"start1":2472,"start2":2472,"length1":15,"length2":8}]],"length":3550,"saved":false}
{"ts":1351019521339,"patch":[[{"diffs":[[0,"= new RubixNode("],[-1,"state"],[1,"node.slice(0)"],[0,", parentNode,  f"]],"start1":2605,"start2":2605,"length1":37,"length2":45}]],"length":3558,"saved":false}
{"ts":1351019533337,"patch":[[{"diffs":[[0,"bixNode("],[1,"new Uint8Array("],[0,"node.sli"]],"start1":2613,"start2":2613,"length1":16,"length2":31}]],"length":3573,"saved":false}
{"ts":1351019535674,"patch":[[{"diffs":[[0,"slice(0)"],[1,")"],[0,", parent"]],"start1":2641,"start2":2641,"length1":16,"length2":17}]],"length":3574,"saved":false}
{"ts":1351019542042,"patch":[[{"diffs":[[0,"= []"],[-1,",tempNode"],[0,";\n  "]],"start1":1689,"start2":1689,"length1":17,"length2":8}]],"length":3565,"saved":false}
{"ts":1351019728705,"patch":[[{"diffs":[[0,"de(n"],[-1,"ew Uint8Array(node.slice(0)"],[1,"ode.subarray(0"],[0,"), p"]],"start1":2609,"start2":2609,"length1":35,"length2":22}]],"length":3552,"saved":false}
{"ts":1351019784377,"patch":[[{"diffs":[[0,"  node.init("],[1,"node."],[0,"state,parent"]],"start1":2519,"start2":2519,"length1":24,"length2":29}]],"length":3557,"saved":false}
{"ts":1351019803374,"patch":[[{"diffs":[[0,"de.s"],[-1,"ubarray(0)"],[1,"tate"],[0,", pa"]],"start1":2619,"start2":2619,"length1":18,"length2":12}]],"length":3551,"saved":false}
{"ts":1351019822077,"patch":[[{"diffs":[[0,"de.init("],[-1,"node.stat"],[1,"parentNod"],[0,"e,parent"]],"start1":2523,"start2":2523,"length1":25,"length2":25}]],"length":3551,"saved":false}
{"ts":1351019828204,"patch":[[{"diffs":[[0,"rentNode"],[1,".state"],[0,",parentN"]],"start1":2533,"start2":2533,"length1":16,"length2":22}]],"length":3557,"saved":false}
{"ts":1351019840276,"patch":[[{"diffs":[[0,"bixNode("],[-1,"n"],[1,"parentN"],[0,"ode.stat"]],"start1":2615,"start2":2615,"length1":17,"length2":23}]],"length":3563,"saved":false}
{"ts":1351019868750,"patch":[[{"diffs":[[0,"State = "],[1,"this.rubixState ? :"],[0,"state"],[1,")"],[0,";\n    \n "]],"start1":774,"start2":774,"length1":21,"length2":41}]],"length":3583,"saved":false}
{"ts":1351019886995,"patch":[[{"diffs":[[0,"rots)\n{\n    "],[1,"if("],[0,"this.rubixSt"]],"start1":752,"start2":752,"length1":24,"length2":27},{"diffs":[[0,"bixState"],[1,")\n    \n  "],[0," "],[-1,"="],[0," this.ru"]],"start1":774,"start2":774,"length1":18,"length2":26},{"diffs":[[0,"ate "],[-1,"? :state"],[1,"this.rubixState ? : "],[0,");\n "]],"start1":805,"start2":805,"length1":16,"length2":28}]],"length":3606,"saved":false}
{"ts":1351019894536,"patch":[[{"diffs":[[0,"xState)\n    "],[-1,"\n"],[1,"{\n    "],[0,"    this.rub"]],"start1":776,"start2":776,"length1":25,"length2":30},{"diffs":[[0," ? : );\n"],[1,"    }\n    else\n    {\n    }\n"],[0,"    \n   "]],"start1":829,"start2":829,"length1":16,"length2":43}]],"length":3638,"saved":false}
{"ts":1351019895957,"patch":[[{"diffs":[[0," else\n    {\n"],[1,"        \n"],[0,"    }\n    \n "]],"start1":846,"start2":846,"length1":24,"length2":33}]],"length":3647,"saved":false}
{"ts":1351019907510,"patch":[[{"diffs":[[0,"  {\n        "],[1,"this.rubixState = state.subarray(0);"],[0,"\n    }\n    \n"]],"start1":854,"start2":854,"length1":24,"length2":60}]],"length":3683,"saved":false}
{"ts":1351020172942,"patch":[[{"diffs":[[0,"e = "],[-1,"state.subarray(0"],[1,"new Uint8Array().set(state"],[0,");\n "]],"start1":880,"start2":880,"length1":24,"length2":34}]],"length":3693,"saved":false}
{"ts":1351020187911,"patch":[[{"diffs":[[0,"tate"],[-1," this.rubixState ? : "],[1,".set(state"],[0,");\n "]],"start1":809,"start2":809,"length1":29,"length2":18}]],"length":3682,"saved":false}
{"ts":1351020202295,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"RubixNode.buildNode  = function(node, parentNode, face, rots)\n{\n    if(node)\n    {\n        node.init(parentNode.state,parentNode, face, rots);\n    }\n    else\n    {\n        node = new RubixNode(parentNode.state, parentNode,  face, rots);\n    }\n        \n    return node;\n};"],[0,"\n\nRu"]],"start1":2545,"start2":2545,"length1":279,"length2":8}]],"length":3411,"saved":false}
{"ts":1351020204532,"patch":[[{"diffs":[[0,"    \n   "],[1,"RubixNode.buildNode  = function(node, parentNode, face, rots)\n{\n    if(node)\n    {\n        node.init(parentNode.state,parentNode, face, rots);\n    }\n    else\n    {\n        node = new RubixNode(parentNode.state, parentNode,  face, rots);\n    }\n        \n    return node;\n};"],[0,"\n\n/**\n *"]],"start1":1392,"start2":1392,"length1":16,"length2":287}]],"length":3682,"saved":false}
{"ts":1351020208669,"patch":[[{"diffs":[[0,"\n    \n  "],[-1," "],[0,"RubixNod"]],"start1":1391,"start2":1391,"length1":17,"length2":16}]],"length":3681,"saved":false}
{"ts":1351020212952,"patch":[[{"diffs":[[0,"};\n    \n"],[-1,"  "],[0,"RubixNod"]],"start1":1389,"start2":1389,"length1":18,"length2":16}]],"length":3679,"saved":false}
{"ts":1351020220642,"patch":[[{"diffs":[[0,"ixNode.build"],[1,"AndRot"],[0,"Node  = func"]],"start1":1400,"start2":1400,"length1":24,"length2":30}]],"length":3685,"saved":false}
{"ts":1351020222388,"patch":[[{"diffs":[[0,"ldAndRot"],[1,"ate"],[0,"Node  = "]],"start1":1410,"start2":1410,"length1":16,"length2":19}]],"length":3688,"saved":false}
{"ts":1351020227116,"patch":[[{"diffs":[[0,"de.build"],[1,"AndRotate"],[0,"Node(Rub"]],"start1":2722,"start2":2722,"length1":16,"length2":25}]],"length":3697,"saved":false}
{"ts":1351020244456,"patch":[[{"diffs":[[0,";\n    }\n    "],[-1,"    "],[1,"node.rotate(face, rots)"],[0,"\n    return "]],"start1":1641,"start2":1641,"length1":28,"length2":47}]],"length":3716,"saved":false}
{"ts":1351020246134,"patch":[[{"diffs":[[0,";\n    }\n    "],[-1,"n"],[0,"ode.rotate(f"]],"start1":1641,"start2":1641,"length1":25,"length2":24},{"diffs":[[0,"e, rots)"],[1,";"],[0,"\n    ret"]],"start1":1667,"start2":1667,"length1":16,"length2":17}]],"length":3716,"saved":false}
{"ts":1351020264666,"patch":[[{"diffs":[[0,"    "],[-1,"ode.rotate("],[1,"RubixState.rotate(node.rubixState,"],[0,"face"],[1," "],[0,", ro"]],"start1":1649,"start2":1649,"length1":23,"length2":47}]],"length":3740,"saved":false}
{"ts":1351020268015,"patch":[[{"diffs":[[0,"ixState,"],[1," "],[0,"face , r"]],"start1":1679,"start2":1679,"length1":16,"length2":17}]],"length":3741,"saved":false}
{"ts":1351020269077,"patch":[[{"diffs":[[0,"te, face"],[-1," "],[0,", rots);"]],"start1":1684,"start2":1684,"length1":17,"length2":16}]],"length":3740,"saved":false}
{"ts":1351020273170,"patch":[[{"diffs":[[0,"ace, rots);\n"],[1,"    \n"],[0,"    return n"]],"start1":1689,"start2":1689,"length1":24,"length2":29}]],"length":3745,"saved":false}
{"ts":1351020275093,"patch":[[{"diffs":[[0,"ots);\n    }\n"],[1,"    \n"],[0,"    RubixSta"]],"start1":1637,"start2":1637,"length1":24,"length2":29}]],"length":3750,"saved":false}
{"ts":1351020283164,"patch":[[{"diffs":[[0,"node);\n    }"],[-1,"\n"],[0,"    \n};\n\n/**"]],"start1":3407,"start2":3407,"length1":25,"length2":24}]],"length":3749,"saved":false}
{"ts":1351020287539,"patch":[[{"diffs":[[0,"e);\n"],[-1,"        \n        node.rubixState = null;\n"],[0,"    "]],"start1":3187,"start2":3187,"length1":49,"length2":8}]],"length":3708,"saved":false}
{"ts":1351020295281,"patch":[[{"diffs":[[0,"  }\n"],[-1,"        RubixNode.statePool.push(node.rubixState);\n"],[0,"    "]],"start1":3136,"start2":3136,"length1":59,"length2":8}]],"length":3657,"saved":false}
{"ts":1351020298436,"patch":[[{"diffs":[[0,"s;\n};\n\n\n"],[-1,"\n"],[0,"RubixNod"]],"start1":2881,"start2":2881,"length1":17,"length2":16}]],"length":3656,"saved":false}
{"ts":1351020301121,"patch":[[{"diffs":[[0," i, j));"],[-1,"\n"],[0,"        "]],"start1":2828,"start2":2828,"length1":17,"length2":16}]],"length":3655,"saved":false}
{"ts":1351020303179,"patch":[[{"diffs":[[0," i, j));"],[1,"\n    "],[0,"        "]],"start1":2828,"start2":2828,"length1":16,"length2":21}]],"length":3660,"saved":false}
{"ts":1351020304073,"patch":[[{"diffs":[[0,"        "],[-1,"    "],[0,"}   \n   "]],"start1":2837,"start2":2837,"length1":20,"length2":16}]],"length":3656,"saved":false}
{"ts":1351020333473,"patch":[[{"diffs":[[0,"        "],[1,"    "],[0,"// Creat"]],"start1":2636,"start2":2636,"length1":16,"length2":20},{"diffs":[[0,"state.  "],[-1,"\n"],[0,"        "]],"start1":2709,"start2":2709,"length1":17,"length2":16}]],"length":3659,"saved":false}
{"ts":1351020848180,"patch":[[{"diffs":[[0,"e = "],[-1,"new Uint8Array().set("],[0,"state"],[-1,")"],[0,";\n  "]],"start1":869,"start2":869,"length1":35,"length2":13}]],"length":3637,"saved":false}
{"ts":1351020890383,"patch":[[{"diffs":[[0,"ode,  face, rots"],[1,",true"],[0,");\n    }\n    \n  "]],"start1":1602,"start2":1602,"length1":32,"length2":37}]],"length":3642,"saved":false}
{"ts":1351020900016,"patch":[[{"diffs":[[0,"rent, face, rots"],[1,", createNew"],[0,")\n{\n    if(this."]],"start1":740,"start2":740,"length1":32,"length2":43}]],"length":3653,"saved":false}
{"ts":1351020909574,"patch":[[{"diffs":[[0,";\n    }\n    else"],[1," if(createNew)"],[0,"\n    {\n        t"]],"start1":835,"start2":835,"length1":32,"length2":46}]],"length":3667,"saved":false}
{"ts":1351020925311,"patch":[[{"diffs":[[0," = state;\n    }\n"],[1,"    else\n    {\n        \n    }\n"],[0,"    \n    this.no"]],"start1":895,"start2":895,"length1":32,"length2":62}]],"length":3697,"saved":false}
{"ts":1351020931914,"patch":[[{"diffs":[[0,"  {\n        "],[1,"this.rubixState = state;    "],[0,"\n    }\n    \n"]],"start1":922,"start2":922,"length1":24,"length2":52}]],"length":3725,"saved":false}
{"ts":1351021010496,"patch":[[{"diffs":[[0,"State = "],[1,"RubixState.copy("],[0,"state"],[1,")"],[0,";\n    }\n"]],"start1":890,"start2":890,"length1":21,"length2":38}]],"length":3742,"saved":false}
{"ts":1351021018627,"patch":[[{"diffs":[[0,", create"],[-1,"New"],[1,"Copy"],[0,")\n{\n    "]],"start1":756,"start2":756,"length1":19,"length2":20}]],"length":3743,"saved":false}
{"ts":1351021021174,"patch":[[{"diffs":[[0,"eateCopy"],[1,"State"],[0,")\n{\n    "]],"start1":760,"start2":760,"length1":16,"length2":21}]],"length":3748,"saved":false}
{"ts":1351021024877,"patch":[[{"diffs":[[0,"eate"],[-1,"New"],[1,"CopyState"],[0,")\n  "]],"start1":863,"start2":863,"length1":11,"length2":17}]],"length":3754,"saved":false}
{"ts":1351022769626,"patch":[[{"diffs":[[0,"   \n"],[-1,"    RubixState.rotate(node.rubixState, face, rots);\n"],[0,"    "]],"start1":1745,"start2":1745,"length1":60,"length2":8}]],"length":3702,"saved":false}
{"ts":1351022771502,"patch":[[{"diffs":[[0,"true);\n    }"],[-1,"\n    \n"],[0,"    \n    ret"]],"start1":1731,"start2":1731,"length1":30,"length2":24}]],"length":3696,"saved":false}
{"ts":1351022772908,"patch":[[{"diffs":[[0,"true);\n    }"],[1,"\n"],[0,"    \n    ret"]],"start1":1731,"start2":1731,"length1":24,"length2":25}]],"length":3697,"saved":false}
{"ts":1351022786100,"patch":[[{"diffs":[[0,"| rots;\n"],[1,"            RubixState.rotate(node.rubixState, face, rots);\n\n"],[0,"   \n    "]],"start1":1115,"start2":1115,"length1":16,"length2":77}]],"length":3758,"saved":false}
{"ts":1351022787107,"patch":[[{"diffs":[[0,"ts;\n        "],[-1,"    "],[0,"RubixState.r"]],"start1":1119,"start2":1119,"length1":28,"length2":24}]],"length":3754,"saved":false}
{"ts":1351022791315,"patch":[[{"diffs":[[0,".rotate("],[-1,"node"],[1,"this"],[0,".rubixSt"]],"start1":1141,"start2":1141,"length1":20,"length2":20}]],"length":3754,"saved":false}
{"ts":1351022796470,"patch":[[{"diffs":[[0,", rots);"],[-1,"\n\n"],[0,"   \n    "]],"start1":1170,"start2":1170,"length1":18,"length2":16}]],"length":3752,"saved":false}
{"ts":1351022830273,"patch":[[{"diffs":[[0," if(node)\n    {\n"],[1,"        console.log(\"here\"\n"],[0,"        node.ini"]],"start1":1618,"start2":1618,"length1":32,"length2":59}]],"length":3779,"saved":false}
{"ts":1351022831298,"patch":[[{"diffs":[[0,"g(\"here\""],[1,");"],[0,"\n       "]],"start1":1652,"start2":1652,"length1":16,"length2":18}]],"length":3781,"saved":false}
{"ts":1351022839541,"patch":[[{"diffs":[[0,"\n    else\n    {\n"],[1,"                console.log(\"creation\");\n\n"],[0,"        node = n"]],"start1":1728,"start2":1728,"length1":32,"length2":74}]],"length":3823,"saved":false}
{"ts":1351022949291,"patch":[[{"diffs":[[0,"opyState)\n    {\n"],[1,"        console.log(\"coptyState\");\n"],[0,"        this.rub"]],"start1":868,"start2":868,"length1":32,"length2":67}]],"length":3858,"saved":false}
{"ts":1351022967765,"patch":[[{"diffs":[[0,"entNode,"],[-1," "],[0," face, r"]],"start1":1871,"start2":1871,"length1":17,"length2":16}]],"length":3857,"saved":false}
{"ts":1351022984200,"patch":[[{"diffs":[[0,"opyState)\n{\n"],[1,"    console.log(createCopyState);\n"],[0,"    if(this."]],"start1":765,"start2":765,"length1":24,"length2":58}]],"length":3891,"saved":false}
{"ts":1351022996172,"patch":[[{"diffs":[[0,"  }\n"],[-1,"    else if(createCopyState)\n    {\n        console.log(\"coptyState\");\n        this.rubixState = RubixState.copy(state);\n    }\n"],[0,"    "]],"start1":879,"start2":879,"length1":134,"length2":8}]],"length":3765,"saved":false}
{"ts":1351022998912,"patch":[[{"diffs":[[0,"e);\n    "],[1,"else "],[0,"if(this."]],"start1":807,"start2":807,"length1":16,"length2":21}]],"length":3770,"saved":false}
{"ts":1351023000212,"patch":[[{"diffs":[[0,"CopyState);\n"],[1,"    if(createCopyState)\n    {\n        console.log(\"coptyState\");\n        this.rubixState = RubixState.copy(state);\n    }\n"],[0,"    else if("]],"start1":799,"start2":799,"length1":24,"length2":145}]],"length":3891,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351023196886,"patch":[[{"diffs":[[0,"log(\"cop"],[-1,"t"],[0,"yState\")"]],"start1":857,"start2":857,"length1":17,"length2":16}]],"length":3890,"saved":false}
{"ts":1351023208633,"patch":[[{"diffs":[[0,"rent, face, rots"],[1,",createCopyState"],[0,")\n{\n    this.ini"]],"start1":628,"start2":628,"length1":32,"length2":48}]],"length":3906,"saved":false}
{"ts":1351023214168,"patch":[[{"diffs":[[0,"t,face, rots"],[1,",createCopyState"],[0,");    \n}\n\nRu"]],"start1":689,"start2":689,"length1":24,"length2":40}]],"length":3922,"saved":false}
{"ts":1351023223543,"patch":[[{"diffs":[[0,".\n *"],[-1," @param action Optional - The action that was taken to reach this node.\n *          Has the following bit pattern: -###-@@@ where -:null #:face @:rotations"],[0,"\n * "]],"start1":432,"start2":432,"length1":163,"length2":8}]],"length":3767,"saved":false}
{"ts":1351023242366,"patch":[[{"diffs":[[0,"pyState\""],[1,",state"],[0,");\n     "]],"start1":741,"start2":741,"length1":16,"length2":22}]],"length":3773,"saved":false}
{"ts":1351023268695,"patch":[[{"diffs":[[0,"\n    else\n    {\n"],[1,"        console.log(state)\n"],[0,"        this.rub"]],"start1":890,"start2":890,"length1":32,"length2":59}]],"length":3800,"saved":false}
{"ts":1351023269657,"patch":[[{"diffs":[[0,"e.log(state)"],[1,";"],[0,"\n        thi"]],"start1":920,"start2":920,"length1":24,"length2":25}]],"length":3801,"saved":false}
{"ts":1351023286685,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    console.log(createCopyState);\n"],[0,"    "]],"start1":650,"start2":650,"length1":42,"length2":8}]],"length":3767,"saved":false}
{"ts":1351023451690,"patch":[[{"diffs":[[0,"reation\""],[1,", parentNode.state"],[0,");\n\n    "]],"start1":1719,"start2":1719,"length1":16,"length2":34}]],"length":3785,"saved":false}
{"ts":1351023467922,"patch":[[{"diffs":[[0,"rentNode"],[-1,".state"],[0,");\n\n    "]],"start1":1731,"start2":1731,"length1":22,"length2":16}]],"length":3779,"saved":false}
{"ts":1351023473493,"patch":[[{"diffs":[[0,"(parentNode."],[-1,"s"],[1,"rubixS"],[0,"tate, parent"]],"start1":1771,"start2":1771,"length1":25,"length2":30}]],"length":3784,"saved":false}
{"ts":1351023521708,"patch":[[{"diffs":[[0,"  }\n"],[-1,"            // Create a new node with a copy of the data then rotate the state.          \n"],[0,"    "]],"start1":2757,"start2":2757,"length1":98,"length2":8}]],"length":3694,"saved":false}
{"ts":1351023529312,"patch":[[{"diffs":[[0,"   {"],[-1,"\n                console.log(\"creation\", parentNode);"],[0,"\n\n  "]],"start1":1684,"start2":1684,"length1":61,"length2":8}]],"length":3641,"saved":false}
{"ts":1351023530617,"patch":[[{"diffs":[[0,"e\n    {\n"],[-1,"\n"],[0,"        "]],"start1":1681,"start2":1681,"length1":17,"length2":16}]],"length":3640,"saved":false}
{"ts":1351023532577,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        console.log(\"here\");\n"],[0,"    "]],"start1":1575,"start2":1575,"length1":37,"length2":8}]],"length":3611,"saved":false}
{"ts":1351023536641,"patch":[[{"diffs":[[0,"e)\n    {\n       "],[1,"//"],[0," console.log(\"co"]],"start1":675,"start2":675,"length1":32,"length2":34}]],"length":3613,"saved":false}
{"ts":1351023632745,"patch":[[{"diffs":[[0,"ubixState)\n    {"],[1,"        console.log(state);\n"],[0,"\n        this.ru"]],"start1":800,"start2":800,"length1":32,"length2":60}]],"length":3641,"saved":false}
{"ts":1351023649446,"patch":[[{"diffs":[[0,"entNode."],[-1,"s"],[1,"rubixS"],[0,"tate,par"]],"start1":1630,"start2":1630,"length1":17,"length2":22}]],"length":3646,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351023687321,"patch":[[{"diffs":[[0,"        "],[-1,"console.log(state);\n"],[0,"\n       "]],"start1":816,"start2":816,"length1":36,"length2":16}]],"length":3626,"saved":false}
{"ts":1351023690503,"patch":[[{"diffs":[[0,"  {\n"],[-1,"        console.log(state);\n"],[0,"    "]],"start1":878,"start2":878,"length1":36,"length2":8}]],"length":3598,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351024823575,"patch":[[{"diffs":[[0,"is.depth"],[-1," "],[1,"; //"],[0,"+ CubeHe"]],"start1":1251,"start2":1251,"length1":17,"length2":20}]],"length":3601,"saved":false}
{"ts":1351024828970,"patch":[[{"diffs":[[0,"his.fn ="],[1,"0//"],[0," CubeHeu"]],"start1":1385,"start2":1385,"length1":16,"length2":19}]],"length":3604,"saved":false}
{"ts":1351024993958,"patch":[[{"diffs":[[0,"is.fn =0"],[1,";"],[0,"// CubeH"]],"start1":1386,"start2":1386,"length1":16,"length2":17}]],"length":3605,"saved":false}
{"ts":1351025237450,"patch":[[{"diffs":[[0,"\n    else\n    {\n"],[1,"        console.log(\"new node\");\n"],[0,"        node = n"]],"start1":1638,"start2":1638,"length1":32,"length2":65}]],"length":3638,"saved":false}
{"ts":1351025313283,"patch":[[{"diffs":[[0,"ce, rots)\n{\n"],[1,"            console.log(\"new node\");\n\n"],[0,"    if(node)"]],"start1":1537,"start2":1537,"length1":24,"length2":62},{"diffs":[[0,"  {\n"],[-1,"        console.log(\"new node\");\n"],[0,"    "]],"start1":1688,"start2":1688,"length1":41,"length2":8}]],"length":3643,"saved":false}
{"ts":1351026364595,"patch":[[{"diffs":[[0,"  }    \n"],[1,"    console.log(successors.length);"],[0,"\n    ret"]],"start1":2839,"start2":2839,"length1":16,"length2":51}]],"length":3678,"saved":false}
{"ts":1351026419026,"patch":[[{"diffs":[[0,"            "],[1,"//"],[0,"console.log("]],"start1":1549,"start2":1549,"length1":24,"length2":26}]],"length":3680,"saved":false}
{"ts":1351026484037,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(successors.length);\n"],[0,"    "]],"start1":2845,"start2":2845,"length1":44,"length2":8}]],"length":3644,"saved":false}
{"ts":1351027562870,"patch":[[{"diffs":[[0,"ion >> 4"],[1," ||\n            RubixNode.faceCulling[(node.nodeAction >> 4)] == i\n            "],[0,")\n      "]],"start1":2411,"start2":2411,"length1":16,"length2":95}]],"length":3723,"saved":false}
{"ts":1351027566682,"patch":[[{"diffs":[[0,"4)] == i"],[-1,"\n            "],[0,")\n      "]],"start1":2477,"start2":2477,"length1":29,"length2":16}]],"length":3710,"saved":false}
{"ts":1351027573469,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            if(node.nodeAction && RubixNode.faceCulling[(node.nodeAction >> 4)] == i \n               && (2 - (node.nodeAction & 7 - 2)) == j)\n            {\n               continue;\n            }\n"],[0,"    "]],"start1":2579,"start2":2579,"length1":203,"length2":8}]],"length":3515,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351028046309,"patch":[[{"diffs":[[0,">> 4"],[1,")//"],[0," ||\n    "],[1,"//"],[0,"    "]],"start1":2415,"start2":2415,"length1":16,"length2":21}]],"length":3520,"saved":false}
{"ts":1351028356265,"patch":[[{"diffs":[[0," ||\n    "],[-1,"//"],[0,"        "]],"start1":2422,"start2":2422,"length1":18,"length2":16}]],"length":3518,"saved":false}
{"ts":1351028359262,"patch":[[{"diffs":[[0,"on >> 4)"],[-1,"//"],[0," ||\n    "]],"start1":2412,"start2":2412,"length1":18,"length2":16}]],"length":3516,"saved":false}
{"ts":1351028360814,"patch":[[{"diffs":[[0,"ion >> 4"],[-1,")"],[0," ||\n    "]],"start1":2411,"start2":2411,"length1":17,"length2":16}]],"length":3515,"saved":false}
{"ts":1351028370516,"patch":[[{"diffs":[[0," \n    }    \n"],[1,"    console.log(successors);\n"],[0,"    return s"]],"start1":2708,"start2":2708,"length1":24,"length2":53}]],"length":3544,"saved":false}
{"ts":1351028397139,"patch":[[{"diffs":[[0,"ccessors"],[1,".length"],[0,");\n    r"]],"start1":2738,"start2":2738,"length1":16,"length2":23}]],"length":3551,"saved":false}
{"ts":1351028465620,"patch":[[{"diffs":[[0,"4 ||\n           "],[1," ((node.nodeAction >> 4) < 3 &&"],[0," RubixNode.faceC"]],"start1":2418,"start2":2418,"length1":32,"length2":63},{"diffs":[[0,")] == i)"],[1,")"],[0,"\n       "]],"start1":2509,"start2":2509,"length1":16,"length2":17}]],"length":3583,"saved":false}
{"ts":1351028536209,"patch":[[{"diffs":[[0," 4) "],[-1,"< 3"],[1,"> 2"],[0," && "]],"start1":2455,"start2":2455,"length1":11,"length2":11}]],"length":3583,"saved":false}
{"ts":1351028654251,"patch":[[{"diffs":[[0,"< 6; i++)\n    {\n"],[1,"        // Do the face culling. Prevent redundant face rotations with the first condition.\n        // The second condition prevents duplicate states from arising due to rotating\n        // opposing faces.\n"],[0,"        if(node."]],"start1":2347,"start2":2347,"length1":32,"length2":237},{"diffs":[[0,"   \n"],[-1,"    console.log(successors.length);\n"],[0,"    "]],"start1":2953,"start2":2953,"length1":44,"length2":8}]],"length":3752,"saved":false}
{"ts":1351028672420,"patch":[[{"diffs":[[0,"       /"],[-1,"/"],[1,"*"],[0," Do the "]],"start1":2364,"start2":2364,"length1":17,"length2":17},{"diffs":[[0,"        "],[-1,"//"],[1," *"],[0," The sec"]],"start1":2454,"start2":2454,"length1":18,"length2":18},{"diffs":[[0,"        "],[-1,"//"],[1," *"],[0," opposin"]],"start1":2541,"start2":2541,"length1":18,"length2":18}]],"length":3752,"saved":false}
{"ts":1351028673758,"patch":[[{"diffs":[[0," faces.\n"],[1,"         */\n"],[0,"        "]],"start1":2560,"start2":2560,"length1":16,"length2":28}]],"length":3764,"saved":false}
{"ts":1351028675855,"patch":[[{"diffs":[[0,"     /* "],[1,"\n        "],[0,"Do the f"]],"start1":2366,"start2":2366,"length1":16,"length2":25}]],"length":3773,"saved":false}
{"ts":1351028679817,"patch":[[{"diffs":[[0,"\n       "],[1,"  *"],[0," Do the "]],"start1":2374,"start2":2374,"length1":16,"length2":19}]],"length":3776,"saved":false}
{"ts":1351028691265,"patch":[[{"diffs":[[0," ||\n        "],[1,"//"],[0,"    ((node.n"]],"start1":2648,"start2":2648,"length1":24,"length2":26}]],"length":3778,"saved":false}
{"ts":1351028708193,"patch":[[{"diffs":[[0,"ion >> 4"],[1,")//"],[0," ||\n    "]],"start1":2640,"start2":2640,"length1":16,"length2":19}]],"length":3781,"saved":false}
{"ts":1351028727503,"patch":[[{"diffs":[[0,">> 4"],[-1,")//"],[0," ||\n"]],"start1":2644,"start2":2644,"length1":11,"length2":8},{"diffs":[[0,"        "],[-1,"//"],[0,"    ((no"]],"start1":2652,"start2":2652,"length1":18,"length2":16}]],"length":3776,"saved":false}
{"ts":1351028793393,"patch":[[{"diffs":[[0," \n    }    \n"],[1,"    console.log(successors.length);\n"],[0,"    return s"]],"start1":2969,"start2":2969,"length1":24,"length2":60}]],"length":3812,"saved":false}
{"ts":1351028833485,"patch":[[{"diffs":[[0," 4) "],[-1,"> 2"],[1,"< 3"],[0," && "]],"start1":2684,"start2":2684,"length1":11,"length2":11}]],"length":3812,"saved":false}
{"ts":1351029010981,"patch":[[{"diffs":[[0,"   \""],[-1,"0\":4"],[1,"4\":0"],[0,",\n    \""],[-1,"1\":3"],[1,"3\":1"],[0,",\n    \""],[-1,"2\":5"],[1,"5\":2"],[0,"\n};\n"]],"start1":189,"start2":189,"length1":34,"length2":34}]],"length":3812,"saved":false}
{"ts":1351029055573,"patch":[[{"diffs":[[0,"   \""],[-1,"4\":0"],[1,"0\":4"],[0,",\n    \""],[-1,"3\":1"],[1,"1\":3"],[0,",\n    \""],[-1,"5\":2"],[1,"2\":5"],[0,"\n};\n"]],"start1":189,"start2":189,"length1":34,"length2":34},{"diffs":[[0," 4) "],[-1,"< 3"],[1,"> 2 "],[0," && "]],"start1":2684,"start2":2684,"length1":11,"length2":12}]],"length":3813,"saved":false}
{"ts":1351029063924,"patch":[[{"diffs":[[0,"       ("],[-1,"(node.nodeAction >> 4)"],[1,"i"],[0," > 2  &&"]],"start1":2657,"start2":2657,"length1":38,"length2":17}]],"length":3792,"saved":false}
{"ts":1351029095069,"patch":[[{"diffs":[[0,"tion && "],[1,"("],[0,"i === no"]],"start1":2614,"start2":2614,"length1":16,"length2":17},{"diffs":[[0,"] == i))"],[1,")"],[0,"\n       "]],"start1":2720,"start2":2720,"length1":16,"length2":17}]],"length":3794,"saved":false}
{"ts":1351029128240,"patch":[[{"diffs":[[0,"}    \n  "],[1,"//"],[0,"  consol"]],"start1":2957,"start2":2957,"length1":16,"length2":18}]],"length":3796,"saved":false}
{"ts":1351029208703,"patch":[[{"diffs":[[0,"}    \n  "],[-1,"//"],[0,"  consol"]],"start1":2957,"start2":2957,"length1":18,"length2":16}]],"length":3794,"saved":false}
{"ts":1351029365047,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(successors.length);\n"],[0,"    "]],"start1":2959,"start2":2959,"length1":44,"length2":8}]],"length":3758,"saved":false}
{"ts":1351029430820,"patch":[[{"diffs":[[0,"ion >> 4"],[1,"))//"],[0," ||\n    "]],"start1":2641,"start2":2641,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"//"],[0,"(i > 2  "]],"start1":2661,"start2":2661,"length1":16,"length2":18}]],"length":3764,"saved":false}
{"ts":1351029451604,"patch":[[{"diffs":[[0,">> 4"],[-1,"))//"],[0," ||\n"]],"start1":2645,"start2":2645,"length1":12,"length2":8},{"diffs":[[0,"        "],[-1,"//"],[0,"(i > 2  "]],"start1":2657,"start2":2657,"length1":18,"length2":16}]],"length":3758,"saved":false}
{"ts":1351033867984,"patch":[[{"diffs":[[0,"rs;\n};\n\n"],[1,"/**\n * \n */"],[0,"\nRubixNo"]],"start1":2982,"start2":2982,"length1":16,"length2":27}]],"length":3769,"saved":false}
{"ts":1351033940963,"patch":[[{"diffs":[[0,"\n};\n\n/**\n * "],[1,"Wipes out a useless node from the tree and adds it to the node pool for reuse.\n * If the parent node has no more children after this removal cascade up.\n * \n * @param node The node to remove."],[0,"\n */\nRubixNo"]],"start1":2985,"start2":2985,"length1":24,"length2":215}]],"length":3960,"saved":false}
{"ts":1351033955025,"patch":[[{"diffs":[[0,"ion(node)\n{\n"],[1,"    //If not the root of the search.\n"],[0,"    if(node."]],"start1":3223,"start2":3223,"length1":24,"length2":61},{"diffs":[[0,"    {   "],[-1,"\n        "],[0,"node.par"]],"start1":3296,"start2":3296,"length1":25,"length2":16}]],"length":3988,"saved":false}
{"ts":1351033956845,"patch":[[{"diffs":[[0,"{\n    //"],[1," "],[0,"If not t"]],"start1":3233,"start2":3233,"length1":16,"length2":17}]],"length":3989,"saved":false}
{"ts":1351033958665,"patch":[[{"diffs":[[0,"\n    {  "],[1,"\n       "],[0," node.pa"]],"start1":3296,"start2":3296,"length1":16,"length2":24}]],"length":3997,"saved":false}
{"ts":1351033960743,"patch":[[{"diffs":[[0,";    \n        }\n"],[1,"        \n"],[0,"        node.par"]],"start1":3464,"start2":3464,"length1":32,"length2":41}]],"length":4006,"saved":false}
{"ts":1351033980915,"patch":[[{"diffs":[[0,"    {  \n"],[1,"        // Decrement the parent and check to see if it needs a wipe.\n"],[0,"        "]],"start1":3297,"start2":3297,"length1":16,"length2":85}]],"length":4075,"saved":false}
{"ts":1351034004673,"patch":[[{"diffs":[[0,"     }\n        \n"],[1,"        // Prep and load the node into the pool.\n"],[0,"        node.par"]],"start1":3542,"start2":3542,"length1":32,"length2":81}]],"length":4124,"saved":false}
{"ts":1351034014515,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"            //console.log(\"new node\");\n\n"],[0,"    "]],"start1":1545,"start2":1545,"length1":48,"length2":8}]],"length":4084,"saved":false}
{"ts":1351034080492,"patch":[[{"diffs":[[0,"ent "],[-1,"Optional - "],[0,"The "]],"start1":379,"start2":379,"length1":19,"length2":8},{"diffs":[[0,"the path"],[1,".\n * @param face The face that was rotated by an action.\n * @param rots The rotations caried out in the action. (if this and action are supplied a rotation occurs"],[0,".\n *\n * "]],"start1":413,"start2":413,"length1":16,"length2":178}]],"length":4235,"saved":false}
{"ts":1351034120016,"patch":[[{"diffs":[[0,"occurs.\n"],[1," * @param createCopyState a flag that will deep copy the supplied state if set.\n"],[0," *\n * \n "]],"start1":577,"start2":577,"length1":16,"length2":96}]],"length":4315,"saved":false}
{"ts":1351034134028,"patch":[[{"diffs":[[0,"pyState "],[-1,"a"],[1,"A"],[0," flag th"]],"start1":603,"start2":603,"length1":17,"length2":17},{"diffs":[[0,"at will "],[1,"toggle a "],[0,"deep cop"]],"start1":620,"start2":620,"length1":16,"length2":25}]],"length":4324,"saved":false}
{"ts":1351034137920,"patch":[[{"diffs":[[0,"tate"],[-1," if set"],[0,".\n *"]],"start1":661,"start2":661,"length1":15,"length2":8}]],"length":4317,"saved":false}
{"ts":1351034148870,"patch":[[{"diffs":[[0,"ate."],[-1,"\n *\n *"],[0," \n *"]],"start1":662,"start2":662,"length1":14,"length2":8}]],"length":4311,"saved":false}
{"ts":1351034150872,"patch":[[{"diffs":[[0,"s cube.\n"],[1," * \n"],[0," * @para"]],"start1":305,"start2":305,"length1":16,"length2":20}]],"length":4315,"saved":false}
{"ts":1351034152983,"patch":[[{"diffs":[[0,"e node.\n"],[1," * \n"],[0," * @para"]],"start1":362,"start2":362,"length1":16,"length2":20},{"diffs":[[0,"e path.\n"],[1," * \n"],[0," * @para"]],"start1":423,"start2":423,"length1":16,"length2":20},{"diffs":[[0,"action.\n"],[1," * \n"],[0," * @para"]],"start1":482,"start2":482,"length1":16,"length2":20},{"diffs":[[0,"occurs.\n"],[1," * \n"],[0," * @para"]],"start1":593,"start2":593,"length1":16,"length2":20}]],"length":4331,"saved":false}
{"ts":1351034164694,"patch":[[{"diffs":[[0,"opyState)\n{\n"],[1,"    // Handle the state.\n"],[0,"    if(creat"]],"start1":889,"start2":889,"length1":24,"length2":49}]],"length":4356,"saved":false}
{"ts":1351034181440,"patch":[[{"diffs":[[0," null;\n\n"],[1,"    // Rotate if an action is supplied.\n"],[0,"    if(f"]],"start1":1223,"start2":1223,"length1":16,"length2":56}]],"length":4396,"saved":false}
{"ts":1351034193849,"patch":[[{"diffs":[[0,"   }\n};\n"],[-1,"    "],[1,"\n/**\n * \n */"],[0,"\nRubixNo"]],"start1":1775,"start2":1775,"length1":20,"length2":28}]],"length":4404,"saved":false}
{"ts":1351034241793,"patch":[[{"diffs":[[0,"\n/**\n * "],[1,"Builds a node from the supplied details. To be used with the nodePool as it handles\n * empty nodes when the pool is empty."],[0,"\n */\nRub"]],"start1":1783,"start2":1783,"length1":16,"length2":138}]],"length":4526,"saved":false}
{"ts":1351034258163,"patch":[[{"diffs":[[0," empty.\n"],[1," *  @param state The state to be wrapped by the node.\n * \n * @param parentNode The parent used in retrieving the path.\n * \n * @param face The face that was rotated by an action.\n * \n * @param rots The rotations caried out in the action. (if this and action are supplied a rotation occurs.\n"],[0," */\nRubi"]],"start1":1906,"start2":1906,"length1":16,"length2":305}]],"length":4815,"saved":false}
{"ts":1351034263197,"patch":[[{"diffs":[[0,"Node The parent "],[1,"node "],[0,"used in retrievi"]],"start1":1988,"start2":1988,"length1":32,"length2":37}]],"length":4820,"saved":false}
{"ts":1351034269161,"patch":[[{"diffs":[[0,"ation occurs"],[1,")"],[0,".\n */\nRubixN"]],"start1":2194,"start2":2194,"length1":24,"length2":25}]],"length":4821,"saved":false}
{"ts":1351034272204,"patch":[[{"diffs":[[0,"n. (if this and "],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e"],[0," are supplied a "]],"start1":2153,"start2":2153,"length1":38,"length2":36}]],"length":4819,"saved":false}
{"ts":1351034277830,"patch":[[{"diffs":[[0,"his and "],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e"],[0," are sup"]],"start1":554,"start2":554,"length1":22,"length2":20}]],"length":4817,"saved":false}
{"ts":1351034279854,"patch":[[{"diffs":[[0,"n occurs"],[1,")"],[0,".\n * \n *"]],"start1":589,"start2":589,"length1":16,"length2":17}]],"length":4818,"saved":false}
{"ts":1351034284298,"patch":[[{"diffs":[[0,"is and face are "],[1,"\n * "],[0,"supplied a rotat"]],"start1":555,"start2":555,"length1":32,"length2":36},{"diffs":[[0," occurs)"],[-1,"."],[0,"\n * \n * "]],"start1":594,"start2":594,"length1":17,"length2":16}]],"length":4821,"saved":false}
{"ts":1351034290543,"patch":[[{"diffs":[[0,"ace are "],[1,"\n * "],[0,"supplied"]],"start1":2172,"start2":2172,"length1":16,"length2":20},{"diffs":[[0," occurs)"],[-1,"."],[0,"\n */\nRub"]],"start1":2203,"start2":2203,"length1":17,"length2":16}]],"length":4824,"saved":false}
{"ts":1351034294998,"patch":[[{"diffs":[[0,"pty.\n *  @param "],[-1,"stat"],[1,"nod"],[0,"e The state to b"]],"start1":1911,"start2":1911,"length1":36,"length2":35}]],"length":4823,"saved":false}
{"ts":1351034296880,"patch":[[{"diffs":[[0," empty.\n"],[1," * \n"],[0," *  @par"]],"start1":1908,"start2":1908,"length1":16,"length2":20}]],"length":4827,"saved":false}
{"ts":1351034298613,"patch":[[{"diffs":[[0,".\n * \n *"],[-1," "],[0," @param "]],"start1":1914,"start2":1914,"length1":17,"length2":16}]],"length":4826,"saved":false}
{"ts":1351034332594,"patch":[[{"diffs":[[0,"The "],[-1,"state to be wrapped by the"],[1,"node that will be modified to represent a different"],[0," node."],[1,"."],[0,"\n * "]],"start1":1935,"start2":1935,"length1":40,"length2":66}]],"length":4852,"saved":false}
{"ts":1351034334342,"patch":[[{"diffs":[[0,"nt node."],[-1,"."],[0,"\n * \n * "]],"start1":1988,"start2":1988,"length1":17,"length2":16}]],"length":4851,"saved":false}
{"ts":1351034366740,"patch":[[{"diffs":[[0,"occurs)\n"],[1," * \n * @return The modified/created node.\n"],[0," */\nRubi"]],"start1":2231,"start2":2231,"length1":16,"length2":58}]],"length":4893,"saved":false}
{"ts":1351034370487,"patch":[[{"diffs":[[0,"rs for.\n"],[1," * \n"],[0," * @retu"]],"start1":2733,"start2":2733,"length1":16,"length2":20}]],"length":4897,"saved":false}
{"ts":1351034376823,"patch":[[{"diffs":[[0,"d from.\n"],[1," * \n"],[0," * @retu"]],"start1":4710,"start2":4710,"length1":16,"length2":20}]],"length":4901,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351115486337,"patch":[[{"diffs":[[0,"epth"],[-1,"; //"],[0,"+ Cu"]],"start1":1569,"start2":1569,"length1":12,"length2":8}]],"length":4897,"saved":false}
{"ts":1351115487414,"patch":[[{"diffs":[[0,"is.depth"],[1," "],[0,"+ CubeHe"]],"start1":1565,"start2":1565,"length1":16,"length2":17}]],"length":4898,"saved":false}
{"ts":1351115492033,"patch":[[{"diffs":[[0,"fn ="],[-1,"0;//"],[0," Cub"]],"start1":1700,"start2":1700,"length1":12,"length2":8}]],"length":4894,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351119211610,"patch":[[{"diffs":[[0,"= null;\n        "],[1,"//"],[0,"RubixNode.nodePo"]],"start1":4508,"start2":4508,"length1":32,"length2":34}]],"length":4896,"saved":false}
{"ts":1351119224523,"patch":[[{"diffs":[[0,"e pool.\n"],[1,"        node.rubixState = null;\n"],[0,"        "]],"start1":4365,"start2":4365,"length1":16,"length2":48}]],"length":4928,"saved":false}
{"ts":1351119287762,"patch":[[{"diffs":[[0," j++)\n        {\n"],[1,"            successors.push(new RubixNode(parentNode.rubixState, parentNode, face, rots,true)\n"],[0,"            succ"]],"start1":3576,"start2":3576,"length1":32,"length2":126}]],"length":5022,"saved":false}
{"ts":1351119289662,"patch":[[{"diffs":[[0,"ce, rots"],[-1,",true"],[0,")\n      "]],"start1":3671,"start2":3671,"length1":21,"length2":16}]],"length":5017,"saved":false}
{"ts":1351119298134,"patch":[[{"diffs":[[0,"ntNode, "],[-1,"face, rots)"],[1,"ie, j))'"],[0,"\n       "]],"start1":3661,"start2":3661,"length1":27,"length2":24}]],"length":5014,"saved":false}
{"ts":1351119299213,"patch":[[{"diffs":[[0," ie, j))"],[-1,"'"],[1,";"],[0,"\n       "]],"start1":3668,"start2":3668,"length1":17,"length2":17}]],"length":5014,"saved":false}
{"ts":1351119300719,"patch":[[{"diffs":[[0,"tNode, i"],[-1,"e"],[0,", j));\n "]],"start1":3662,"start2":3662,"length1":17,"length2":16}]],"length":5013,"saved":false}
{"ts":1351119306992,"patch":[[{"diffs":[[0,"rubixState, "],[-1,"parentN"],[1,"n"],[0,"ode, i, j));"]],"start1":3645,"start2":3645,"length1":31,"length2":25}]],"length":5007,"saved":false}
{"ts":1351119328188,"patch":[[{"diffs":[[0,"bixNode("],[-1,"parentNode.rubix"],[1,"node."],[0,"State, n"]],"start1":3626,"start2":3626,"length1":32,"length2":21}]],"length":4996,"saved":false}
{"ts":1351119346131,"patch":[[{"diffs":[[0,"opyState)\n{\n"],[1,"    this.rubixState = RubixState.copy(state);\n"],[0,"    // Handl"]],"start1":891,"start2":891,"length1":24,"length2":70}]],"length":5042,"saved":false}
{"ts":1351119350342,"patch":[[{"diffs":[[0,"opy(state);\n"],[1,"    /*\n"],[0,"    // Handl"]],"start1":937,"start2":937,"length1":24,"length2":31},{"diffs":[[0," \n    }\n    "],[1,"*/"],[0,"\n    this.no"]],"start1":1244,"start2":1244,"length1":24,"length2":26}]],"length":5051,"saved":false}
{"ts":1351119359480,"patch":[[{"diffs":[[0,"));\n            "],[1,"/*"],[0,"successors.push("]],"start1":3711,"start2":3711,"length1":32,"length2":34},{"diffs":[[0,"), node, i, j));"],[1,"*/"],[0,"\n        }   \n  "]],"start1":3814,"start2":3814,"length1":32,"length2":34}]],"length":5055,"saved":false}
{"ts":1351119365407,"patch":[[{"diffs":[[0,"de(node."],[1,"rubix"],[0,"State, n"]],"start1":3686,"start2":3686,"length1":16,"length2":21}]],"length":5060,"saved":false}
{"ts":1351119374388,"patch":[[{"diffs":[[0,"rent, face, rots"],[1,")//"],[0,",createCopyState"]],"start1":722,"start2":722,"length1":32,"length2":35}]],"length":5063,"saved":false}
{"ts":1351119379057,"patch":[[{"diffs":[[0,"ce, rots"],[1,");//"],[0,",createC"]],"start1":790,"start2":790,"length1":16,"length2":20}]],"length":5067,"saved":false}
{"ts":1351119383896,"patch":[[{"diffs":[[0,"ce, rots"],[1,")//"],[0,", create"]],"start1":881,"start2":881,"length1":16,"length2":19}]],"length":5070,"saved":false}
{"ts":1351120152874,"patch":[[{"diffs":[[0,"ce, rots"],[-1,")//"],[0,",createC"]],"start1":730,"start2":730,"length1":19,"length2":16},{"diffs":[[0,"rots"],[-1,");//"],[0,",cre"]],"start1":791,"start2":791,"length1":12,"length2":8},{"diffs":[[0,"rots"],[-1,")//"],[0,", cr"]],"start1":878,"start2":878,"length1":11,"length2":8},{"diffs":[[0,")\n{\n"],[-1,"    this.rubixState = RubixState.copy(state);\n    /*\n"],[0,"    "]],"start1":899,"start2":899,"length1":61,"length2":8},{"diffs":[[0,"  {\n"],[-1,"       // console.log(\"copyState\",state);\n"],[0,"    "]],"start1":954,"start2":954,"length1":50,"length2":8},{"diffs":[[0," \n    }\n    "],[-1,"*/"],[0,""],[1,""],[0,"\n    this.no"]],"start1":1149,"start2":1149,"length1":26,"length2":24},{"diffs":[[0,"bixNode("],[-1,"n"],[1,"parentN"],[0,"ode.rubi"]],"start1":3584,"start2":3584,"length1":17,"length2":23},{"diffs":[[0,"xState, "],[-1,"node"],[1,"parent"],[0,", i, j))"]],"start1":3607,"start2":3607,"length1":20,"length2":22},{"diffs":[[0,"        "],[-1,"/*"],[0,"successo"]],"start1":3635,"start2":3635,"length1":18,"length2":16},{"diffs":[[0," i, j));"],[-1,"*/"],[0,"\n       "]],"start1":3736,"start2":3736,"length1":18,"length2":16}]],"length":4967,"saved":false}
{"ts":1351120163484,"patch":[[{"diffs":[[0,"  {\n"],[-1,"            successors.push(new RubixNode(parentNode.rubixState, parent, i, j));\n"],[0,"    "]],"start1":3546,"start2":3546,"length1":89,"length2":8}]],"length":4886,"saved":false}
{"ts":1351120178610,"patch":[[{"diffs":[[0,"rent,face, rots,"],[1," "],[0,"createCopyState)"]],"start1":780,"start2":780,"length1":32,"length2":33}]],"length":4887,"saved":false}
{"ts":1351120179654,"patch":[[{"diffs":[[0,"e, rots,"],[1," "],[0,"createCo"]],"start1":731,"start2":731,"length1":16,"length2":17}]],"length":4888,"saved":false}
{"ts":1351120197557,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"RubixNod"]],"start1":4508,"start2":4508,"length1":18,"length2":16}]],"length":4886,"saved":false}
{"ts":1351120453731,"patch":[[{"diffs":[[0,"--------"],[1,"\r"],[0,"\n    Rub"]],"start1":8,"start2":8,"length1":16,"length2":17},{"diffs":[[0,"RubixNode.js"],[1,"\r"],[0,"\n    Require"]],"start1":22,"start2":22,"length1":24,"length2":25},{"diffs":[[0,"State.js"],[1,"\r"],[0,"\n    A n"]],"start1":56,"start2":56,"length1":16,"length2":17},{"diffs":[[0,"h trees."],[1,"\r"],[0,"\n   ----"]],"start1":110,"start2":110,"length1":16,"length2":17},{"diffs":[[0,"------*/"],[-1,"\n"],[1,"\r\n\r"],[0,"\nRubixNo"]],"start1":131,"start2":131,"length1":17,"length2":19},{"diffs":[[0,"ol = [];"],[1,"\r"],[0,"\nRubixNo"]],"start1":159,"start2":159,"length1":16,"length2":17},{"diffs":[[0,"ling = {"],[1,"\r"],[0,"\n    \"0\""]],"start1":186,"start2":186,"length1":16,"length2":17},{"diffs":[[0,"  \"0\":4,"],[1,"\r"],[0,"\n    \"1\""]],"start1":198,"start2":198,"length1":16,"length2":17},{"diffs":[[0,"  \"1\":3,"],[1,"\r"],[0,"\n    \"2\""]],"start1":210,"start2":210,"length1":16,"length2":17},{"diffs":[[0,"   \"2\":5"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/**"],[1,"\r"],[0,"\n * Defi"]],"start1":221,"start2":221,"length1":24,"length2":28},{"diffs":[[0,"'s cube."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":318,"start2":318,"length1":20,"length2":22},{"diffs":[[0,"by the node."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @param p"]],"start1":373,"start2":373,"length1":28,"length2":30},{"diffs":[[0,"ieving the path."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @param face "]],"start1":432,"start2":432,"length1":36,"length2":38},{"diffs":[[0,"ed by an action."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @param rots "]],"start1":493,"start2":493,"length1":36,"length2":38},{"diffs":[[0,"is and face are "],[1,"\r"],[0,"\n * supplied a r"]],"start1":577,"start2":577,"length1":32,"length2":33},{"diffs":[[0,"tion occurs)"],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @param c"]],"start1":613,"start2":613,"length1":28,"length2":30},{"diffs":[[0," state. "],[1,"\r"],[0,"\n */"],[1,"\r"],[0,"\nfunctio"]],"start1":706,"start2":706,"length1":20,"length2":22},{"diffs":[[0,"ent, face, rots,"],[-1," "],[0,"createCopyState)"]],"start1":750,"start2":750,"length1":33,"length2":32},{"diffs":[[0,"teCopyState)"],[1,"\r"],[0,"\n{"],[1,"\r"],[0,"\n    this.in"]],"start1":770,"start2":770,"length1":26,"length2":28},{"diffs":[[0,"rent,face, rots,"],[-1," "],[0,"createCopyState)"]],"start1":809,"start2":809,"length1":33,"length2":32},{"diffs":[[0,"    "],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\nRub"]],"start1":842,"start2":842,"length1":11,"length2":14},{"diffs":[[0,"pyState)"],[1,"\r"],[0,"\n{"],[1,"\r"],[0,"\n    // "]],"start1":924,"start2":924,"length1":18,"length2":20},{"diffs":[[0,"e state."],[1,"\r"],[0,"\n    if("]],"start1":953,"start2":953,"length1":16,"length2":17},{"diffs":[[0,"pyState)"],[1,"\r"],[0,"\n    {"],[1,"\r\n       // console.log(\"copyState\",state);\r"],[0,"\n       "]],"start1":978,"start2":978,"length1":22,"length2":67},{"diffs":[[0,"ate.copy(state);"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    else if(thi"]],"start1":1071,"start2":1071,"length1":38,"length2":40},{"diffs":[[0,"ixState)"],[1,"\r"],[0,"\n    {  "]],"start1":1116,"start2":1116,"length1":16,"length2":17},{"diffs":[[0,")\r\n    {        "],[1,"\r"],[0,"\n        this.ru"]],"start1":1123,"start2":1123,"length1":32,"length2":33},{"diffs":[[0,"(state);"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    els"]],"start1":1168,"start2":1168,"length1":22,"length2":24},{"diffs":[[0,"\n    }\r\n    else"],[1,"\r"],[0,"\n    {"],[1,"\r"],[0,"\n        this.ru"]],"start1":1177,"start2":1177,"length1":38,"length2":40},{"diffs":[[0,"ate;    "],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    thi"]],"start1":1230,"start2":1230,"length1":27,"length2":30},{"diffs":[[0," = null;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    // "]],"start1":1272,"start2":1272,"length1":17,"length2":19},{"diffs":[[0,"upplied."],[1,"\r"],[0,"\n    if("]],"start1":1315,"start2":1315,"length1":16,"length2":17},{"diffs":[[0,"s >= 0 )"],[1,"\r"],[0,"\n    {"],[1,"\r"],[0,"\n       "]],"start1":1348,"start2":1348,"length1":22,"length2":24},{"diffs":[[0," | rots;"],[1,"\r"],[0,"\n       "]],"start1":1409,"start2":1409,"length1":16,"length2":17},{"diffs":[[0,";   "],[1,"\r"],[0,"\n    }  "],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n   "]],"start1":1473,"start2":1473,"length1":21,"length2":24},{"diffs":[[0," parent;"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if "]],"start1":1515,"start2":1515,"length1":26,"length2":29},{"diffs":[[0,"(parent)"],[1,"\r"],[0,"\n    {  "]],"start1":1544,"start2":1544,"length1":16,"length2":17},{"diffs":[[0,")\r\n    {        "],[1,"\r"],[0,"\n        this.de"]],"start1":1551,"start2":1551,"length1":32,"length2":33},{"diffs":[[0,"pth + 1;"],[1,"\r"],[0,"\n       "]],"start1":1599,"start2":1599,"length1":16,"length2":17},{"diffs":[[0,"is.depth"],[-1," "],[1,"; //"],[0,"+ CubeHe"]],"start1":1629,"start2":1629,"length1":17,"length2":20},{"diffs":[[0,"xState);"],[-1,"\n"],[1,"\r\n\r"],[0,"\n       "]],"start1":1677,"start2":1677,"length1":17,"length2":19},{"diffs":[[0,"t.rc ++;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    els"]],"start1":1702,"start2":1702,"length1":22,"length2":24},{"diffs":[[0,"\n    }\r\n    else"],[1,"\r"],[0,"\n    {"],[1,"\r"],[0,"\n        this.de"]],"start1":1711,"start2":1711,"length1":38,"length2":40},{"diffs":[[0,"s.depth = 0;"],[1,"\r"],[0,"\n        thi"]],"start1":1747,"start2":1747,"length1":24,"length2":25},{"diffs":[[0,"his.fn ="],[1,"0;//"],[0," CubeHeu"]],"start1":1770,"start2":1770,"length1":16,"length2":20},{"diffs":[[0,"xState);"],[1,"\r"],[0,"\n       "]],"start1":1817,"start2":1817,"length1":16,"length2":17},{"diffs":[[0,"= 0;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/**"],[1,"\r"],[0,"\n * "]],"start1":1843,"start2":1843,"length1":22,"length2":27},{"diffs":[[0," handles"],[1,"\r"],[0,"\n * empt"]],"start1":1945,"start2":1945,"length1":16,"length2":17},{"diffs":[[0,"s empty."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":1985,"start2":1985,"length1":20,"length2":22},{"diffs":[[0,"ferent node."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @param p"]],"start1":2064,"start2":2064,"length1":28,"length2":30},{"diffs":[[0,"he path."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":2140,"start2":2140,"length1":20,"length2":22},{"diffs":[[0," action."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":2201,"start2":2201,"length1":20,"length2":22},{"diffs":[[0,"ace are "],[1,"\r"],[0,"\n * supp"]],"start1":2285,"start2":2285,"length1":16,"length2":17},{"diffs":[[0," occurs)"],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @ret"]],"start1":2317,"start2":2317,"length1":20,"length2":22},{"diffs":[[0,"ed node."],[1,"\r"],[0,"\n */"],[1,"\r"],[0,"\nRubixNo"]],"start1":2361,"start2":2361,"length1":20,"length2":22},{"diffs":[[0,"e, rots)"],[1,"\r"],[0,"\n{"],[1,"\r"],[0,"\n    if("]],"start1":2438,"start2":2438,"length1":18,"length2":20},{"diffs":[[0,"if(node)"],[1,"\r"],[0,"\n    {"],[1,"\r"],[0,"\n       "]],"start1":2455,"start2":2455,"length1":22,"length2":24},{"diffs":[[0,", rots);"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    els"]],"start1":2528,"start2":2528,"length1":22,"length2":24},{"diffs":[[0,"    else"],[1,"\r"],[0,"\n    {"],[1,"\r"],[0,"\n       "]],"start1":2545,"start2":2545,"length1":22,"length2":24},{"diffs":[[0,"ue);"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n   "]],"start1":2639,"start2":2639,"length1":19,"length2":22},{"diffs":[[0,"rn node;"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/**"],[1,"\r"],[0,"\n * Retr"]],"start1":2666,"start2":2666,"length1":24,"length2":28},{"diffs":[[0,"low the "],[1,"\r"],[0,"\n * invo"]],"start1":2756,"start2":2756,"length1":16,"length2":17},{"diffs":[[0,"s state."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":2783,"start2":2783,"length1":20,"length2":22},{"diffs":[[0,"ors for."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @ret"]],"start1":2841,"start2":2841,"length1":20,"length2":22},{"diffs":[[0,"s found "],[1,"\r"],[0,"\n *     "]],"start1":2926,"start2":2926,"length1":16,"length2":17},{"diffs":[[0,"n array."],[1,"\r"],[0,"\n */"],[1,"\r"],[0,"\nRubixNo"]],"start1":2994,"start2":2994,"length1":20,"length2":22},{"diffs":[[0,"nction(node)"],[1,"\r"],[0,"\n{"],[1,"\r"],[0,"\n    //Initi"]],"start1":3037,"start2":3037,"length1":26,"length2":28},{"diffs":[[0,"eholders"],[1,"\r"],[0,"\n    var"]],"start1":3075,"start2":3075,"length1":16,"length2":17},{"diffs":[[0,"rs = [];"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    // "]],"start1":3101,"start2":3101,"length1":21,"length2":23},{"diffs":[[0,"ube and "],[1,"\r"],[0,"\n    // "]],"start1":3189,"start2":3189,"length1":16,"length2":17},{"diffs":[[0,"rd them."],[1,"\r"],[0,"\n    for"]],"start1":3210,"start2":3210,"length1":16,"length2":17},{"diffs":[[0," 6; i++)"],[1,"\r"],[0,"\n    {"],[1,"\r"],[0,"\n       "]],"start1":3242,"start2":3242,"length1":22,"length2":24},{"diffs":[[0,"     /* "],[1,"\r"],[0,"\n       "]],"start1":3262,"start2":3262,"length1":16,"length2":17},{"diffs":[[0,"ndition."],[1,"\r"],[0,"\n       "]],"start1":3354,"start2":3354,"length1":16,"length2":17},{"diffs":[[0,"rotating"],[1,"\r"],[0,"\n       "]],"start1":3442,"start2":3442,"length1":16,"length2":17},{"diffs":[[0,"g faces."],[1,"\r"],[0,"\n       "]],"start1":3470,"start2":3470,"length1":16,"length2":17},{"diffs":[[0,"      */"],[1,"\r"],[0,"\n       "]],"start1":3483,"start2":3483,"length1":16,"length2":17},{"diffs":[[0," >> 4 ||"],[1,"\r"],[0,"\n       "]],"start1":3545,"start2":3545,"length1":16,"length2":17},{"diffs":[[0," == i)))"],[1,"\r"],[0,"\n       "]],"start1":3623,"start2":3623,"length1":16,"length2":17},{"diffs":[[0," i)))\r\n        {"],[1,"\r"],[0,"\n            con"]],"start1":3626,"start2":3626,"length1":32,"length2":33},{"diffs":[[0,"ontinue;"],[1,"\r"],[0,"\n       "]],"start1":3657,"start2":3657,"length1":16,"length2":17},{"diffs":[[0,"inue;\r\n        }"],[1,"\r"],[0,"\n        \n      "]],"start1":3660,"start2":3660,"length1":32,"length2":33},{"diffs":[[0,"     }\r\n        "],[1,"\r"],[0,"\n        for(var"]],"start1":3670,"start2":3670,"length1":32,"length2":33},{"diffs":[[0," 4; j++)"],[1,"\r"],[0,"\n       "]],"start1":3714,"start2":3714,"length1":16,"length2":17},{"diffs":[[0," j++)\r\n        {"],[1,"\r"],[0,"\n            suc"]],"start1":3717,"start2":3717,"length1":32,"length2":33},{"diffs":[[0,"rs.push("],[1,"\r"],[0,"\n       "]],"start1":3755,"start2":3755,"length1":16,"length2":17},{"diffs":[[0," i, j));"],[1,"\r"],[0,"\n       "]],"start1":3841,"start2":3841,"length1":16,"length2":17},{"diffs":[[0,"    }   "],[1,"\r"],[0,"\n    }  "]],"start1":3855,"start2":3855,"length1":16,"length2":17},{"diffs":[[0," \r\n    }    "],[1,"\r"],[0,"\n    return "]],"start1":3862,"start2":3862,"length1":24,"length2":25},{"diffs":[[0,"cessors;"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/**"],[1,"\r"],[0,"\n * Wipe"]],"start1":3890,"start2":3890,"length1":24,"length2":28},{"diffs":[[0,"r reuse."],[1,"\r"],[0,"\n * If t"]],"start1":3984,"start2":3984,"length1":16,"length2":17},{"diffs":[[0,"cade up."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":4059,"start2":4059,"length1":20,"length2":22},{"diffs":[[0," remove."],[1,"\r"],[0,"\n */"],[1,"\r"],[0,"\nRubixNo"]],"start1":4100,"start2":4100,"length1":20,"length2":22},{"diffs":[[0,"on(node)"],[1,"\r"],[0,"\n{"],[1,"\r"],[0,"\n    // "]],"start1":4146,"start2":4146,"length1":18,"length2":20},{"diffs":[[0," search."],[1,"\r"],[0,"\n    if("]],"start1":4188,"start2":4188,"length1":16,"length2":17},{"diffs":[[0,"entNode)"],[1,"\r"],[0,"\n    {  "],[1,"\r"],[0,"\n       "]],"start1":4213,"start2":4213,"length1":24,"length2":26},{"diffs":[[0," a wipe."],[1,"\r"],[0,"\n       "]],"start1":4292,"start2":4292,"length1":16,"length2":17},{"diffs":[[0,"de.rc--;"],[1,"\r"],[0,"\n       "]],"start1":4323,"start2":4323,"length1":16,"length2":17},{"diffs":[[0,"h !== 0)"],[1,"\r"],[0,"\n       "]],"start1":4392,"start2":4392,"length1":16,"length2":17},{"diffs":[[0,"       {"],[1,"\r"],[0,"\n       "]],"start1":4403,"start2":4403,"length1":16,"length2":17},{"diffs":[[0,"ntNode);    "],[1,"\r"],[0,"\n        }\n "]],"start1":4457,"start2":4457,"length1":24,"length2":25},{"diffs":[[0,"       }"],[1,"\r"],[0,"\n       "]],"start1":4472,"start2":4472,"length1":16,"length2":17},{"diffs":[[0," }\r\n        "],[1,"\r"],[0,"\n        // "]],"start1":4478,"start2":4478,"length1":24,"length2":25},{"diffs":[[0,"ool."],[-1,"\n        node.rubixState = null;"],[1,"\r"],[0,"\n   "]],"start1":4536,"start2":4536,"length1":40,"length2":9},{"diffs":[[0,"ull;    "],[1,"\r"],[0,"\n       "]],"start1":4569,"start2":4569,"length1":16,"length2":17},{"diffs":[[0,"deAction = null;"],[1,"\r"],[0,"\n        node.rc"]],"start1":4594,"start2":4594,"length1":32,"length2":33},{"diffs":[[0," node.rc = null;"],[1,"\r"],[0,"\n        node.de"]],"start1":4619,"start2":4619,"length1":32,"length2":33},{"diffs":[[0,"de.depth = null;"],[1,"\r"],[0,"\n        node.fn"]],"start1":4647,"start2":4647,"length1":32,"length2":33},{"diffs":[[0," = null;"],[1,"\r"],[0,"\n       "]],"start1":4680,"start2":4680,"length1":16,"length2":17},{"diffs":[[0,"h(node);"],[1,"\r"],[0,"\n    }  "]],"start1":4720,"start2":4720,"length1":16,"length2":17},{"diffs":[[0,"    "],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/**"],[1,"\r"],[0,"\n * "]],"start1":4735,"start2":4735,"length1":16,"length2":20},{"diffs":[[0,"ed node."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @par"]],"start1":4812,"start2":4812,"length1":20,"length2":22},{"diffs":[[0,"ed from."],[1,"\r"],[0,"\n * "],[1,"\r"],[0,"\n * @ret"]],"start1":4883,"start2":4883,"length1":20,"length2":22},{"diffs":[[0,"ations\"."],[1,"\r"],[0,"\n */"],[1,"\r"],[0,"\nRubixNo"]],"start1":4927,"start2":4927,"length1":20,"length2":22},{"diffs":[[0,"on(node)"],[1,"\r"],[0,"\n{"],[1,"\r"],[0,"\n  retur"]],"start1":4979,"start2":4979,"length1":18,"length2":20},{"diffs":[[0,");  "],[1,"\r"],[0,"\n};"],[-1,"\n"]],"start1":5073,"start2":5073,"length1":8,"length2":8}]],"length":5081,"saved":false}
{"ts":1351120460107,"patch":[[{"diffs":[[0,"epth"],[-1,"; //"],[1," "],[0,"+ Cu"]],"start1":1633,"start2":1633,"length1":12,"length2":9}]],"length":5078,"saved":false}
{"ts":1351120465245,"patch":[[{"diffs":[[0,"s.fn =0;"],[-1,"//"],[0," CubeHeu"]],"start1":1769,"start2":1769,"length1":18,"length2":16}]],"length":5076,"saved":false}
{"ts":1351120466383,"patch":[[{"diffs":[[0,"is.fn =0"],[-1,";"],[0," CubeHeu"]],"start1":1768,"start2":1768,"length1":17,"length2":16}]],"length":5075,"saved":false}
{"ts":1351120467967,"patch":[[{"diffs":[[0,"his.fn ="],[-1,"0"],[0," CubeHeu"]],"start1":1767,"start2":1767,"length1":17,"length2":16}]],"length":5074,"saved":false}
{"ts":1351120473705,"patch":[[{"diffs":[[0," {\r\n"],[-1,"       // console.log(\"copyState\",state);\r\n"],[0,"    "]],"start1":991,"start2":991,"length1":51,"length2":8}]],"length":5031,"saved":false}
{"ts":1351131282163,"patch":[[{"diffs":[[0," = [];\r\n"],[1,"RubixNode.statePool = [];\r\n\r\n"],[0,"RubixNod"]],"start1":161,"start2":161,"length1":16,"length2":45}]],"length":5060,"saved":false}
{"ts":1351131304147,"patch":[[{"diffs":[[0,"yState)\r\n{\r\n"],[1,"        this.rubixState = state;\r\n\r\n"],[0,"    // Handl"]],"start1":954,"start2":954,"length1":24,"length2":60}]],"length":5096,"saved":false}
{"ts":1351131306551,"patch":[[{"diffs":[[0,"te)\r\n{\r\n"],[-1,"    "],[0,"    this"]],"start1":958,"start2":958,"length1":20,"length2":16}]],"length":5092,"saved":false}
{"ts":1351131330113,"patch":[[{"diffs":[[0,"bixNode("],[1,"RubixState.copy("],[0,"parentNo"]],"start1":2594,"start2":2594,"length1":16,"length2":32}]],"length":5108,"saved":false}
{"ts":1351131333769,"patch":[[{"diffs":[[0,"e.rubixState"],[1,")"],[0,", parentNode"]],"start1":2627,"start2":2627,"length1":24,"length2":25}]],"length":5109,"saved":false}
{"ts":1351131355610,"patch":[[{"diffs":[[0," = function("],[1,"state,"],[0,"node, parent"]],"start1":2416,"start2":2416,"length1":24,"length2":30},{"diffs":[[0,"ode("],[-1,"RubixState.copy(parentNode.rubixState)"],[0,", pa"]],"start1":2604,"start2":2604,"length1":46,"length2":8}]],"length":5077,"saved":false}
{"ts":1351131357645,"patch":[[{"diffs":[[0,"n(state,"],[1," "],[0,"node, pa"]],"start1":2426,"start2":2426,"length1":16,"length2":17}]],"length":5078,"saved":false}
{"ts":1351131360901,"patch":[[{"diffs":[[0,"bixNode("],[1,"state"],[0,", parent"]],"start1":2601,"start2":2601,"length1":16,"length2":21}]],"length":5083,"saved":false}
{"ts":1351131365413,"patch":[[{"diffs":[[0,"nit("],[-1,"parentNode.rubixS"],[1,"s"],[0,"tate"]],"start1":2504,"start2":2504,"length1":25,"length2":9}]],"length":5067,"saved":false}
{"ts":1351131389084,"patch":[[{"diffs":[[0," pool.\r\n"],[1,"        node.rubixState = null;\r\n"],[0,"        "]],"start1":4520,"start2":4520,"length1":16,"length2":49}]],"length":5100,"saved":false}
{"ts":1351131410109,"patch":[[{"diffs":[[0," pool.\r\n"],[1,"        RubixNode.statePool.push(node.rubixState);\r\n"],[0,"        "]],"start1":4520,"start2":4520,"length1":16,"length2":68}]],"length":5152,"saved":false}
{"ts":1351131421660,"patch":[[{"diffs":[[0,"ateNode("],[1,"RubixState.copy(parentNode.rubixState),"],[0,"RubixNod"]],"start1":3788,"start2":3788,"length1":16,"length2":55}]],"length":5191,"saved":false}
{"ts":1351131424189,"patch":[[{"diffs":[[0,"xState),"],[1,"\r\n                    "],[0,"RubixNod"]],"start1":3827,"start2":3827,"length1":16,"length2":38}]],"length":5213,"saved":false}
{"ts":1351131429317,"patch":[[{"diffs":[[0,"te.copy("],[-1,"parentN"],[1,"n"],[0,"ode.rubi"]],"start1":3804,"start2":3804,"length1":23,"length2":17}]],"length":5207,"saved":false}
{"ts":1351131517587,"patch":[[{"diffs":[[0,"ateNode("],[1,"RubixNode.statePool.pop(),"],[0,"RubixSta"]],"start1":3788,"start2":3788,"length1":16,"length2":42}]],"length":5233,"saved":false}
{"ts":1351131522744,"patch":[[{"diffs":[[0,"p(),"],[-1,"RubixState.copy(node.rubixState)"],[0,",\r\n "]],"start1":3818,"start2":3818,"length1":40,"length2":8}]],"length":5201,"saved":false}
{"ts":1351131524879,"patch":[[{"diffs":[[0,"l.pop(),"],[-1,","],[0,"\r\n      "]],"start1":3814,"start2":3814,"length1":17,"length2":16}]],"length":5200,"saved":false}
{"ts":1351131566740,"patch":[[{"diffs":[[0,", rots)\r\n{\r\n"],[1,"    if(state)\r\n    {\r\n        \r\n    }\r\n"],[0,"    if(node)"]],"start1":2457,"start2":2457,"length1":24,"length2":63}]],"length":5239,"saved":false}
{"ts":1351131568742,"patch":[[{"diffs":[[0," {\r\n        "],[1,"RubixState.copy(node.rubixState)    "],[0,"\r\n    }\r\n   "]],"start1":2487,"start2":2487,"length1":24,"length2":60},{"diffs":[[0,"   \r\n    }\r\n"],[1,"    \r\n"],[0,"    if(node)"]],"start1":2532,"start2":2532,"length1":24,"length2":30}]],"length":5281,"saved":false}
{"ts":1351131574678,"patch":[[{"diffs":[[0,"\n    if("],[1,"!"],[0,"state)\r\n"]],"start1":2468,"start2":2468,"length1":16,"length2":17},{"diffs":[[0,"ixState)"],[1,";"],[0,"    \r\n  "]],"start1":2524,"start2":2524,"length1":16,"length2":17}]],"length":5283,"saved":false}
{"ts":1351131591667,"patch":[[{"diffs":[[0,"\r\n    {\r\n       "],[1," state ="],[0," RubixState.copy"]],"start1":2483,"start2":2483,"length1":32,"length2":40}]],"length":5291,"saved":false}
{"ts":1351131626812,"patch":[[{"diffs":[[0,"te.copy("],[-1,"n"],[1,"parentN"],[0,"ode.rubi"]],"start1":2516,"start2":2516,"length1":17,"length2":23}]],"length":5297,"saved":false}
{"ts":1351131770645,"patch":[[{"diffs":[[0,"ode."],[-1,"statePool = [];\r\n\r\nRubixNode."],[0,""],[1,""],[0,"face"]],"start1":175,"start2":175,"length1":37,"length2":8},{"diffs":[[0,"\n{\r\n"],[-1,"    this.rubixState = state;\r\n\r\n"],[0,"    "]],"start1":933,"start2":933,"length1":40,"length2":8},{"diffs":[[0,"yState)\r\n    {\r\n"],[1,"       // console.log(\"copyState\",state);\r\n"],[0,"        this.rub"]],"start1":979,"start2":979,"length1":32,"length2":75},{"diffs":[[0,"unction("],[-1,"state, "],[0,"node, pa"]],"start1":2402,"start2":2402,"length1":23,"length2":16},{"diffs":[[0," if("],[-1,"!stat"],[1,"nod"],[0,"e)\r\n"]],"start1":2447,"start2":2447,"length1":13,"length2":11},{"diffs":[[0,"    "],[-1,"state = RubixState.copy(parentNode.rubixState);    \r\n    }\r\n    \r\n    if(node)\r\n    {\r\n        node.init(s"],[1,"node.init(parentNode.rubixS"],[0,"tate"]],"start1":2469,"start2":2469,"length1":114,"length2":35},{"diffs":[[0,"= new RubixNode("],[-1,"s"],[1,"parentNode.rubixS"],[0,"tate, parentNode"]],"start1":2568,"start2":2568,"length1":33,"length2":49},{"diffs":[[0,"ode."],[-1,"statePool.pop(),\r\n                    RubixNode."],[0,""],[1,""],[0,"node"]],"start1":3809,"start2":3809,"length1":56,"length2":8},{"diffs":[[0,"l.\r\n"],[-1,"        RubixNode.statePool.push(node.rubixState);\r\n"],[0,"    "]],"start1":4531,"start2":4531,"length1":60,"length2":8},{"diffs":[[0," null;\r\n        "],[-1,""],[0,""],[1,"//"],[0,"RubixNode.nodePo"]],"start1":4708,"start2":4708,"length1":32,"length2":34},{"diffs":[[0," & 7);  \r\n};"],[-1,""],[0,""],[1,"\r\n"]],"start1":5097,"start2":5097,"length1":12,"length2":14}]],"length":5111,"saved":false}
{"ts":1351134533669,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"RubixNod"]],"start1":4716,"start2":4716,"length1":18,"length2":16}]],"length":5109,"saved":false}
{"ts":1351134632709,"patch":[[{"diffs":[[0," null;\r\n        "],[1,"//"],[0,"RubixNode.nodePo"]],"start1":4708,"start2":4708,"length1":32,"length2":34}]],"length":5111,"saved":false}
{"ts":1351136395108,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"RubixNod"]],"start1":4716,"start2":4716,"length1":18,"length2":16}]],"length":5109,"saved":false}
{"ts":1351136397624,"patch":[[{"diffs":[[0,"l.\r\n        "],[1,"//"],[0,"node.rubixSt"]],"start1":4531,"start2":4531,"length1":24,"length2":26}]],"length":5111,"saved":false}
{"ts":1351136427185,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"node.rub"]],"start1":4535,"start2":4535,"length1":18,"length2":16},{"diffs":[[0," null;\r\n        "],[1,"//"],[0,"RubixNode.nodePo"]],"start1":4708,"start2":4708,"length1":32,"length2":34}]],"length":5111,"saved":false}
{"ts":1351137234980,"patch":[[{"diffs":[[0,"l;\r\n"],[-1,"        //RubixNode.nodePool.push(node);\r\n"],[0,"    "]],"start1":4712,"start2":4712,"length1":50,"length2":8}]],"length":5069,"saved":false}
{"ts":1351137260819,"patch":[[{"diffs":[[0,"rs.push("],[1," new RubixNode(parentNode.rubixState, parentNode, face, rots,true));"],[0,"\r\n      "]],"start1":3748,"start2":3748,"length1":16,"length2":84}]],"length":5137,"saved":false}
{"ts":1351137284770,"patch":[[{"diffs":[[0,"( new RubixNode("],[-1,"parentN"],[1,"n"],[0,"ode.rubixState, "]],"start1":3755,"start2":3755,"length1":39,"length2":33},{"diffs":[[0,"ode.rubixState, "],[-1,"parentN"],[1,"n"],[0,"ode, face, rots,"]],"start1":3772,"start2":3772,"length1":39,"length2":33}]],"length":5125,"saved":false}
{"ts":1351137293970,"patch":[[{"diffs":[[0,", node, "],[-1,"face, rots,true"],[1,"i, j"],[0,"));\r\n   "]],"start1":3786,"start2":3786,"length1":31,"length2":20}]],"length":5114,"saved":false}
{"ts":1351137297764,"patch":[[{"diffs":[[0,"j));"],[-1,"\r\n                RubixNode.buildAndRotateNode(RubixNode.nodePool.pop(), node, i, j))"],[0,";\r\n "]],"start1":3797,"start2":3797,"length1":93,"length2":8}]],"length":5029,"saved":false}
{"ts":1351137300343,"patch":[[{"diffs":[[0," i, j));"],[-1,";"],[0,"\r\n      "]],"start1":3793,"start2":3793,"length1":17,"length2":16}]],"length":5028,"saved":false}
{"ts":1351137304731,"patch":[[{"diffs":[[0,"rs.push("],[-1," "],[0,"new Rubi"]],"start1":3748,"start2":3748,"length1":17,"length2":16}]],"length":5027,"saved":false}
{"ts":1351137310248,"patch":[[{"diffs":[[0,"ce, rots"],[-1,",createCopyState"],[0,")\r\n{\r\n  "]],"start1":757,"start2":757,"length1":32,"length2":16}]],"length":5011,"saved":false}
{"ts":1351137313118,"patch":[[{"diffs":[[0,"* \r\n"],[-1," * @param createCopyState A flag that will toggle a deep copy the supplied state. \r\n"],[0," */\r"]],"start1":628,"start2":628,"length1":92,"length2":8}]],"length":4927,"saved":false}
{"ts":1351137326863,"patch":[[{"diffs":[[0,"bixNode("],[1,"RubixState.copy("],[0,"parentNo"]],"start1":2476,"start2":2476,"length1":16,"length2":32},{"diffs":[[0,"e.rubixState"],[1,")"],[0,", parentNode"]],"start1":2509,"start2":2509,"length1":24,"length2":25}]],"length":4944,"saved":false}
{"ts":1351137328482,"patch":[[{"diffs":[[0,"State), "],[1,"\r\n            "],[0,"parentNo"]],"start1":2516,"start2":2516,"length1":16,"length2":30}]],"length":4958,"saved":false}
{"ts":1351137347145,"patch":[[{"diffs":[[0,"bixNode("],[1,"RubixState.copy("],[0,"node.rub"]],"start1":3693,"start2":3693,"length1":16,"length2":32},{"diffs":[[0,"bixState"],[1,")"],[0,", node, "]],"start1":3724,"start2":3724,"length1":16,"length2":17}]],"length":4975,"saved":false}
{"ts":1351137356889,"patch":[[{"diffs":[[0,"State), "],[1,"\r\n            "],[0,"node, i,"]],"start1":3727,"start2":3727,"length1":16,"length2":30}]],"length":4989,"saved":false}
{"ts":1351137358066,"patch":[[{"diffs":[[0,"            "],[1,"    "],[0,"node, i, j))"]],"start1":3737,"start2":3737,"length1":24,"length2":28}]],"length":4993,"saved":false}
{"ts":1351137362670,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * Builds a node from the supplied details. To be used with the nodePool as it handles\r\n * empty nodes when the pool is empty.\r\n * \r\n * @param node The node that will be modified to represent a different node.\r\n * \r\n * @param parentNode The parent node used in retrieving the path.\r\n * \r\n * @param face The face that was rotated by an action.\r\n * \r\n * @param rots The rotations caried out in the action. (if this and face are \r\n * supplied a rotation occurs)\r\n * \r\n * @return The modified/created node.\r\n */\r\nRubixNode.buildAndRotateNode  = function(node, parentNode, face, rots)\r\n{\r\n    if(node)\r\n    {\r\n        node.init(parentNode.rubixState,parentNode, face, rots);\r\n    }\r\n    else\r\n    {\r\n        node = new RubixNode(RubixState.copy(parentNode.rubixState), \r\n            parentNode, face, rots,true);\r\n    }\r\n    \r\n    return node;\r\n};"],[0,"\r\n\r\n"]],"start1":1751,"start2":1751,"length1":855,"length2":8}]],"length":4146,"saved":false}
{"ts":1351137375157,"patch":[[{"diffs":[[0,"    "],[-1,"this.init(state,parent,face, rots,createCopyState);    \r\n}\r\n\r\nRubixNode.prototype.init = function(state, parent, face, rots, createCopyState)\r\n{\r\n"],[0,"    "]],"start1":687,"start2":687,"length1":154,"length2":8},{"diffs":[[0,";\r\n    }"],[1,"   \r\n}\r\n\r\nRubixNode.prototype.init = function(state, parent, face, rots, createCopyState)\r\n{\r\n"],[0,"\r\n};\r\n\r\n"]],"start1":1593,"start2":1593,"length1":16,"length2":110}]],"length":4094,"saved":false}
{"ts":1351137384005,"patch":[[{"diffs":[[0," parent;"],[-1,"\r\n"],[0,"    \r\n  "]],"start1":1269,"start2":1269,"length1":18,"length2":16}]],"length":4092,"saved":false}
{"ts":1351137397245,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"        // Handle the state.\r\n    if(createCopyState)\r\n    {\r\n       // console.log(\"copyState\",state);\r\n        this.rubixState = RubixState.copy(state);\r\n    }\r\n    else if(this.rubixState)\r\n    {        \r\n        this.rubixState.set(state);\r\n    }\r\n    else\r\n    {\r\n    "],[0,"    "]],"start1":683,"start2":683,"length1":281,"length2":8},{"diffs":[[0,"e;    \r\n    "],[-1,"}"],[0,"\r\n    \r\n    "]],"start1":713,"start2":713,"length1":25,"length2":24}]],"length":3818,"saved":false}
{"ts":1351137399004,"patch":[[{"diffs":[[0,"    \r\n    \r\n"],[-1,"    \r\n"],[0,"    this.nod"]],"start1":715,"start2":715,"length1":30,"length2":24}]],"length":3812,"saved":false}
{"ts":1351137405243,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixNode.nodePool = [];\r\n"],[0,"Rubi"]],"start1":139,"start2":139,"length1":34,"length2":8}]],"length":3786,"saved":false}
{"ts":1351137414757,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixNode.prototype.init = function(state, parent, face, rots, createCopyState)\r\n{\r\n\r\n};\r\n\r\n\r\n\r\n"],[0,"/**\r"]],"start1":1299,"start2":1299,"length1":104,"length2":8}]],"length":3690,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1351193186829,"patch":[[{"diffs":[[0,"= state;    "],[-1,"\r\n"],[0,"    \r\n    th"]],"start1":681,"start2":681,"length1":26,"length2":24},{"diffs":[[0," null;\r\n"],[1,"    this.rc = 0;\r\n\r\n"],[0,"\r\n    //"]],"start1":720,"start2":720,"length1":16,"length2":36},{"diffs":[[0,"tate);\r\n"],[-1,"\r\n"],[0,"        "]],"start1":1140,"start2":1140,"length1":18,"length2":16},{"diffs":[[0,"arent.rc"],[-1," "],[0,"++;\r\n   "]],"start1":1157,"start2":1157,"length1":17,"length2":16},{"diffs":[[0," {\r\n"],[-1,"        this.depth = 0;\r\n"],[0,"    "]],"start1":1190,"start2":1190,"length1":33,"length2":8},{"diffs":[[0,"       this."],[-1,"rc"],[1,"depth"],[0," = 0;\r\n    }"]],"start1":1257,"start2":1257,"length1":26,"length2":29},{"diffs":[[0,"\n    }    \r\n"],[1,"    \r\n    node = null;\r\n"],[0,"    return s"]],"start1":2471,"start2":2471,"length1":24,"length2":48},{"diffs":[[0,"de.rc--;"],[1,"            \r\n"],[0,"\r\n      "]],"start1":2954,"start2":2954,"length1":16,"length2":30}]],"length":3721,"saved":false}
{"ts":1351193200840,"patch":[[{"diffs":[[0," = function(node"],[1,", successors"],[0,")\r\n{\r\n    //Init"]],"start1":1646,"start2":1646,"length1":32,"length2":44}]],"length":3733,"saved":false}
{"ts":1351193204952,"patch":[[{"diffs":[[0,"ssor"],[1,"r"],[0,"s)\r\n{"],[-1,"\r\n    //Initialize placeholders\r\n    var successors = [];\r\n"],[0,"    "]],"start1":1669,"start2":1669,"length1":72,"length2":14}]],"length":3675,"saved":false}
{"ts":1351193218042,"patch":[[{"diffs":[[0,"orrs)\r\n{"],[1,"\r\n    //Initialize placeholders\r\n    var successors = [];\r\n"],[0,"    \r\n  "]],"start1":1671,"start2":1671,"length1":16,"length2":75}]],"length":3734,"saved":false}
{"ts":1351193221172,"patch":[[{"diffs":[[0,"node"],[-1,", successorrs"],[0,")\r\n{"]],"start1":1658,"start2":1658,"length1":21,"length2":8}]],"length":3721,"saved":false}
{"ts":1351193224291,"patch":[[{"diffs":[[0," = function(node"],[1,", successors"],[0,")\r\n{\r\n    //Init"]],"start1":1646,"start2":1646,"length1":32,"length2":44}]],"length":3733,"saved":false}
{"ts":1351193240017,"patch":[[{"diffs":[[0,"essors)\r\n{\r\n"],[1,"    if(successors)\r\n"],[0,"    //Initia"]],"start1":1668,"start2":1668,"length1":24,"length2":44}]],"length":3753,"saved":false}
{"ts":1351193243243,"patch":[[{"diffs":[[0,"\n    if("],[1,"!"],[0,"successo"]],"start1":1679,"start2":1679,"length1":16,"length2":17}]],"length":3754,"saved":false}
{"ts":1351193251394,"patch":[[{"diffs":[[0,"ssors)\r\n"],[1,"    {\r\n    "],[0,"    //In"]],"start1":1693,"start2":1693,"length1":16,"length2":27},{"diffs":[[0,"olders\r\n"],[1,"    "],[0,"    var "]],"start1":1735,"start2":1735,"length1":16,"length2":20},{"diffs":[[0," = [];\r\n"],[1,"    }\r\n"],[0,"    \r\n  "]],"start1":1765,"start2":1765,"length1":16,"length2":23}]],"length":3776,"saved":false}
{"ts":1351193267266,"patch":[[{"diffs":[[0,"        "],[-1,"var "],[0,"successo"]],"start1":1743,"start2":1743,"length1":20,"length2":16},{"diffs":[[0,"[];\r\n    }\r\n"],[1,"    elsse\r\n    {\r\n        successors =     \r\n    }\r\n"],[0,"    \r\n    //"]],"start1":1764,"start2":1764,"length1":24,"length2":76}]],"length":3824,"saved":false}
{"ts":1351193271138,"patch":[[{"diffs":[[0,"\n    els"],[-1,"s"],[0,"e\r\n    {"]],"start1":1775,"start2":1775,"length1":17,"length2":16}]],"length":3823,"saved":false}
{"ts":1351193277062,"patch":[[{"diffs":[[0,"sors"],[-1," =     "],[1,".length=0;"],[0,"\r\n  "]],"start1":1807,"start2":1807,"length1":15,"length2":18}]],"length":3826,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351200367294,"patch":[[{"diffs":[[0,"node"],[-1,", successors)\r\n{\r\n    if(!successors)\r\n    {\r\n        //Initialize placeholders\r\n        successors = [];\r\n    }\r\n    else\r\n    {\r\n        successors.length=0;\r\n    }"],[1,")\r\n{\r\n    var successors = [];"],[0,"\r\n  "]],"start1":1658,"start2":1658,"length1":174,"length2":38}]],"length":3690,"saved":false}
{"ts":1351200381240,"patch":[[{"diffs":[[0,"essors;\r\n};\r"],[1,"\n/*\r\n/**\r\n * Retrieves and generates nodes for all possible states that may follow the \r\n * invoking node's state.\r\n * \r\n * @param node The node to retrieve successors for.\r\n * @param successors The Array the successors are to be placed in.\r\n * @return The array of successors for the rubix cube, if a solution is found \r\n *         within the array return the solution alone in an array.\r\n */\r\nRubixNode.getSuccessors = function(node, successors)\r\n{\r\n    successors.length=0;\r\n    \r\n    \r\n    // For each face iterate over the three possible movements for the cube and \r\n    // Record them.\r\n    for(var i = 0; i < 6; i++)\r\n    {\r\n        /* \r\n         * Do the face culling. Prevent redundant face rotations with the first condition.\r\n         * The second condition prevents duplicate states from arising due to rotating\r\n         * opposing faces.\r\n         */\r\n        if(node.nodeAction && (i === node.nodeAction >> 4 ||\r\n            (i > 2  && RubixNode.faceCulling[(node.nodeAction >> 4)] == i)))\r\n        {\r\n            continue;\r\n        }\r\n        \r\n        for(var j = 1; j < 4; j++)\r\n        {\r\n            successors.push(new RubixNode(RubixState.copy(node.rubixState), \r\n                node, i, j));\r\n        }   \r\n    }    \r\n    \r\n    node = null;\r\n};*/\r"],[0,"\n\r\n/**\r\n * W"]],"start1":2491,"start2":2491,"length1":24,"length2":1295}]],"length":4961,"saved":false}
{"ts":1351200385616,"patch":[[{"diffs":[[0,"n an array.\r\n */"],[1,"/*"],[0,"\r\nRubixNode.getS"]],"start1":2880,"start2":2880,"length1":32,"length2":34}]],"length":4963,"saved":false}
{"ts":1351200409907,"patch":[[{"diffs":[[0,"      */\r\n      "],[1,"/*"],[0,"  if(node.nodeAc"]],"start1":3361,"start2":3361,"length1":32,"length2":34}]],"length":4965,"saved":false}
{"ts":1351200423823,"patch":[[{"diffs":[[0,";\r\n};\r\n/"],[-1,"*"],[0,"\r\n"],[1,""],[0,"/**\r\n * "]],"start1":2497,"start2":2497,"length1":19,"length2":18},{"diffs":[[0,"ay.\r\n */"],[-1,"/*"],[0,"\r\nRubixN"]],"start1":2887,"start2":2887,"length1":18,"length2":16},{"diffs":[[0,"\r\n      "],[-1,"/*"],[0,"  if(nod"]],"start1":3366,"start2":3366,"length1":18,"length2":16},{"diffs":[[0,"l;\r\n"],[1,""],[0,"};"],[-1,"*/"],[0,"\r\n\r\n"]],"start1":3764,"start2":3764,"length1":12,"length2":10}]],"length":4958,"saved":false}
{"ts":1351200424978,"patch":[[{"diffs":[[0,"s;\r\n};\r\n"],[-1,"/"],[0,"\r\n/**\r\n "]],"start1":2496,"start2":2496,"length1":17,"length2":16}]],"length":4957,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351212931780,"patch":[[{"diffs":[[0,"\r\n    if"],[1," "],[0,"(face >="]],"start1":789,"start2":789,"length1":16,"length2":17}]],"length":4958,"saved":false}
{"ts":1351212939680,"patch":[[{"diffs":[[0,"\n    \"0\""],[-1,":"],[1," : "],[0,"4,\r\n    "]],"start1":169,"start2":169,"length1":17,"length2":19},{"diffs":[[0,"\n    \"1\""],[-1,":"],[1," : "],[0,"3,\r\n    "]],"start1":183,"start2":183,"length1":17,"length2":19},{"diffs":[[0,"\n    \"2\""],[-1,":"],[1," : "],[0,"5\r\n};\r\n\r"]],"start1":197,"start2":197,"length1":17,"length2":19}]],"length":4964,"saved":false}
{"ts":1351212955364,"patch":[[{"diffs":[[0,"d them.\r\n    for"],[1," "],[0,"(var i = 0; i < "]],"start1":1801,"start2":1801,"length1":32,"length2":33},{"diffs":[[0,"  */\r\n        if"],[1," "],[0,"(node.nodeAction"]],"start1":2078,"start2":2078,"length1":32,"length2":33},{"diffs":[[0,"   \r\n        for"],[1," "],[0,"(var j = 1; j < "]],"start1":2275,"start2":2275,"length1":32,"length2":33}]],"length":4967,"saved":false}
{"ts":1351212961015,"patch":[[{"diffs":[[0,"em.\r\n    for"],[1," "],[0,"(var i = 0; "]],"start1":3099,"start2":3099,"length1":24,"length2":25},{"diffs":[[0,"\r\n        if"],[1," "],[0,"(node.nodeAc"]],"start1":3376,"start2":3376,"length1":24,"length2":25},{"diffs":[[0,"     for"],[1," "],[0,"(var j ="]],"start1":3577,"start2":3577,"length1":16,"length2":17}]],"length":4970,"saved":false}
{"ts":1351212965538,"patch":[[{"diffs":[[0,"s.length"],[-1,"="],[1," = "],[0,"0;\r\n    "]],"start1":2976,"start2":2976,"length1":17,"length2":19}]],"length":4972,"saved":false}
{"ts":1351212976451,"patch":[[{"diffs":[[0,"rch.\r\n    if"],[1," "],[0,"(node.parent"]],"start1":4074,"start2":4074,"length1":24,"length2":25},{"diffs":[[0,"      if"],[1," "],[0,"(node.pa"]],"start1":4232,"start2":4232,"length1":16,"length2":17}]],"length":4974,"saved":false}
{"ts":1351212979950,"patch":[[{"diffs":[[0,"de)\r\n{\r\n"],[1,"  "],[0,"  return"]],"start1":4875,"start2":4875,"length1":16,"length2":18}]],"length":4976,"saved":false}
