{"ts":1350089723423,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n\r\n\r\n$(document).ready(function() {\r\n    var rubix = RubixState.initWithGoalState();\r\n\tconsole.log(rubix.toString());\r\n\trubix.rotate(RubixState.faces.top, 1);\r\n\trubix.rotate(RubixState.faces.right, 1);\r\n\tconsole.log(rubix.toString());\r\n});\r\n\r\n\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState()\r\n{\r\n\tthis.cubies = new Array(20);\r\n}\r\n\r\n/**\r\n * Rotates the cube 1 to 3 rotations in the clockwise direction given the face.\r\n * @param {number} face the face of the cube to rotate\r\n * @param {number} rotations the number of rotations\r\n */\r\nRubixState.prototype.rotate = function(face, rotations)\r\n{\r\n\tvar indicies = RubixState.sideLookUpTable[face];\r\n    \r\n    var tempCubies = new Array(), newIndex, index;\r\n    \r\n    for (index = 0; index < indicies.length; index++)\r\n    {\r\n    \ttempCubies[indicies[index]] = this.cubies[indicies[index]];\r\n    \ttempCubies[indicies[index]].rotate(face, rotations);\r\n    }\r\n    \r\n    for (index = 0; index < indicies.length; index++)\r\n    {\r\n    \tnewIndex = (index + (2 * rotations)) % 8;\r\n    \tthis.cubies[indicies[newIndex]] = tempCubies[indicies[index]];\r\n    }\r\n};\r\n\r\n/**\r\n * Converts this cube to a formatted string. \r\n * @return the cube represented as a string\r\n */\r\nRubixState.prototype.toString = function()\r\n{\r\n\t// Back\r\n\trubixStr = \"   \" + this.cubies[0].getColor(RubixState.faces.back) + this.cubies[1].getColor(RubixState.faces.back) + this.cubies[2].getColor(RubixState.faces.back) + \"\\n\" +\r\n\t           \"   \" + this.cubies[3].getColor(RubixState.faces.back) + RubixState.colors.red + this.cubies[4].getColor(RubixState.faces.back) + \"\\n\" +\r\n\t           \"   \" + this.cubies[5].getColor(RubixState.faces.back) + this.cubies[6].getColor(RubixState.faces.back) + this.cubies[7].getColor(RubixState.faces.back) + \"\\n\" +\r\n\t// Left Top Right, 1st row\r\n\t           this.cubies[0].getColor(RubixState.faces.left) + this.cubies[3].getColor(RubixState.faces.left) + this.cubies[5].getColor(RubixState.faces.left) + \r\n\t           this.cubies[5].getColor(RubixState.faces.top) + this.cubies[6].getColor(RubixState.faces.top) + this.cubies[7].getColor(RubixState.faces.top) + \r\n\t           this.cubies[7].getColor(RubixState.faces.right) + this.cubies[4].getColor(RubixState.faces.right) + this.cubies[2].getColor(RubixState.faces.right) + \"\\n\" +\r\n\t// Left Top Right, 2nd row\r\n\t           this.cubies[8].getColor(RubixState.faces.left) + RubixState.colors.green + this.cubies[9].getColor(RubixState.faces.left) + \r\n\t           this.cubies[9].getColor(RubixState.faces.top) + RubixState.colors.yellow + this.cubies[10].getColor(RubixState.faces.top) + \r\n\t           this.cubies[10].getColor(RubixState.faces.right) + RubixState.colors.blue + this.cubies[11].getColor(RubixState.faces.right) + \"\\n\" +\r\n\t// Left Top Right, 3rd row\r\n\t           this.cubies[17].getColor(RubixState.faces.left) + this.cubies[15].getColor(RubixState.faces.left) + this.cubies[12].getColor(RubixState.faces.left) + \r\n\t           this.cubies[12].getColor(RubixState.faces.top) + this.cubies[13].getColor(RubixState.faces.top) + this.cubies[14].getColor(RubixState.faces.top) + \r\n\t           this.cubies[14].getColor(RubixState.faces.right) + this.cubies[16].getColor(RubixState.faces.right) + this.cubies[19].getColor(RubixState.faces.right) + \"\\n\" +\r\n\t// Front\r\n\t           \"   \" + this.cubies[12].getColor(RubixState.faces.front) + this.cubies[13].getColor(RubixState.faces.front) + this.cubies[14].getColor(RubixState.faces.front) + \"\\n\" +\r\n\t           \"   \" + this.cubies[15].getColor(RubixState.faces.front) + RubixState.colors.orange + this.cubies[16].getColor(RubixState.faces.front) + \"\\n\" +\r\n\t           \"   \" + this.cubies[17].getColor(RubixState.faces.front) + this.cubies[18].getColor(RubixState.faces.front) + this.cubies[19].getColor(RubixState.faces.front) + \"\\n\" +\r\n\t// Bottom\r\n\t           \"   \" + this.cubies[17].getColor(RubixState.faces.bottom) + this.cubies[18].getColor(RubixState.faces.bottom) + this.cubies[19].getColor(RubixState.faces.bottom) + \"\\n\" +\r\n\t           \"   \" + this.cubies[8].getColor(RubixState.faces.bottom) + RubixState.colors.white + this.cubies[11].getColor(RubixState.faces.bottom) + \"\\n\" +\r\n\t           \"   \" + this.cubies[0].getColor(RubixState.faces.bottom) + this.cubies[1].getColor(RubixState.faces.bottom) + this.cubies[2].getColor(RubixState.faces.bottom);  \r\n\t           \r\n\treturn rubixStr;        \r\n};\r\n\r\n/**\r\n * Returns a new Rubik's cube state set up as the goal state.\r\n * @return a new Rubik's cube state set up as the goal state\r\n */\r\nRubixState.initWithGoalState = function()\r\n{\r\n\tvar goalState = new RubixState();\r\n\t\r\n\tgoalState.cubies = [\r\n\t\t// In order according to the representation below.\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.white, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.white),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.white, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.yellow, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.yellow),\r\n\t\tCubie.create(RubixState.colors.red, RubixState.colors.yellow, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.white, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.yellow, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.yellow, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.white, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.yellow, RubixState.colors.orange, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.yellow, RubixState.colors.orange),\r\n\t\tCubie.create(RubixState.colors.yellow, RubixState.colors.orange, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.orange, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.orange, RubixState.colors.blue),\r\n\t\tCubie.create(RubixState.colors.white, RubixState.colors.orange, RubixState.colors.green),\r\n\t\tCubie.create(RubixState.colors.white, RubixState.colors.orange),\r\n\t\tCubie.create(RubixState.colors.white, RubixState.colors.orange, RubixState.colors.blue),\r\n\t];\r\n\t\r\n\treturn goalState;\r\n};\r\n\r\n/**\r\n * The cube's colors. \r\n */\r\nRubixState.colors = {\r\n\tred : \"R\",\r\n\tgreen : \"G\",\r\n\tyellow : \"Y\",\r\n\tblue : \"B\",\r\n\torange : \"O\",\r\n\twhite : \"W\"\r\n};\r\n\r\n/**\r\n * The cube's faces. Do not change; they must match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n\tback : 0,\r\n\tleft : 1,\r\n\ttop : 2,\r\n\tright : 3,\r\n\tfront : 4,\r\n\tbottom : 5\r\n};\r\n\r\n/**\r\n * This sets up the indicies in reference to a clockwise pattern. \r\n * \r\n *           00 01 02\r\n *           03 Re 04\r\n *           05 06 07\r\n * \r\n * 00 03 05  05 06 07  07 04 02\r\n * 08 Gr 09  09 Ye 10  10 Bl 11\r\n * 17 15 12  12 13 14  14 16 19\r\n * \r\n *           12 13 14\r\n *           15 Or 16\r\n *           17 18 19\r\n * \r\n *           17 18 19\r\n *           08 Wh 11\r\n *           00 01 02\r\n */\r\nRubixState.sideLookUpTable = [\r\n    [ 7, 6, 5, 3, 0, 1, 2, 4], // red, back\r\n    [ 5, 9,12,15,17, 8, 0, 3], // green, left\r\n    [ 5, 6, 7,10,14,13,12, 9], // yellow, top\r\n    [14,10, 7, 4, 2,11,19,16], // blue, right\r\n    [12,13,14,16,19,18,17,15], // orange, front\r\n    [17,18,19,11, 2, 1, 0, 8]  // white, bottom\r\n];\r\n\r\n\r\n/**\r\n * Defines a new cubie.\r\n * @param {Object} faces an array of 2 or 3 cubie faces (depending on if it's a side or corner)\r\n */\r\nfunction Cubie(faces)\r\n{\r\n\t// The cubie's faces (2 for sides, 3 for corners)\r\n\tthis.faces = faces.slice(0); // Copy array\r\n}\r\n\r\n/**\r\n * Rotates the cubie 1 to 3 rotations in the clockwise direction given the face.\r\n * @param {number} face the face of the cube to rotate\r\n * @param {number} rotations the number of rotations\r\n */\r\nCubie.prototype.rotate = function(face, rotations)\r\n{\r\n\tfor (index in this.faces)\r\n\t{\r\n\t\tif (this.faces[index].face === face)\r\n\t\t\tcontinue;\r\n\t\t\r\n\t\tthis.faces[index].rotate(face, rotations)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns the color on the given face of this cubie. \r\n * @param {number} face the specified face\r\n */\r\nCubie.prototype.getColor = function(face)\r\n{\r\n\tfor (i in this.faces)\r\n\t{\r\n\t\tif (this.faces[i].face === face)\r\n\t\t\treturn this.faces[i].color;\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns true if the cubie is valid. (Not sure if this will be useful...)\r\n * @return true if the cubie is valid, false otherwise. \r\n */\r\nCubie.prototype.isValid = function() \r\n{\r\n\t// Check if all sides are different colors\r\n\tif (this.isSide())\r\n\t{\r\n\t\tif (this.faces[0].color == this.faces[1].color)\r\n\t\t\treturn false;\r\n\t}\r\n\telse if (this.isCorner())\r\n\t{\r\n\t\tif (this.faces[0].color == this.faces[1].color ||\r\n\t\t\tthis.faces[1].color == this.faces[2].color ||\r\n\t\t\tthis.faces[0].color == this.faces[2].color)\r\n\t\t\treturn false;\r\n\t}\r\n\t\r\n\treturn false;\r\n};\r\n\r\n/**\r\n * Returns true if the cubie is a side cube.\r\n * @return true if the cubie is a side, false otherwise. \r\n */\r\nCubie.prototype.isSide = function()\r\n{\r\n\treturn this.colors.length == 2;\r\n};\r\n\r\n/**\r\n * Returns true if the cubie is a corner cube.\r\n * @return true if the cubie is a corner, false otherwise. \r\n */\r\nCubie.prototype.isCorner = function()\r\n{\r\n\treturn this.colors.length == 3;\r\n};\r\n\r\n/**\r\n * Creates a new cubie given 2 or 3 colors and faces.\r\n * @param {number} color1 the color of the first face.\r\n * @param {number} color2 the color of the second face.\r\n * @param {number} color3 the color of the third face (optional if a side cubie).\r\n * @param {number} face1 the direction of the first face (optional if assuming goal state).\r\n * @param {number} face2 the direction of the second face (optional if assuming goal state).\r\n * @param {number} face3 the direction of the third face (optional if assuming goal state).\r\n * @return a new Cubie.\r\n */\r\nCubie.create = function(color1, color2, color3, face1, face2, face3)\r\n{\r\n\tface1 = face1 == null ? Cubie.defaultFace(color1) : face1;\r\n\tface2 = face2 == null ? Cubie.defaultFace(color2) : face2;\r\n\t\r\n\t// A side\r\n\tif (color3 == null)\r\n\t{\t\t\r\n\t\treturn new Cubie([new CubieFace(color1, face1),\r\n\t\t                  new CubieFace(color2, face2)]);\r\n\t}\r\n\t\r\n\t// A corner\r\n\tface3 = face3 == null ? Cubie.defaultFace(color3) : face3;\r\n\t\r\n\treturn new Cubie([new CubieFace(color1, face1),\r\n\t\t              new CubieFace(color2, face2),\r\n\t\t              new CubieFace(color3, face3)]);\r\n}\r\n\r\n/**\r\n * Returns the default face of the given color ( assumes the cube is in the goal state). \r\n * @param {number} color the specified color\r\n * @return the default face\r\n */\r\nCubie.defaultFace = function(color)\r\n{\r\n\tswitch (color)\r\n\t{\r\n\t\tcase RubixState.colors.yellow:\r\n\t\t\treturn RubixState.faces.top;\r\n\t\tcase RubixState.colors.red:\r\n\t\t\treturn RubixState.faces.back;\r\n\t\tcase RubixState.colors.white:\r\n\t\t\treturn RubixState.faces.bottom;\r\n\t\tcase RubixState.colors.orange:\r\n\t\t\treturn RubixState.faces.front;\r\n\t\tcase RubixState.colors.green:\r\n\t\t\treturn RubixState.faces.left;\r\n\t\tcase RubixState.colors.blue:\r\n\t\t\treturn RubixState.faces.right;\r\n\t\tdefault:\r\n\t\t\treturn undefined;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines a cubie face. \r\n * @param {number} color the cubie face's color.\r\n * @param {number} face the cubie face's direction.\r\n * @return a new cubie face.\r\n */\r\nfunction CubieFace(color, face)\r\n{\r\n\tthis.color = color;\r\n\tthis.face = face;\r\n}\r\n\r\n/**\r\n * Rotates the cubie face 1 to 3 rotations in the clockwise direction given the face.\r\n * Rotating the cubie face only means redefining its face direction depending on the rotation.\r\n * @param {number} face the face of the cube to rotate (not the cubie face's face)\r\n * @param {number} rotations the number of rotations\r\n */\r\nCubieFace.prototype.rotate = function(face, rotations)\r\n{\r\n\tthis.face = CubieFace.newFaceMap[face][this.face][rotations];\r\n};\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n * \r\n * There's probably a better way to do this...\r\n */\r\nCubieFace.newFaceMap = {\r\n\t0 : {\r\n\t\t1 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 3\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 3\r\n\t\t}\r\n\t},\r\n\t1 : {\r\n\t\t0 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 0\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 4\r\n\t\t}\r\n\t},\r\n\t2 : {\r\n\t\t0 : {\r\n\t\t\t1 : 3,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 1\r\n\t\t},\r\n\t\t1 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 4\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 0\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 3\r\n\t\t}\r\n\t},\r\n\t3 : {\r\n\t\t0 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 4\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 0\r\n\t\t}\r\n\t},\r\n\t4 : {\r\n\t\t1 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 3,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 1\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 3\r\n\t\t}\r\n\t},\r\n\t5 : {\r\n\t\t0 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 3\r\n\t\t},\r\n\t\t1 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 0\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 4\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 3,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 1\r\n\t\t}\r\n\t}\r\n};\r\n"]],"start1":0,"start2":0,"length1":0,"length2":13497}]],"length":13497}
{"contributors":[],"silentsave":false,"ts":1350089933571,"patch":[[{"diffs":[[0,"alState();\r\n"],[-1,"\t"],[1,"    "],[0,"console.log("]],"start1":184,"start2":184,"length1":25,"length2":28},{"diffs":[[0,"String());\r\n"],[-1,"\t"],[1,"    "],[0,"rubix.rotate"]],"start1":220,"start2":220,"length1":25,"length2":28},{"diffs":[[0,");\r\n"],[-1,"\trubix.rotate(RubixState.faces.right, 1);\r\n\t"],[1,"    "],[0,"cons"]],"start1":272,"start2":272,"length1":52,"length2":12},{"diffs":[[0,"State()\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"this.cubies "]],"start1":478,"start2":478,"length1":25,"length2":28},{"diffs":[[0,"ations)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"var indicies"]],"start1":778,"start2":778,"length1":25,"length2":28},{"diffs":[[0,"\n    {\r\n    "],[-1,"\t"],[1,"    "],[0,"tempCubies[i"]],"start1":962,"start2":962,"length1":25,"length2":28},{"diffs":[[0,"];\r\n    "],[-1,"\t"],[1,"    "],[0,"tempCubi"]],"start1":1035,"start2":1035,"length1":17,"length2":20},{"diffs":[[0," {\r\n    "],[-1,"\t"],[1,"    "],[0,"newIndex"]],"start1":1172,"start2":1172,"length1":17,"length2":20},{"diffs":[[0,"8;\r\n    "],[1," "],[-1,"\t"],[1,"   "],[0,"this.cub"]],"start1":1223,"start2":1223,"length1":17,"length2":20},{"diffs":[[0,"n()\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"// Back\r"]],"start1":1453,"start2":1453,"length1":17,"length2":20},{"diffs":[[0,"/ Back\r\n"],[-1,"\t"],[1,"    var "],[0,"rubixStr"]],"start1":1466,"start2":1466,"length1":17,"length2":24},{"diffs":[[0,"back) + \"\\n\" +\r\n"],[-1,"\t"],[1,"        "],[0,"           \"   \""]],"start1":1640,"start2":1640,"length1":33,"length2":40},{"diffs":[[0,"back) + \"\\n\" +\r\n"],[-1,"\t"],[1,"        "],[0,"           \"   \""]],"start1":1797,"start2":1797,"length1":33,"length2":40},{"diffs":[[0,"back) + \"\\n\" +\r\n"],[-1,"\t"],[1,"    "],[0,"// Left Top Righ"]],"start1":1979,"start2":1979,"length1":33,"length2":36},{"diffs":[[0,"t, 1st row\r\n"],[-1,"\t"],[1,"        "],[0,"           t"]],"start1":2015,"start2":2015,"length1":25,"length2":32},{"diffs":[[0,"faces.left) + \r\n"],[-1,"\t"],[1,"   "],[0,"           this."]],"start1":2179,"start2":2179,"length1":33,"length2":35},{"diffs":[[0,"\r\n              "],[1,"     "],[0,"this.cubies[5].g"]],"start1":2193,"start2":2193,"length1":32,"length2":37},{"diffs":[[0,".faces.top) + \r\n"],[-1,"\t"],[1,"        "],[0,"           this."]],"start1":2344,"start2":2344,"length1":33,"length2":40},{"diffs":[[0,"ight) + \"\\n\" +\r\n"],[-1,"\t"],[1,"    "],[0,"// Left Top Righ"]],"start1":2521,"start2":2521,"length1":33,"length2":36},{"diffs":[[0,"t, 2nd row\r\n"],[-1,"\t"],[1,"        "],[0,"           t"]],"start1":2557,"start2":2557,"length1":25,"length2":32},{"diffs":[[0,"faces.left) + \r\n"],[-1,"\t"],[1,"        "],[0,"           this."]],"start1":2698,"start2":2698,"length1":33,"length2":40},{"diffs":[[0,".faces.top) + \r\n"],[-1,"\t"],[0,"           this."]],"start1":2843,"start2":2843,"length1":33,"length2":32},{"diffs":[[0," + \r\n           "],[1,"        "],[0,"this.cubies[10]."]],"start1":2854,"start2":2854,"length1":32,"length2":40},{"diffs":[[0,"\"\\n\" +\r\n"],[-1,"\t"],[1,"    "],[0,"// Left "]],"start1":3005,"start2":3005,"length1":17,"length2":20},{"diffs":[[0,"rd row\r\n"],[-1,"\t"],[1," "],[0,"        "]],"start1":3037,"start2":3037,"length1":17,"length2":17},{"diffs":[[0,"ow\r\n            "],[1,"       "],[0,"this.cubies[17]."]],"start1":3041,"start2":3041,"length1":32,"length2":39},{"diffs":[[0,"s.left) + \r\n"],[-1,"\t"],[1,"        "],[0,"           t"]],"start1":3204,"start2":3204,"length1":25,"length2":32},{"diffs":[[0,"op) + \r\n"],[-1,"\t"],[1,"        "],[0,"        "]],"start1":3376,"start2":3376,"length1":17,"length2":24},{"diffs":[[0,"\"\\n\" +\r\n"],[-1,"\t"],[1,"    "],[0,"// Front"]],"start1":3556,"start2":3556,"length1":17,"length2":20},{"diffs":[[0," Front\r\n"],[-1,"\t"],[0,"        "]],"start1":3570,"start2":3570,"length1":17,"length2":16},{"diffs":[[0,"ont\r\n           "],[1,"        "],[0,"\"   \" + this.cub"]],"start1":3573,"start2":3573,"length1":32,"length2":40},{"diffs":[[0,"ront) + \"\\n\" +\r\n"],[-1,"\t"],[1,"        "],[0,"           \"   \""]],"start1":3750,"start2":3750,"length1":33,"length2":40},{"diffs":[[0,"ront) + \"\\n\" +\r\n"],[-1,"\t"],[1,"        "],[0,"           \"   \""]],"start1":3914,"start2":3914,"length1":33,"length2":40},{"diffs":[[0,"\"\\n\" +\r\n"],[-1,"\t"],[1,"    "],[0,"// Botto"]],"start1":4110,"start2":4110,"length1":17,"length2":20},{"diffs":[[0,"Bottom\r\n"],[-1,"\t"],[1,"        "],[0,"        "]],"start1":4125,"start2":4125,"length1":17,"length2":24},{"diffs":[[0,"ttom) + \"\\n\" +\r\n"],[-1,"\t"],[1,"        "],[0,"           \"   \""]],"start1":4308,"start2":4308,"length1":33,"length2":40},{"diffs":[[0,"\"\\n\" +\r\n"],[-1,"\t"],[1,"        "],[0,"        "]],"start1":4480,"start2":4480,"length1":17,"length2":24},{"diffs":[[0,"om);  \r\n"],[-1,"\t"],[1,"    "],[0,"        "]],"start1":4662,"start2":4662,"length1":17,"length2":20},{"diffs":[[0,"      \r\n"],[-1,"\t"],[1,"    "],[0,"return r"]],"start1":4679,"start2":4679,"length1":17,"length2":20},{"diffs":[[0,"n()\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"var goal"]],"start1":4896,"start2":4896,"length1":17,"length2":20},{"diffs":[[0,"ate();\r\n"],[-1,"\t\r\n\t"],[1,"    \r\n    "],[0,"goalStat"]],"start1":4935,"start2":4935,"length1":20,"length2":26},{"diffs":[[0,"es = [\r\n"],[-1,"\t\t"],[1,"        "],[0,"// In or"]],"start1":4967,"start2":4967,"length1":18,"length2":24},{"diffs":[[0,"below.\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.cr"]],"start1":5027,"start2":5027,"length1":18,"length2":24},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5115,"start2":5115,"length1":34,"length2":40},{"diffs":[[0,"rs.white),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create"]],"start1":5190,"start2":5190,"length1":26,"length2":32},{"diffs":[[0,".colors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5281,"start2":5281,"length1":34,"length2":40},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5352,"start2":5352,"length1":34,"length2":40},{"diffs":[[0,".colors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5422,"start2":5422,"length1":34,"length2":40},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5519,"start2":5519,"length1":34,"length2":40},{"diffs":[[0,"s.yellow),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create"]],"start1":5595,"start2":5595,"length1":26,"length2":32},{"diffs":[[0,".colors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5687,"start2":5687,"length1":34,"length2":40},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5760,"start2":5760,"length1":34,"length2":40},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5834,"start2":5834,"length1":34,"length2":40},{"diffs":[[0,".colors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5907,"start2":5907,"length1":34,"length2":40},{"diffs":[[0,".colors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":5979,"start2":5979,"length1":34,"length2":40},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":6079,"start2":6079,"length1":34,"length2":40},{"diffs":[[0,"olors.orange),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":6154,"start2":6154,"length1":34,"length2":40},{"diffs":[[0,".colors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":6253,"start2":6253,"length1":34,"length2":40},{"diffs":[[0,"colors.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create(Rub"]],"start1":6327,"start2":6327,"length1":34,"length2":40},{"diffs":[[0,"ors.blue),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create"]],"start1":6404,"start2":6404,"length1":26,"length2":32},{"diffs":[[0,"rs.green),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.create"]],"start1":6503,"start2":6503,"length1":26,"length2":32},{"diffs":[[0,"ange),\r\n"],[-1,"\t\t"],[1,"        "],[0,"Cubie.cr"]],"start1":6581,"start2":6581,"length1":18,"length2":24},{"diffs":[[0,"),\r\n"],[-1,"\t];\r\n\t\r\n\t"],[1,"    ];\r\n    \r\n    "],[0,"retu"]],"start1":6683,"start2":6683,"length1":17,"length2":26},{"diffs":[[0,"rs = {\r\n"],[-1,"\t"],[1,"    "],[0,"red : \"R"]],"start1":6779,"start2":6779,"length1":17,"length2":20},{"diffs":[[0,": \"R\",\r\n"],[-1,"\t"],[1,"    "],[0,"green : "]],"start1":6795,"start2":6795,"length1":17,"length2":20},{"diffs":[[0,": \"G\",\r\n"],[-1,"\t"],[1,"    "],[0,"yellow :"]],"start1":6813,"start2":6813,"length1":17,"length2":20},{"diffs":[[0,": \"Y\",\r\n"],[-1,"\t"],[1,"    "],[0,"blue : \""]],"start1":6832,"start2":6832,"length1":17,"length2":20},{"diffs":[[0,": \"B\",\r\n"],[-1,"\t"],[1,"    "],[0,"orange :"]],"start1":6849,"start2":6849,"length1":17,"length2":20},{"diffs":[[0,": \"O\",\r\n"],[-1,"\t"],[1,"    "],[0,"white : "]],"start1":6868,"start2":6868,"length1":17,"length2":20},{"diffs":[[0,"es = {\r\n"],[-1,"\t"],[1,"    "],[0,"back : 0"]],"start1":7025,"start2":7025,"length1":17,"length2":20},{"diffs":[[0,"k : 0,\r\n"],[-1,"\t"],[1,"    "],[0,"left : 1"]],"start1":7040,"start2":7040,"length1":17,"length2":20},{"diffs":[[0,"t : 1,\r\n"],[-1,"\t"],[1,"    "],[0,"top : 2,"]],"start1":7055,"start2":7055,"length1":17,"length2":20},{"diffs":[[0,"p : 2,\r\n"],[-1,"\t"],[1,"    "],[0,"right : "]],"start1":7069,"start2":7069,"length1":17,"length2":20},{"diffs":[[0,"t : 3,\r\n"],[-1,"\t"],[1,"    "],[0,"front : "]],"start1":7085,"start2":7085,"length1":17,"length2":20},{"diffs":[[0,"t : 4,\r\n"],[-1,"\t"],[1,"    "],[0,"bottom :"]],"start1":7101,"start2":7101,"length1":17,"length2":20},{"diffs":[[0,"es)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"// The c"]],"start1":8009,"start2":8009,"length1":17,"length2":20},{"diffs":[[0,"rners)\r\n"],[-1,"\t"],[1,"    "],[0,"this.fac"]],"start1":8064,"start2":8064,"length1":17,"length2":20},{"diffs":[[0,"ations)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"for (index i"]],"start1":8370,"start2":8370,"length1":25,"length2":28},{"diffs":[[0,"in this.faces)\r\n"],[-1,"\t{\r\n\t\t"],[1,"    {\r\n        "],[0,"if (this.faces[i"]],"start1":8397,"start2":8397,"length1":38,"length2":47},{"diffs":[[0,"e)\r\n"],[-1,"\t\t\tcontinue;\r\n\t\t\r\n\t\t"],[1,"            continue;\r\n        \r\n        "],[0,"this"]],"start1":8462,"start2":8462,"length1":28,"length2":49},{"diffs":[[0,"tions)\r\n"],[-1,"\t"],[1,"    "],[0,"}\r\n}\r\n\r\n"]],"start1":8542,"start2":8542,"length1":17,"length2":20},{"diffs":[[0,"ce)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"for (i i"]],"start1":8710,"start2":8710,"length1":17,"length2":20},{"diffs":[[0,"faces)\r\n"],[-1,"\t{\r\n\t\t"],[1,"    {\r\n        "],[0,"if (this"]],"start1":8737,"start2":8737,"length1":22,"length2":31},{"diffs":[[0," face)\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return t"]],"start1":8786,"start2":8786,"length1":19,"length2":28},{"diffs":[[0,"color;\r\n"],[-1,"\t"],[1,"    "],[0,"}\r\n};\r\n\r"]],"start1":8827,"start2":8827,"length1":17,"length2":20},{"diffs":[[0,"() \r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"// Check"]],"start1":9027,"start2":9027,"length1":17,"length2":20},{"diffs":[[0,"colors\r\n"],[-1,"\t"],[1,"    "],[0,"if (this"]],"start1":9075,"start2":9075,"length1":17,"length2":20},{"diffs":[[0,".isSide())\r\n"],[-1,"\t{\r\n\t\t"],[1,"    {\r\n        "],[0,"if (this.fac"]],"start1":9095,"start2":9095,"length1":30,"length2":39},{"diffs":[[0,"aces[1].color)\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return false;\r\n\t"]],"start1":9155,"start2":9155,"length1":35,"length2":44},{"diffs":[[0,"false;\r\n"],[-1,"\t}\r\n\t"],[1,"    }\r\n    "],[0,"else if "]],"start1":9190,"start2":9190,"length1":21,"length2":27},{"diffs":[[0,"ner())\r\n"],[-1,"\t{\r\n\t\t"],[1,"    {\r\n        "],[0,"if (this"]],"start1":9228,"start2":9228,"length1":22,"length2":31},{"diffs":[[0,"es[1].color ||\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"this.faces[1].co"]],"start1":9286,"start2":9286,"length1":35,"length2":44},{"diffs":[[0,"lor ||\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"this.fac"]],"start1":9353,"start2":9353,"length1":19,"length2":28},{"diffs":[[0,"color)\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return f"]],"start1":9410,"start2":9410,"length1":19,"length2":28},{"diffs":[[0,"false;\r\n"],[-1,"\t}\r\n\t\r\n\t"],[1,"    }\r\n    \r\n    "],[0,"return f"]],"start1":9437,"start2":9437,"length1":24,"length2":33},{"diffs":[[0," function()\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"return this.colo"]],"start1":9622,"start2":9622,"length1":33,"length2":36},{"diffs":[[0,"n()\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"return t"]],"start1":9834,"start2":9834,"length1":17,"length2":20},{"diffs":[[0,"e3)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"face1 = "]],"start1":10516,"start2":10516,"length1":17,"length2":20},{"diffs":[[0,"face1;\r\n"],[-1,"\t"],[1,"    "],[0,"face2 = "]],"start1":10580,"start2":10580,"length1":17,"length2":20},{"diffs":[[0,"face2;\r\n"],[-1,"\t\r\n\t"],[1,"    \r\n    "],[0,"// A sid"]],"start1":10644,"start2":10644,"length1":20,"length2":26},{"diffs":[[0,"A side\r\n"],[-1,"\t"],[1,"    "],[0,"if (colo"]],"start1":10665,"start2":10665,"length1":17,"length2":20},{"diffs":[[0,"l)\r\n"],[-1,"\t{\t\t\r\n\t\t"],[1,"    {        \r\n        "],[0,"retu"]],"start1":10694,"start2":10694,"length1":16,"length2":31},{"diffs":[[0,"olor1, face1),\r\n"],[-1,"\t\t"],[1,"        "],[0,"                "]],"start1":10754,"start2":10754,"length1":34,"length2":40},{"diffs":[[0,");\r\n"],[-1,"\t}\r\n\t\r\n\t"],[1,"    }\r\n    \r\n    "],[0,"// A"]],"start1":10825,"start2":10825,"length1":16,"length2":25},{"diffs":[[0,"corner\r\n"],[-1,"\t"],[1,"    "],[0,"face3 = "]],"start1":10851,"start2":10851,"length1":17,"length2":20},{"diffs":[[0,"3;\r\n"],[-1,"\t\r\n\t"],[1,"    \r\n    "],[0,"retu"]],"start1":10919,"start2":10919,"length1":12,"length2":18},{"diffs":[[0,"1, face1),\r\n"],[-1,"\t\t"],[1,"        "],[0,"            "]],"start1":10970,"start2":10970,"length1":26,"length2":32},{"diffs":[[0,"ace2),\r\n"],[-1,"\t\t"],[1,"        "],[0,"        "]],"start1":11027,"start2":11027,"length1":18,"length2":24},{"diffs":[[0,"or)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"switch ("]],"start1":11303,"start2":11303,"length1":17,"length2":20},{"diffs":[[0,"r)\r\n"],[-1,"\t{\r\n\t\t"],[1,"    {\r\n        "],[0,"case"]],"start1":11327,"start2":11327,"length1":14,"length2":23},{"diffs":[[0,"ellow:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return R"]],"start1":11370,"start2":11370,"length1":19,"length2":28},{"diffs":[[0,"s.top;\r\n"],[-1,"\t\t"],[1,"        "],[0,"case Rub"]],"start1":11412,"start2":11412,"length1":18,"length2":24},{"diffs":[[0,"s.red:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return R"]],"start1":11449,"start2":11449,"length1":19,"length2":28},{"diffs":[[0,".back;\r\n"],[-1,"\t\t"],[1,"        "],[0,"case Rub"]],"start1":11492,"start2":11492,"length1":18,"length2":24},{"diffs":[[0,"ors.white:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return Rubix"]],"start1":11527,"start2":11527,"length1":27,"length2":36},{"diffs":[[0,"ottom;\r\n"],[-1,"\t\t"],[1,"        "],[0,"case Rub"]],"start1":11576,"start2":11576,"length1":18,"length2":24},{"diffs":[[0,"rs.orange:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return Rubix"]],"start1":11612,"start2":11612,"length1":27,"length2":36},{"diffs":[[0,"ces.front;\r\n"],[-1,"\t\t"],[1,"        "],[0,"case RubixSt"]],"start1":11656,"start2":11656,"length1":26,"length2":32},{"diffs":[[0,"green:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return R"]],"start1":11699,"start2":11699,"length1":19,"length2":28},{"diffs":[[0,".left;\r\n"],[-1,"\t\t"],[1,"        "],[0,"case Rub"]],"start1":11742,"start2":11742,"length1":18,"length2":24},{"diffs":[[0,".blue:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return R"]],"start1":11780,"start2":11780,"length1":19,"length2":28},{"diffs":[[0,"right;\r\n"],[-1,"\t\t"],[1,"        "],[0,"default:"]],"start1":11824,"start2":11824,"length1":18,"length2":24},{"diffs":[[0,"fault:\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"return u"]],"start1":11842,"start2":11842,"length1":19,"length2":28},{"diffs":[[0,"fined;\r\n"],[-1,"\t"],[1,"    "],[0,"}\r\n}\r\n\r\n"]],"start1":11873,"start2":11873,"length1":17,"length2":20},{"diffs":[[0,", face)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"this.color ="]],"start1":12087,"start2":12087,"length1":25,"length2":28},{"diffs":[[0,"color;\r\n"],[-1,"\t"],[1,"    "],[0,"this.fac"]],"start1":12116,"start2":12116,"length1":17,"length2":20},{"diffs":[[0,"ns)\r\n{\r\n"],[-1,"\t"],[1,"    "],[0,"this.fac"]],"start1":12534,"start2":12534,"length1":17,"length2":20},{"diffs":[[0," {\r\n"],[-1,"\t"],[1,"    "],[0,"0 : {\r\n"],[-1,"\t\t1 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 3\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 3\r\n\t\t}\r\n\t},\r\n\t1 : {\r\n\t\t0 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 0\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 4\r\n\t\t}\r\n\t},\r\n\t2 : {\r\n\t\t0 : {\r\n\t\t\t1 : 3,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 1\r\n\t\t},\r\n\t\t1 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 4\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 0\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 3\r\n\t\t}\r\n\t},\r\n\t3 : {\r\n\t\t0 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 4\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 0\r\n\t\t}\r\n\t},\r\n\t4 : {\r\n\t\t1 : {\r\n\t\t\t1 : 2,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 5\r\n\t\t},\r\n\t\t2 : {\r\n\t\t\t1 : 3,\r\n\t\t\t2 : 5,\r\n\t\t\t3 : 1\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 5,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 2\r\n\t\t},\r\n\t\t5 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 2,\r\n\t\t\t3 : 3\r\n\t\t}\r\n\t},\r\n\t5 : {\r\n\t\t0 : {\r\n\t\t\t1 : 1,\r\n\t\t\t2 : 4,\r\n\t\t\t3 : 3\r\n\t\t},\r\n\t\t1 : {\r\n\t\t\t1 : 4,\r\n\t\t\t2 : 3,\r\n\t\t\t3 : 0\r\n\t\t},\r\n\t\t3 : {\r\n\t\t\t1 : 0,\r\n\t\t\t2 : 1,\r\n\t\t\t3 : 4\r\n\t\t},\r\n\t\t4 : {\r\n\t\t\t1 : 3,\r\n\t\t\t2 : 0,\r\n\t\t\t3 : 1\r\n\t\t}\r\n\t"],[1,"        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    "],[0,"}\r\n}"]],"start1":12940,"start2":12940,"length1":1204,"length2":2176}]],"length":15119,"saved":false}
{"ts":1350089981018,"patch":[[{"diffs":[[0,"colors.blue)"],[-1,","],[0,"\r\n    ];\r\n  "]],"start1":6672,"start2":6672,"length1":25,"length2":24},{"diffs":[[0,"{\r\n    for ("],[1,"var "],[0,"index in thi"]],"start1":8378,"start2":8378,"length1":24,"length2":28},{"diffs":[[0,"   for ("],[1,"var "],[0,"i in thi"]],"start1":8722,"start2":8722,"length1":16,"length2":20}]],"length":15126,"saved":false}
{"ts":1350090011498,"patch":[[{"diffs":[[0,"- */\r\n\r\n"],[1,"/*"],[0,"\r\n$(docu"]],"start1":105,"start2":105,"length1":16,"length2":18},{"diffs":[[0,";\r\n});\r\n"],[1,"*/"],[0,"\r\n\r\n/**\r"]],"start1":311,"start2":311,"length1":16,"length2":18},{"diffs":[[0,"s = "],[-1,"new Array()"],[1,"[]"],[0,", ne"]],"start1":871,"start2":871,"length1":19,"length2":10}]],"length":15121,"saved":false}
{"ts":1350090140651,"patch":[[{"diffs":[[0,"tations)"],[1,";"],[0,"\r\n    }\r"]],"start1":8538,"start2":8538,"length1":16,"length2":17},{"diffs":[[0,"ions);\r\n    }\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Retu"]],"start1":8541,"start2":8541,"length1":32,"length2":33}]],"length":15123,"saved":false}
{"ts":1350090270445,"patch":[[{"diffs":[[0,"face3)]);\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":11083,"start2":11083,"length1":24,"length2":25},{"diffs":[[0,"    }\r\n}"],[1,";"],[0,"\r\n\r\n/**\r"]],"start1":11886,"start2":11886,"length1":16,"length2":17}]],"length":15125,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350166329295,"patch":[[{"diffs":[[0,"alState;\r\n};\r\n\r\n"],[1,"RubixState.goalState = RubixState.initWithGoalState();\r\n\r\n"],[0,"/**\r\n * The cube"]],"start1":6708,"start2":6708,"length1":32,"length2":90}]],"length":15183,"saved":false}
{"ts":1350166748001,"patch":[[{"diffs":[[0,"- */\r\n\r\n"],[-1,"/*"],[0,"\r\n$(docu"]],"start1":105,"start2":105,"length1":18,"length2":16},{"diffs":[[0,"});\r"],[-1,"\n*/\r"],[0,"\n\r\n/"]],"start1":312,"start2":312,"length1":12,"length2":8},{"diffs":[[0,";\r\n    }\r\n};\r\n\r\n"],[1,"RubixState.prototype.manhattanDistanceOfSides = function()\r\n{\r\n    \r\n};\r\n\r\n"],[0,"/**\r\n * Converts"]],"start1":1285,"start2":1285,"length1":32,"length2":107}]],"length":15252,"saved":false}
{"ts":1350166816413,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.goalState = RubixState.initWithGoalState();\r\n\r\n"],[0,"/**\r"]],"start1":6789,"start2":6789,"length1":66,"length2":8}]],"length":15194,"saved":false}
{"ts":1350166927163,"patch":[[{"diffs":[[0,"ng());\r\n"],[1,"    console.log(rubix.manhattanDistanceOfSides());\r\n"],[0,"});\r\n\r\n/"]],"start1":304,"start2":304,"length1":16,"length2":68}]],"length":15246,"saved":false}
{"ts":1350166988673,"patch":[[{"diffs":[[0,"n()\r\n{\r\n    "],[1,"var r1 = RubixState.initWithGoalState();\r\n    var r2 = RubixState.initWithGoalState();\r\n    \r\n    console.log(r1 === r2);"],[0,"\r\n};\r\n\r\n/**\r"]],"start1":1408,"start2":1408,"length1":24,"length2":145}]],"length":15367,"saved":false}
{"ts":1350167141401,"patch":[[{"diffs":[[0,"log("],[1,"JSON.stringify("],[0,"r1"],[1,")"],[0," === "],[1,"JSON.stringify("],[0,"r2)"],[1,")"],[0,";\r\n}"]],"start1":1526,"start2":1526,"length1":18,"length2":50}]],"length":15399,"saved":false}
{"ts":1350167149158,"patch":[[{"diffs":[[0,"(r1)"],[-1," === JSON.stringify(r2)"],[0,");\r\n"]],"start1":1544,"start2":1544,"length1":31,"length2":8}]],"length":15376,"saved":false}
{"ts":1350167504391,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.prototype.manhattanDistanceOfSides = function()\r\n{\r\n    var r1 = RubixState.initWithGoalState();\r\n    var r2 = RubixState.initWithGoalState();\r\n    \r\n    console.log(JSON.stringify(r1));\r\n};\r\n\r\n"],[0,"/**\r"]],"start1":1349,"start2":1349,"length1":213,"length2":8}]],"length":15171,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350167884854,"patch":[[{"diffs":[[0,"log("],[-1,"rubix.manhattanDistanceOfSides("],[1,"JSON.stringify(rubix"],[0,"));\r"]],"start1":324,"start2":324,"length1":39,"length2":28},{"diffs":[[0,"\r\n];\r\n\r\n"],[1,"RubixState.jsonReplacer = function(key, value)\r\n{\r\n    \r\n};\r\n\r\n"],[0,"\r\n/**\r\n "]],"start1":7878,"start2":7878,"length1":16,"length2":79}]],"length":15223,"saved":false}
{"ts":1350167918247,"patch":[[{"diffs":[[0,"fy(rubix"],[1,", RubixState.jsonReplacer"],[0,"));\r\n});"]],"start1":340,"start2":340,"length1":16,"length2":41}]],"length":15248,"saved":false}
{"ts":1350167963457,"patch":[[{"diffs":[[0,"String());\r\n"],[1,"    console.log(JSON.stringify(rubix));\r\n"],[0,"    console."]],"start1":300,"start2":300,"length1":24,"length2":65}]],"length":15289,"saved":false}
{"ts":1350168038318,"patch":[[{"diffs":[[0,"ue)\r\n{\r\n    "],[1,"return '{\"' + key + '\":' + value + '}';"],[0,"\r\n};\r\n\r\n\r\n/*"]],"start1":7995,"start2":7995,"length1":24,"length2":63}]],"length":15328,"saved":false}
{"ts":1350168176027,"patch":[[{"diffs":[[0,"turn"],[-1," '{\"' +"],[0," key + '"],[-1,"\""],[0,":' +"]],"start1":8009,"start2":8009,"length1":24,"length2":16},{"diffs":[[0,"alue"],[-1," + '}'"],[0,";\r\n}"]],"start1":8027,"start2":8027,"length1":14,"length2":8}]],"length":15314,"saved":false}
{"ts":1350168424214,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    console.log(JSON.stringify(rubix));\r\n    console.log(JSON.stringify(rubix, RubixState.jsonReplacer));\r\n"],[0,"});\r"]],"start1":308,"start2":308,"length1":115,"length2":8},{"diffs":[[0," = function("],[1,"spaces"],[0,")\r\n{\r\n"],[1,"    var space = spaces ? \"\\n\" : \"\";\r\n    \r\n"],[0,"    // Back\r"]],"start1":1432,"start2":1432,"length1":30,"length2":79},{"diffs":[[0,"e.faces.back) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n            "]],"start1":1670,"start2":1670,"length1":36,"length2":37},{"diffs":[[0,"e.faces.back) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n            "]],"start1":1828,"start2":1828,"length1":36,"length2":37},{"diffs":[[0,"ces.back) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n    // L"]],"start1":2015,"start2":2015,"length1":28,"length2":29},{"diffs":[[0,".faces.right) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n    // Left "]],"start1":2554,"start2":2554,"length1":36,"length2":37},{"diffs":[[0,".faces.right) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n    // Left "]],"start1":3031,"start2":3031,"length1":36,"length2":37},{"diffs":[[0,"es.right) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n    // F"]],"start1":3587,"start2":3587,"length1":28,"length2":29},{"diffs":[[0,".faces.front) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n            "]],"start1":3786,"start2":3786,"length1":36,"length2":37},{"diffs":[[0,".faces.front) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n            "]],"start1":3951,"start2":3951,"length1":36,"length2":37},{"diffs":[[0,"es.front) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n    // B"]],"start1":4144,"start2":4144,"length1":28,"length2":29},{"diffs":[[0,"faces.bottom) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n            "]],"start1":4347,"start2":4347,"length1":36,"length2":37},{"diffs":[[0,"ttom) + "],[-1,"\"\\n\""],[1,"space"],[0," +\r\n    "]],"start1":4520,"start2":4520,"length1":20,"length2":21},{"diffs":[[0,"m\r\n]"],[-1,";\r\n\r\nRubixState.jsonReplacer = function(key, value)\r\n{\r\n    return key + ':' + value;\r\n}"],[0,""],[1,""],[0,";\r\n\r"]],"start1":7896,"start2":7896,"length1":96,"length2":8}]],"length":15179,"saved":false}
{"ts":1350168502339,"patch":[[{"diffs":[[0,"spaces)\r\n{\r\n"],[1,"    var newLine = spaces ? \"\\n\" : \"\";\r\n"],[0,"    var spac"]],"start1":1444,"start2":1444,"length1":24,"length2":63},{"diffs":[[0,"ace = spaces ? \""],[-1,"\\n"],[1,"   "],[0,"\" : \"\";\r\n    \r\n "]],"start1":1505,"start2":1505,"length1":34,"length2":35},{"diffs":[[0,"ixStr = "],[-1,"\"   \""],[1,"space"],[0," + this."]],"start1":1563,"start2":1563,"length1":21,"length2":21},{"diffs":[[0,"e.faces.back) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n           "]],"start1":1710,"start2":1710,"length1":36,"length2":38},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[3"]],"start1":1740,"start2":1740,"length1":37,"length2":37},{"diffs":[[0,"e.faces.back) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n           "]],"start1":1870,"start2":1870,"length1":36,"length2":38},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[5"]],"start1":1900,"start2":1900,"length1":37,"length2":37},{"diffs":[[0,"ces.back) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n    // "]],"start1":2059,"start2":2059,"length1":28,"length2":30},{"diffs":[[0,".faces.right) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n    // Left"]],"start1":2600,"start2":2600,"length1":36,"length2":38},{"diffs":[[0,".faces.right) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n    // Left"]],"start1":3079,"start2":3079,"length1":36,"length2":38},{"diffs":[[0,"es.right) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n    // "]],"start1":3637,"start2":3637,"length1":28,"length2":30},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[1"]],"start1":3677,"start2":3677,"length1":37,"length2":37},{"diffs":[[0,".faces.front) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n           "]],"start1":3838,"start2":3838,"length1":36,"length2":38},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[1"]],"start1":3868,"start2":3868,"length1":37,"length2":37},{"diffs":[[0,".faces.front) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n           "]],"start1":4005,"start2":4005,"length1":36,"length2":38},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[1"]],"start1":4035,"start2":4035,"length1":37,"length2":37},{"diffs":[[0,"es.front) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n    // "]],"start1":4200,"start2":4200,"length1":28,"length2":30},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[1"]],"start1":4241,"start2":4241,"length1":37,"length2":37},{"diffs":[[0,"faces.bottom) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n           "]],"start1":4405,"start2":4405,"length1":36,"length2":38},{"diffs":[[0,"                "],[-1,"\"   \""],[1,"space"],[0," + this.cubies[8"]],"start1":4435,"start2":4435,"length1":37,"length2":37},{"diffs":[[0,"ttom) + "],[-1,"spac"],[1,"newLin"],[0,"e +\r\n   "]],"start1":4580,"start2":4580,"length1":20,"length2":22},{"diffs":[[0,"        "],[-1,"\"   \""],[1,"space"],[0," + this."]],"start1":4610,"start2":4610,"length1":21,"length2":21}]],"length":15241,"saved":false}
{"ts":1350168507357,"patch":[[{"diffs":[[0,"tr;     "],[-1,"   "],[0,"\r\n};\r\n\r\n"]],"start1":4815,"start2":4815,"length1":19,"length2":16}]],"length":15238,"saved":false}
{"ts":1350168543384,"patch":[[{"diffs":[[0,"ix.toString("],[1,"true"],[0,"));\r\n    rub"]],"start1":215,"start2":215,"length1":24,"length2":28}]],"length":15242,"saved":false}
{"ts":1350168549140,"patch":[[{"diffs":[[0,"oString("],[1,"true"],[0,"));\r\n});"]],"start1":303,"start2":303,"length1":16,"length2":20}]],"length":15246,"saved":false}
{"ts":1350168624563,"patch":[[{"diffs":[[0,"- */\r\n\r\n"],[1,"/*"],[0,"\r\n$(docu"]],"start1":105,"start2":105,"length1":16,"length2":18},{"diffs":[[0,");\r\n});\r"],[1,"\n*/\r"],[0,"\n\r\n/**\r\n"]],"start1":318,"start2":318,"length1":16,"length2":20}]],"length":15252,"saved":false}
{"ts":1350172229355,"patch":[[{"diffs":[[0,"es. "],[-1,"Do not change; they must"],[1,"They"],[0," mat"]],"start1":7042,"start2":7042,"length1":32,"length2":12}]],"length":15232,"saved":false}
{"ts":1350172293447,"patch":[[{"diffs":[[0,";\r\n    }\r\n};\r\n\r\n"],[1,"Cubie.prototype.colorId = function()\r\n{\r\n    \r\n};\r\n\r\n"],[0,"/**\r\n * Returns "]],"start1":8653,"start2":8653,"length1":32,"length2":85}]],"length":15285,"saved":false}
{"ts":1350172514178,"patch":[[{"diffs":[[0," array\r\n"],[1,"    this.id = this.getColorId();\r\n"],[0,"}\r\n\r\n/**"]],"start1":8213,"start2":8213,"length1":16,"length2":50},{"diffs":[[0,"ototype."],[-1,"c"],[1,"getC"],[0,"olorId ="]],"start1":8711,"start2":8711,"length1":17,"length2":20},{"diffs":[[0,"n()\r\n{\r\n    "],[1,"var colors = [];\r\n    for (var index in this.faces)\r\n        colors.push(this.faces[index].color);\r\n    \r\n    colors.sort();\r\n    var id = \"\";\r\n\r\n    for (index in colors)\r\n        id += colors[index];\r\n    \r\n    return id;"],[0,"\r\n};\r\n\r\n/**\r"]],"start1":8739,"start2":8739,"length1":24,"length2":247}]],"length":15545,"saved":false}
{"ts":1350172574395,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"/**\r\n * Returns an idenifier for this cubie based on it's colors. Disregards position.\r\n * @return an idenifier for this cubie\r\n */\r\n"],[0,"Cubie.pr"]],"start1":8695,"start2":8695,"length1":16,"length2":149}]],"length":15678,"saved":false}
{"ts":1350172579989,"patch":[[{"diffs":[[0,"ed on it"],[-1,"'"],[0,"s colors"]],"start1":8750,"start2":8750,"length1":17,"length2":16}]],"length":15677,"saved":false}
{"ts":1350172590162,"patch":[[{"diffs":[[0,"   this."],[-1,"i"],[1,"colorI"],[0,"d = this"]],"start1":8222,"start2":8222,"length1":17,"length2":22}]],"length":15682,"saved":false}
{"ts":1350172885104,"patch":[[{"diffs":[[0,";\r\n    }\r\n};\r\n\r\n"],[1,"/**\r\n * Finds and returns the index of the given cubie on this cube state.\r\n * @return the index of the given cubie.\r\n */\r\nRubixState.prototype.findCubie = function(cubie)\r\n{\r\n    for (var index = 0; index < this.cubies.length; index++)\r\n    {\r\n        if (cubie.colorId === this.cubies[index].colorId)\r\n            return index;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";\r\n}\r\n\r\n"],[0,"/**\r\n * Converts"]],"start1":1299,"start2":1299,"length1":32,"length2":455}]],"length":16105,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350176855160,"patch":[[{"diffs":[[0," Returns an iden"],[1,"t"],[0,"ifier for this c"]],"start1":9138,"start2":9138,"length1":32,"length2":33},{"diffs":[[0," an iden"],[1,"t"],[0,"ifier fo"]],"start1":9229,"start2":9229,"length1":16,"length2":17}]],"length":16107,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350221851160,"patch":[[{"diffs":[[0,"s valid."],[1," Only checks colors, since a cubie doesn't\r\n * know if it's in the correct position."],[0," (Not su"]],"start1":9869,"start2":9869,"length1":16,"length2":100}]],"length":16191,"saved":false}
{"ts":1350224057204,"patch":[[{"diffs":[[0,"    return this."],[-1,"color"],[1,"face"],[0,"s.length == 2;\r\n"]],"start1":10708,"start2":10708,"length1":37,"length2":36},{"diffs":[[0,"ength =="],[1,"="],[0," 2;\r\n};\r"]],"start1":10731,"start2":10731,"length1":16,"length2":17},{"diffs":[[0,"rn this."],[-1,"color"],[1,"face"],[0,"s.length"]],"start1":10920,"start2":10920,"length1":21,"length2":20},{"diffs":[[0,"ength =="],[1,"="],[0," 3;\r\n};\r"]],"start1":10935,"start2":10935,"length1":16,"length2":17}]],"length":16191,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350226445373,"patch":[[{"diffs":[[0,"d cubie\";\r\n}\r\n\r\n"],[1,"RubixState.prototype.copy = function()\r\n{\r\n    var copy = new RubixState();\r\n    copy.cubies = this.cubies.slice(0);\r\n    return copy;\r\n}\r\n\r\n"],[0,"/**\r\n * Converts"]],"start1":1722,"start2":1722,"length1":32,"length2":173}]],"length":16332,"saved":false}
{"ts":1350226569035,"patch":[[{"diffs":[[0,";\r\n}"],[-1,"\r\n\r\nRubixState.prototype.copy = function()\r\n{\r\n    var copy = new RubixState();\r\n    copy.cubies = this.cubies.slice(0);\r\n    return copy;\r\n}"],[1,";"],[0,"\r\n\r\n"]],"start1":1730,"start2":1730,"length1":149,"length2":9}]],"length":16192,"saved":false}
{"ts":1350226775438,"patch":[[{"diffs":[[0,"ndex++)\r\n    {\r\n"],[1,"        console.log(indicies[index]);\r\n"],[0,"        tempCubi"]],"start1":957,"start2":957,"length1":32,"length2":71}]],"length":16231,"saved":false}
{"ts":1350226811819,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(indicies[index]);\r\n"],[0,"    "]],"start1":969,"start2":969,"length1":47,"length2":8},{"diffs":[[0,") % 8;\r\n"],[1,"        console.log(indicies[newIndex]);\r\n"],[0,"        "]],"start1":1222,"start2":1222,"length1":16,"length2":58}]],"length":16234,"saved":false}
{"ts":1350226820586,"patch":[[{"diffs":[[0,"8;\r\n"],[-1,"        console.log(indicies[newIndex]);\r\n"],[0,"    "]],"start1":1226,"start2":1226,"length1":50,"length2":8}]],"length":16192,"saved":false}
{"ts":1350226822094,"patch":[[{"diffs":[[0,"dex]];\r\n        "],[1,"//"],[0,"tempCubies[indic"]],"start1":1034,"start2":1034,"length1":32,"length2":34}]],"length":16194,"saved":false}
{"ts":1350226832985,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"tempCubi"]],"start1":1042,"start2":1042,"length1":18,"length2":16}]],"length":16192,"saved":false}
{"ts":1350231757822,"patch":[[{"diffs":[[0,"            1 : "],[-1,"1"],[1,"3"],[0,",\r\n            2"]],"start1":14301,"start2":14301,"length1":33,"length2":33},{"diffs":[[0,"            3 : "],[-1,"3"],[1,"1"],[0,"\r\n        }\r\n   "]],"start1":14341,"start2":14341,"length1":33,"length2":33}]],"length":16192,"saved":false}
{"ts":1350232147935,"patch":[[{"diffs":[[0," cubie\";\r\n};\r\n\r\n"],[1,"RubixState.prototype.copy = function()\r\n{\r\n    var copy = new RubixState();\r\n    \r\n};\r\n\r\n"],[0,"/**\r\n * Converts"]],"start1":1723,"start2":1723,"length1":32,"length2":121}]],"length":16281,"saved":false}
{"ts":1350232202239,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"/**\r\n * Returns a copy of this state.\r\n * @return a copy of this state\r\n */\r\n"],[0,"RubixSta"]],"start1":1731,"start2":1731,"length1":16,"length2":93},{"diffs":[[0,"ate();\r\n    "],[1,"copy.cubies = this.cubies.slice(0);\r\n    return copy;"],[0,"\r\n};\r\n\r\n/**\r"]],"start1":1885,"start2":1885,"length1":24,"length2":77}]],"length":16411,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350233494142,"patch":[[{"diffs":[[0,"    "],[-1,"copy.cubies"],[1,"for (var index in copy.cubies)\r\n        copy.cubies[index]"],[0," = t"]],"start1":1893,"start2":1893,"length1":19,"length2":66},{"diffs":[[0,"s.cubies"],[-1,".slice(0"],[1,"[index].copy("],[0,");\r\n    "]],"start1":1961,"start2":1961,"length1":24,"length2":29},{"diffs":[[0,"h === 3;\r\n};\r\n\r\n"],[1,"/**\r\n * Returns a copy of this cubie.\r\n * @return a copy of this cubie\r\n */\r\nCubie.prototype.copy = function()\r\n{\r\n    var faces = [];\r\n    for (var index in this.faces)\r\n        faces[index] = this.faces[index].copy();\r\n    return new Cubie(faces);\r\n};\r\n\r\n"],[0,"/**\r\n * Creates "]],"start1":11211,"start2":11211,"length1":32,"length2":289},{"diffs":[[0,"ations];\r\n};\r\n\r\n"],[1,"/**\r\n * Returns a copy of this cubie face.\r\n * @return a copy of this cubie face\r\n */\r\nCubieFace.prototype.copy = function()\r\n{\r\n    return new CubieFace(this.color, this.face);\r\n};\r\n\r\n"],[0,"/**\r\n * Given th"]],"start1":14200,"start2":14200,"length1":32,"length2":217}]],"length":16905,"saved":false}
{"ts":1350233685709,"patch":[[{"diffs":[[0,"ixState();\r\n"],[1,"    console.log(copy);\r\n"],[0,"    for (var"]],"start1":1881,"start2":1881,"length1":24,"length2":48}]],"length":16929,"saved":false}
{"ts":1350233716473,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    console.log(copy);\r\n"],[0,"    "]],"start1":1889,"start2":1889,"length1":32,"length2":8},{"diffs":[[0,"index].copy();\r\n"],[1,"        console.log(copy);\r\n"],[0,"    return copy;"]],"start1":1970,"start2":1970,"length1":32,"length2":60}]],"length":16933,"saved":false}
{"ts":1350233719634,"patch":[[{"diffs":[[0,"opy();\r\n"],[-1,"    "],[0,"    cons"]],"start1":1978,"start2":1978,"length1":20,"length2":16}]],"length":16929,"saved":false}
{"ts":1350233755842,"patch":[[{"diffs":[[0,"py.cubies)\r\n"],[1,"    {\r\n"],[0,"        copy"]],"start1":1917,"start2":1917,"length1":24,"length2":31},{"diffs":[[0,"x].copy();\r\n"],[1,"    "],[0,"    console."]],"start1":1981,"start2":1981,"length1":24,"length2":28},{"diffs":[[0,"log(copy);\r\n"],[1,"    }\r\n    \r\n"],[0,"    return c"]],"start1":2009,"start2":2009,"length1":24,"length2":37}]],"length":16953,"saved":false}
{"ts":1350233794933,"patch":[[{"diffs":[[0,"ndex in "],[-1,"copy"],[1,"this"],[0,".cubies)"]],"start1":1907,"start2":1907,"length1":20,"length2":20},{"diffs":[[0,"is.cubies)\r\n"],[-1,"    {\r\n"],[0,"        copy"]],"start1":1917,"start2":1917,"length1":31,"length2":24},{"diffs":[[0,");\r\n"],[-1,"        console.log(copy);\r\n    }\r\n    \r\n"],[0,"    "]],"start1":1982,"start2":1982,"length1":49,"length2":8}]],"length":16905,"saved":false}
{"ts":1350234021344,"patch":[[{"diffs":[[0,".faces)\r\n    {\r\n"],[1,"        // Face doesn't change if it's the rotating face.\r\n"],[0,"        if (this"]],"start1":9243,"start2":9243,"length1":32,"length2":91}]],"length":16964,"saved":false}
{"ts":1350234250754,"patch":[[{"diffs":[[0,"h === 3;\r\n};\r\n\r\n"],[1,"Cubie.prototype.equals = function(other)\r\n{\r\n    return JSON.stringify(this) === JSON.stringify(other);\r\n};\r\n\r\n"],[0,"/**\r\n * Returns "]],"start1":11270,"start2":11270,"length1":32,"length2":143}]],"length":17075,"saved":false}
{"ts":1350235154904,"patch":[[{"diffs":[[0,"alState;\r\n};\r\n\r\n"],[1,"RubixState.initWithString = function(text)\r\n{\r\n    var faces = [];\r\n\r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n    console.log(faces[0][0], faces[1][0], faces[5][0]);\r\n    console.log(faces[0][0], faces[1][0], faces[5][0]);\r\n\r\n    //Cubie.create(faces[0][0], faces[1][0], faces[5][0]);\r\n};\r\n\r\n"],[0,"/**\r\n * The cube"]],"start1":7530,"start2":7530,"length1":32,"length2":1210},{"diffs":[[0,"(other)\r\n{\r\n"],[1,"    console.log(JSON.stringify(this));\r\n"],[0,"    return J"]],"start1":12497,"start2":12497,"length1":24,"length2":64}]],"length":18293,"saved":false}
{"ts":1350235189022,"patch":[[{"diffs":[[0,"], faces[5]["],[-1,"0"],[1,"6"],[0,"]);\r\n    con"]],"start1":8581,"start2":8581,"length1":25,"length2":25},{"diffs":[[0,"og(faces[0]["],[-1,"0], faces[1][0"],[1,"1"],[0,"], faces[5]["]],"start1":8612,"start2":8612,"length1":38,"length2":25},{"diffs":[[0,"], faces[5]["],[-1,"0"],[0,"]);\r\n\r\n    /"]],"start1":8625,"start2":8625,"length1":25,"length2":24},{"diffs":[[0,"fy(this)"],[1," + \":\" + JSON.stringify(other)"],[0,");\r\n    "]],"start1":12523,"start2":12523,"length1":16,"length2":46}]],"length":18309,"saved":false}
{"ts":1350235225931,"patch":[[{"diffs":[[0,"aces[5]["],[1,"7"],[0,"]);\r\n\r\n "]],"start1":8629,"start2":8629,"length1":16,"length2":17},{"diffs":[[0,"fy(other"],[1,".faces"],[0,"));\r\n   "]],"start1":12553,"start2":12553,"length1":16,"length2":22}]],"length":18316,"saved":false}
{"ts":1350235311683,"patch":[[{"diffs":[[0,"5][7]);\r"],[1,"\n    console.log(faces[0][0], faces[1][0], faces[5][6]);\r\n    console.log(faces[0][2], faces[3][2], faces[5][8]);\r\n    console.log(faces[0][3], faces[1][2]);\r\n    console.log(faces[0][6], faces[3][2]);\r\n    consol.\r"],[0,"\n\r\n    /"]],"start1":8634,"start2":8634,"length1":16,"length2":231},{"diffs":[[0,"fy(other"],[-1,".faces"],[0,"));\r\n   "]],"start1":12768,"start2":12768,"length1":22,"length2":16}]],"length":18525,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350237858838,"patch":[[{"diffs":[[0,"s = [];\r"],[1,"\n    \r"],[0,"\n\r\n    /"]],"start1":7605,"start2":7605,"length1":16,"length2":22},{"diffs":[[0,"\n    }\r\n    "],[-1,"console.log"],[1,"\r\n    var goalState = new RubixState();\r\n    \r\n    goalState.cubies = [\r\n        // In order according to the representation below.\r\n        Cubie.create"],[0,"(faces[0][0]"]],"start1":8540,"start2":8540,"length1":35,"length2":177},{"diffs":[[0,"es[0][0], faces["],[-1,"1][0"],[1,"5][6"],[0,"], faces[5][6]);"]],"start1":8709,"start2":8709,"length1":36,"length2":36},{"diffs":[[0,"ces["],[-1,"5][6]);"],[1,"1][0]),"],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create"],[0,"(fac"]],"start1":8734,"start2":8734,"length1":32,"length2":37},{"diffs":[[0,"s[5][7])"],[-1,";"],[1,","],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create(faces[0][2], faces[5][8], faces[3][2]),\r\n        Cubie.create"],[0,"(faces[0"]],"start1":8785,"start2":8785,"length1":34,"length2":101},{"diffs":[[0,"create(faces[0]["],[-1,"0"],[1,"3"],[0,"], faces[1][0], "]],"start1":8872,"start2":8872,"length1":33,"length2":33},{"diffs":[[0,"[1]["],[-1,"0], faces[5][6]);"],[1,"2]),\r\n        Cubie.create(faces[0][5], faces[3][1]),"],[0,"\r\n    "],[-1,"console.log(faces[0][2], faces[3"],[1,"    Cubie.create(faces[0][6], faces[2][0], faces[1][2]),\r\n        Cubie.create(faces[0][7], faces[2][1]),\r\n        Cubie.create(faces[0][8], faces[2"],[0,"][2]"]],"start1":8897,"start2":8897,"length1":63,"length2":215},{"diffs":[[0,"ces["],[-1,"5][8]);"],[1,"3][0]),"],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create(faces[5][3], faces[1][3]),\r\n        Cubie.create"],[0,"(faces["],[-1,"0"],[1,"2"],[0,"][3]"]],"start1":9116,"start2":9116,"length1":40,"length2":94},{"diffs":[[0,"[1]["],[-1,"2]);"],[1,"5]),\r\n        Cubie.create(faces[2][5], faces[3][3]),"],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create(faces[5][5], faces[3][5]),\r\n        Cubie.create"],[0,"(faces["],[-1,"0"],[1,"2"],[0,"][6]"]],"start1":9217,"start2":9217,"length1":37,"length2":140},{"diffs":[[0,"ces["],[-1,"3][2]);\r\n    consol.\r\n"],[1,"4][0], faces[1][8]),\r\n        Cubie.create(faces[2][7], faces[4][1]),\r\n        Cubie.create(faces[2][8], faces[4][2], faces[3][6]),\r\n        Cubie.create(faces[4][3], faces[1][7]), \r\n        Cubie.create(faces[4][5], faces[3][7]),"],[0,"\r\n    "],[-1,"//"],[1,"    "],[0,"Cubi"]],"start1":9361,"start2":9361,"length1":38,"length2":248},{"diffs":[[0,"ces["],[-1,"0][0], faces[1][0], faces[5][0])"],[1,"5][0], faces[4][6], faces[1][7]),\r\n        Cubie.create(faces[5][1], faces[4][7]),\r\n        Cubie.create(faces[5][2], faces[4][8], faces[3][8])\r\n    ];\r\n    \r\n    return goalState"],[0,";\r\n}"]],"start1":9620,"start2":9620,"length1":40,"length2":187},{"diffs":[[0,"\n{\r\n"],[-1,"    console.log(JSON.stringify(this) + \":\" + JSON.stringify(other));\r\n"],[0,"    "]],"start1":13593,"start2":13593,"length1":78,"length2":8},{"diffs":[[0,"ations)\r\n{\r\n"],[1,"    // Added a tenary operator to handle an undefined issue.\r\n"],[0,"    this.fac"]],"start1":16567,"start2":16567,"length1":24,"length2":86},{"diffs":[[0,"s.face ="],[1," CubieFace.newFaceMap[face][this.face]? \r\n       "],[0," CubieFa"]],"start1":16648,"start2":16648,"length1":16,"length2":65},{"diffs":[[0,"tations]"],[1,":this.face"],[0,";\r\n};\r\n\r"]],"start1":16746,"start2":16746,"length1":16,"length2":26}]],"length":19462,"saved":false}
{"ts":1350238381347,"patch":[[{"diffs":[[0,"s = [];\r"],[1,"\n    \r"],[0,"\n\r\n    /"]],"start1":7605,"start2":7605,"length1":16,"length2":22},{"diffs":[[0,"\n    }\r\n    "],[-1,"console.log"],[1,"\r\n    var goalState = new RubixState();\r\n    \r\n    goalState.cubies = [\r\n        // In order according to the representation below.\r\n        Cubie.create"],[0,"(faces[0][0]"]],"start1":8540,"start2":8540,"length1":35,"length2":177},{"diffs":[[0,"es[0][0], faces["],[-1,"1][0"],[1,"5][6"],[0,"], faces[5][6]);"]],"start1":8709,"start2":8709,"length1":36,"length2":36},{"diffs":[[0,"ces["],[-1,"5][6]);"],[1,"1][0]),"],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create"],[0,"(fac"]],"start1":8734,"start2":8734,"length1":32,"length2":37},{"diffs":[[0,"s[5][7])"],[-1,";"],[1,","],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create(faces[0][2], faces[5][8], faces[3][2]),\r\n        Cubie.create"],[0,"(faces[0"]],"start1":8785,"start2":8785,"length1":34,"length2":101},{"diffs":[[0,"create(faces[0]["],[-1,"0"],[1,"3"],[0,"], faces[1][0], "]],"start1":8872,"start2":8872,"length1":33,"length2":33},{"diffs":[[0,"[1]["],[-1,"0], faces[5][6]);"],[1,"2]),\r\n        Cubie.create(faces[0][5], faces[3][1]),"],[0,"\r\n    "],[-1,"console.log(faces[0][2], faces[3"],[1,"    Cubie.create(faces[0][6], faces[2][0], faces[1][2]),\r\n        Cubie.create(faces[0][7], faces[2][1]),\r\n        Cubie.create(faces[0][8], faces[2"],[0,"][2]"]],"start1":8897,"start2":8897,"length1":63,"length2":215},{"diffs":[[0,"ces["],[-1,"5][8]);"],[1,"3][0]),"],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create(faces[5][3], faces[1][3]),\r\n        Cubie.create"],[0,"(faces["],[-1,"0"],[1,"2"],[0,"][3]"]],"start1":9116,"start2":9116,"length1":40,"length2":94},{"diffs":[[0,"[1]["],[-1,"2]);"],[1,"5]),\r\n        Cubie.create(faces[2][5], faces[3][3]),"],[0,"\r\n    "],[-1,"console.log"],[1,"    Cubie.create(faces[5][5], faces[3][5]),\r\n        Cubie.create"],[0,"(faces["],[-1,"0"],[1,"2"],[0,"][6]"]],"start1":9217,"start2":9217,"length1":37,"length2":140},{"diffs":[[0,"ces["],[-1,"3][2]);\r\n    consol.\r\n"],[1,"4][0], faces[1][8]),\r\n        Cubie.create(faces[2][7], faces[4][1]),\r\n        Cubie.create(faces[2][8], faces[4][2], faces[3][6]),\r\n        Cubie.create(faces[4][3], faces[1][7]), \r\n        Cubie.create(faces[4][5], faces[3][7]),"],[0,"\r\n    "],[-1,"//"],[1,"    "],[0,"Cubi"]],"start1":9361,"start2":9361,"length1":38,"length2":248},{"diffs":[[0,"ces["],[-1,"0][0], faces[1][0], faces[5][0])"],[1,"5][0], faces[4][6], faces[1][7]),\r\n        Cubie.create(faces[5][1], faces[4][7]),\r\n        Cubie.create(faces[5][2], faces[4][8], faces[3][8])\r\n    ];\r\n    \r\n    return goalState"],[0,";\r\n}"]],"start1":9620,"start2":9620,"length1":40,"length2":187},{"diffs":[[0,"\n{\r\n"],[-1,"    console.log(JSON.stringify(this) + \":\" + JSON.stringify(other));\r\n"],[0,"    "]],"start1":13593,"start2":13593,"length1":78,"length2":8},{"diffs":[[0,"ations)\r\n{\r\n"],[1,"    // Added a tenary operator to handle an undefined issue.\r\n"],[0,"    this.fac"]],"start1":16567,"start2":16567,"length1":24,"length2":86},{"diffs":[[0,"s.face ="],[1," CubieFace.newFaceMap[face][this.face]? \r\n       "],[0," CubieFa"]],"start1":16648,"start2":16648,"length1":16,"length2":65},{"diffs":[[0,"tations]"],[1,":this.face"],[0,";\r\n};\r\n\r"]],"start1":16746,"start2":16746,"length1":16,"length2":26}]],"length":19462,"saved":false}
{"ts":1350238422546,"patch":[[{"diffs":[[0,"(other)\r\n{\r\n"],[1,"    console.log(JSON.stringify(this) + \"***\" + JSON.stringify(other));\r\n"],[0,"    return J"]],"start1":13585,"start2":13585,"length1":24,"length2":96}]],"length":19534,"saved":false}
{"ts":1350238562592,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"    console.log(JSON.stringify(this) + \"***\" + JSON.stringify(other));\r\n"],[0,"    "]],"start1":13593,"start2":13593,"length1":80,"length2":8}]],"length":19462,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350317442710,"patch":[[{"diffs":[[0,";\r\n    \r"],[-1,"\n    \r"],[0,"\n\r\n    /"]],"start1":7611,"start2":7611,"length1":22,"length2":16},{"diffs":[[0,"\r\n    \r\n    var "],[-1,"goal"],[1,"temp"],[0,"State = new Rubi"]],"start1":8546,"start2":8546,"length1":36,"length2":36},{"diffs":[[0,"e();\r\n    \r\n    "],[-1,"goal"],[1,"temp"],[0,"State.cubies = ["]],"start1":8587,"start2":8587,"length1":36,"length2":36},{"diffs":[[0," faces[1][0]"],[1,",0, 5, 1"],[0,"),\r\n        "]],"start1":8731,"start2":8731,"length1":24,"length2":32},{"diffs":[[0," faces[5][7]"],[1,", null, 0, 5"],[0,"),\r\n        "]],"start1":8788,"start2":8788,"length1":24,"length2":36},{"diffs":[[0,"][2]"],[-1,"),\r\n        Cubie.create(faces[0][3], faces[1][2]),\r\n        Cubie.create(faces[0][2]"],[1,", 0, 5, 3"],[0,"),\r\n"]],"start1":8870,"start2":8870,"length1":93,"length2":17},{"diffs":[[0,"),\r\n        "],[-1,"    "],[0,"Cubie.create"]],"start1":8883,"start2":8883,"length1":28,"length2":24},{"diffs":[[0,"aces[0]["],[-1,"6"],[1,"3"],[0,"], faces"]],"start1":8909,"start2":8909,"length1":17,"length2":17},{"diffs":[[0,"ces["],[-1,"2][0], faces[1][2]),\r\n        Cubie.create(faces[0][7], faces[2][1]"],[1,"1][1], null, 0, 1"],[0,"),\r\n"]],"start1":8923,"start2":8923,"length1":75,"length2":25},{"diffs":[[0,"create(faces[0]["],[-1,"8"],[1,"5"],[0,"], faces[2][1]),"]],"start1":8962,"start2":8962,"length1":33,"length2":33},{"diffs":[[0,"ces["],[-1,"2"],[1,"3"],[0,"][1]"],[-1,"),\r\n       Cubie.create    Cubie.create(faces[5][3], faces[1][3]"],[1,", null, 0, 3"],[0,"),\r\n"]],"start1":8984,"start2":8984,"length1":77,"length2":25},{"diffs":[[0,"[0]["],[-1,"32"],[1,"6]"],[0,", fa"]],"start1":9035,"start2":9035,"length1":10,"length2":10},{"diffs":[[0,"es[1][2]"],[1,", 0, 2, 1"],[0,"),\r\n    "]],"start1":9059,"start2":9059,"length1":16,"length2":25},{"diffs":[[0,"ie.create(faces["],[-1,"2"],[1,"0"],[0,"][7], faces[2][1"]],"start1":9091,"start2":9091,"length1":33,"length2":33},{"diffs":[[0," faces[2][1]"],[1,", null, 0, 2"],[0,"),\r\n        "]],"start1":9113,"start2":9113,"length1":24,"length2":36},{"diffs":[[0,"es[3][0]"],[1,", 0, 2, 3"],[0,"),\r\n    "]],"start1":9191,"start2":9191,"length1":16,"length2":25},{"diffs":[[0,"ces["],[-1,"4][0], faces[1][8]),\r\n        Cubie.create(faces[2][7], faces[4][1]"],[1,"1][3], null, 5, 1"],[0,"),\r\n"]],"start1":9248,"start2":9248,"length1":75,"length2":25},{"diffs":[[0,"create(faces[2]["],[-1,"8"],[1,"3"],[0,"], faces[4][2], "]],"start1":9287,"start2":9287,"length1":33,"length2":33},{"diffs":[[0,"ces["],[-1,"4][2], faces[3][6]),\r\n        Cubie.create(faces[4][3], faces[1][7]"],[1,"1][5], null, 2, 1"],[0,"),"],[-1," "],[0,"\r\n  "]],"start1":9309,"start2":9309,"length1":78,"length2":27},{"diffs":[[0,"ie.create(faces["],[-1,"4"],[1,"2"],[0,"][5], faces[3][7"]],"start1":9345,"start2":9345,"length1":33,"length2":33},{"diffs":[[0,"[3]["],[-1,"7]),        Cubie.create(faces[2][3], faces[1][5]"],[1,"3], null, 2, 3"],[0,"),\r\n"]],"start1":9373,"start2":9373,"length1":57,"length2":22},{"diffs":[[0,"ie.create(faces["],[-1,"2"],[1,"5"],[0,"][5], faces[3][3"]],"start1":9406,"start2":9406,"length1":33,"length2":33},{"diffs":[[0,"[3]["],[-1,"3]),\r\n        Cubie.create(faces[5][5], faces[3][5]"],[1,"5], null, 5, 3"],[0,"),\r\n"]],"start1":9434,"start2":9434,"length1":59,"length2":22},{"diffs":[[0,"ie.create(faces["],[-1,"5][0"],[1,"2][6"],[0,"], faces[4][6], "]],"start1":9467,"start2":9467,"length1":36,"length2":36},{"diffs":[[0,"2][6], faces[4]["],[-1,"6"],[1,"0"],[0,"], faces[1][7]),"]],"start1":9483,"start2":9483,"length1":33,"length2":33},{"diffs":[[0,"[1]["],[-1,"7]),\r\n        Cubie.create(faces[5][1], faces[4][7]"],[1,"8], 2, 4, 1"],[0,"),\r\n"]],"start1":9508,"start2":9508,"length1":59,"length2":19},{"diffs":[[0,"ie.create(faces["],[-1,"5][2"],[1,"2][7"],[0,"], faces[4][8], "]],"start1":9538,"start2":9538,"length1":36,"length2":36},{"diffs":[[0,"[4]["],[-1,"8], faces[3][8])\r\n    ];\r\n    \r\n    return goalState,\r\n        Cubie.create(faces[2][7], faces[4][1]"],[1,"1], null, 2, 4"],[0,"),\r\n"]],"start1":9566,"start2":9566,"length1":108,"length2":22},{"diffs":[[0,"es[3][6]"],[1,", 2, 4, 3"],[0,"),\r\n    "]],"start1":9638,"start2":9638,"length1":16,"length2":25},{"diffs":[[0,"es[1][7]"],[1,", null, 4, 1"],[0,"), \r\n   "]],"start1":9696,"start2":9696,"length1":16,"length2":28},{"diffs":[[0," faces[3][7]"],[1,", null, 4, 3"],[0,"),\r\n        "]],"start1":9754,"start2":9754,"length1":24,"length2":36},{"diffs":[[0," faces[1][7]"],[1,", 5, 4, 1"],[0,"),\r\n        "]],"start1":9828,"start2":9828,"length1":24,"length2":33},{"diffs":[[0,"es[4][7]"],[1,", null, 5, 4"],[0,"),\r\n    "]],"start1":9890,"start2":9890,"length1":16,"length2":28},{"diffs":[[0,"es[3][8]"],[1,", 5, 4, 3"],[0,")\r\n    ]"]],"start1":9964,"start2":9964,"length1":16,"length2":25},{"diffs":[[0,"   \r\n    return "],[-1,"goal"],[1,"temp"],[0,"State;\r\n};\r\n\r\n/*"]],"start1":9993,"start2":9993,"length1":36,"length2":36},{"diffs":[[0,"ttom : 5\r\n};\r\n\r\n"],[1,"RubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n"],[0,"/**\r\n * This set"]],"start1":10392,"start2":10392,"length1":32,"length2":86},{"diffs":[[0,"tions);\r\n    }\r\n"],[1,"    \r\n    this.face.sort();\r\n"],[0,"};\r\n\r\n/**\r\n * Re"]],"start1":11975,"start2":11975,"length1":32,"length2":61},{"diffs":[[0,"Face"],[-1,".newFaceMap[face][this.face]? \r\n        CubieFace(color, face)\r\n{\r\n    // Added a tenary operator to handle an undefined issue."],[1,"(color, face)\r\n{"],[0,"\r\n  "]],"start1":16412,"start2":16412,"length1":135,"length2":24}]],"length":19760,"saved":false}
{"ts":1350317498649,"patch":[[{"diffs":[[0,"his.face"],[1,"s"],[0,".sort();"]],"start1":12002,"start2":12002,"length1":16,"length2":17}]],"length":19761,"saved":false}
{"ts":1350317828796,"patch":[[{"diffs":[[0,"\r\n    ];\r\n    \r\n"],[1,"    for (var index in goalState.cubies)\r\n    {\r\n        goalState.cubies.faces.sort();\r\n    }\r\n    \r\n"],[0,"    return goalS"]],"start1":7501,"start2":7501,"length1":32,"length2":133}]],"length":19862,"saved":false}
{"ts":1350317836235,"patch":[[{"diffs":[[0,"te.cubies)\r\n"],[-1,"    {\r\n"],[0,"        goal"]],"start1":7546,"start2":7546,"length1":31,"length2":24},{"diffs":[[0,"es.sort();\r\n"],[-1,"    }\r\n"],[0,"    \r\n    re"]],"start1":7586,"start2":7586,"length1":31,"length2":24}]],"length":19848,"saved":false}
{"ts":1350317847319,"patch":[[{"diffs":[[0,"e.cubies"],[1,"[index]"],[0,".faces.s"]],"start1":7574,"start2":7574,"length1":16,"length2":23}]],"length":19855,"saved":false}
{"contributors":["cdcordisco@gmail.com","jfdbear1@gmail.com"],"silentsave":false,"ts":1350319142142,"patch":[[{"diffs":[[0,".faces.sort("],[1,"function(a,b){return a.face - b.face;}"],[0,");\r\n"],[-1,""],[0,"    \r\n    re"]],"start1":7589,"start2":7589,"length1":28,"length2":66},{"diffs":[[0,"aces[1]["],[-1,"7"],[1,"6"],[0,"], 5, 4,"]],"start1":9962,"start2":9962,"length1":17,"length2":17},{"diffs":[[0," 4, 3)\r\n    ];\r\n"],[1,"    for (var index in tempState.cubies)\r\n        tempState.cubies[index].faces.sort(function(a,b){return a.face - b.face;});\r\n"],[0,"    \r\n    return"]],"start1":10108,"start2":10108,"length1":32,"length2":158},{"diffs":[[0,"   }\r\n    \r\n"],[-1,""],[0,"    this.fac"]],"start1":12243,"start2":12243,"length1":24,"length2":24},{"diffs":[[0,".faces.sort("],[1,"function(a,b){return a.face - b.face;}"],[0,");\r\n};\r\n\r\n/*"]],"start1":12263,"start2":12263,"length1":24,"length2":62}]],"length":20057,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350353281342,"patch":[[{"diffs":[[0,"ay\r\n"],[-1,"    this.colorId = this.getColorId();\r\n"],[0,"}\r\n\r"]],"start1":11705,"start2":11705,"length1":47,"length2":8},{"diffs":[[0,"e.prototype."],[-1,"getC"],[1,"c"],[0,"olorId = fun"]],"start1":12422,"start2":12422,"length1":28,"length2":25},{"diffs":[[0,"s.face ="],[1," "],[0," face;\r\n"]],"start1":16721,"start2":16721,"length1":16,"length2":17}]],"length":20016,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350353602892,"patch":[[{"diffs":[[0,".colorId"],[1,"()"],[0," === thi"]],"start1":1577,"start2":1577,"length1":16,"length2":18},{"diffs":[[0,".colorId"],[1,"()"],[0,")\r\n     "]],"start1":1610,"start2":1610,"length1":16,"length2":18}]],"length":20020,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350354483448,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/*\r\n$(document).ready(function() {\r\n    var rubix = RubixState.initWithGoalState();\r\n    console.log(rubix.toString(true));\r\n    rubix.rotate(RubixState.faces.top, 1);\r\n    console.log(rubix.toString(true));\r\n});\r\n*/\r\n"],[0,"\r\n/*"]],"start1":109,"start2":109,"length1":226,"length2":8},{"diffs":[[0,"  this.c"],[-1,"ubie"],[1,"orner"],[0,"s = new "]],"start1":286,"start2":286,"length1":20,"length2":21}]],"length":19803,"saved":false}
{"ts":1350354490650,"patch":[[{"diffs":[[0,"new "],[-1,"Array"],[1,"UInt32"],[0,"(20)"]],"start1":303,"start2":303,"length1":13,"length2":14}]],"length":19804,"saved":false}
{"ts":1350354517064,"patch":[[{"diffs":[[0,"2(20);\r\n"],[1,"    this.sides = new UInt16Array(12);\r\n"],[0,"}\r\n\r\n/**"]],"start1":312,"start2":312,"length1":16,"length2":55}]],"length":19843,"saved":false}
{"ts":1350354521811,"patch":[[{"diffs":[[0,"nt32"],[-1,"(20"],[1,"Array(8"],[0,");\r\n"]],"start1":309,"start2":309,"length1":11,"length2":15}]],"length":19847,"saved":false}
{"ts":1350354889345,"patch":[[{"diffs":[[0,"32Array("],[-1,"8"],[1,"new ArrayBuffer(32)"],[0,");\r\n    "]],"start1":311,"start2":311,"length1":17,"length2":35},{"diffs":[[0,"16Array("],[-1,"12"],[1,"new ArrayBuffer(24)"],[0,");\r\n}\r\n\r"]],"start1":367,"start2":367,"length1":18,"length2":35}]],"length":19882,"saved":false}
{"ts":1350355005147,"patch":[[{"diffs":[[0," = new U"],[-1,"I"],[1,"i"],[0,"nt32Arra"]],"start1":300,"start2":300,"length1":17,"length2":17},{"diffs":[[0," = new U"],[-1,"I"],[1,"i"],[0,"nt16Arra"]],"start1":356,"start2":356,"length1":17,"length2":17}]],"length":19882,"saved":false}
{"ts":1350355074088,"patch":[[{"diffs":[[0,"fer(24));\r\n}\r\n\r\n"],[1,"/*\r\n\r\n\r\n*/\r\n\r\n"],[0,"/**\r\n * Rotates "]],"start1":387,"start2":387,"length1":32,"length2":46}]],"length":19896,"saved":false}
{"ts":1350355128402,"patch":[[{"diffs":[[0,"\n}\r\n\r\n/*"],[1,"*"],[0,"\r\n"],[1," *    c00 s00 c01\r\n *    s01  R  s02\r\n *\r\n \r\n "],[0,"\r\n\r\n*/\r\n"]],"start1":397,"start2":397,"length1":18,"length2":65}]],"length":19943,"saved":false}
{"ts":1350355156949,"patch":[[{"diffs":[[0,"\r\n *    "],[1,"   "],[0,"c00 s00 "]],"start1":406,"start2":406,"length1":16,"length2":19},{"diffs":[[0,"\r\n *    "],[1,"  "],[1," "],[0,"s01  R  "]],"start1":428,"start2":428,"length1":16,"length2":19},{"diffs":[[0," s02\r\n *"],[-1,"\r\n \r\n"],[1,"       c02 s03 c03\r\n * \r\n * \r\n * \r\n *"],[0," \r\n\r\n*/\r"]],"start1":446,"start2":446,"length1":21,"length2":53}]],"length":19981,"saved":false}
{"ts":1350355192846,"patch":[[{"diffs":[[0,"*       "],[1,"  "],[0,"c00 s00 "]],"start1":409,"start2":409,"length1":16,"length2":18},{"diffs":[[0," s00 c01\r\n *"],[1,"  "],[0,"       s01  "]],"start1":422,"start2":422,"length1":24,"length2":26},{"diffs":[[0,"  R  s02\r\n *"],[1,"  "],[0,"       c02 s"]],"start1":446,"start2":446,"length1":24,"length2":26},{"diffs":[[0,"s03 c03\r\n * "],[1,"c00 s01 c02 c02 s03 c03 c03 s02 c01"],[0,"\r\n * \r\n * \r\n"]],"start1":471,"start2":471,"length1":24,"length2":59}]],"length":20022,"saved":false}
{"ts":1350355211329,"patch":[[{"diffs":[[0,"        "],[1,"    "],[0,"c00 s00 "]],"start1":411,"start2":411,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"s01  R  "]],"start1":439,"start2":439,"length1":16,"length2":20},{"diffs":[[0,"  R  s02\r\n *"],[1,"    "],[0,"         c02"]],"start1":454,"start2":454,"length1":24,"length2":28}]],"length":20034,"saved":false}
{"ts":1350355512613,"patch":[[{"diffs":[[0,"c01\r\n * "],[-1,"\r\n * "],[1,"s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01"],[0,"\r\n * \r\n\r"]],"start1":527,"start2":527,"length1":21,"length2":261}]],"length":20274,"saved":false}
{"ts":1350355522067,"patch":[[{"diffs":[[0,"01\r\n"],[-1," * \r\n\r\n"],[0,"*/\r\n"]],"start1":778,"start2":778,"length1":15,"length2":8}]],"length":20267,"saved":false}
{"ts":1350355638576,"patch":[[{"diffs":[[0,"State()\r\n{\r\n"],[1,"    \r\n    //*=face +=color -=unused\r\n    //***+++***+++***+++\r\n"],[0,"    this.cor"]],"start1":272,"start2":272,"length1":24,"length2":87},{"diffs":[[0,"(24));\r\n"],[1,"\r\n"],[0,"}\r\n\r\n/**"]],"start1":453,"start2":453,"length1":16,"length2":18}]],"length":20332,"saved":false}
{"ts":1350355685031,"patch":[[{"diffs":[[0,"++***+++"],[1,"-------------- 14 unused bits."],[0,"\r\n    th"]],"start1":337,"start2":337,"length1":16,"length2":46}]],"length":20362,"saved":false}
{"ts":1350355773409,"patch":[[{"diffs":[[0,"ffer(32));\r\n"],[1,"    \r\n    //***+++***+++---- 4 unused bits {48 bits per state, 6 bytes wasted}\r\n"],[0,"    this.sid"]],"start1":423,"start2":423,"length1":24,"length2":104}]],"length":20442,"saved":false}
{"ts":1350355822164,"patch":[[{"diffs":[[0,"sed bits"],[1," {14 bytes wasted per state}"],[0,".\r\n    t"]],"start1":366,"start2":366,"length1":16,"length2":44}]],"length":20470,"saved":false}
{"ts":1350355861355,"patch":[[{"diffs":[[0,"e()\r\n{\r\n    "],[1,"//This produces 20 wasted bytes per state..."],[0,"\r\n    //*=fa"]],"start1":276,"start2":276,"length1":24,"length2":68}]],"length":20514,"saved":false}
{"ts":1350356165889,"patch":[[{"diffs":[[0,"d\r\n    //***"],[1,"-"],[0,"+++"],[1,"-"],[0,"***+++***+++"]],"start1":362,"start2":362,"length1":27,"length2":29}]],"length":20516,"saved":false}
{"ts":1350356212864,"patch":[[{"diffs":[[0,"+++-"],[1," "],[0,"***"],[1,"-"],[0,"+++"],[1,"- "],[0,"***"],[1,"-"],[0,"+++-"],[-1,"-------------"],[0," 14 "]],"start1":375,"start2":375,"length1":34,"length2":26},{"diffs":[[0,"new Uint"],[-1,"32"],[1,"8"],[0,"Array(ne"]],"start1":462,"start2":462,"length1":18,"length2":17}]],"length":20507,"saved":false}
{"ts":1350356219171,"patch":[[{"diffs":[[0,"fer("],[-1,"32"],[1,"56"],[0,"));\r"]],"start1":489,"start2":489,"length1":10,"length2":10}]],"length":20507,"saved":false}
{"ts":1350356225182,"patch":[[{"diffs":[[0,"  this.c"],[-1,"orner"],[1,"ubie"],[0,"s = new "]],"start1":445,"start2":445,"length1":21,"length2":20}]],"length":20506,"saved":false}
{"ts":1350356228975,"patch":[[{"diffs":[[0,"asted}\r\n    "],[1,"//"],[0,"this.sides ="]],"start1":571,"start2":571,"length1":24,"length2":26}]],"length":20508,"saved":false}
{"ts":1350356290812,"patch":[[{"diffs":[[0,"**-+++- "],[-1,"14"],[1,"2"],[0," unused "]],"start1":390,"start2":390,"length1":18,"length2":17},{"diffs":[[0,"its "],[-1,"{14"],[1,"per face 2*20 = 40 40/8 = 5"],[0," byt"]],"start1":408,"start2":408,"length1":11,"length2":35},{"diffs":[[0," per"],[-1," state}"],[0,".\r\n "]],"start1":452,"start2":452,"length1":15,"length2":8}]],"length":20524,"saved":false}
{"ts":1350356294261,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"    //This produces 20 wasted bytes per state...\r\n"],[0,"    "]],"start1":280,"start2":280,"length1":58,"length2":8}]],"length":20474,"saved":false}
{"ts":1350356297592,"patch":[[{"diffs":[[0,"sted per"],[1," state"],[0,".\r\n    t"]],"start1":398,"start2":398,"length1":16,"length2":22}]],"length":20480,"saved":false}
{"ts":1350356399545,"patch":[[{"diffs":[[0,"  //"],[-1,"***+++***+++---- 4 unused bits {48 bits per state, 6 bytes wasted}\r\n    //this.sides = new Uint16Array(new ArrayBuffer(24));\r\n"],[1,"f(c) = c*3 "],[0,"\r\n}\r"]],"start1":479,"start2":479,"length1":134,"length2":19}]],"length":20365,"saved":false}
{"ts":1350356479548,"patch":[[{"diffs":[[0,"\r\n    //"],[1," "],[0,"f(c) = c"]],"start1":475,"start2":475,"length1":16,"length2":17},{"diffs":[[0,"c) = c*3"],[-1," "],[1,"\r\n    // s(s) = s*2 + 24"],[0,"\r\n}\r\n\r\n/"]],"start1":486,"start2":486,"length1":17,"length2":40}]],"length":20389,"saved":false}
{"ts":1350356583879,"patch":[[{"diffs":[[0,"6));\r\n    \r\n"],[1,"    //Calculations to reach each face\r\n"],[0,"    // f(c) "]],"start1":465,"start2":465,"length1":24,"length2":63}]],"length":20428,"saved":false}
{"ts":1350356606365,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"//"],[1,"\r\n}\r\n\r\n/**\r\n * "],[0,"Calculat"]],"start1":473,"start2":473,"length1":18,"length2":31},{"diffs":[[0," face\r\n "],[-1,"   //"],[1,"*"],[0," f(c) = "]],"start1":522,"start2":522,"length1":21,"length2":17},{"diffs":[[0,"= c*3\r\n "],[-1,"   //"],[1,"*"],[0," s(s) = "]],"start1":537,"start2":537,"length1":21,"length2":17},{"diffs":[[0,"2 + 24\r\n"],[-1,"}\r\n\r\n/**\r\n"],[0," *      "]],"start1":556,"start2":556,"length1":26,"length2":16}]],"length":20423,"saved":false}
{"ts":1350356608269,"patch":[[{"diffs":[[0,"2 + 24\r\n"],[1," * \r\n"],[0," *      "]],"start1":556,"start2":556,"length1":16,"length2":21}]],"length":20428,"saved":false}
{"ts":1350356612179,"patch":[[{"diffs":[[0,"c) = c*3"],[1," + 0"],[0,"\r\n * s(s"]],"start1":534,"start2":534,"length1":16,"length2":20}]],"length":20432,"saved":false}
{"ts":1350356614191,"patch":[[{"diffs":[[0," = c*3 +"],[1," "],[0," 0\r\n * s"]],"start1":536,"start2":536,"length1":16,"length2":17}]],"length":20433,"saved":false}
{"ts":1350356624734,"patch":[[{"diffs":[[0,"  0\r\n * "],[-1,"s"],[1,"f"],[0,"(s) = s*"]],"start1":544,"start2":544,"length1":17,"length2":17}]],"length":20433,"saved":false}
{"ts":1350356644786,"patch":[[{"diffs":[[0,"c01\r\n*/\r"],[1,"\nRubixState.rotate()\r\n{\r\n    \r\n}\r"],[0,"\n\r\n/**\r\n"]],"start1":943,"start2":943,"length1":16,"length2":49}]],"length":20466,"saved":false}
{"ts":1350356646201,"patch":[[{"diffs":[[0,"te()\r\n{\r\n    \r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Rota"]],"start1":967,"start2":967,"length1":32,"length2":33}]],"length":20467,"saved":false}
{"ts":1350356650182,"patch":[[{"diffs":[[0,"State.rotate"],[1," = function0"],[0,"()\r\n{\r\n    \r"]],"start1":957,"start2":957,"length1":24,"length2":36}]],"length":20479,"saved":false}
{"ts":1350356651367,"patch":[[{"diffs":[[0,"function"],[-1,"0"],[0,"()\r\n{\r\n "]],"start1":972,"start2":972,"length1":17,"length2":16}]],"length":20478,"saved":false}
{"ts":1350356657186,"patch":[[{"diffs":[[0,"tate = function("],[1,"state"],[0,")\r\n{\r\n    \r\n};\r\n"]],"start1":965,"start2":965,"length1":32,"length2":37}]],"length":20483,"saved":false}
{"ts":1350356672911,"patch":[[{"diffs":[[0,"on(state"],[1,", face, rotations"],[0,")\r\n{\r\n  "]],"start1":978,"start2":978,"length1":16,"length2":33}]],"length":20500,"saved":false}
{"ts":1350358157949,"patch":[[{"diffs":[[0,"+++-"],[-1," ***-+++- ***-+++-"],[0," 2 u"]],"start1":325,"start2":325,"length1":26,"length2":8},{"diffs":[[0,"\n    \r\n}\r\n\r\n"],[1,"RubixState.sideLookUpTable = [\r\n    [ 7, 6, 5, 3, 0, 1, 2, 4], // red, back\r\n    [ 5, 9,12,15,17, 8, 0, 3], // green, left\r\n    [ 5, 6, 7,10,14,13,12, 9], // yellow, top\r\n    [14,10, 7, 4, 2,11,19,16], // blue, right\r\n    [12,13,14,16,19,18,17,15], // orange, front\r\n    [17,18,19,11, 2, 1, 0, 8]  // white, bottom\r\n];\r\n"],[0,"/**\r\n * Calc"]],"start1":458,"start2":458,"length1":24,"length2":344},{"diffs":[[0,"ch each "],[-1,"face"],[1,"cubie\r\n * "],[0,"\r\n * f(c"]],"start1":817,"start2":817,"length1":20,"length2":26}]],"length":20808,"saved":false}
{"ts":1350358339254,"patch":[[{"diffs":[[0,"\r\n    [ "],[-1,"7, 6, 5, 3, 0, 1, 2, 4"],[1,"0,24, 3,28, 9,30, 6,26"],[0,"], // re"]],"start1":500,"start2":500,"length1":38,"length2":38},{"diffs":[[0,"\r\n    [ "],[-1,"5, 9,12,15,17, 8, 0, 3"],[1,"0,26, 6,34,15,40,12,32"],[0,"], // gr"]],"start1":545,"start2":545,"length1":38,"length2":38}]],"length":20808,"saved":false}
{"ts":1350358446075,"patch":[[{"diffs":[[0,"en, left\r\n    [ "],[-1,"5, 6"],[1,"6, 30"],[0,", 7,10,14,13,12,"]],"start1":584,"start2":584,"length1":36,"length2":37}]],"length":20809,"saved":false}
{"ts":1350358475424,"patch":[[{"diffs":[[0," 6, 30, "],[-1,"7,10"],[1,"9,36"],[0,",14,13,1"]],"start1":599,"start2":599,"length1":20,"length2":20}]],"length":20809,"saved":false}
{"ts":1350358483200,"patch":[[{"diffs":[[0,", 9,36,1"],[-1,"4"],[1,"8"],[0,",13,12, "]],"start1":605,"start2":605,"length1":17,"length2":17}]],"length":20809,"saved":false}
{"ts":1350358509386,"patch":[[{"diffs":[[0,"9,36,18,"],[-1,"13,12, 9"],[1,"42,15,34"],[0,"], // ye"]],"start1":607,"start2":607,"length1":24,"length2":24}]],"length":20809,"saved":false}
{"ts":1350358516661,"patch":[[{"diffs":[[0,"[ 6, 30,"],[-1," "],[0,"9,36,18,"]],"start1":598,"start2":598,"length1":17,"length2":16}]],"length":20808,"saved":false}
{"ts":1350358522143,"patch":[[{"diffs":[[0,"// yellow, top\r\n"],[1,"    \r\n"],[0,"    [14,10, 7, 4"]],"start1":625,"start2":625,"length1":32,"length2":38}]],"length":20814,"saved":false}
{"ts":1350358587325,"patch":[[{"diffs":[[0,"\n    \r\n    ["],[-1,"14,10"],[1," 9,28"],[0,", 7, 4, 2,11"]],"start1":640,"start2":640,"length1":29,"length2":29}]],"length":20814,"saved":false}
{"ts":1350358598957,"patch":[[{"diffs":[[0,"[ 9,28, "],[-1,"7"],[1,"3"],[0,", 4, 2,1"]],"start1":651,"start2":651,"length1":17,"length2":17}]],"length":20814,"saved":false}
{"ts":1350358606339,"patch":[[{"diffs":[[0,"9,28, 3,"],[-1," 4"],[1,"38"],[0,", 2,11,1"]],"start1":653,"start2":653,"length1":18,"length2":18}]],"length":20814,"saved":false}
{"ts":1350358618203,"patch":[[{"diffs":[[0,"8, 3,38,"],[-1," "],[0,"2"],[1,"1"],[0,",11,19,1"]],"start1":656,"start2":656,"length1":18,"length2":18}]],"length":20814,"saved":false}
{"ts":1350358624163,"patch":[[{"diffs":[[0,"3,38,21,"],[-1,"11"],[1,"44"],[0,",19,16],"]],"start1":659,"start2":659,"length1":18,"length2":18}]],"length":20814,"saved":false}
{"ts":1350358642215,"patch":[[{"diffs":[[0,",21,44,1"],[-1,"9,1"],[1,"8,3"],[0,"6], // b"]],"start1":663,"start2":663,"length1":19,"length2":19}]],"length":20814,"saved":false}
{"ts":1350358664292,"patch":[[{"diffs":[[0,"// blue, right\r\n"],[1,"    \r\n"],[0,"    [12,13,14,16"]],"start1":678,"start2":678,"length1":32,"length2":38}]],"length":20820,"saved":false}
{"ts":1350358666405,"patch":[[{"diffs":[[0,"w, top\r\n"],[-1,"    \r\n"],[0,"    [ 9,"]],"start1":633,"start2":633,"length1":22,"length2":16}]],"length":20814,"saved":false}
{"ts":1350358709376,"patch":[[{"diffs":[[0,"\n    \r\n}\r\n\r\n"],[1,"// The logic behind this still works.\r\n"],[0,"RubixState.s"]],"start1":458,"start2":458,"length1":24,"length2":63},{"diffs":[[0,"ht\r\n    \r\n    [1"],[-1,"2,13"],[1,"5,42"],[0,",14,16,19,18,17,"]],"start1":723,"start2":723,"length1":36,"length2":36}]],"length":20853,"saved":false}
{"ts":1350358750923,"patch":[[{"diffs":[[0,"[15,42,1"],[-1,"4"],[1,"8"],[0,",16,19,1"]],"start1":737,"start2":737,"length1":17,"length2":17}]],"length":20853,"saved":false}
{"ts":1350358789282,"patch":[[{"diffs":[[0,"5,42,18,"],[-1,"16,19,18"],[1,"34,21,46"],[0,",17,15],"]],"start1":739,"start2":739,"length1":24,"length2":24}]],"length":20853,"saved":false}
{"ts":1350358801612,"patch":[[{"diffs":[[0,",21,46,1"],[-1,"7,15"],[1,"2,40"],[0,"], // or"]],"start1":749,"start2":749,"length1":20,"length2":20}]],"length":20853,"saved":false}
{"ts":1350358814786,"patch":[[{"diffs":[[0," right\r\n"],[-1,"    \r\n"],[0,"    [15,"]],"start1":719,"start2":719,"length1":22,"length2":16},{"diffs":[[0," orange, front\r\n"],[1,"    \r\n"],[0,"    [17,18,19,11"]],"start1":760,"start2":760,"length1":32,"length2":38}]],"length":20853,"saved":false}
{"ts":1350358843120,"patch":[[{"diffs":[[0,"r state."],[1," (56 bytes total, pretty damn good)."],[0,"\r\n    th"]],"start1":387,"start2":387,"length1":16,"length2":52}]],"length":20889,"saved":false}
{"ts":1350358848364,"patch":[[{"diffs":[[0," state. "],[1,"\r\n    // "],[0,"(56 byte"]],"start1":388,"start2":388,"length1":16,"length2":25}]],"length":20898,"saved":false}
{"ts":1350358858796,"patch":[[{"diffs":[[0,"es total"],[1," [plus some overhead]"],[0,", pretty"]],"start1":412,"start2":412,"length1":16,"length2":37}]],"length":20919,"saved":false}
{"ts":1350358939108,"patch":[[{"diffs":[[0,"    \r\n    [1"],[-1,"7,18,19,11"],[1,"2,46,21,38"],[0,", 2, 1, 0, 8"]],"start1":842,"start2":842,"length1":34,"length2":34},{"diffs":[[0,"04  W  s"],[1,"1"],[0,"0"],[-1,"7"],[0,"\r\n *    "]],"start1":1327,"start2":1327,"length1":18,"length2":18}]],"length":20919,"saved":false}
{"ts":1350358943664,"patch":[[{"diffs":[[0,"04  W  s"],[-1,"1"],[0,"0"],[1,"7"],[0,"\r\n *    "]],"start1":1327,"start2":1327,"length1":18,"length2":18}]],"length":20919,"saved":false}
{"ts":1350358988864,"patch":[[{"diffs":[[0,",21,38, "],[-1,"2, 1"],[1,"3,24"],[0,", 0,"],[-1," 8"],[1,"32"],[0,"]  // wh"]],"start1":858,"start2":858,"length1":26,"length2":26}]],"length":20919,"saved":false}
{"ts":1350358995858,"patch":[[{"diffs":[[0,"range, front"],[-1,"\r\n"],[0,"    \r\n    [1"]],"start1":828,"start2":828,"length1":26,"length2":24}]],"length":20917,"saved":false}
{"ts":1350359008224,"patch":[[{"diffs":[[0,"ll works"],[1," and only one copy of this need exist"],[0,".\r\nRubix"]],"start1":564,"start2":564,"length1":16,"length2":53}]],"length":20954,"saved":false}
{"ts":1350359306731,"patch":[[{"diffs":[[0,"ns)\r\n{\r\n    "],[1,"var indicies =  RubixState.sideLookUpTable[face];\r\n    for(var index in indicies)\r\n    {\r\n        \r\n    }"],[0,"\r\n};\r\n\r\n/**\r"]],"start1":1455,"start2":1455,"length1":24,"length2":129}]],"length":21059,"saved":false}
{"ts":1350359314544,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"indicies[index];    "],[0,"\r\n    }\r\n};\r\n\r\n/"]],"start1":1549,"start2":1549,"length1":32,"length2":52}]],"length":21079,"saved":false}
{"ts":1350359344114,"patch":[[{"diffs":[[0," \r\n    }\r\n};\r\n\r\n"],[1,"..--------------------------------------------------------------------------------------\r\n\r\n"],[0,"/**\r\n * Rotates "]],"start1":1584,"start2":1584,"length1":32,"length2":124}]],"length":21171,"saved":false}
{"ts":1350359345612,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[-1,".."],[1,"//"],[0,"--------"]],"start1":1592,"start2":1592,"length1":18,"length2":18}]],"length":21171,"saved":false}
{"ts":1350359365282,"patch":[[{"diffs":[[0," \r\n}\r\n\r\n"],[1,"/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\n"],[0,"// The l"]],"start1":528,"start2":528,"length1":16,"length2":228},{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n"],[0,"\r\nRu"]],"start1":11817,"start2":11817,"length1":218,"length2":8}]],"length":21173,"saved":false}
{"ts":1350359391492,"patch":[[{"diffs":[[0,"00 01 02\r\n *"],[-1,"/"],[0,"\r\nRubixState"]],"start1":12266,"start2":12266,"length1":25,"length2":24},{"diffs":[[0,"ttom\r\n];"],[1,"*/"],[0,"\r\n\r\n\r\n/*"]],"start1":12590,"start2":12590,"length1":16,"length2":18}]],"length":21174,"saved":false}
{"ts":1350359461147,"patch":[[{"diffs":[[0,"ble[face];\r\n"],[1,"    var cubie;\r\n"],[0,"    for(var "]],"start1":1718,"start2":1718,"length1":24,"length2":40},{"diffs":[[0,"s[index]"],[-1,";  "],[0,"  \r\n    "]],"start1":1800,"start2":1800,"length1":19,"length2":16}]],"length":21187,"saved":false}
{"ts":1350359466137,"patch":[[{"diffs":[[0,"\n       "],[1," vubie ="],[0," indicie"]],"start1":1784,"start2":1784,"length1":16,"length2":24}]],"length":21195,"saved":false}
{"ts":1350359468645,"patch":[[{"diffs":[[0,"        "],[-1,"v"],[1,"c"],[0,"ubie = i"]],"start1":1785,"start2":1785,"length1":17,"length2":17}]],"length":21195,"saved":false}
{"ts":1350359470017,"patch":[[{"diffs":[[0,"s[index]"],[-1,"  "],[1,";"],[0,"\r\n    }\r"]],"start1":1808,"start2":1808,"length1":18,"length2":17}]],"length":21194,"saved":false}
{"ts":1350359493459,"patch":[[{"diffs":[[0,"es[index];\r\n"],[1,"        \r\n"],[0,"    }\r\n};\r\n\r"]],"start1":1807,"start2":1807,"length1":24,"length2":34}]],"length":21204,"saved":false}
{"ts":1350359502550,"patch":[[{"diffs":[[0,"ndex];\r\n        "],[1,"if(cubie >=24)"],[0,"\r\n    }\r\n};\r\n\r\n/"]],"start1":1811,"start2":1811,"length1":32,"length2":46}]],"length":21218,"saved":false}
{"ts":1350359504386,"patch":[[{"diffs":[[0," >=24)\r\n"],[1,"        {\r\n            \r\n        }\r\n"],[0,"    }\r\n}"]],"start1":1835,"start2":1835,"length1":16,"length2":52}]],"length":21254,"saved":false}
{"ts":1350359510957,"patch":[[{"diffs":[[0,"ar cubie"],[1,", size"],[0,";\r\n    f"]],"start1":1735,"start2":1735,"length1":16,"length2":22}]],"length":21260,"saved":false}
{"ts":1350359517323,"patch":[[{"diffs":[[0," {\r\n            "],[1,"size = 2;"],[0,"\r\n        }\r\n   "]],"start1":1856,"start2":1856,"length1":32,"length2":41}]],"length":21269,"saved":false}
{"ts":1350359538349,"patch":[[{"diffs":[[0,"es[index];\r\n"],[1,"        size = cubie >=24 ? 2:3\r\n"],[0,"        if(c"]],"start1":1813,"start2":1813,"length1":24,"length2":57}]],"length":21302,"saved":false}
{"ts":1350359539039,"patch":[[{"diffs":[[0,"24 ? 2:3"],[1,";"],[0,"\r\n      "]],"start1":1848,"start2":1848,"length1":16,"length2":17}]],"length":21303,"saved":false}
{"ts":1350359540748,"patch":[[{"diffs":[[0,">=24 ? 2"],[-1,":"],[1," : "],[0,"3;\r\n    "]],"start1":1846,"start2":1846,"length1":17,"length2":19}]],"length":21305,"saved":false}
{"ts":1350359545396,"patch":[[{"diffs":[[0,"3;\r\n"],[-1,"        if(cubie >=24)\r\n        {\r\n            size = 2;\r\n        }\r\n"],[0,"    "]],"start1":1857,"start2":1857,"length1":77,"length2":8}]],"length":21236,"saved":false}
{"ts":1350359583247,"patch":[[{"diffs":[[0,"4 ? 2 : 3;\r\n"],[1,"        \r\n        for(var cFace =0; cFace < size; size++)\r\n        {\r\n            \r\n        }\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":1849,"start2":1849,"length1":24,"length2":119}]],"length":21331,"saved":false}
{"ts":1350359588704,"patch":[[{"diffs":[[0,"< size; "],[-1,"siz"],[1,"cFac"],[0,"e++)\r\n  "]],"start1":1903,"start2":1903,"length1":19,"length2":20}]],"length":21332,"saved":false}
{"ts":1350359702842,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n * \r\n * There's probably a better way to do this...\r\n */\r\nCubieFace.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};"],[0,"\r\n"]],"start1":18824,"start2":18824,"length1":2508,"length2":6}]],"length":18830,"saved":false}
{"ts":1350359711261,"patch":[[{"diffs":[[0,"tom\r\n];\r"],[1,"\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n * \r\n * There's probably a better way to do this...\r\n */\r\nCubieFace.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};\r"],[0,"\n/**\r\n *"]],"start1":1139,"start2":1139,"length1":16,"length2":2522}]],"length":21336,"saved":false}
{"ts":1350359716827,"patch":[[{"diffs":[[0,"ttom\r\n];\r\n\r\n"],[1,"/**\r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    var cubie, size;\r\n    for(var index in indicies)\r\n    {\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        for(var cFace =0; cFace < size; cFace++)\r\n        {\r\n            \r\n        }\r\n    }\r\n};\r\n\r\n"],[0,"/**\r\n * Give"]],"start1":1138,"start2":1138,"length1":24,"length2":846},{"diffs":[[0,"\n};\r"],[-1,"\n/**\r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    var cubie, size;\r\n    for(var index in indicies)\r\n    {\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        for(var cFace =0; cFace < size; cFace++)\r\n        {\r\n            \r\n        }\r\n    }\r\n};\r"],[0,"\n\r\n/"]],"start1":4471,"start2":4471,"length1":828,"length2":8}]],"length":21338,"saved":false}
{"ts":1350359732293,"patch":[[{"diffs":[[0," cFace ="],[1," "],[0,"0; cFace"]],"start1":1888,"start2":1888,"length1":16,"length2":17}]],"length":21339,"saved":false}
{"ts":1350359770500,"patch":[[{"diffs":[[0," {\r\n            "],[1,"CubieFace.newFaceMap[face][this.face]? \r\n                 CubieFace.newFaceMap[face][this.face][rotations]:this.face;"],[0,"\r\n        }\r\n   "]],"start1":1931,"start2":1931,"length1":32,"length2":149}]],"length":21456,"saved":false}
{"ts":1350359804393,"patch":[[{"diffs":[[0,"face][rotations]"],[-1,":"],[1," : "],[0,"this.face;\r\n    "]],"start1":2037,"start2":2037,"length1":33,"length2":35}]],"length":21458,"saved":false}
{"ts":1350359808791,"patch":[[{"diffs":[[0,"ewFaceMap[face]["],[-1,"this."],[0,"face]? \r\n       "]],"start1":1958,"start2":1958,"length1":37,"length2":32}]],"length":21453,"saved":false}
{"ts":1350359811455,"patch":[[{"diffs":[[0,"ewFaceMap[face]["],[-1,"this."],[0,"face][rotations]"]],"start1":2011,"start2":2011,"length1":37,"length2":32}]],"length":21448,"saved":false}
{"ts":1350359814379,"patch":[[{"diffs":[[0,"ions] : "],[-1,"this."],[0,"face;\r\n "]],"start1":2038,"start2":2038,"length1":21,"length2":16}]],"length":21443,"saved":false}
{"ts":1350359818689,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"            if ( \r\n"],[0,"            Cubi"]],"start1":1919,"start2":1919,"length1":32,"length2":51}]],"length":21462,"saved":false}
{"ts":1350359829501,"patch":[[{"diffs":[[0,"   if ( "],[-1,"\r\n            "],[0,"CubieFac"]],"start1":1944,"start2":1944,"length1":30,"length2":16},{"diffs":[[0,"[face][face]"],[1,")\r\n            "],[0,"? \r\n        "]],"start1":1972,"start2":1972,"length1":24,"length2":39}]],"length":21463,"saved":false}
{"ts":1350359853846,"patch":[[{"diffs":[[0,".newFaceMap["],[-1,"face"],[0,"][face])\r\n  "]],"start1":1961,"start2":1961,"length1":28,"length2":24},{"diffs":[[0,"face])\r\n"],[1,"            {\r\n                \r\n            }\r\n"],[0,"        "]],"start1":1975,"start2":1975,"length1":16,"length2":64}]],"length":21507,"saved":false}
{"ts":1350359865586,"patch":[[{"diffs":[[0,"                "],[1,"CubieFace.newFaceMap[face][face][rotations] "],[0,"\r\n            }\r"]],"start1":1998,"start2":1998,"length1":32,"length2":76},{"diffs":[[0,"        "],[-1,"?"],[0," \r\n     "]],"start1":2079,"start2":2079,"length1":17,"length2":16},{"diffs":[[0,"   C"],[-1,"ubieFace.newFaceMap[face][face][rotations] "],[0,": fa"]],"start1":2104,"start2":2104,"length1":51,"length2":8}]],"length":21507,"saved":false}
{"ts":1350359866788,"patch":[[{"diffs":[[0,"tations]"],[-1," "],[1,";"],[0,"\r\n      "]],"start1":2049,"start2":2049,"length1":17,"length2":17}]],"length":21507,"saved":false}
{"ts":1350359870456,"patch":[[{"diffs":[[0," }\r\n"],[-1,"             \r\n                 C: face;\r\n"],[0,"    "]],"start1":2071,"start2":2071,"length1":50,"length2":8}]],"length":21465,"saved":false}
{"ts":1350359879906,"patch":[[{"diffs":[[0,"FaceMap["],[1,"face"],[0,"][face])"]],"start1":1965,"start2":1965,"length1":16,"length2":20}]],"length":21469,"saved":false}
{"ts":1350359881666,"patch":[[{"diffs":[[0,"p[face]["],[-1,"face"],[0,"])\r\n    "]],"start1":1971,"start2":1971,"length1":20,"length2":16}]],"length":21465,"saved":false}
{"ts":1350359952272,"patch":[[{"diffs":[[0,"p[face]["],[1,"state.cubies[cFace+cubie"],[0,"])\r\n    "]],"start1":1971,"start2":1971,"length1":16,"length2":40}]],"length":21489,"saved":false}
{"ts":1350359960080,"patch":[[{"diffs":[[0,"p[face]["],[-1,"fac"],[1,"cFace+cubi"],[0,"e][rotat"]],"start1":2057,"start2":2057,"length1":19,"length2":26}]],"length":21496,"saved":false}
{"ts":1350360008612,"patch":[[{"diffs":[[0,"}\r\n    }\r\n};\r\n\r\n"],[1,"RubixState.rotateFace = function()\r\n{\r\n    \r\n}\r\n\r\n"],[0,"/**\r\n * Given th"]],"start1":2114,"start2":2114,"length1":32,"length2":82}]],"length":21546,"saved":false}
{"ts":1350360009626,"patch":[[{"diffs":[[0,"on()\r\n{\r\n    \r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Give"]],"start1":2160,"start2":2160,"length1":32,"length2":33}]],"length":21547,"saved":false}
{"ts":1350360025338,"patch":[[{"diffs":[[0,"e+cubie]"],[1,"]"],[0,")\r\n     "]],"start1":1996,"start2":1996,"length1":16,"length2":17}]],"length":21548,"saved":false}
{"ts":1350360056902,"patch":[[{"diffs":[[0,"Face = function("],[1,"face, currentFace, rotations"],[0,")\r\n{\r\n    \r\n};\r\n"]],"start1":2148,"start2":2148,"length1":32,"length2":60}]],"length":21576,"saved":false}
{"ts":1350360070720,"patch":[[{"diffs":[[0,"\n           "],[1,"\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function(face, currentFace, rotations)\r\n{\r\n    "],[0," if ( CubieF"]],"start1":1934,"start2":1934,"length1":24,"length2":121},{"diffs":[[0,"ce]["],[-1,"state.cubies[cFace+cubie]"],[1,"currentFace"],[0,"])\r\n"]],"start1":2072,"start2":2072,"length1":33,"length2":19},{"diffs":[[0," }\r\n"],[-1,"        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function(face, currentFace, rotations)\r\n{\r\n    \r\n"],[0,"};\r\n"]],"start1":2186,"start2":2186,"length1":105,"length2":8}]],"length":21562,"saved":false}
{"ts":1350360079543,"patch":[[{"diffs":[[0,"ns)\r\n{\r\n    "],[-1," "],[0,"if ( CubieFa"]],"start1":2031,"start2":2031,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"        {\r\n    "],[1,"{\r\n"],[0,"        "],[-1,"    "],[0,"Cubi"]],"start1":2090,"start2":2090,"length1":35,"length2":19},{"diffs":[[0,"ions];\r\n"],[-1,"        "],[0,"    }\r\n}"]],"start1":2150,"start2":2150,"length1":24,"length2":16}]],"length":21537,"saved":false}
{"ts":1350360085797,"patch":[[{"diffs":[[0,"e][c"],[-1,"Face+cubi"],[1,"urrentFac"],[0,"e][r"]],"start1":2129,"start2":2129,"length1":17,"length2":17}]],"length":21537,"saved":false}
{"ts":1350360111074,"patch":[[{"diffs":[[0,"ations)\r\n{\r\n"],[1,"    \r\n"],[0,"    if ( Cub"]],"start1":2027,"start2":2027,"length1":24,"length2":30},{"diffs":[[0,"\n    {\r\n        "],[1,"return "],[0,"CubieFace.newFac"]],"start1":2095,"start2":2095,"length1":32,"length2":39}]],"length":21550,"saved":false}
{"ts":1350360115885,"patch":[[{"diffs":[[0,"tions];\r\n    }\r\n"],[1,"    else\r\n    {\r\n"],[0,"};\r\n\r\n/**\r\n * Gi"]],"start1":2162,"start2":2162,"length1":32,"length2":49}]],"length":21567,"saved":false}
{"ts":1350360127963,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function("],[1,"if ( CubieFace.newFaceMap["],[0,"face"],[-1,", "],[1,"]["],[0,"curr"]],"start1":1942,"start2":1942,"length1":73,"length2":40},{"diffs":[[0,"Face"],[-1,", rotations)\r\n"],[1,"])\r\n            "],[0,"{\r\n    "],[1,"  "],[-1,"\r\n"],[0,"    "],[-1,"if ("],[1,"      return"],[0," Cub"]],"start1":1985,"start2":1985,"length1":39,"length2":49},{"diffs":[[0,"ace]"],[-1,")\r\n    {\r\n        return CubieFace.newFaceMap["],[1,"[rotations];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function("],[0,"face"],[-1,"]["],[1,", "],[0,"curr"]],"start1":2066,"start2":2066,"length1":60,"length2":100},{"diffs":[[0,"ace, currentFace"],[-1,"]["],[1,", "],[0,"rotations];\r\n   "]],"start1":2157,"start2":2157,"length1":34,"length2":34},{"diffs":[[0,"otations"],[-1,"];"],[1,")\r\n{"],[0,"\r\n    "],[-1,"}"],[1,"\r\n    "],[0,"\r\n    el"]],"start1":2176,"start2":2176,"length1":25,"length2":32}]],"length":21591,"saved":false}
{"ts":1350360133082,"patch":[[{"diffs":[[0,"\n           "],[-1," "],[0,"{\r\n         "]],"start1":1992,"start2":1992,"length1":25,"length2":24},{"diffs":[[0,"otations];\r\n"],[-1," "],[0,"           }"]],"start1":2071,"start2":2071,"length1":25,"length2":24}]],"length":21589,"saved":false}
{"ts":1350360138235,"patch":[[{"diffs":[[0,"\n           "],[1," "],[0,"if ( CubieFa"]],"start1":1934,"start2":1934,"length1":24,"length2":25},{"diffs":[[0,"e])\r\n           "],[1," "],[0,"{\r\n"],[-1,"    "],[0,"            retu"]],"start1":1989,"start2":1989,"length1":39,"length2":36},{"diffs":[[0,"otations];\r\n"],[1," "],[0,"           }"]],"start1":2069,"start2":2069,"length1":24,"length2":25}]],"length":21588,"saved":false}
{"ts":1350360139926,"patch":[[{"diffs":[[0,"            "],[1,"    "],[0,"return Cubie"]],"start1":2009,"start2":2009,"length1":24,"length2":28}]],"length":21592,"saved":false}
{"ts":1350360155845,"patch":[[{"diffs":[[0,"ceMap[face]["],[-1,"current"],[1,"state.cubies[cubie+c"],[0,"Face])\r\n    "]],"start1":1967,"start2":1967,"length1":31,"length2":44}]],"length":21605,"saved":false}
{"ts":1350360164082,"patch":[[{"diffs":[[0,"e+cFace]"],[1,"]"],[0,")\r\n     "]],"start1":1996,"start2":1996,"length1":16,"length2":17}]],"length":21606,"saved":false}
{"ts":1350360170081,"patch":[[{"diffs":[[0,"ce]["],[-1,"current"],[1,"state.cubies[cubie+c"],[0,"Face]"],[1,"]"],[0,"[rot"]],"start1":2069,"start2":2069,"length1":20,"length2":34}]],"length":21620,"saved":false}
{"ts":1350360174692,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.rotateFace = function(face, currentFace, rotations)\r\n{\r\n    \r\n    \r\n    else\r\n    {\r\n};"],[0,"\r\n\r\n"]],"start1":2148,"start2":2148,"length1":106,"length2":8}]],"length":21522,"saved":false}
{"ts":1350360178039,"patch":[[{"diffs":[[0,"        "],[-1,"return "],[0,"CubieFac"]],"start1":2031,"start2":2031,"length1":23,"length2":16}]],"length":21515,"saved":false}
{"ts":1350360186477,"patch":[[{"diffs":[[0,"ie, size"],[1,",nextFace"],[0,";\r\n    f"]],"start1":1743,"start2":1743,"length1":16,"length2":25}]],"length":21524,"saved":false}
{"ts":1350360190732,"patch":[[{"diffs":[[0,"                "],[1,"nextFace"],[0,"CubieFace.newFac"]],"start1":2032,"start2":2032,"length1":32,"length2":40}]],"length":21532,"saved":false}
{"ts":1350360192630,"patch":[[{"diffs":[[0,"nextFace"],[1," = "],[0,"CubieFac"]],"start1":2048,"start2":2048,"length1":16,"length2":19}]],"length":21535,"saved":false}
{"ts":1350360230856,"patch":[[{"diffs":[[0,"            "],[1,"\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function()\r\n{\r\n    "],[0,"if ( CubieFa"]],"start1":1944,"start2":1944,"length1":24,"length2":93},{"diffs":[[0,"])\r\n    "],[-1,"        {\r\n        "],[1,"{\r\n"],[0,"        "]],"start1":2082,"start2":2082,"length1":35,"length2":19},{"diffs":[[0,"];\r\n"],[-1,"            }\r\n        }\r\n"],[0,"    }\r\n}"],[-1,";\r\n"],[0,"\r\n\r\n"]],"start1":2175,"start2":2175,"length1":45,"length2":16}]],"length":21559,"saved":false}
{"ts":1350360260230,"patch":[[{"diffs":[[0," {\r\n            "],[1,"RubixState.rotateFace(state.cubies[cubie+cFace], face, rotations)   "],[0,"\r\n        }\r\n   "]],"start1":1940,"start2":1940,"length1":32,"length2":100}]],"length":21627,"saved":false}
{"ts":1350360264773,"patch":[[{"diffs":[[0,"tations)"],[1,";"],[0,"   \r\n   "]],"start1":2013,"start2":2013,"length1":16,"length2":17}]],"length":21628,"saved":false}
{"ts":1350360307476,"patch":[[{"diffs":[[0,"Face = function("],[1,"faceState, face, rotations"],[0,")\r\n{\r\n    if ( C"]],"start1":2068,"start2":2068,"length1":32,"length2":58}]],"length":21654,"saved":false}
{"ts":1350360408445,"patch":[[{"diffs":[[0,"ations)\r\n{\r\n"],[1,"    var faceVal = faceState >> 5\r\n"],[0,"    if ( Cub"]],"start1":2104,"start2":2104,"length1":24,"length2":58}]],"length":21688,"saved":false}
{"ts":1350360421785,"patch":[[{"diffs":[[0,"ate >> 5"],[1,";\r\n    \r\n    "],[0,"\r\n    if"]],"start1":2140,"start2":2140,"length1":16,"length2":29}]],"length":21701,"saved":false}
{"ts":1350360436770,"patch":[[{"diffs":[[0," >> 5;\r\n    "],[1,"var colorVal = faceStat & 1110"],[0,"\r\n    \r\n    "]],"start1":2143,"start2":2143,"length1":24,"length2":54}]],"length":21731,"saved":false}
{"ts":1350360437996,"patch":[[{"diffs":[[0,"t & 1110"],[1,";"],[0,"\r\n    \r\n"]],"start1":2177,"start2":2177,"length1":16,"length2":17}]],"length":21732,"saved":false}
{"ts":1350360440894,"patch":[[{"diffs":[[0,"faceStat"],[1,"e"],[0," & 1110;"]],"start1":2170,"start2":2170,"length1":16,"length2":17}]],"length":21733,"saved":false}
{"ts":1350360453532,"patch":[[{"diffs":[[0,"ce]["],[-1,"state.cubies[cubie+cFace]"],[1,"faceVal"],[0,"])\r\n"]],"start1":2227,"start2":2227,"length1":33,"length2":15}]],"length":21715,"saved":false}
{"ts":1350360462025,"patch":[[{"diffs":[[0,"ce]["],[-1,"state.cubies[cubie+cFace]"],[1,"if ( CubieFace.newFaceMap[face][state.cubies[cubie+cFace]])\r\n            {\r\n                nextFace = CubieFace.newFaceMap[face][state.cubies[cubie+cFace]][rotations];\r\n            }"],[0,"][ro"]],"start1":2291,"start2":2291,"length1":33,"length2":191}]],"length":21873,"saved":false}
{"ts":1350360468614,"patch":[[{"diffs":[[0,"ce]["],[-1,"if ( CubieFace.newFaceMap[face][state.cubies[cubie+cFace]])\r\n            {\r\n                nextFace = CubieFace.newFaceMap[face][state.cubies[cubie+cFace]][rotations];\r\n            }"],[1,"faceVap"],[0,"][ro"]],"start1":2291,"start2":2291,"length1":191,"length2":15}]],"length":21697,"saved":false}
{"ts":1350360470317,"patch":[[{"diffs":[[0,"][faceVa"],[-1,"p"],[1,"l"],[0,"][rotati"]],"start1":2293,"start2":2293,"length1":17,"length2":17}]],"length":21697,"saved":false}
{"ts":1350360477747,"patch":[[{"diffs":[[0,"    "],[-1,"nextFace ="],[1,"return"],[0," Cub"]],"start1":2253,"start2":2253,"length1":18,"length2":14}]],"length":21693,"saved":false}
{"ts":1350360483270,"patch":[[{"diffs":[[0,"\n    }\r\n"],[1,"    else \r\n    {\r\n        \r\n    }\r\n"],[0,"}\r\n\r\n\r\n/"]],"start1":2312,"start2":2312,"length1":16,"length2":51}]],"length":21728,"saved":false}
{"ts":1350360487617,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"return faceVal;   "],[0,"\r\n    }\r\n}\r\n\r\n\r\n"]],"start1":2330,"start2":2330,"length1":32,"length2":50}]],"length":21746,"saved":false}
{"ts":1350360490410,"patch":[[{"diffs":[[0,"    }\r\n}"],[1,";"],[0,"\r\n\r\n\r\n/*"]],"start1":2366,"start2":2366,"length1":16,"length2":17}]],"length":21747,"saved":false}
{"ts":1350360507230,"patch":[[{"diffs":[[0,"r faceVal = "],[1,"new Number("],[0,"faceState >>"]],"start1":2122,"start2":2122,"length1":24,"length2":35},{"diffs":[[0,"ate >> 5"],[1,")"],[0,";\r\n    v"]],"start1":2151,"start2":2151,"length1":16,"length2":17}]],"length":21759,"saved":false}
{"ts":1350360509579,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    var colorVal = faceState & 1110;\r\n"],[0,"    "]],"start1":2159,"start2":2159,"length1":46,"length2":8}]],"length":21721,"saved":false}
{"ts":1350360547682,"patch":[[{"diffs":[[0," return "],[1,"("],[0,"CubieFac"]],"start1":2230,"start2":2230,"length1":16,"length2":17},{"diffs":[[0,"tations]"],[1," << 5) & colorVal"],[0,";\r\n    }"]],"start1":2277,"start2":2277,"length1":16,"length2":33}]],"length":21739,"saved":false}
{"ts":1350360558570,"patch":[[{"diffs":[[0,"ate >> 5);\r\n"],[1,"    var colorVal\r\n"],[0,"    \r\n    if"]],"start1":2151,"start2":2151,"length1":24,"length2":42}]],"length":21757,"saved":false}
{"ts":1350360568536,"patch":[[{"diffs":[[0,"colorVal"],[1," = faceState & 1110"],[0,"\r\n    \r\n"]],"start1":2171,"start2":2171,"length1":16,"length2":35}]],"length":21776,"saved":false}
{"ts":1350360579990,"patch":[[{"diffs":[[0,"e & 1110"],[1,";"],[0,"\r\n    \r\n"]],"start1":2190,"start2":2190,"length1":16,"length2":17}]],"length":21777,"saved":false}
{"ts":1350360589902,"patch":[[{"diffs":[[0,"aceVal ="],[-1," new"],[0," Number("]],"start1":2125,"start2":2125,"length1":20,"length2":16}]],"length":21773,"saved":false}
{"ts":1350360616646,"patch":[[{"diffs":[[0,"        "],[1," state.cubies[cubie+cFace] -"],[0," RubixSt"]],"start1":1947,"start2":1947,"length1":16,"length2":44}]],"length":21801,"saved":false}
{"ts":1350360618299,"patch":[[{"diffs":[[0,"+cFace] "],[-1,"- "],[1,"="],[0,"RubixSta"]],"start1":1974,"start2":1974,"length1":18,"length2":17}]],"length":21800,"saved":false}
{"ts":1350360619024,"patch":[[{"diffs":[[0,"cFace] ="],[1," "],[0,"RubixSta"]],"start1":1975,"start2":1975,"length1":16,"length2":17}]],"length":21801,"saved":false}
{"ts":1350360624333,"patch":[[{"diffs":[[0,"ateFace("],[1,"\r\n                "],[0,"state.cu"]],"start1":1998,"start2":1998,"length1":16,"length2":34}]],"length":21819,"saved":false}
{"ts":1350360640665,"patch":[[{"diffs":[[0,"  }\r\n    }\r\n"],[1,"    \r\n     for (index = 0; index < indicies.length; index++)\r\n    {\r\n        newIndex = (index + (2 * rotations)) % 8;\r\n        this.cubies[indicies[newIndex]] = tempCubies[indicies[index]];\r\n    }\r\n"],[0,"};\r\n\r\nRubixS"]],"start1":2079,"start2":2079,"length1":24,"length2":223}]],"length":22018,"saved":false}
{"ts":1350360652907,"patch":[[{"diffs":[[0,"e,ne"],[-1,"xtFace"],[1,"wIndex"],[0,";\r\n "]],"start1":1750,"start2":1750,"length1":14,"length2":14}]],"length":22018,"saved":false}
{"ts":1350360688698,"patch":[[{"diffs":[[0,"\n    \r\n}\r\n\r\n"],[1,"RubixState.scratchBuffer = new Uint8Array();\r\n"],[0,"/**\r\n * The "]],"start1":524,"start2":524,"length1":24,"length2":70}]],"length":22064,"saved":false}
{"ts":1350360715700,"patch":[[{"diffs":[[0,"t8Array("],[1,"new ArrayBuffer(20"],[0,");\r\n/**\r"]],"start1":570,"start2":570,"length1":16,"length2":34}]],"length":22082,"saved":false}
{"ts":1350360733421,"patch":[[{"diffs":[[0,"ffer(20)"],[1,")"],[0,";\r\n/**\r\n"]],"start1":589,"start2":589,"length1":16,"length2":17}]],"length":22083,"saved":false}
{"ts":1350360734214,"patch":[[{"diffs":[[0,"(20));\r\n"],[1,"\r\n"],[0,"/**\r\n * "]],"start1":593,"start2":593,"length1":16,"length2":18}]],"length":22085,"saved":false}
{"ts":1350360745013,"patch":[[{"diffs":[[0,"ewIndex]] = "],[-1,"tempCubies"],[1,"scratchBuffer"],[0,"[indicies[in"]],"start1":2308,"start2":2308,"length1":34,"length2":37}]],"length":22088,"saved":false}
{"ts":1350360752217,"patch":[[{"diffs":[[0,"dex]] = "],[1,"RubixState."],[0,"scratchB"]],"start1":2312,"start2":2312,"length1":16,"length2":27}]],"length":22099,"saved":false}
{"ts":1350360782402,"patch":[[{"diffs":[[0,"    "],[-1,"state.cubies[cubie+cFace]"],[1,"RubixState.scratchBuffer"],[0," = R"]],"start1":2019,"start2":2019,"length1":33,"length2":32}]],"length":22098,"saved":false}
{"ts":1350360795617,"patch":[[{"diffs":[[0,"chBuffer"],[1,"[index+cFace]"],[0," = Rubix"]],"start1":2039,"start2":2039,"length1":16,"length2":29}]],"length":22111,"saved":false}
{"ts":1350360832486,"patch":[[{"diffs":[[0,"\n    }\r\n    "],[1,"/*"],[0,"\r\n     for ("]],"start1":2162,"start2":2162,"length1":24,"length2":26},{"diffs":[[0,"[index]];\r\n    }"],[1,"*/"],[0,"\r\n};\r\n\r\nRubixSta"]],"start1":2367,"start2":2367,"length1":32,"length2":34}]],"length":22115,"saved":false}
{"ts":1350360883385,"patch":[[{"diffs":[[0," }\r\n    "],[-1,"/*"],[1,"\r\n    //3,2,3,2,3,2,3\r\n    "],[0,"\r\n     f"]],"start1":2166,"start2":2166,"length1":18,"length2":43}]],"length":22140,"saved":false}
{"ts":1350360885538,"patch":[[{"diffs":[[0,";\r\n    }"],[-1,"*/"],[0,"\r\n};\r\n\r\n"]],"start1":2400,"start2":2400,"length1":18,"length2":16}]],"length":22138,"saved":false}
{"ts":1350360889972,"patch":[[{"diffs":[[0,"s.length; index+"],[-1,"+"],[1,"=5"],[0,")\r\n    {\r\n      "]],"start1":2239,"start2":2239,"length1":33,"length2":34}]],"length":22139,"saved":false}
{"ts":1350360899950,"patch":[[{"diffs":[[0," 0; index < "],[-1,"indicies"],[1,"scratchBuffer"],[0,".length; ind"]],"start1":2220,"start2":2220,"length1":32,"length2":37}]],"length":22144,"saved":false}
{"ts":1350360903993,"patch":[[{"diffs":[[0,"hBuffer["],[-1,"indicies[index]"],[0,"];\r\n    "]],"start1":2382,"start2":2382,"length1":31,"length2":16}]],"length":22129,"saved":false}
{"ts":1350360909207,"patch":[[{"diffs":[[0,"index < "],[1,"RubixState."],[0,"scratchB"]],"start1":2224,"start2":2224,"length1":16,"length2":27}]],"length":22140,"saved":false}
{"ts":1350360915260,"patch":[[{"diffs":[[0,",3,2"],[-1,",3\r\n"],[0,"    "]],"start1":2189,"start2":2189,"length1":12,"length2":8}]],"length":22136,"saved":false}
{"ts":1350360927374,"patch":[[{"diffs":[[0,",3,2,3,2"],[1,",3,2"],[0,"    \r\n  "]],"start1":2185,"start2":2185,"length1":16,"length2":20}]],"length":22140,"saved":false}
{"ts":1350360934928,"patch":[[{"diffs":[[0,"  //3,2,"],[1," "],[0,"3,2,"],[1," "],[0,"3,2,"],[1," "],[0,"3,2    \r"]],"start1":2178,"start2":2178,"length1":24,"length2":27}]],"length":22143,"saved":false}
{"ts":1350360988937,"patch":[[{"diffs":[[0,"  \r\n    "],[-1," "],[0,"for (ind"]],"start1":2202,"start2":2202,"length1":17,"length2":16},{"diffs":[[0,"dex+=5)\r\n    {\r\n"],[1,"        \r\n"],[0,"        newIndex"]],"start1":2269,"start2":2269,"length1":32,"length2":42}]],"length":22152,"saved":false}
{"ts":1350360996496,"patch":[[{"diffs":[[0,") % 8;\r\n        "],[-1,"this."],[0,"cubies[indicies["]],"start1":2338,"start2":2338,"length1":37,"length2":32}]],"length":22147,"saved":false}
{"ts":1350360999978,"patch":[[{"diffs":[[0,"8;\r\n        "],[1,"state."],[0,"cubies[indic"]],"start1":2342,"start2":2342,"length1":24,"length2":30}]],"length":22153,"saved":false}
{"ts":1350361011019,"patch":[[{"diffs":[[0,"hBuffer["],[1,"90"],[0,"];\r\n    "]],"start1":2406,"start2":2406,"length1":16,"length2":18}]],"length":22155,"saved":false}
{"ts":1350361196541,"patch":[[{"diffs":[[0,"\n    {\r\n"],[-1,"        \r\n"],[0,"        "]],"start1":2277,"start2":2277,"length1":26,"length2":16},{"diffs":[[0,"fer["],[-1,"90"],[1,"index "],[0,"];\r\n"]],"start1":2400,"start2":2400,"length1":10,"length2":14}]],"length":22149,"saved":false}
{"ts":1350361207325,"patch":[[{"diffs":[[0,"e, size,"],[-1,"newIndex"],[1,"offset"],[0,";\r\n    f"]],"start1":1811,"start2":1811,"length1":24,"length2":22}]],"length":22147,"saved":false}
{"ts":1350361212495,"patch":[[{"diffs":[[0," {\r\n        "],[-1,"newIndex"],[1,"offset"],[0," = (index + "]],"start1":2279,"start2":2279,"length1":32,"length2":30},{"diffs":[[0,"es[indicies["],[-1,"newIndex"],[1,"offset"],[0,"]] = RubixSt"]],"start1":2350,"start2":2350,"length1":32,"length2":30}]],"length":22143,"saved":false}
{"ts":1350361235211,"patch":[[{"diffs":[[0,"e, size,"],[-1,"offset"],[1,"newIndex"],[0,";\r\n    f"]],"start1":1811,"start2":1811,"length1":22,"length2":24},{"diffs":[[0,"        "],[-1,"offset"],[1,"newIndex"],[0," = (inde"]],"start1":2285,"start2":2285,"length1":22,"length2":24},{"diffs":[[0,"ies["],[-1,"offset"],[1,"newIndex"],[0,"]] ="]],"start1":2362,"start2":2362,"length1":14,"length2":16}]],"length":22149,"saved":false}
{"ts":1350361245691,"patch":[[{"diffs":[[0,"     newIndex = "],[1,"indicies["],[0,"(index + (2 * ro"]],"start1":2288,"start2":2288,"length1":32,"length2":41},{"diffs":[[0," rotations)) % 8"],[1,")"],[0,";\r\n        state"]],"start1":2326,"start2":2326,"length1":32,"length2":33},{"diffs":[[0,"tate.cubies["],[-1,"indicies["],[0,"newIndex]] ="]],"start1":2355,"start2":2355,"length1":33,"length2":24}]],"length":22150,"saved":false}
{"ts":1350361246560,"patch":[[{"diffs":[[0,"s)) % 8)"],[1,"]"],[0,";\r\n     "]],"start1":2335,"start2":2335,"length1":16,"length2":17}]],"length":22151,"saved":false}
{"ts":1350361257465,"patch":[[{"diffs":[[0,"ns)) % 8"],[-1,")"],[0,"];\r\n    "]],"start1":2334,"start2":2334,"length1":17,"length2":16}]],"length":22150,"saved":false}
{"ts":1350361268269,"patch":[[{"diffs":[[0,"er[index"],[-1," "],[0,"];\r\n    "]],"start1":2402,"start2":2402,"length1":17,"length2":16}]],"length":22149,"saved":false}
{"ts":1350361273680,"patch":[[{"diffs":[[0,"ewIndex]"],[-1,"]"],[0," = Rubix"]],"start1":2368,"start2":2368,"length1":17,"length2":16}]],"length":22148,"saved":false}
{"ts":1350361286452,"patch":[[{"diffs":[[0,"dex+"],[-1,"=5"],[1,"+"],[0,")\r\n "]],"start1":2269,"start2":2269,"length1":10,"length2":9},{"diffs":[[0,"ns)) % 8];\r\n"],[1,"        \r\n"],[0,"        stat"]],"start1":2333,"start2":2333,"length1":24,"length2":34}]],"length":22157,"saved":false}
{"ts":1350361322766,"patch":[[{"diffs":[[0,"er[index];\r\n"],[1,"        state.cubies[newIndex] = RubixState.scratchBuffer[index];\r\n\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":2410,"start2":2410,"length1":24,"length2":93}]],"length":22226,"saved":false}
{"ts":1350361335583,"patch":[[{"diffs":[[0,"Buffer[index"],[1,"*5"],[0,"];\r\n        "]],"start1":2406,"start2":2406,"length1":24,"length2":26}]],"length":22228,"saved":false}
{"ts":1350361344622,"patch":[[{"diffs":[[0,"Buffer[index"],[1,"*5+1"],[0,"];\r\n\r\n    }\r"]],"start1":2475,"start2":2475,"length1":24,"length2":28}]],"length":22232,"saved":false}
{"ts":1350361348180,"patch":[[{"diffs":[[0,".cubies[newIndex"],[1,"+1"],[0,"] = RubixState.s"]],"start1":2437,"start2":2437,"length1":32,"length2":34}]],"length":22234,"saved":false}
{"ts":1350361397454,"patch":[[{"diffs":[[0," 8];\r\n        \r\n"],[1,"        for(var offset = 0; offset < 5; offset++)\r\n        {\r\n            \r\n        }\r\n"],[0,"        state.cu"]],"start1":2339,"start2":2339,"length1":32,"length2":119},{"diffs":[[0,"x*5+1];\r"],[1,"\n        state.cubies[newIndex+2] = RubixState.scratchBuffer[index*5+1];\r"],[0,"\n\r\n    }"]],"start1":2575,"start2":2575,"length1":16,"length2":89}]],"length":22394,"saved":false}
{"ts":1350361411183,"patch":[[{"diffs":[[0,"        "],[-1,"\r\n        }\r\n"],[0,"        "]],"start1":2421,"start2":2421,"length1":29,"length2":16},{"diffs":[[0,"ies[newIndex"],[1," + 1"],[0,"] = RubixSta"]],"start1":2446,"start2":2446,"length1":24,"length2":28},{"diffs":[[0,"ndex"],[-1,"*5];"],[1," * 5 + 1];\r\n\r\n        }"],[0,"\r\n  "]],"start1":2492,"start2":2492,"length1":12,"length2":31}]],"length":22404,"saved":false}
{"ts":1350361412608,"patch":[[{"diffs":[[0,"            "],[-1,"        "],[0,"state.cubies"]],"start1":2417,"start2":2417,"length1":32,"length2":24}]],"length":22396,"saved":false}
{"ts":1350361422895,"patch":[[{"diffs":[[0,"5 + "],[-1,"1];\r\n\r\n        }\r\n        state.cubies[newIndex+1] = RubixState.scratchBuffer[index*5+1];\r\n        state.cubies[newIndex+2] = RubixState.scratchBuffer[index*5+1];"],[1,"offset];\r\n        }"],[0,"\r\n\r\n"]],"start1":2491,"start2":2491,"length1":170,"length2":27}]],"length":22253,"saved":false}
{"ts":1350361428757,"patch":[[{"diffs":[[0,"Index + "],[-1,"1"],[1,"offset"],[0,"] = Rubi"]],"start1":2445,"start2":2445,"length1":17,"length2":22}]],"length":22258,"saved":false}
{"ts":1350361454810,"patch":[[{"diffs":[[0,"r.length; index+"],[-1,"+"],[1,"=2"],[0,")\r\n    {\r\n      "]],"start1":2257,"start2":2257,"length1":33,"length2":34}]],"length":22259,"saved":false}
{"ts":1350361458716,"patch":[[{"diffs":[[0,"ffset < "],[-1,"5"],[1,"3"],[0,"; offset"]],"start1":2385,"start2":2385,"length1":17,"length2":17}]],"length":22259,"saved":false}
{"ts":1350361464715,"patch":[[{"diffs":[[0,"     }\r\n"],[1,"        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n\r\n"],[0,"\r\n    }\r"]],"start1":2514,"start2":2514,"length1":16,"length2":79}]],"length":22322,"saved":false}
{"ts":1350361472850,"patch":[[{"diffs":[[0,"ndicies[(index +"],[1," 1 +"],[0," (2 * rotations)"]],"start1":2542,"start2":2542,"length1":32,"length2":36}]],"length":22326,"saved":false}
{"ts":1350361476631,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n"],[0,"        newI"]],"start1":2510,"start2":2510,"length1":24,"length2":34}]],"length":22336,"saved":false}
{"ts":1350361484955,"patch":[[{"diffs":[[0," % 8];\r\n"],[1,"        \r\n        for(var offset = 0; offset < 3; offset++)\r\n        {\r\n            state.cubies[newIndex + offset] = RubixState.scratchBuffer[index * 5 + offset];\r\n        }\r\n"],[0,"\r\n\r\n    "]],"start1":2589,"start2":2589,"length1":16,"length2":192}]],"length":22512,"saved":false}
{"ts":1350361493652,"patch":[[{"diffs":[[0,"t = 0; offset < "],[-1,"3"],[1,"2"],[0,"; offset++)\r\n   "]],"start1":2628,"start2":2628,"length1":33,"length2":33}]],"length":22512,"saved":false}
{"ts":1350361498502,"patch":[[{"diffs":[[0,"  \r\n        for("],[-1,"var "],[0,"offset = 0; offs"]],"start1":2603,"start2":2603,"length1":36,"length2":32}]],"length":22508,"saved":false}
{"ts":1350361513624,"patch":[[{"diffs":[[0,"ize,newIndex"],[1,",offset, cFace"],[0,";\r\n    for(v"]],"start1":1815,"start2":1815,"length1":24,"length2":38}]],"length":22522,"saved":false}
{"ts":1350361518894,"patch":[[{"diffs":[[0,"    for("],[-1,"var "],[0,"cFace = "]],"start1":1967,"start2":1967,"length1":20,"length2":16},{"diffs":[[0,"    for("],[-1,"var "],[0,"offset ="]],"start1":2370,"start2":2370,"length1":20,"length2":16}]],"length":22514,"saved":false}
{"ts":1350361522127,"patch":[[{"diffs":[[0,"et, cFace;\r\n"],[1,"    \r\n"],[0,"    for(var "]],"start1":1832,"start2":1832,"length1":24,"length2":30}]],"length":22520,"saved":false}
{"ts":1350361579223,"patch":[[{"diffs":[[0,"dex * 5 + offset"],[1," + 3"],[0,"];\r\n        }\r\n\r"]],"start1":2750,"start2":2750,"length1":32,"length2":36}]],"length":22524,"saved":false}
{"ts":1350361587929,"patch":[[{"diffs":[[0,"     }\r\n"],[-1,"\r\n\r\n"],[0,"    }\r\n}"]],"start1":2777,"start2":2777,"length1":20,"length2":16}]],"length":22520,"saved":false}
{"ts":1350361801047,"patch":[[{"diffs":[[0,"yBuffer("],[-1,"56"],[1,"48"],[0,"));\r\n   "]],"start1":504,"start2":504,"length1":18,"length2":18}]],"length":22520,"saved":false}
{"ts":1350361803934,"patch":[[{"diffs":[[0,"// ("],[-1,"56"],[1,"48"],[0," byt"]],"start1":402,"start2":402,"length1":10,"length2":10}]],"length":22520,"saved":false}
{"ts":1350363105500,"patch":[[{"diffs":[[0,"urn face"],[-1,"Val"],[1,"State"],[0,";   \r\n  "]],"start1":3122,"start2":3122,"length1":19,"length2":21}]],"length":22522,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350387607988,"patch":[[{"diffs":[[0,"] << 5) "],[-1,"&"],[1,"|"],[0," colorVa"]],"start1":3065,"start2":3065,"length1":17,"length2":17}]],"length":22522,"saved":false}
{"ts":1350395611834,"patch":[[{"diffs":[[0,"   }\r\n};\r\n\r\n"],[1,"RubixState.create()\r\n{\r\n    \r\n}\r\n\r\n"],[0,"\r\n/**\r\n * Gi"]],"start1":3142,"start2":3142,"length1":24,"length2":59}]],"length":22557,"saved":false}
{"ts":1350395613507,"patch":[[{"diffs":[[0,"\r\n{\r\n    \r\n}"],[1,";"],[0,"\r\n\r\n\r\n/**\r\n "]],"start1":3173,"start2":3173,"length1":24,"length2":25}]],"length":22558,"saved":false}
{"ts":1350395623114,"patch":[[{"diffs":[[0,"e.create"],[1,"Goal = function"],[0,"()\r\n{\r\n "]],"start1":3163,"start2":3163,"length1":16,"length2":31}]],"length":22573,"saved":false}
{"ts":1350395635821,"patch":[[{"diffs":[[0,"    \r\n};\r\n\r\n"],[1,"RubixState.createGoal = function()\r\n{\r\n    \r\n};\r\n\r\n"],[0,"\r\n/**\r\n * Gi"]],"start1":3193,"start2":3193,"length1":24,"length2":75}]],"length":22624,"saved":false}
{"ts":1350395650514,"patch":[[{"diffs":[[0,"\nRubixState."],[-1,"createGoal"],[1,"initWithGoalState"],[0," = function("]],"start1":3204,"start2":3204,"length1":34,"length2":41}]],"length":22631,"saved":false}
{"ts":1350395661650,"patch":[[{"diffs":[[0,"ate."],[-1,"createGoal"],[1,"initWithGoalState"],[0," = f"]],"start1":3161,"start2":3161,"length1":18,"length2":25}]],"length":22638,"saved":false}
{"ts":1350395666645,"patch":[[{"diffs":[[0,";\r\n\r\nRubixState."],[-1,"init"],[1,"Create"],[0,"WithGoalState = "]],"start1":3149,"start2":3149,"length1":36,"length2":38}]],"length":22640,"saved":false}
{"ts":1350395670070,"patch":[[{"diffs":[[0,"ixState."],[-1,"C"],[1,"c"],[0,"reateWit"]],"start1":3157,"start2":3157,"length1":17,"length2":17}]],"length":22640,"saved":false}
{"ts":1350395681682,"patch":[[{"diffs":[[0,";\r\n\r\nRubixState."],[-1,"init"],[1,"create"],[0,"WithGoalState = "]],"start1":3209,"start2":3209,"length1":36,"length2":38}]],"length":22642,"saved":false}
{"ts":1350395701817,"patch":[[{"diffs":[[0,"e.createWith"],[-1,"GoalState"],[1,"String"],[0," = function("]],"start1":3223,"start2":3223,"length1":33,"length2":30}]],"length":22639,"saved":false}
{"ts":1350395745055,"patch":[[{"diffs":[[0,"    \r\n};\r\n\r\n"],[1,"RubixState.copy = function()\r\n{\r\n    \r\n};\r\n\r\n"],[0,"\r\n/**\r\n * Gi"]],"start1":3259,"start2":3259,"length1":24,"length2":69}]],"length":22684,"saved":false}
{"ts":1350395750550,"patch":[[{"diffs":[[0,"copy = function("],[1,"state"],[0,")\r\n{\r\n    \r\n};\r\n"]],"start1":3282,"start2":3282,"length1":32,"length2":37}]],"length":22689,"saved":false}
{"ts":1350395800725,"patch":[[{"diffs":[[0,"ction()\r\n{\r\n    "],[1,"new Uint8Array(new ArrayBuffer(48));"],[0,"\r\n};\r\n\r\nRubixSta"]],"start1":3247,"start2":3247,"length1":32,"length2":68}]],"length":22725,"saved":false}
{"ts":1350395812832,"patch":[[{"diffs":[[0,"\r\n{\r\n   "],[1," var state ="],[0," new Uin"]],"start1":3254,"start2":3254,"length1":16,"length2":28}]],"length":22737,"saved":false}
{"ts":1350395827188,"patch":[[{"diffs":[[0,"ring = function("],[1,"text"],[0,")\r\n{\r\n    var st"]],"start1":3237,"start2":3237,"length1":32,"length2":36}]],"length":22741,"saved":false}
{"ts":1350395835053,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"\r\n"],[0,"    // I"]],"start1":13180,"start2":13180,"length1":18,"length2":16}]],"length":22739,"saved":false}
{"ts":1350395860368,"patch":[[{"diffs":[[0,"ction(text)\r\n{\r\n"],[1,"     var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n        \r\n"],[0,"    var state = "]],"start1":3247,"start2":3247,"length1":32,"length2":996}]],"length":23703,"saved":false}
{"ts":1350395882737,"patch":[[{"diffs":[[0,"new "],[-1,"Uint8Array(new ArrayBuffer(48)"],[1,"RubixState("],[0,");\r\n"]],"start1":4243,"start2":4243,"length1":38,"length2":19}]],"length":23684,"saved":false}
{"ts":1350395979688,"patch":[[{"diffs":[[0,"State();\r\n};\r\n\r\n"],[1,"RubixState.createFace = function(face,)\r\n{\r\n    \r\n}\r\n\r\n"],[0,"RubixState.copy "]],"start1":4252,"start2":4252,"length1":32,"length2":87}]],"length":23739,"saved":false}
{"ts":1350395992036,"patch":[[{"diffs":[[0,"on(face,"],[1," color"],[0,")\r\n{\r\n  "]],"start1":4298,"start2":4298,"length1":16,"length2":22}]],"length":23745,"saved":false}
{"ts":1350396003216,"patch":[[{"diffs":[[0,"lor)\r\n{\r\n    \r\n}"],[1,";"],[0,"\r\n\r\nRubixState.c"]],"start1":4309,"start2":4309,"length1":32,"length2":33}]],"length":23746,"saved":false}
{"ts":1350396058963,"patch":[[{"diffs":[[0,"unction("],[-1,"face"],[1,"element"],[0,", color)"]],"start1":4293,"start2":4293,"length1":20,"length2":23}]],"length":23749,"saved":false}
{"ts":1350396068748,"patch":[[{"diffs":[[0,"ement, color"],[1,", face"],[0,")\r\n{\r\n    \r\n"]],"start1":4303,"start2":4303,"length1":24,"length2":30}]],"length":23755,"saved":false}
{"ts":1350396143122,"patch":[[{"diffs":[[0,", face)\r\n{\r\n    "],[1,"element = element & 0;\r\n    switch (color)"],[0,"\r\n};\r\n\r\nRubixSta"]],"start1":4315,"start2":4315,"length1":32,"length2":74}]],"length":23797,"saved":false}
{"ts":1350396152691,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"e"],[1,"var tempE"],[0,"lement ="]],"start1":4323,"start2":4323,"length1":17,"length2":25}]],"length":23805,"saved":false}
{"ts":1350396156845,"patch":[[{"diffs":[[0,"color)\r\n"],[1,"    {\r\n        \r\n    }\r\n"],[0,"};\r\n\r\nRu"]],"start1":4375,"start2":4375,"length1":16,"length2":40}]],"length":23829,"saved":false}
{"ts":1350396188666,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"case 'R':\r\n            tempElement = tempElement | 0000;"],[0,"\r\n    }\r\n};\r\n\r\nR"]],"start1":4382,"start2":4382,"length1":32,"length2":88}]],"length":23885,"saved":false}
{"ts":1350396231673,"patch":[[{"diffs":[[0,"nt | 0000;\r\n"],[1,"        case 'G':\r\n            ttempElement = tempElement | 0010;\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":4444,"start2":4444,"length1":24,"length2":91}]],"length":23952,"saved":false}
{"ts":1350396235219,"patch":[[{"diffs":[[0,"        "],[-1,"t"],[0,"tempElem"]],"start1":4479,"start2":4479,"length1":17,"length2":16}]],"length":23951,"saved":false}
{"ts":1350396246842,"patch":[[{"diffs":[[0,"nt | 0000;\r\n"],[1,"            break;\r\n"],[0,"        case"]],"start1":4444,"start2":4444,"length1":24,"length2":44},{"diffs":[[0,"nt | 0010;\r\n"],[1,"            break;\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":4530,"start2":4530,"length1":24,"length2":44}]],"length":23991,"saved":false}
{"ts":1350396269624,"patch":[[{"diffs":[[0,"ement | "],[-1,"000"],[0,"0;\r\n    "]],"start1":4441,"start2":4441,"length1":19,"length2":16},{"diffs":[[0,"ement | "],[-1,"00"],[0,"10;\r\n   "]],"start1":4524,"start2":4524,"length1":18,"length2":16},{"diffs":[[0,"    break;\r\n"],[1,"        case 'Y':\r\n            tempElement\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":4545,"start2":4545,"length1":24,"length2":68}]],"length":24030,"saved":false}
{"ts":1350396278268,"patch":[[{"diffs":[[0,"pElement"],[1," = tempElement | 100;"],[0,"\r\n    }\r"]],"start1":4591,"start2":4591,"length1":16,"length2":37}]],"length":24051,"saved":false}
{"ts":1350396283628,"patch":[[{"diffs":[[0,"ent | 100;\r\n"],[1,"            break;\r\n            \r\n"],[0,"    }\r\n};\r\n\r"]],"start1":4610,"start2":4610,"length1":24,"length2":58}]],"length":24085,"saved":false}
{"ts":1350396319672,"patch":[[{"diffs":[[0,"tate >> "],[-1,"5"],[1,"4"],[0,");\r\n    "]],"start1":2893,"start2":2893,"length1":17,"length2":17},{"diffs":[[0,"k;\r\n        "],[-1,"    "],[1,"case 'B'"],[0,"\r\n    }\r\n};\r"]],"start1":4638,"start2":4638,"length1":28,"length2":32}]],"length":24089,"saved":false}
{"ts":1350396333509,"patch":[[{"diffs":[[0,"te & 111"],[-1,"0"],[0,";\r\n    \r"]],"start1":2932,"start2":2932,"length1":17,"length2":16}]],"length":24088,"saved":false}
{"ts":1350396349660,"patch":[[{"diffs":[[0,"  //"],[1,"-"],[0,"***-+++"],[-1,"-"],[0," 2 u"]],"start1":317,"start2":317,"length1":16,"length2":16}]],"length":24088,"saved":false}
{"ts":1350396388837,"patch":[[{"diffs":[[0,"ment | 1"],[-1,"0"],[0,";\r\n     "]],"start1":4524,"start2":4524,"length1":17,"length2":16},{"diffs":[[0,"ent | 10"],[-1,"0"],[0,";\r\n     "]],"start1":4608,"start2":4608,"length1":17,"length2":16}]],"length":24086,"saved":false}
{"ts":1350396408877,"patch":[[{"diffs":[[0,"ate();\r\n};\r\n"],[1,"//*=face +=color -=unused\r\n    //-***-+++ "],[0,"\r\nRubixState"]],"start1":4253,"start2":4253,"length1":24,"length2":66}]],"length":24128,"saved":false}
{"ts":1350396410373,"patch":[[{"diffs":[[0,"color -=unused\r\n"],[-1,"    "],[0,"//-***-+++ \r\nRub"]],"start1":4276,"start2":4276,"length1":36,"length2":32}]],"length":24124,"saved":false}
{"ts":1350396411137,"patch":[[{"diffs":[[0,");\r\n};\r\n"],[1,"\r\n"],[0,"//*=face"]],"start1":4257,"start2":4257,"length1":16,"length2":18}]],"length":24126,"saved":false}
{"ts":1350396449663,"patch":[[{"diffs":[[0,"case 'B'"],[1,":\r\n            tempElement = tempElement | 11;\r\n            break;\r\n        case 'O':\r\n            tempElement = tempElement | 100;\r\n            \r\n        "],[0,"\r\n    }\r"]],"start1":4687,"start2":4687,"length1":16,"length2":171}]],"length":24281,"saved":false}
{"ts":1350396451964,"patch":[[{"diffs":[[0,"0;\r\n            "],[1,"break;"],[0,"\r\n        \r\n    "]],"start1":4824,"start2":4824,"length1":32,"length2":38}]],"length":24287,"saved":false}
{"ts":1350396483235,"patch":[[{"diffs":[[0,"        break;\r\n"],[1,"        case 'W':\r\n            tempElement = tempElement | 110;\r\n"],[0,"        \r\n    }\r"]],"start1":4832,"start2":4832,"length1":32,"length2":97}]],"length":24352,"saved":false}
{"ts":1350396524922,"patch":[[{"diffs":[[0,"ement | "],[1,"0b"],[0,"110;\r\n  "]],"start1":4899,"start2":4899,"length1":16,"length2":18}]],"length":24354,"saved":false}
{"ts":1350396533905,"patch":[[{"diffs":[[0,"ent | 0b"],[1," "],[0,"110;\r\n  "]],"start1":4901,"start2":4901,"length1":16,"length2":17}]],"length":24355,"saved":false}
{"ts":1350396535740,"patch":[[{"diffs":[[0," | 0"],[-1,"b"],[0," "],[1,"b"],[0,"110;"]],"start1":4904,"start2":4904,"length1":10,"length2":10}]],"length":24355,"saved":false}
{"ts":1350396537520,"patch":[[{"diffs":[[0,"lement |"],[-1," 0"],[0," b110;\r\n"]],"start1":4898,"start2":4898,"length1":18,"length2":16}]],"length":24353,"saved":false}
{"ts":1350396608447,"patch":[[{"diffs":[[0,"t & 0;\r\n    "],[-1,""],[0,""],[1,"var toAdd = 0;\r\n    "],[0,"switch (colo"]],"start1":4394,"start2":4394,"length1":24,"length2":44},{"diffs":[[0,"ement | "],[-1,"10"],[1,"2"],[0,";\r\n     "]],"start1":4666,"start2":4666,"length1":18,"length2":17},{"diffs":[[0,"ement | "],[-1,"11"],[1,"3"],[0,";\r\n     "]],"start1":4749,"start2":4749,"length1":18,"length2":17},{"diffs":[[0,"t | "],[-1,"100"],[1,"4"],[0,";\r\n "]],"start1":4836,"start2":4836,"length1":11,"length2":9},{"diffs":[[0,"t | "],[-1,"b110"],[1,"5"],[0,";\r\n "]],"start1":4919,"start2":4919,"length1":12,"length2":9}]],"length":24366,"saved":false}
{"ts":1350396620631,"patch":[[{"diffs":[[0,"   t"],[-1,"empElement = tempElement |"],[1,"oAdd ="],[0," 0;\r"]],"start1":4477,"start2":4477,"length1":34,"length2":14}]],"length":24346,"saved":false}
{"ts":1350396627712,"patch":[[{"diffs":[[0,"   t"],[-1,"empElement = tempElement |"],[1,"oAdd="],[0," 1;\r"]],"start1":4540,"start2":4540,"length1":34,"length2":13}]],"length":24325,"saved":false}
{"ts":1350396629048,"patch":[[{"diffs":[[0,"   toAdd"],[1," "],[0,"= 1;\r\n  "]],"start1":4540,"start2":4540,"length1":16,"length2":17}]],"length":24326,"saved":false}
{"ts":1350396635248,"patch":[[{"diffs":[[0,"   t"],[-1,"empElement = tempElement |"],[1,"oAdd ="],[0," 2;\r"]],"start1":4603,"start2":4603,"length1":34,"length2":14}]],"length":24306,"saved":false}
{"ts":1350396640538,"patch":[[{"diffs":[[0,"   t"],[-1,"empElement = tempElement |"],[1,"oAdd="],[0," 3;\r"]],"start1":4666,"start2":4666,"length1":34,"length2":13}]],"length":24285,"saved":false}
{"ts":1350396641649,"patch":[[{"diffs":[[0,"   toAdd"],[1," "],[0,"= 3;\r\n  "]],"start1":4666,"start2":4666,"length1":16,"length2":17}]],"length":24286,"saved":false}
{"ts":1350396652808,"patch":[[{"diffs":[[0,"e & "],[-1,"111"],[1,"7"],[0,";\r\n "]],"start1":2933,"start2":2933,"length1":11,"length2":9}]],"length":24284,"saved":false}
{"ts":1350396668922,"patch":[[{"diffs":[[0,"   t"],[-1,"empElement = tempElement |"],[1,"oAdd = "],[0," 4;\r"]],"start1":4727,"start2":4727,"length1":34,"length2":15}]],"length":24265,"saved":false}
{"ts":1350396669707,"patch":[[{"diffs":[[0," toAdd ="],[-1," "],[0," 4;\r\n   "]],"start1":4729,"start2":4729,"length1":17,"length2":16}]],"length":24264,"saved":false}
{"ts":1350396678092,"patch":[[{"diffs":[[0,"   t"],[-1,"empElement = tempElement |"],[1,"oAdd ="],[0," 5;\r"]],"start1":4790,"start2":4790,"length1":34,"length2":14}]],"length":24244,"saved":false}
{"ts":1350396690851,"patch":[[{"diffs":[[0,"d = 5;\r\n"],[1,"            break;\r\n        default:\r\n            break;\r\n"],[0,"        "]],"start1":4797,"start2":4797,"length1":16,"length2":74}]],"length":24302,"saved":false}
{"ts":1350396692178,"patch":[[{"diffs":[[0,"          break;"],[-1,"\r\n"],[0,"        \r\n    }\r"]],"start1":4845,"start2":4845,"length1":34,"length2":32}]],"length":24300,"saved":false}
{"ts":1350396716380,"patch":[[{"diffs":[[0,"toAdd = 0;\r\n"],[1,"    \r\n"],[0,"    switch ("]],"start1":4408,"start2":4408,"length1":24,"length2":30},{"diffs":[[0,"       \r\n    }\r\n"],[1,"    \r\n    tempElement = tempElement | toAdd;\r\n"],[0,"};\r\n\r\nRubixState"]],"start1":4868,"start2":4868,"length1":32,"length2":78}]],"length":24352,"saved":false}
{"ts":1350396766686,"patch":[[{"diffs":[[0,"t | toAdd;\r\n"],[1,"    face << 4;\r\n    \r\n"],[0,"};\r\n\r\nRubixS"]],"start1":4918,"start2":4918,"length1":24,"length2":46}]],"length":24374,"saved":false}
{"ts":1350396789721,"patch":[[{"diffs":[[0,"t | "],[1,"("],[0,"toAdd"],[-1,";\r\n    "],[1," | ("],[0,"face"]],"start1":4918,"start2":4918,"length1":20,"length2":18},{"diffs":[[0,"ace << 4"],[-1,";"],[1,"))_;\r\n    "],[0,"\r\n    \r\n"]],"start1":4933,"start2":4933,"length1":17,"length2":26}]],"length":24381,"saved":false}
{"ts":1350396792200,"patch":[[{"diffs":[[0," 4))"],[-1,"_"],[0,";\r\n "]],"start1":4939,"start2":4939,"length1":9,"length2":8}]],"length":24380,"saved":false}
{"ts":1350396801282,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"tempElement ="],[1,"return"],[0," tempEle"]],"start1":4886,"start2":4886,"length1":29,"length2":22}]],"length":24373,"saved":false}
{"ts":1350396813336,"patch":[[{"diffs":[[0,"ion("],[-1,"element, "],[0,"colo"]],"start1":4334,"start2":4334,"length1":17,"length2":8},{"diffs":[[0,"nt ="],[-1," element &"],[0," 0;\r"]],"start1":4372,"start2":4372,"length1":18,"length2":8}]],"length":24354,"saved":false}
{"ts":1350396925018,"patch":[[{"diffs":[[0,"ixState();\r\n"],[1,"    \r\n    //c0\r\n    state.cubies[]\r\n"],[0,"};\r\n\r\n//*=fa"]],"start1":4247,"start2":4247,"length1":24,"length2":60},{"diffs":[[0," << 4));"],[-1,"\r\n    \r\n "],[0,"   \r\n};\r"]],"start1":4946,"start2":4946,"length1":25,"length2":16}]],"length":24381,"saved":false}
{"ts":1350396936753,"patch":[[{"diffs":[[0,".cubies["],[-1,"]"],[1,"0] = faces[][] "],[0,"\r\n};\r\n\r\n"]],"start1":4284,"start2":4284,"length1":17,"length2":31}]],"length":24395,"saved":false}
{"ts":1350396940035,"patch":[[{"diffs":[[0,"= faces["],[1,"0"],[0,"]["],[1,"0"],[0,"] \r\n};\r\n"]],"start1":4295,"start2":4295,"length1":18,"length2":20}]],"length":24397,"saved":false}
{"ts":1350396941144,"patch":[[{"diffs":[[0,"s[0][0] "],[1,";"],[0,"\r\n};\r\n\r\n"]],"start1":4301,"start2":4301,"length1":16,"length2":17}]],"length":24398,"saved":false}
{"ts":1350396962933,"patch":[[{"diffs":[[0,"cubies[0] = "],[1,"RubixState.createFace("],[0,"faces[0][0] "]],"start1":4285,"start2":4285,"length1":24,"length2":46},{"diffs":[[0,"es[0][0]"],[-1," "],[1,",0)"],[0,";\r\n};\r\n\r"]],"start1":4322,"start2":4322,"length1":17,"length2":19}]],"length":24422,"saved":false}
{"ts":1350396970770,"patch":[[{"diffs":[[0,"[0][0],0);\r\n"],[1,"        state.cubies[0] = RubixState.createFace(faces[0][0],0);\r\n\r\n"],[0,"};\r\n\r\n//*=fa"]],"start1":4324,"start2":4324,"length1":24,"length2":91}]],"length":24489,"saved":false}
{"ts":1350396976745,"patch":[[{"diffs":[[0,"[0][0],0);\r\n"],[-1,"    "],[0,"    state.cu"]],"start1":4324,"start2":4324,"length1":28,"length2":24},{"diffs":[[0,"   state.cubies["],[-1,"0"],[1,"1"],[0,"] = RubixState.c"]],"start1":4337,"start2":4337,"length1":33,"length2":33}]],"length":24485,"saved":false}
{"ts":1350397017148,"patch":[[{"diffs":[[0,"eFace(faces["],[-1,"0][0],0"],[1,"5][6],5"],[0,");\r\n\r\n};\r\n\r\n"]],"start1":4374,"start2":4374,"length1":31,"length2":31}]],"length":24485,"saved":false}
{"ts":1350397033047,"patch":[[{"diffs":[[0,"6],5);\r\n"],[1,"    state.cubies[2] = RubixState.createFace(faces[1][0],1);\r\n\r\n"],[0,"\r\n};\r\n\r\n"]],"start1":4389,"start2":4389,"length1":16,"length2":79}]],"length":24548,"saved":false}
{"ts":1350397044669,"patch":[[{"diffs":[[0,"0],1);\r\n"],[1,"    \r\n    //c1\r\n    state.cubies[0] = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1] = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2] = RubixState.createFace(faces[1][0],1);\r\n"],[0,"\r\n\r\n};\r\n"]],"start1":4450,"start2":4450,"length1":16,"length2":215}]],"length":24747,"saved":false}
{"ts":1350397142816,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"0"],[1,"3"],[0,"] = RubixState.c"]],"start1":4475,"start2":4475,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"1"],[1,"4"],[0,"] = RubixState.c"]],"start1":4536,"start2":4536,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"2"],[1,"5"],[0,"] = RubixState.c"]],"start1":4597,"start2":4597,"length1":33,"length2":33}]],"length":24747,"saved":false}
{"ts":1350397153656,"patch":[[{"diffs":[[0,"teFace(faces[0]["],[-1,"0"],[1,"2"],[0,"],0);\r\n    state"]],"start1":4511,"start2":4511,"length1":33,"length2":33}]],"length":24747,"saved":false}
{"ts":1350397170646,"patch":[[{"diffs":[[0,"teFace(faces[5]["],[-1,"6"],[1,"8"],[0,"],5);\r\n    state"]],"start1":4572,"start2":4572,"length1":33,"length2":33}]],"length":24747,"saved":false}
{"ts":1350397177293,"patch":[[{"diffs":[[0,"faces[1][0],"],[-1,"1"],[1,"3"],[0,");\r\n\r\n\r\n};\r\n"]],"start1":4640,"start2":4640,"length1":25,"length2":25}]],"length":24747,"saved":false}
{"ts":1350397205956,"patch":[[{"diffs":[[0,"ces["],[-1,"1"],[0,"]["],[-1,"0"],[0,"],"],[-1,"3"],[0,");\r\n"]],"start1":4642,"start2":4642,"length1":15,"length2":12}]],"length":24744,"saved":false}
{"ts":1350397214435,"patch":[[{"diffs":[[0,"ces["],[1,"3"],[0,"]["],[1,"2"],[0,"],"],[1,"3"],[0,");\r\n"]],"start1":4642,"start2":4642,"length1":12,"length2":15}]],"length":24747,"saved":false}
{"ts":1350397235591,"patch":[[{"diffs":[[0,"2],3);\r\n"],[1,"    \r\n    return state;\r\n"],[0,"\r\n\r\n};\r\n"]],"start1":4649,"start2":4649,"length1":16,"length2":41}]],"length":24772,"saved":false}
{"ts":1350397246414,"patch":[[{"diffs":[[0,"][2],3);\r\n    \r\n"],[1,"    //c2\r\n    \r\n    \r\n"],[0,"    return state"]],"start1":4647,"start2":4647,"length1":32,"length2":54}]],"length":24794,"saved":false}
{"ts":1350397253009,"patch":[[{"diffs":[[0,"  //c2\r\n    "],[1,"state.cubies[3] = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4] = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5] = RubixState.createFace(faces[3][2],3);"],[0,"\r\n    \r\n    "]],"start1":4665,"start2":4665,"length1":24,"length2":201}]],"length":24971,"saved":false}
{"ts":1350397260926,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"3"],[1,"6"],[0,"] = RubixState.c"]],"start1":4674,"start2":4674,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"4"],[1,"7"],[0,"] = RubixState.c"]],"start1":4735,"start2":4735,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"5"],[1,"8"],[0,"] = RubixState.c"]],"start1":4796,"start2":4796,"length1":33,"length2":33}]],"length":24971,"saved":false}
{"ts":1350397268486,"patch":[[{"diffs":[[0,"teFace(faces[0]["],[-1,"2"],[1,"6"],[0,"],0);\r\n    state"]],"start1":4710,"start2":4710,"length1":33,"length2":33}]],"length":24971,"saved":false}
{"ts":1350397275561,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"5][8"],[1,"2][0"],[0,"],5);\r\n    state"]],"start1":4768,"start2":4768,"length1":36,"length2":36}]],"length":24971,"saved":false}
{"ts":1350397279171,"patch":[[{"diffs":[[0,"s[2][0],"],[-1,"5"],[1,"2"],[0,");\r\n    "]],"start1":4782,"start2":4782,"length1":17,"length2":17}]],"length":24971,"saved":false}
{"ts":1350397283028,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"3"],[1,"1"],[0,"][2],"],[-1,"3"],[1,"1"],[0,");\r\n    \r\n    re"]],"start1":4829,"start2":4829,"length1":39,"length2":39}]],"length":24971,"saved":false}
{"ts":1350397296170,"patch":[[{"diffs":[[0,"][2],1);\r\n    \r\n"],[1,"    //c2\r\n    state.cubies[6] = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7] = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8] = RubixState.createFace(faces[1][2],1);\r\n    \r\n"],[0,"    return state"]],"start1":4846,"start2":4846,"length1":32,"length2":231}]],"length":25170,"saved":false}
{"ts":1350397302899,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"6"],[1,"9"],[0,"] = RubixState.c"]],"start1":4873,"start2":4873,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"7"],[1,"10"],[0,"] = RubixState.c"]],"start1":4934,"start2":4934,"length1":33,"length2":34},{"diffs":[[0,"   state.cubies["],[-1,"8"],[1,"11"],[0,"] = RubixState.c"]],"start1":4996,"start2":4996,"length1":33,"length2":34}]],"length":25172,"saved":false}
{"ts":1350397305322,"patch":[[{"diffs":[[0,";\r\n    \r\n    //c"],[-1,"2"],[1,"3"],[0,"\r\n    state.cubi"]],"start1":4853,"start2":4853,"length1":33,"length2":33}]],"length":25172,"saved":false}
{"ts":1350397458162,"patch":[[{"diffs":[[0,"teFace(faces[0]["],[-1,"6"],[1,"8"],[0,"],0);\r\n    state"]],"start1":4909,"start2":4909,"length1":33,"length2":33},{"diffs":[[0,"teFace(faces[2]["],[-1,"0"],[1,"2"],[0,"],2);\r\n    state"]],"start1":4971,"start2":4971,"length1":33,"length2":33},{"diffs":[[0,"reateFace(faces["],[-1,"1][2],1"],[1,"3][0],3"],[0,");\r\n    \r\n    re"]],"start1":5030,"start2":5030,"length1":39,"length2":39}]],"length":25172,"saved":false}
{"ts":1350397481268,"patch":[[{"diffs":[[0,"][0],3);\r\n    \r\n"],[1,"    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[13] = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[14] = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3] = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4] = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5] = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6] = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7] = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8] = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9] = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n"],[0,"    return state"]],"start1":5047,"start2":5047,"length1":32,"length2":833}]],"length":25973,"saved":false}
{"ts":1350397508280,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][0],0"],[1,"2][6],2"],[0,");\r\n    state.cu"]],"start1":5108,"start2":5108,"length1":39,"length2":39},{"diffs":[[0,"reateFace(faces["],[-1,"5][6],5"],[1,"4][0],4"],[0,");\r\n    state.cu"]],"start1":5170,"start2":5170,"length1":39,"length2":39},{"diffs":[[0,"teFace(faces[1]["],[-1,"0"],[1,"8"],[0,"],1);\r\n    \r\n   "]],"start1":5235,"start2":5235,"length1":33,"length2":33}]],"length":25973,"saved":false}
{"ts":1350397548432,"patch":[[{"diffs":[[0,";\r\n    \r\n    //c"],[-1,"1"],[1,"5"],[0,"\r\n    state.cubi"]],"start1":5256,"start2":5256,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"3"],[1,"15"],[0,"] = RubixState.c"]],"start1":5276,"start2":5276,"length1":33,"length2":34},{"diffs":[[0,"reateFace(faces["],[-1,"0][2],0"],[1,"2][8],2"],[0,");\r\n    state.cu"]],"start1":5310,"start2":5310,"length1":39,"length2":39},{"diffs":[[0,"reateFace(faces["],[-1,"5][8],5"],[1,"4][2],4"],[0,");\r\n    state.cu"]],"start1":5371,"start2":5371,"length1":39,"length2":39},{"diffs":[[0,"teFace(faces[3]["],[-1,"2"],[1,"6"],[0,"],3);\r\n    \r\n   "]],"start1":5435,"start2":5435,"length1":33,"length2":33}]],"length":25974,"saved":false}
{"ts":1350397554927,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"4"],[1,"26"],[0,"] = RubixState.c"]],"start1":5338,"start2":5338,"length1":33,"length2":34},{"diffs":[[0,"   state.cubies["],[-1,"5"],[1,"17"],[0,"] = RubixState.c"]],"start1":5400,"start2":5400,"length1":33,"length2":34}]],"length":25976,"saved":false}
{"ts":1350397556794,"patch":[[{"diffs":[[0,".cubies["],[-1,"2"],[1,"1"],[0,"6] = Rub"]],"start1":5346,"start2":5346,"length1":17,"length2":17}]],"length":25976,"saved":false}
{"ts":1350397572103,"patch":[[{"diffs":[[0,";\r\n    \r\n    //c"],[-1,"2"],[1,"6"],[0,"\r\n    state.cubi"]],"start1":5458,"start2":5458,"length1":33,"length2":33},{"diffs":[[0,";\r\n    \r\n    //c"],[-1,"3"],[1,"7"],[0,"\r\n    state.cubi"]],"start1":5657,"start2":5657,"length1":33,"length2":33}]],"length":25976,"saved":false}
{"ts":1350397592715,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"6"],[1,"18"],[0,"] = RubixState.c"]],"start1":5478,"start2":5478,"length1":33,"length2":34},{"diffs":[[0,"   state.cubies["],[-1,"7"],[1,"19"],[0,"] = RubixState.c"]],"start1":5540,"start2":5540,"length1":33,"length2":34},{"diffs":[[0,"  state.cubies[8"],[1,"20"],[0,"] = RubixState.c"]],"start1":5603,"start2":5603,"length1":32,"length2":34}]],"length":25980,"saved":false}
{"ts":1350397594612,"patch":[[{"diffs":[[0,".cubies["],[-1,"8"],[0,"20] = Ru"]],"start1":5610,"start2":5610,"length1":17,"length2":16}]],"length":25979,"saved":false}
{"ts":1350397606661,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][6],0"],[1,"5][0],5"],[0,");\r\n    state.cu"]],"start1":5512,"start2":5512,"length1":39,"length2":39}]],"length":25979,"saved":false}
{"ts":1350397613751,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"2][0],2"],[1,"4][6],4"],[0,");\r\n    state.cu"]],"start1":5574,"start2":5574,"length1":39,"length2":39}]],"length":25979,"saved":false}
{"ts":1350397620045,"patch":[[{"diffs":[[0,"teFace(faces[1]["],[-1,"2"],[1,"6"],[0,"],1);\r\n    \r\n   "]],"start1":5639,"start2":5639,"length1":33,"length2":33}]],"length":25979,"saved":false}
{"ts":1350397873506,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][8],0"],[1,"5][2],5"],[0,");\r\n    state.cu"]],"start1":5713,"start2":5713,"length1":39,"length2":39},{"diffs":[[0,"reateFace(faces["],[-1,"2][2],2"],[1,"4][8],4"],[0,");\r\n    state.cu"]],"start1":5775,"start2":5775,"length1":39,"length2":39},{"diffs":[[0,"teFace(faces[3]["],[-1,"0"],[1,"8"],[0,"],3);\r\n    \r\n   "]],"start1":5840,"start2":5840,"length1":33,"length2":33}]],"length":25979,"saved":false}
{"ts":1350397886811,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"9"],[1,"21"],[0,"] = RubixState.c"]],"start1":5680,"start2":5680,"length1":33,"length2":34},{"diffs":[[0,"   state.cubies["],[-1,"10"],[1,"22"],[0,"] = RubixState.c"]],"start1":5742,"start2":5742,"length1":34,"length2":34},{"diffs":[[0,"   state.cubies["],[-1,"11"],[1,"23"],[0,"] = RubixState.c"]],"start1":5804,"start2":5804,"length1":34,"length2":34}]],"length":25980,"saved":false}
{"ts":1350397902247,"patch":[[{"diffs":[[0,"ubies[0]"],[1," "],[0," = Rubix"]],"start1":4286,"start2":4286,"length1":16,"length2":17},{"diffs":[[0,"ubies[1]"],[1," "],[0," = Rubix"]],"start1":4348,"start2":4348,"length1":16,"length2":17},{"diffs":[[0,"ubies[2]"],[1," "],[0," = Rubix"]],"start1":4410,"start2":4410,"length1":16,"length2":17},{"diffs":[[0,"ubies[3]"],[1," "],[0," = Rubix"]],"start1":4488,"start2":4488,"length1":16,"length2":17},{"diffs":[[0,"ubies[4]"],[1," "],[0," = Rubix"]],"start1":4550,"start2":4550,"length1":16,"length2":17},{"diffs":[[0,"ubies[5]"],[1," "],[0," = Rubix"]],"start1":4612,"start2":4612,"length1":16,"length2":17},{"diffs":[[0,"ubies[6]"],[1," "],[0," = Rubix"]],"start1":4690,"start2":4690,"length1":16,"length2":17},{"diffs":[[0,"ubies[7]"],[1," "],[0," = Rubix"]],"start1":4752,"start2":4752,"length1":16,"length2":17},{"diffs":[[0,"ubies[8]"],[1," "],[0," = Rubix"]],"start1":4814,"start2":4814,"length1":16,"length2":17},{"diffs":[[0,"ubies[9]"],[1," "],[0," = Rubix"]],"start1":4892,"start2":4892,"length1":16,"length2":17}]],"length":25990,"saved":false}
{"ts":1350398011269,"patch":[[{"diffs":[[0,"][8],3);\r\n    \r\n"],[1,"    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[25] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s1\r\n    \r\n"],[0,"    return state"]],"start1":5865,"start2":5865,"length1":32,"length2":188}]],"length":26146,"saved":false}
{"ts":1350398028529,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"4][8],4"],[1,"0][1],0"],[0,");\r\n    state.cu"]],"start1":5926,"start2":5926,"length1":39,"length2":39}]],"length":26146,"saved":false}
{"ts":1350398030199,"patch":[[{"diffs":[[0,"ace(faces[3][8],"],[-1,"3"],[1,"5"],[0,");\r\n    \r\n    //"]],"start1":5994,"start2":5994,"length1":33,"length2":33}]],"length":26146,"saved":false}
{"ts":1350398035642,"patch":[[{"diffs":[[0,"e(faces["],[-1,"3][8"],[1,"5][7"],[0,"],5);\r\n "]],"start1":5996,"start2":5996,"length1":20,"length2":20}]],"length":26146,"saved":false}
{"ts":1350398043358,"patch":[[{"diffs":[[0,"  //s1\r\n"],[1,"    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n"],[0,"    \r\n  "]],"start1":6023,"start2":6023,"length1":16,"length2":140}]],"length":26270,"saved":false}
{"ts":1350398049384,"patch":[[{"diffs":[[0,"  state.cubies[2"],[-1,"4"],[1,"6"],[0,"] = RubixState.c"]],"start1":6033,"start2":6033,"length1":33,"length2":33},{"diffs":[[0,"  state.cubies[2"],[-1,"5"],[1,"7"],[0,"] = RubixState.c"]],"start1":6095,"start2":6095,"length1":33,"length2":33}]],"length":26270,"saved":false}
{"ts":1350398065428,"patch":[[{"diffs":[[0,"teFace(faces[0]["],[-1,"1"],[1,"3"],[0,"],0);\r\n    state"]],"start1":6069,"start2":6069,"length1":33,"length2":33},{"diffs":[[0,"reateFace(faces["],[-1,"5][7],5"],[1,"1][1],1"],[0,");\r\n    \r\n    re"]],"start1":6128,"start2":6128,"length1":39,"length2":39}]],"length":26270,"saved":false}
{"ts":1350398078823,"patch":[[{"diffs":[[0,"][1],1);\r\n    \r\n"],[1,"    //s1\r\n    state.cubies[28] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[29] = RubixState.createFace(faces[1][1],1);\r\n    \r\n"],[0,"    return state"]],"start1":6145,"start2":6145,"length1":32,"length2":172}]],"length":26410,"saved":false}
{"ts":1350398084978,"patch":[[{"diffs":[[0,"teFace(faces[0]["],[-1,"3"],[1,"5"],[0,"],0);\r\n    state"]],"start1":6209,"start2":6209,"length1":33,"length2":33}]],"length":26410,"saved":false}
{"ts":1350398088998,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"1"],[1,"3"],[0,"][1],1);\r\n    \r\n"]],"start1":6268,"start2":6268,"length1":33,"length2":33}]],"length":26410,"saved":false}
{"ts":1350398091922,"patch":[[{"diffs":[[0,"faces[3][1],"],[-1,"1"],[1,"3"],[0,");\r\n    \r\n  "]],"start1":6278,"start2":6278,"length1":25,"length2":25}]],"length":26410,"saved":false}
{"ts":1350398132720,"patch":[[{"diffs":[[0,";\r\n    \r\n    //s"],[-1,"1"],[1,"2"],[0,"\r\n    state.cubi"]],"start1":6152,"start2":6152,"length1":33,"length2":33},{"diffs":[[0,"][1],3);\r\n    \r\n"],[1,"    \r\n"],[0,"    return state"]],"start1":6285,"start2":6285,"length1":32,"length2":38}]],"length":26416,"saved":false}
{"ts":1350398141184,"patch":[[{"diffs":[[0,",3);\r\n    \r\n"],[1,"    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[31] = RubixState.createFace(faces[1][1],1);\r\n"],[0,"    \r\n    re"]],"start1":6289,"start2":6289,"length1":24,"length2":158}]],"length":26550,"saved":false}
{"ts":1350398150598,"patch":[[{"diffs":[[0,"teFace(faces[0]["],[-1,"3"],[1,"7"],[0,"],0);\r\n    state"]],"start1":6349,"start2":6349,"length1":33,"length2":33}]],"length":26550,"saved":false}
{"ts":1350398155006,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"1"],[1,"2"],[0,"][1],"],[-1,"1"],[1,"2"],[0,");\r\n    \r\n    re"]],"start1":6408,"start2":6408,"length1":39,"length2":39}]],"length":26550,"saved":false}
{"ts":1350398165799,"patch":[[{"diffs":[[0,"][1],2);\r\n    \r\n"],[1,"    //s4\r\n    \r\n    \r\n"],[0,"    return state"]],"start1":6425,"start2":6425,"length1":32,"length2":54}]],"length":26572,"saved":false}
{"ts":1350398169818,"patch":[[{"diffs":[[0,"\n    //s"],[-1,"4"],[1,"1"],[0,"\r\n    "],[1,"state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);"],[0,"\r\n    \r\n"]],"start1":6440,"start2":6440,"length1":23,"length2":141}]],"length":26690,"saved":false}
{"ts":1350398180146,"patch":[[{"diffs":[[0,";\r\n    \r\n    //s"],[-1,"1"],[1,"4"],[0,"\r\n    state.cubi"]],"start1":6432,"start2":6432,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[1,"3"],[0,"2"],[-1,"6"],[0,"] = RubixState.c"]],"start1":6452,"start2":6452,"length1":34,"length2":34},{"diffs":[[0,"   state.cubies["],[-1,"27"],[1,"33"],[0,"] = RubixState.c"]],"start1":6514,"start2":6514,"length1":34,"length2":34}]],"length":26690,"saved":false}
{"ts":1350398212796,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0"],[1,"5"],[0,"][3],"],[-1,"0"],[1,"5"],[0,");\r\n    state.cu"]],"start1":6486,"start2":6486,"length1":39,"length2":39},{"diffs":[[0,"teFace(faces[1]["],[-1,"1"],[1,"3"],[0,"],1);\r\n    \r\n   "]],"start1":6551,"start2":6551,"length1":33,"length2":33}]],"length":26690,"saved":false}
{"ts":1350398217312,"patch":[[{"diffs":[[0,"][3],1);\r\n    \r\n"],[1,"    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n"],[0,"    return state"]],"start1":6565,"start2":6565,"length1":32,"length2":172}]],"length":26830,"saved":false}
{"ts":1350398223698,"patch":[[{"diffs":[[0,";\r\n    \r\n    //s"],[-1,"1"],[1,"5"],[0,"\r\n    state.cubi"]],"start1":6572,"start2":6572,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"26"],[1,"34"],[0,"] = RubixState.c"]],"start1":6592,"start2":6592,"length1":34,"length2":34}]],"length":26830,"saved":false}
{"ts":1350398226678,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"27"],[1,"35"],[0,"] = RubixState.c"]],"start1":6654,"start2":6654,"length1":34,"length2":34}]],"length":26830,"saved":false}
{"ts":1350398242040,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0"],[1,"2"],[0,"][3],"],[-1,"0"],[1,"2"],[0,");\r\n    state.cu"]],"start1":6626,"start2":6626,"length1":39,"length2":39},{"diffs":[[0,"teFace(faces[1]["],[-1,"1"],[1,"5"],[0,"],1);\r\n    \r\n   "]],"start1":6691,"start2":6691,"length1":33,"length2":33}]],"length":26830,"saved":false}
{"ts":1350398248277,"patch":[[{"diffs":[[0,"][5],1);\r\n    \r\n"],[1,"    //s6\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n"],[0,"    return state"]],"start1":6705,"start2":6705,"length1":32,"length2":172}]],"length":26970,"saved":false}
{"ts":1350398264209,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"2"],[1,"3"],[0,"6] = RubixState."]],"start1":6732,"start2":6732,"length1":33,"length2":33}]],"length":26970,"saved":false}
{"ts":1350398275586,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][3],0"],[1,"2][5],2"],[0,");\r\n    state.cu"]],"start1":6766,"start2":6766,"length1":39,"length2":39}]],"length":26970,"saved":false}
{"ts":1350398282327,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"1][1],1"],[1,"3][3],3"],[0,");\r\n    \r\n    re"]],"start1":6828,"start2":6828,"length1":39,"length2":39}]],"length":26970,"saved":false}
{"ts":1350398288318,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"2"],[1,"3"],[0,"7] = RubixState."]],"start1":6794,"start2":6794,"length1":33,"length2":33}]],"length":26970,"saved":false}
{"ts":1350398314973,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][3],0"],[1,"5][5],5"],[0,");\r\n    state.cu"]],"start1":6906,"start2":6906,"length1":39,"length2":39},{"diffs":[[0,"reateFace(faces["],[-1,"1][1],1"],[1,"3][5],3"],[0,");\r\n    \r\n    re"]],"start1":6968,"start2":6968,"length1":39,"length2":39}]],"length":27110,"saved":false}
{"ts":1350398329533,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"27"],[1,"39"],[0,"] = RubixState.c"]],"start1":6934,"start2":6934,"length1":34,"length2":34},{"diffs":[[0,"][5],3);\r\n    \r\n"],[1,"    //s8\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n"],[0,"    return state"]],"start1":6985,"start2":6985,"length1":32,"length2":172}]],"length":27250,"saved":false}
{"ts":1350398332568,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"26"],[1,"40"],[0,"] = RubixState.c"]],"start1":7012,"start2":7012,"length1":34,"length2":34}]],"length":27250,"saved":false}
{"ts":1350398334454,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"27"],[1,"41"],[0,"] = RubixState.c"]],"start1":7074,"start2":7074,"length1":34,"length2":34}]],"length":27250,"saved":false}
{"ts":1350398350216,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][3],0"],[1,"2][7],2"],[0,");\r\n    state.cu"]],"start1":7046,"start2":7046,"length1":39,"length2":39},{"diffs":[[0,"reateFace(faces["],[-1,"1"],[1,"4"],[0,"][1],"],[-1,"1"],[1,"4"],[0,");\r\n    \r\n    re"]],"start1":7108,"start2":7108,"length1":39,"length2":39}]],"length":27250,"saved":false}
{"ts":1350398356321,"patch":[[{"diffs":[[0,"][1],4);\r\n    \r\n"],[1,"    //s9\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n"],[0,"    return state"]],"start1":7125,"start2":7125,"length1":32,"length2":172}]],"length":27390,"saved":false}
{"ts":1350398484676,"patch":[[{"diffs":[[0,"   state.cubies["],[1,"4"],[0,"2"],[-1,"6"],[0,"] = RubixState.c"]],"start1":7152,"start2":7152,"length1":34,"length2":34},{"diffs":[[0,"reateFace(faces["],[-1,"0"],[1,"4"],[0,"][3],"],[-1,"0"],[1,"4"],[0,");\r\n    state.cu"]],"start1":7186,"start2":7186,"length1":39,"length2":39}]],"length":27390,"saved":false}
{"ts":1350398491119,"patch":[[{"diffs":[[0,"teFace(faces[1]["],[-1,"1"],[1,"7"],[0,"],1);\r\n    \r\n   "]],"start1":7251,"start2":7251,"length1":33,"length2":33}]],"length":27390,"saved":false}
{"ts":1350398504453,"patch":[[{"diffs":[[0,"[4][3],4);\r\n"],[1,"    state.cubies[43] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s10\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n"],[0,"    state.cu"]],"start1":7201,"start2":7201,"length1":24,"length2":165},{"diffs":[[0,"teFace(faces[1]["],[-1,"7"],[1,"1"],[0,"],1);\r\n    \r\n   "]],"start1":7392,"start2":7392,"length1":33,"length2":33}]],"length":27531,"saved":false}
{"ts":1350398509254,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"26"],[1,"44"],[0,"] = RubixState.c"]],"start1":7293,"start2":7293,"length1":34,"length2":34}]],"length":27531,"saved":false}
{"ts":1350398517940,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"0][3],0"],[1,"4][5],4"],[0,");\r\n    state.cu"]],"start1":7327,"start2":7327,"length1":39,"length2":39}]],"length":27531,"saved":false}
{"ts":1350398524120,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"1][1],1"],[1,"3][7],3"],[0,");\r\n    \r\n    re"]],"start1":7389,"start2":7389,"length1":39,"length2":39}]],"length":27531,"saved":false}
{"ts":1350398533655,"patch":[[{"diffs":[[0,"   state.cubies["],[-1,"27"],[1,"45"],[0,"] = RubixState.c"]],"start1":7355,"start2":7355,"length1":34,"length2":34}]],"length":27531,"saved":false}
{"ts":1350398546980,"patch":[[{"diffs":[[0,"[3][7],3);\r\n"],[1,"    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[47] = RubixState.createFace(faces[3][7],3);\r\n"],[0,"    \r\n    re"]],"start1":7404,"start2":7404,"length1":24,"length2":159}]],"length":27666,"saved":false}
{"ts":1350398548108,"patch":[[{"diffs":[[0,"[3][7],3);\r\n"],[1,"    \r\n"],[0,"    //s11\r\n "]],"start1":7404,"start2":7404,"length1":24,"length2":30}]],"length":27672,"saved":false}
{"ts":1350398556109,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"4][5],4"],[1,"5][1],58"],[0,");\r\n    state.cu"]],"start1":7468,"start2":7468,"length1":39,"length2":40}]],"length":27673,"saved":false}
{"ts":1350398557065,"patch":[[{"diffs":[[0,"[5][1],5"],[-1,"8"],[0,");\r\n    "]],"start1":7483,"start2":7483,"length1":17,"length2":16}]],"length":27672,"saved":false}
{"ts":1350398564707,"patch":[[{"diffs":[[0,"reateFace(faces["],[-1,"3"],[1,"4"],[0,"][7],"],[-1,"3"],[1,"4"],[0,");\r\n    \r\n    re"]],"start1":7530,"start2":7530,"length1":39,"length2":39}]],"length":27672,"saved":false}
{"ts":1350398593932,"patch":[[{"diffs":[[0,"state;\r\n"],[-1,"\r\n\r\n"],[0,"};\r\n\r\n//"]],"start1":7574,"start2":7574,"length1":20,"length2":16}]],"length":27668,"saved":false}
{"ts":1350398708271,"patch":[[{"diffs":[[0,"ction()\r\n{\r\n    "],[1,"RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");"],[0,"\r\n};\r\n\r\nRubixSta"]],"start1":3187,"start2":3187,"length1":32,"length2":118}]],"length":27754,"saved":false}
{"ts":1350398710955,"patch":[[{"diffs":[[0,"n()\r\n{\r\n    "],[1,"return "],[0,"RubixState.c"]],"start1":3191,"start2":3191,"length1":24,"length2":31}]],"length":27761,"saved":false}
{"ts":1350398733693,"patch":[[{"diffs":[[0," function()\r\n{\r\n"],[1,"    // HAHAAHAHAHA -John\r\n"],[0,"    return Rubix"]],"start1":3183,"start2":3183,"length1":32,"length2":58}]],"length":27787,"saved":false}
{"ts":1350398753684,"patch":[[{"diffs":[[0," // HAHA"],[-1,"A"],[0,"HAHAHA -"]],"start1":3202,"start2":3202,"length1":17,"length2":16}]],"length":27786,"saved":false}
{"ts":1350398788090,"patch":[[{"diffs":[[0,"[4][7],4);\r\n    "],[1,"console.log(state);"],[0,"\r\n    return sta"]],"start1":7663,"start2":7663,"length1":32,"length2":51}]],"length":27805,"saved":false}
{"ts":1350400693267,"patch":[[{"diffs":[[0,"\n    //c"],[-1,"6"],[1,"4"],[0,"\r\n    st"]],"start1":5594,"start2":5594,"length1":17,"length2":17}]],"length":27805,"saved":false}
{"ts":1350400698937,"patch":[[{"diffs":[[0,";\r\n    \r\n    //c"],[-1,"4"],[1,"5"],[0,"\r\n    state.cubi"]],"start1":5182,"start2":5182,"length1":33,"length2":33}]],"length":27805,"saved":false}
{"ts":1350400727923,"patch":[[{"diffs":[[0,"][0],3);\r\n    \r\n"],[1,"     //c4\r\n    state.cubies[18] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[19] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[20] = RubixState.createFace(faces[1][6],1);\r\n    \r\n"],[0,"    //c5\r\n    st"]],"start1":5175,"start2":5175,"length1":32,"length2":235},{"diffs":[[0,"\n   "],[-1," //c4\r\n    state.cubies[18] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[19] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[20] = RubixState.createFace(faces[1][6],1);"],[0,"\r\n  "]],"start1":5797,"start2":5797,"length1":199,"length2":8}]],"length":27817,"saved":false}
{"ts":1350400732839,"patch":[[{"diffs":[[0,";\r\n    \r\n    //c"],[-1,"5"],[1,"6"],[0,"\r\n    state.cubi"]],"start1":5587,"start2":5587,"length1":33,"length2":33}]],"length":27817,"saved":false}
{"ts":1350400743322,"patch":[[{"diffs":[[0,"cubies[1"],[-1,"8"],[1,"2"],[0,"] = Rubi"]],"start1":5212,"start2":5212,"length1":17,"length2":17},{"diffs":[[0,"cubies[1"],[-1,"9"],[1,"3"],[0,"] = Rubi"]],"start1":5274,"start2":5274,"length1":17,"length2":17},{"diffs":[[0,".cubies["],[-1,"20"],[1,"14"],[0,"] = Rubi"]],"start1":5335,"start2":5335,"length1":18,"length2":18}]],"length":27817,"saved":false}
{"ts":1350400749299,"patch":[[{"diffs":[[0,"  state.cubies[1"],[-1,"2"],[1,"5"],[0,"] = RubixState.c"]],"start1":5406,"start2":5406,"length1":33,"length2":33},{"diffs":[[0,"  state.cubies[1"],[-1,"3"],[1,"6"],[0,"] = RubixState.c"]],"start1":5468,"start2":5468,"length1":33,"length2":33},{"diffs":[[0,"  state.cubies[1"],[-1,"4"],[1,"7"],[0,"] = RubixState.c"]],"start1":5530,"start2":5530,"length1":33,"length2":33}]],"length":27817,"saved":false}
{"ts":1350400754959,"patch":[[{"diffs":[[0,"  state.cubies[1"],[-1,"5"],[1,"8"],[0,"] = RubixState.c"]],"start1":5608,"start2":5608,"length1":33,"length2":33},{"diffs":[[0,"  state.cubies[1"],[-1,"6"],[1,"9"],[0,"] = RubixState.c"]],"start1":5670,"start2":5670,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"17"],[1,"20"],[0,"] = RubixState.c"]],"start1":5731,"start2":5731,"length1":34,"length2":34}]],"length":27817,"saved":false}
{"ts":1350400821454,"patch":[[{"diffs":[[0,"  \r\n    "],[-1," "],[0,"//c4\r\n  "]],"start1":5187,"start2":5187,"length1":17,"length2":16},{"diffs":[[0,"][6],3);"],[-1,"\r\n    \r\n"],[0,"   \r\n   "]],"start1":5781,"start2":5781,"length1":24,"length2":16}]],"length":27808,"saved":false}
{"ts":1350400912608,"patch":[[{"diffs":[[0,"cubies[4"],[-1,"2"],[1,"0"],[0,"] = Rubi"]],"start1":7282,"start2":7282,"length1":17,"length2":17},{"diffs":[[0,"cubies[4"],[-1,"3"],[1,"1"],[0,"] = Rubi"]],"start1":7344,"start2":7344,"length1":17,"length2":17}]],"length":27808,"saved":false}
{"ts":1350400920114,"patch":[[{"diffs":[[0,"  state.cubies[4"],[-1,"0"],[1,"2"],[0,"] = RubixState.c"]],"start1":7134,"start2":7134,"length1":33,"length2":33},{"diffs":[[0,"  state.cubies[4"],[-1,"1"],[1,"2"],[0,"] = RubixState.c"]],"start1":7196,"start2":7196,"length1":33,"length2":33}]],"length":27808,"saved":false}
{"ts":1350400931129,"patch":[[{"diffs":[[0,"  state.cubies[4"],[-1,"2"],[1,"3"],[0,"] = RubixState.c"]],"start1":7196,"start2":7196,"length1":33,"length2":33}]],"length":27808,"saved":false}
{"ts":1350400936454,"patch":[[{"diffs":[[0,"\n    //s"],[-1,"8"],[1,"9"],[0,"\r\n    st"]],"start1":7121,"start2":7121,"length1":17,"length2":17},{"diffs":[[0,";\r\n    \r\n    //s"],[-1,"9"],[1,"8"],[0,"\r\n    state.cubi"]],"start1":7253,"start2":7253,"length1":33,"length2":33}]],"length":27808,"saved":false}
{"ts":1350400942289,"patch":[[{"diffs":[[0,"    "],[-1,"//s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n    "],[0,"\r\n  "]],"start1":7122,"start2":7122,"length1":142,"length2":8},{"diffs":[[0,"es[1][7],1);"],[1,"\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n    "],[0,"\r\n    \r\n    "]],"start1":7248,"start2":7248,"length1":24,"length2":170}]],"length":27820,"saved":false}
{"ts":1350400943250,"patch":[[{"diffs":[[0,"[4][1],4);\r\n    "],[-1,"\r\n"],[0,"    \r\n    //s10\r"]],"start1":7390,"start2":7390,"length1":34,"length2":32}]],"length":27818,"saved":false}
{"ts":1350400945201,"patch":[[{"diffs":[[0,",3);\r\n    \r\n"],[-1,"    \r\n"],[0,"    //s8\r\n  "]],"start1":7110,"start2":7110,"length1":30,"length2":24}]],"length":27812,"saved":false}
{"ts":1350401423765,"patch":[[{"diffs":[[0,"e();\r\n    \r\n"],[1,"    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n"],[0,"    //c0\r\n  "]],"start1":4371,"start2":4371,"length1":24,"length2":346},{"diffs":[[0,"    \r\n};\r\n\r\n"],[1,"RubixState.toString(state)\r\n{\r\n    \r\n};\r\n\r\n"],[0,"\r\n/**\r\n * Gi"]],"start1":8756,"start2":8756,"length1":24,"length2":67}]],"length":28177,"saved":false}
{"ts":1350401428551,"patch":[[{"diffs":[[0,"toString"],[1," function"],[0,"(state)\r"]],"start1":8779,"start2":8779,"length1":16,"length2":25}]],"length":28186,"saved":false}
{"ts":1350401431421,"patch":[[{"diffs":[[0,"toString"],[1," ="],[0," functio"]],"start1":8779,"start2":8779,"length1":16,"length2":18}]],"length":28188,"saved":false}
{"ts":1350401448671,"patch":[[{"diffs":[[0,"(state)\r\n{\r\n    "],[1,"state.cubies[]"],[0,"\r\n};\r\n\r\n\r\n/**\r\n "]],"start1":8798,"start2":8798,"length1":32,"length2":46}]],"length":28202,"saved":false}
{"ts":1350401488886,"patch":[[{"diffs":[[0,"te)\r\n{\r\n    "],[1,"return"],[0,"state.cubies"]],"start1":8802,"start2":8802,"length1":24,"length2":30},{"diffs":[[0,".cubies["],[-1,"]"],[1,"0] + state.cubies[24] + state.cubies[3] + '\\n' + \r\n    "],[0,"\r\n};\r\n\r\n"]],"start1":8825,"start2":8825,"length1":17,"length2":71}]],"length":28262,"saved":false}
{"ts":1350401489866,"patch":[[{"diffs":[[0,"  return"],[1," "],[0,"state.cu"]],"start1":8812,"start2":8812,"length1":16,"length2":17}]],"length":28263,"saved":false}
{"ts":1350401540795,"patch":[[{"diffs":[[0,"\n{\r\n    \r\n};\r\n\r\n"],[1,"RubixState.colorID = fufunction()\r\n{\r\n    \r\n};\r\n"],[0,"RubixState.toStr"]],"start1":8752,"start2":8752,"length1":32,"length2":80},{"diffs":[[0," + '\\n' + \r\n"],[1,"            state.cubies[26] + 'R' + \r\n"],[0,"    \r\n};\r\n\r\n"]],"start1":8921,"start2":8921,"length1":24,"length2":63}]],"length":28350,"saved":false}
{"ts":1350401541749,"patch":[[{"diffs":[[0,"  \r\n};\r\n"],[1,"\r\n"],[0,"RubixSta"]],"start1":8808,"start2":8808,"length1":16,"length2":18}]],"length":28352,"saved":false}
{"ts":1350401545339,"patch":[[{"diffs":[[0,"lorID = "],[-1,"fu"],[0,"function"]],"start1":8781,"start2":8781,"length1":18,"length2":16}]],"length":28350,"saved":false}
{"ts":1350401550820,"patch":[[{"diffs":[[0,"orID = function("],[1,"face"],[0,")\r\n{\r\n    \r\n};\r\n"]],"start1":8782,"start2":8782,"length1":32,"length2":36}]],"length":28354,"saved":false}
{"ts":1350401587788,"patch":[[{"diffs":[[0,"\n{\r\n    \r\n};\r\n\r\n"],[1,"RubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n"],[0,"RubixState.color"]],"start1":8752,"start2":8752,"length1":32,"length2":86},{"diffs":[[0,"n(face)\r\n{\r\n    "],[1,"face & 7"],[0,"\r\n};\r\n\r\nRubixSta"]],"start1":8850,"start2":8850,"length1":32,"length2":40},{"diffs":[[0,"\r\n\r\n"],[-1,"\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];"],[0,"\r\n\r\n"]],"start1":21561,"start2":21561,"length1":60,"length2":8}]],"length":28364,"saved":false}
{"ts":1350401601359,"patch":[[{"diffs":[[0,"    "],[1,"return RubixState.faceValues["],[0,"face & 7"],[1,"]"],[0,"\r\n};"]],"start1":8862,"start2":8862,"length1":16,"length2":46}]],"length":28394,"saved":false}
{"ts":1350401612380,"patch":[[{"diffs":[[0,"\n    return "],[1,"RubixState.colorID("],[0,"state.cubies"]],"start1":8953,"start2":8953,"length1":24,"length2":43},{"diffs":[[0,"ubies[0]"],[1,")"],[0," + state"]],"start1":8991,"start2":8991,"length1":16,"length2":17}]],"length":28414,"saved":false}
{"ts":1350401617073,"patch":[[{"diffs":[[0,"s[0]) + "],[-1,"state.cubies[24]"],[1,"RubixState.colorID(state.cubies[24])RubixState.colorID"],[0," + state"]],"start1":8995,"start2":8995,"length1":32,"length2":70}]],"length":28452,"saved":false}
{"ts":1350401623853,"patch":[[{"diffs":[[0,"ies[24])"],[1," + "],[0,"RubixSta"]],"start1":9031,"start2":9031,"length1":16,"length2":19},{"diffs":[[0,".colorID"],[-1," + "],[1,"("],[0,"state.cu"]],"start1":9052,"start2":9052,"length1":19,"length2":17},{"diffs":[[0,"ubies[3]"],[1,")RubixState.colorID"],[0," + '\\n' "]],"start1":9068,"start2":9068,"length1":16,"length2":35}]],"length":28472,"saved":false}
{"ts":1350401624874,"patch":[[{"diffs":[[0,"bies[3])"],[-1,"RubixState.colorID"],[0," + '\\n' "]],"start1":9069,"start2":9069,"length1":34,"length2":16}]],"length":28454,"saved":false}
{"ts":1350401628747,"patch":[[{"diffs":[[0,"+ \r\n            "],[1,"RubixState.colorID("],[0,"state.cubies[26]"]],"start1":9085,"start2":9085,"length1":32,"length2":51}]],"length":28473,"saved":false}
{"ts":1350401630977,"patch":[[{"diffs":[[0,"bies[26]"],[1,")RubixState.colorID"],[0," + 'R' +"]],"start1":9128,"start2":9128,"length1":16,"length2":35}]],"length":28492,"saved":false}
{"ts":1350401632001,"patch":[[{"diffs":[[0,"ies[26])"],[-1,"RubixState.colorID"],[0," + 'R' +"]],"start1":9129,"start2":9129,"length1":34,"length2":16}]],"length":28474,"saved":false}
{"ts":1350401635601,"patch":[[{"diffs":[[0,"\\n' + \r\n        "],[-1,"    "],[0,"RubixState.color"]],"start1":9081,"start2":9081,"length1":36,"length2":32}]],"length":28470,"saved":false}
{"ts":1350401660269,"patch":[[{"diffs":[[0,"6]) + 'R' + "],[1,"RubixState.colorID(state.cubies[28]) + '\\n'"],[0,"\r\n    \r\n};\r\n"]],"start1":9130,"start2":9130,"length1":24,"length2":67}]],"length":28513,"saved":false}
{"ts":1350401661845,"patch":[[{"diffs":[[0,") + '\\n'"],[1," + \r\n        "],[0,"\r\n    \r\n"]],"start1":9177,"start2":9177,"length1":16,"length2":29}]],"length":28526,"saved":false}
{"ts":1350401688627,"patch":[[{"diffs":[[0,"+ \r\n        "],[1,"RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +"],[0,"\r\n    \r\n};\r\n"]],"start1":9186,"start2":9186,"length1":24,"length2":145}]],"length":28647,"saved":false}
{"ts":1350401751945,"patch":[[{"diffs":[[0,") + '\\n' +\r\n"],[1,"        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n'\r\n"],[0,"    \r\n};\r\n\r\n"]],"start1":9309,"start2":9309,"length1":24,"length2":413}]],"length":29036,"saved":false}
{"ts":1350401756838,"patch":[[{"diffs":[[0,") + '\\n'"],[1,";\r\n        "],[0,"\r\n    \r\n"]],"start1":9700,"start2":9700,"length1":16,"length2":27}]],"length":29047,"saved":false}
{"ts":1350401760360,"patch":[[{"diffs":[[0,"ace & 7]"],[1,";"],[0,"\r\n};\r\n\r\n"]],"start1":8896,"start2":8896,"length1":16,"length2":17},{"diffs":[[0,") + '\\n'"],[-1,";"],[0,"\r\n      "]],"start1":9701,"start2":9701,"length1":17,"length2":16}]],"length":29047,"saved":false}
{"ts":1350401777235,"patch":[[{"diffs":[[0,") + '\\n'"],[1," + \r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + "],[0,"\r\n      "]],"start1":9701,"start2":9701,"length1":16,"length2":803}]],"length":29834,"saved":false}
{"ts":1350401813598,"patch":[[{"diffs":[[0,"ies["],[-1,"2"],[1,"33"],[0,"]) + "],[-1,"RubixState.colorID(state.cubies[27])"],[1,"'G'"],[0," + R"]],"start1":9760,"start2":9760,"length1":50,"length2":18},{"diffs":[[0,"ies["],[-1,"7"],[0,"]) + "],[-1,"RubixState.colorID(state.cubies[31])"],[1,"'Y'"],[0," + R"]],"start1":9852,"start2":9852,"length1":50,"length2":16}]],"length":29768,"saved":false}
{"ts":1350401819017,"patch":[[{"diffs":[[0,") + "],[-1,"RubixState.colorID(state.cubies[29])"],[1,"'B'"],[0," + R"]],"start1":9950,"start2":9950,"length1":44,"length2":11}]],"length":29735,"saved":false}
{"ts":1350401835949,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"8"],[1,"35"],[0,"]) +\r\n        Ru"]],"start1":9793,"start2":9793,"length1":33,"length2":34},{"diffs":[[0,".cubies["],[1,"34"],[0,"]) + 'Y'"]],"start1":9849,"start2":9849,"length1":16,"length2":18},{"diffs":[[0,"ID(state.cubies["],[-1,"10"],[1,"36"],[0,"]) +\r\n        Ru"]],"start1":9886,"start2":9886,"length1":34,"length2":34}]],"length":29738,"saved":false}
{"ts":1350401841674,"patch":[[{"diffs":[[0,"tate.cubies["],[-1,"11"],[1,"37"],[0,"]) + 'B' + R"]],"start1":9938,"start2":9938,"length1":26,"length2":26}]],"length":29738,"saved":false}
{"ts":1350401848128,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"5"],[1,"39"],[0,"]) + '\\n' + \r\n  "]],"start1":9979,"start2":9979,"length1":33,"length2":34}]],"length":29739,"saved":false}
{"ts":1350401889672,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"2"],[1,"14"],[0,"]) + RubixState."]],"start1":10045,"start2":10045,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"27"],[1,"41"],[0,"]) + RubixState."]],"start1":10084,"start2":10084,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"8"],[1,"17"],[0,"]) +\r\n        Ru"]],"start1":10123,"start2":10123,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"7"],[1,"15"],[0,"]) + RubixState."]],"start1":10171,"start2":10171,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"31"],[1,"42"],[0,"]) + RubixState."]],"start1":10210,"start2":10210,"length1":34,"length2":34},{"diffs":[[0,"D(state.cubies[1"],[-1,"0"],[1,"8"],[0,"]) +\r\n        Ru"]],"start1":10250,"start2":10250,"length1":33,"length2":33},{"diffs":[[0,"ID(state.cubies["],[-1,"11"],[1,"20"],[0,"]) + RubixState."]],"start1":10297,"start2":10297,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"29"],[1,"45"],[0,"]) + RubixState."]],"start1":10336,"start2":10336,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"5"],[1,"23"],[0,"]) + '\\n' + \r\n  "]],"start1":10375,"start2":10375,"length1":33,"length2":34}]],"length":29743,"saved":false}
{"ts":1350401893693,"patch":[[{"diffs":[[0,"\r\n        \r\n"],[1,"        \r\n        \r\n"],[0,"    \r\n};\r\n\r\n"]],"start1":10405,"start2":10405,"length1":24,"length2":44}]],"length":29763,"saved":false}
{"ts":1350401907944,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +"],[0,"\r\n        \r\n    "]],"start1":10409,"start2":10409,"length1":32,"length2":760}]],"length":30491,"saved":false}
{"ts":1350401912179,"patch":[[{"diffs":[[0,".cubies[26]) + '"],[-1,"R"],[1,"W"],[0,"' + RubixState.c"]],"start1":10581,"start2":10581,"length1":33,"length2":33},{"diffs":[[0,".cubies[26]) + '"],[-1,"R"],[1,"W"],[0,"' + RubixState.c"]],"start1":10955,"start2":10955,"length1":33,"length2":33}]],"length":30491,"saved":false}
{"ts":1350401934755,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"0"],[1,"19"],[0,"]) + RubixState."]],"start1":10441,"start2":10441,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"26"],[1,"40"],[0,"]) + 'W' + Rubix"]],"start1":10574,"start2":10574,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"6"],[1,"13"],[0,"]) + RubixState."]],"start1":10675,"start2":10675,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"0"],[1,"12"],[0,"]) + RubixState."]],"start1":10817,"start2":10817,"length1":33,"length2":34},{"diffs":[[0,"tate.cubies["],[1,"3"],[0,"2"],[-1,"6"],[0,"]) + 'W' + R"]],"start1":10954,"start2":10954,"length1":26,"length2":26},{"diffs":[[0,"ID(state.cubies["],[-1,"6"],[1,"1"],[0,"]) + RubixState."]],"start1":11051,"start2":11051,"length1":33,"length2":33}]],"length":30494,"saved":false}
{"ts":1350401952412,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"2"],[0,"4"],[1,"3"],[0,"]) + RubixState."]],"start1":10480,"start2":10480,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"30"],[1,"47"],[0,"]) + RubixState."]],"start1":10714,"start2":10714,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"2"],[0,"4"],[1,"6"],[0,"]) + RubixState."]],"start1":10856,"start2":10856,"length1":34,"length2":34}]],"length":30494,"saved":false}
{"ts":1350401955819,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"30"],[1,"25"],[0,"]) + RubixState."]],"start1":11089,"start2":11089,"length1":34,"length2":34}]],"length":30494,"saved":false}
{"ts":1350401961491,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"2"],[1,"3"],[0,"8]) + '\\n' + \r\n "]],"start1":10995,"start2":10995,"length1":33,"length2":33}]],"length":30494,"saved":false}
{"ts":1350401965635,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"9"],[1,"4"],[0,"]) + '\\n' +\r\n   "]],"start1":11128,"start2":11128,"length1":33,"length2":33}]],"length":30494,"saved":false}
{"ts":1350401971330,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"3"],[1,"21"],[0,"]) + '\\n' + \r\n  "]],"start1":10895,"start2":10895,"length1":33,"length2":34}]],"length":30495,"saved":false}
{"ts":1350401975486,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"9"],[1,"22"],[0,"]) + '\\n' +\r\n   "]],"start1":10753,"start2":10753,"length1":33,"length2":34}]],"length":30496,"saved":false}
{"ts":1350401988450,"patch":[[{"diffs":[[0,"ID(state.cubies["],[-1,"3"],[1,"19"],[0,"]) + '\\n' + \r\n  "]],"start1":10519,"start2":10519,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"28"],[1,"44"],[0,"]) + '\\n' + \r\n  "]],"start1":10620,"start2":10620,"length1":34,"length2":34}]],"length":30497,"saved":false}
{"ts":1350401998010,"patch":[[{"diffs":[[0,"       \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":10408,"start2":10408,"length1":32,"length2":40}]],"length":30505,"saved":false}
{"ts":1350402018506,"patch":[[{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":10550,"start2":10550,"length1":32,"length2":40},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":10659,"start2":10659,"length1":32,"length2":40},{"diffs":[[0,"       \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":10810,"start2":10810,"length1":32,"length2":40},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":10952,"start2":10952,"length1":32,"length2":40},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":11061,"start2":11061,"length1":32,"length2":40}]],"length":30545,"saved":false}
{"ts":1350402038901,"patch":[[{"diffs":[[0,"\r\n{\r\n    return "],[1,"\r\n        '   ' + "],[0,"RubixState.color"]],"start1":8950,"start2":8950,"length1":32,"length2":50},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":9099,"start2":9099,"length1":32,"length2":40},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":9208,"start2":9208,"length1":32,"length2":40},{"diffs":[[0,"       \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":9357,"start2":9357,"length1":32,"length2":40},{"diffs":[[0,"s[8]) +\r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":9489,"start2":9489,"length1":32,"length2":40}]],"length":30595,"saved":false}
{"ts":1350402041422,"patch":[[{"diffs":[[0,"[10]) +\r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":9622,"start2":9622,"length1":32,"length2":40}]],"length":30603,"saved":false}
{"ts":1350402048270,"patch":[[{"diffs":[[0,"   \r\n       "],[-1," '   ' +"],[0," RubixState."]],"start1":9361,"start2":9361,"length1":32,"length2":24},{"diffs":[[0,") +\r\n       "],[-1," '   ' +"],[0," RubixState."]],"start1":9485,"start2":9485,"length1":32,"length2":24},{"diffs":[[0,") +\r\n       "],[-1," '   ' +"],[0," RubixState."]],"start1":9610,"start2":9610,"length1":32,"length2":24}]],"length":30579,"saved":false}
{"ts":1350402052871,"patch":[[{"diffs":[[0,"ubies[4]) + '\\n'"],[-1," +"],[1,";"],[0,"\r\n        \r\n    "]],"start1":11223,"start2":11223,"length1":34,"length2":33}]],"length":30578,"saved":false}
{"ts":1350402081343,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixCube.toString("],[0,"state)"],[1,")"],[0,";\r\n    r"]],"start1":8012,"start2":8012,"length1":22,"length2":42}]],"length":30598,"saved":false}
{"ts":1350402176314,"patch":[[{"diffs":[[0,"(state)\r\n{\r\n"],[1,"    console.log(\"inside\");\r\n"],[0,"    return \r"]],"start1":8964,"start2":8964,"length1":24,"length2":52}]],"length":30627,"saved":false}
{"ts":1350402197728,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(\"inside\");\r\n    return \r\n       "],[1,"var output ="],[0," '  "]],"start1":8976,"start2":8976,"length1":52,"length2":20}]],"length":30595,"saved":false}
{"ts":1350402207158,"patch":[[{"diffs":[[0,"\r\n        \r\n"],[1,"        console.log(output);\r\n        \r\n"],[0,"    \r\n};\r\n\r\n"]],"start1":11257,"start2":11257,"length1":24,"length2":64}]],"length":30635,"saved":false}
{"ts":1350402213940,"patch":[[{"diffs":[[0,"g(output);\r\n"],[1,"    return output;\r\n"],[0,"        \r\n  "]],"start1":11287,"start2":11287,"length1":24,"length2":44}]],"length":30655,"saved":false}
{"ts":1350402230521,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        console.log(output);\r\n"],[0,"    "]],"start1":11265,"start2":11265,"length1":38,"length2":8}]],"length":30625,"saved":false}
{"ts":1350402236416,"patch":[[{"diffs":[[0,"ies[40]) + '"],[-1,"W"],[1,"R"],[0,"' + RubixSta"]],"start1":10654,"start2":10654,"length1":25,"length2":25}]],"length":30625,"saved":false}
{"ts":1350402360246,"patch":[[{"diffs":[[0,"ies[40]) + '"],[-1,"R"],[1,"O"],[0,"' + RubixSta"]],"start1":10654,"start2":10654,"length1":25,"length2":25}]],"length":30625,"saved":false}
{"ts":1350402415141,"patch":[[{"diffs":[[0,"ate.cubies[1"],[-1,"9"],[1,"6"],[0,"]) + RubixSt"]],"start1":10505,"start2":10505,"length1":25,"length2":25}]],"length":30625,"saved":false}
{"ts":1350402546469,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"//--------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Rotates the cube 1 to 3 rotations in the clockwise direction given the face.\r\n * @param {number} face the face of the cube to rotate\r\n * @param {number} rotations the number of rotations\r\n */\r\nRubixState.prototype.rotate = function(face, rotations)\r\n{\r\n    var indicies = RubixState.sideLookUpTable[face];\r\n    \r\n    var tempCubies = [], newIndex, index;\r\n    \r\n    for (index = 0; index < indicies.length; index++)\r\n    {\r\n        tempCubies[indicies[index]] = this.cubies[indicies[index]];\r\n        tempCubies[indicies[index]].rotate(face, rotations);\r\n    }\r\n    \r\n    for (index = 0; index < indicies.length; index++)\r\n    {\r\n        newIndex = (index + (2 * rotations)) % 8;\r\n        this.cubies[indicies[newIndex]] = tempCubies[indicies[index]];\r\n    }\r\n};\r\n\r\n/**\r\n * Finds and returns the index of the given cubie on this cube state.\r\n * @return the index of the given cubie.\r\n */\r\nRubixState.prototype.findCubie = function(cubie)\r\n{\r\n    for (var index = 0; index < this.cubies.length; index++)\r\n    {\r\n        if (cubie.colorId() === this.cubies[index].colorId())\r\n            return index;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";\r\n};\r\n\r\n/**\r\n * Returns a copy of this state.\r\n * @return a copy of this state\r\n */\r\nRubixState.prototype.copy = function()\r\n{\r\n    var copy = new RubixState();\r\n    for (var index in this.cubies)\r\n        copy.cubies[index] = this.cubies[index].copy();\r\n    return copy;\r\n};\r\n\r\n/**\r\n * Converts this cube to a formatted string. \r\n * @return the cube represented as a string\r\n */\r\nRubixState.prototype.toString = function(spaces)\r\n{\r\n    var newLine = spaces ? \"\\n\" : \"\";\r\n    var space = spaces ? \"   \" : \"\";\r\n    \r\n    // Back\r\n    var rubixStr = space + this.cubies[0].getColor(RubixState.faces.back) + this.cubies[1].getColor(RubixState.faces.back) + this.cubies[2].getColor(RubixState.faces.back) + newLine +\r\n                   space + this.cubies[3].getColor(RubixState.faces.back) + RubixState.colors.red + this.cubies[4].getColor(RubixState.faces.back) + newLine +\r\n                   space + this.cubies[5].getColor(RubixState.faces.back) + this.cubies[6].getColor(RubixState.faces.back) + this.cubies[7].getColor(RubixState.faces.back) + newLine +\r\n    // Left Top Right, 1st row\r\n                   this.cubies[0].getColor(RubixState.faces.left) + this.cubies[3].getColor(RubixState.faces.left) + this.cubies[5].getColor(RubixState.faces.left) + \r\n                   this.cubies[5].getColor(RubixState.faces.top) + this.cubies[6].getColor(RubixState.faces.top) + this.cubies[7].getColor(RubixState.faces.top) + \r\n                   this.cubies[7].getColor(RubixState.faces.right) + this.cubies[4].getColor(RubixState.faces.right) + this.cubies[2].getColor(RubixState.faces.right) + newLine +\r\n    // Left Top Right, 2nd row\r\n                   this.cubies[8].getColor(RubixState.faces.left) + RubixState.colors.green + this.cubies[9].getColor(RubixState.faces.left) + \r\n                   this.cubies[9].getColor(RubixState.faces.top) + RubixState.colors.yellow + this.cubies[10].getColor(RubixState.faces.top) + \r\n                   this.cubies[10].getColor(RubixState.faces.right) + RubixState.colors.blue + this.cubies[11].getColor(RubixState.faces.right) + newLine +\r\n    // Left Top Right, 3rd row\r\n                   this.cubies[17].getColor(RubixState.faces.left) + this.cubies[15].getColor(RubixState.faces.left) + this.cubies[12].getColor(RubixState.faces.left) + \r\n                   this.cubies[12].getColor(RubixState.faces.top) + this.cubies[13].getColor(RubixState.faces.top) + this.cubies[14].getColor(RubixState.faces.top) + \r\n                   this.cubies[14].getColor(RubixState.faces.right) + this.cubies[16].getColor(RubixState.faces.right) + this.cubies[19].getColor(RubixState.faces.right) + newLine +\r\n    // Front\r\n                   space + this.cubies[12].getColor(RubixState.faces.front) + this.cubies[13].getColor(RubixState.faces.front) + this.cubies[14].getColor(RubixState.faces.front) + newLine +\r\n                   space + this.cubies[15].getColor(RubixState.faces.front) + RubixState.colors.orange + this.cubies[16].getColor(RubixState.faces.front) + newLine +\r\n                   space + this.cubies[17].getColor(RubixState.faces.front) + this.cubies[18].getColor(RubixState.faces.front) + this.cubies[19].getColor(RubixState.faces.front) + newLine +\r\n    // Bottom\r\n                   space + this.cubies[17].getColor(RubixState.faces.bottom) + this.cubies[18].getColor(RubixState.faces.bottom) + this.cubies[19].getColor(RubixState.faces.bottom) + newLine +\r\n                   space + this.cubies[8].getColor(RubixState.faces.bottom) + RubixState.colors.white + this.cubies[11].getColor(RubixState.faces.bottom) + newLine +\r\n                   space + this.cubies[0].getColor(RubixState.faces.bottom) + this.cubies[1].getColor(RubixState.faces.bottom) + this.cubies[2].getColor(RubixState.faces.bottom);  \r\n               \r\n    return rubixStr;     \r\n};\r\n\r\n/**\r\n * Returns a new Rubik's cube state set up as the goal state.\r\n * @return a new Rubik's cube state set up as the goal state\r\n */\r\nRubixState.initWithGoalState = function()\r\n{\r\n    var goalState = new RubixState();\r\n    \r\n    goalState.cubies = [\r\n        // In order according to the representation below.\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.white, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.white),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.white, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.yellow, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.yellow),\r\n        Cubie.create(RubixState.colors.red, RubixState.colors.yellow, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.white, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.yellow, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.yellow, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.white, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.yellow, RubixState.colors.orange, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.yellow, RubixState.colors.orange),\r\n        Cubie.create(RubixState.colors.yellow, RubixState.colors.orange, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.orange, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.orange, RubixState.colors.blue),\r\n        Cubie.create(RubixState.colors.white, RubixState.colors.orange, RubixState.colors.green),\r\n        Cubie.create(RubixState.colors.white, RubixState.colors.orange),\r\n        Cubie.create(RubixState.colors.white, RubixState.colors.orange, RubixState.colors.blue)\r\n    ];\r\n    \r\n    for (var index in goalState.cubies)\r\n        goalState.cubies[index].faces.sort(function(a,b){return a.face - b.face;});\r\n    \r\n    return goalState;\r\n};\r\n\r\nRubixState.initWithString = function(text)\r\n{\r\n    var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n    \r\n    var tempState = new RubixState();\r\n    \r\n    tempState.cubies = [\r\n        // In order according to the representation below.\r\n        Cubie.create(faces[0][0], faces[5][6], faces[1][0],0, 5, 1),\r\n        Cubie.create(faces[0][1], faces[5][7], null, 0, 5),\r\n        Cubie.create(faces[0][2], faces[5][8], faces[3][2], 0, 5, 3),\r\n        Cubie.create(faces[0][3], faces[1][1], null, 0, 1),\r\n        Cubie.create(faces[0][5], faces[3][1], null, 0, 3),\r\n        Cubie.create(faces[0][6], faces[2][0], faces[1][2], 0, 2, 1),\r\n        Cubie.create(faces[0][7], faces[2][1], null, 0, 2),\r\n        Cubie.create(faces[0][8], faces[2][2], faces[3][0], 0, 2, 3),\r\n        Cubie.create(faces[5][3], faces[1][3], null, 5, 1),\r\n        Cubie.create(faces[2][3], faces[1][5], null, 2, 1),\r\n        Cubie.create(faces[2][5], faces[3][3], null, 2, 3),\r\n        Cubie.create(faces[5][5], faces[3][5], null, 5, 3),\r\n        Cubie.create(faces[2][6], faces[4][0], faces[1][8], 2, 4, 1),\r\n        Cubie.create(faces[2][7], faces[4][1], null, 2, 4),\r\n        Cubie.create(faces[2][8], faces[4][2], faces[3][6], 2, 4, 3),\r\n        Cubie.create(faces[4][3], faces[1][7], null, 4, 1), \r\n        Cubie.create(faces[4][5], faces[3][7], null, 4, 3),\r\n        Cubie.create(faces[5][0], faces[4][6], faces[1][6], 5, 4, 1),\r\n        Cubie.create(faces[5][1], faces[4][7], null, 5, 4),\r\n        Cubie.create(faces[5][2], faces[4][8], faces[3][8], 5, 4, 3)\r\n    ];\r\n    for (var index in tempState.cubies)\r\n        tempState.cubies[index].faces.sort(function(a,b){return a.face - b.face;});\r\n    \r\n    return tempState;\r\n};\r\n\r\n/**\r\n * The cube's colors. \r\n */\r\nRubixState.colors = {\r\n    red : \"R\",\r\n    green : \"G\",\r\n    yellow : \"Y\",\r\n    blue : \"B\",\r\n    orange : \"O\",\r\n    white : \"W\"\r\n};\r\n\r\n\r\n\r\n/**\r\n * This sets up the indicies in reference to a clockwise pattern. \r\n * \r\n *           00 01 02\r\n *           03 Re 04\r\n *           05 06 07\r\n * \r\n * 00 03 05  05 06 07  07 04 02\r\n * 08 Gr 09  09 Ye 10  10 Bl 11\r\n * 17 15 12  12 13 14  14 16 19\r\n * \r\n *           12 13 14\r\n *           15 Or 16\r\n *           17 18 19\r\n * \r\n *           17 18 19\r\n *           08 Wh 11\r\n *           00 01 02\r\n *\r\nRubixState.sideLookUpTable = [\r\n    [ 7, 6, 5, 3, 0, 1, 2, 4], // red, back\r\n    [ 5, 9,12,15,17, 8, 0, 3], // green, left\r\n    [ 5, 6, 7,10,14,13,12, 9], // yellow, top\r\n    [14,10, 7, 4, 2,11,19,16], // blue, right\r\n    [12,13,14,16,19,18,17,15], // orange, front\r\n    [17,18,19,11, 2, 1, 0, 8]  // white, bottom\r\n];*/\r\n\r\n\r\n/**\r\n * Defines a new cubie.\r\n * @param {Object} faces an array of 2 or 3 cubie faces (depending on if it's a side or corner)\r\n */\r\nfunction Cubie(faces)\r\n{\r\n    // The cubie's faces (2 for sides, 3 for corners)\r\n    this.faces = faces.slice(0); // Copy array\r\n}\r\n\r\n/**\r\n * Rotates the cubie 1 to 3 rotations in the clockwise direction given the face.\r\n * @param {number} face the face of the cube to rotate\r\n * @param {number} rotations the number of rotations\r\n */\r\nCubie.prototype.rotate = function(face, rotations)\r\n{\r\n    for (var index in this.faces)\r\n    {\r\n        // Face doesn't change if it's the rotating face.\r\n        if (this.faces[index].face === face)\r\n            continue;\r\n        \r\n        this.faces[index].rotate(face, rotations);\r\n    }\r\n    \r\n    this.faces.sort(function(a,b){return a.face - b.face;});\r\n};\r\n\r\n/**\r\n * Returns an identifier for this cubie based on its colors. Disregards position.\r\n * @return an identifier for this cubie\r\n */\r\nCubie.prototype.colorId = function()\r\n{\r\n    var colors = [];\r\n    for (var index in this.faces)\r\n        colors.push(this.faces[index].color);\r\n    \r\n    colors.sort();\r\n    var id = \"\";\r\n\r\n    for (index in colors)\r\n        id += colors[index];\r\n    \r\n    return id;\r\n};\r\n\r\n/**\r\n * Returns the color on the given face of this cubie. \r\n * @param {number} face the specified face\r\n */\r\nCubie.prototype.getColor = function(face)\r\n{\r\n    for (var i in this.faces)\r\n    {\r\n        if (this.faces[i].face === face)\r\n            return this.faces[i].color;\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the cubie is valid. Only checks colors, since a cubie doesn't\r\n * know if it's in the correct position. (Not sure if this will be useful...)\r\n * @return true if the cubie is valid, false otherwise. \r\n */\r\nCubie.prototype.isValid = function() \r\n{\r\n    // Check if all sides are different colors\r\n    if (this.isSide())\r\n    {\r\n        if (this.faces[0].color == this.faces[1].color)\r\n            return false;\r\n    }\r\n    else if (this.isCorner())\r\n    {\r\n        if (this.faces[0].color == this.faces[1].color ||\r\n            this.faces[1].color == this.faces[2].color ||\r\n            this.faces[0].color == this.faces[2].color)\r\n            return false;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\n/**\r\n * Returns true if the cubie is a side cube.\r\n * @return true if the cubie is a side, false otherwise. \r\n */\r\nCubie.prototype.isSide = function()\r\n{\r\n    return this.faces.length === 2;\r\n};\r\n\r\n/**\r\n * Returns true if the cubie is a corner cube.\r\n * @return true if the cubie is a corner, false otherwise. \r\n */\r\nCubie.prototype.isCorner = function()\r\n{\r\n    return this.faces.length === 3;\r\n};\r\n\r\nCubie.prototype.equals = function(other)\r\n{\r\n    return JSON.stringify(this) === JSON.stringify(other);\r\n};\r\n\r\n/**\r\n * Returns a copy of this cubie.\r\n * @return a copy of this cubie\r\n */\r\nCubie.prototype.copy = function()\r\n{\r\n    var faces = [];\r\n    for (var index in this.faces)\r\n        faces[index] = this.faces[index].copy();\r\n    return new Cubie(faces);\r\n};\r\n\r\n/**\r\n * Creates a new cubie given 2 or 3 colors and faces.\r\n * @param {number} color1 the color of the first face.\r\n * @param {number} color2 the color of the second face.\r\n * @param {number} color3 the color of the third face (optional if a side cubie).\r\n * @param {number} face1 the direction of the first face (optional if assuming goal state).\r\n * @param {number} face2 the direction of the second face (optional if assuming goal state).\r\n * @param {number} face3 the direction of the third face (optional if assuming goal state).\r\n * @return a new Cubie.\r\n */\r\nCubie.create = function(color1, color2, color3, face1, face2, face3)\r\n{\r\n    face1 = face1 == null ? Cubie.defaultFace(color1) : face1;\r\n    face2 = face2 == null ? Cubie.defaultFace(color2) : face2;\r\n    \r\n    // A side\r\n    if (color3 == null)\r\n    {        \r\n        return new Cubie([new CubieFace(color1, face1),\r\n                          new CubieFace(color2, face2)]);\r\n    }\r\n    \r\n    // A corner\r\n    face3 = face3 == null ? Cubie.defaultFace(color3) : face3;\r\n    \r\n    return new Cubie([new CubieFace(color1, face1),\r\n                      new CubieFace(color2, face2),\r\n                      new CubieFace(color3, face3)]);\r\n};\r\n\r\n/**\r\n * Returns the default face of the given color ( assumes the cube is in the goal state). \r\n * @param {number} color the specified color\r\n * @return the default face\r\n */\r\nCubie.defaultFace = function(color)\r\n{\r\n    switch (color)\r\n    {\r\n        case RubixState.colors.yellow:\r\n            return RubixState.faces.top;\r\n        case RubixState.colors.red:\r\n            return RubixState.faces.back;\r\n        case RubixState.colors.white:\r\n            return RubixState.faces.bottom;\r\n        case RubixState.colors.orange:\r\n            return RubixState.faces.front;\r\n        case RubixState.colors.green:\r\n            return RubixState.faces.left;\r\n        case RubixState.colors.blue:\r\n            return RubixState.faces.right;\r\n        default:\r\n            return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Defines a cubie face. \r\n * @param {number} color the cubie face's color.\r\n * @param {number} face the cubie face's direction.\r\n * @return a new cubie face.\r\n */\r\nfunction CubieFace(color, face)\r\n{\r\n    this.color = color;\r\n    this.face =  face;\r\n}\r\n\r\n/**\r\n * Rotates the cubie face 1 to 3 rotations in the clockwise direction given the face.\r\n * Rotating the cubie face only means redefining its face direction depending on the rotation.\r\n * @param {number} face the face of the cube to rotate (not the cubie face's face)\r\n * @param {number} rotations the number of rotations\r\n */\r\nCubieFace.prototype.rotate = function(face, rotations)\r\n{\r\n    // Added a tenary operator to handle an undefined issue.\r\n    this.face = CubieFace.newFaceMap[face][this.face]? \r\n        CubieFace.newFaceMap[face][this.face][rotations]:this.face;\r\n};\r\n\r\n/**\r\n * Returns a copy of this cubie face.\r\n * @return a copy of this cubie face\r\n */\r\nCubieFace.prototype.copy = function()\r\n{\r\n    return new CubieFace(this.color, this.face);\r\n};\r\n\r\n\r\n"]],"start1":13815,"start2":13815,"length1":16810,"length2":4}]],"length":13819,"saved":false}
{"ts":1350403508923,"patch":[[{"diffs":[[0,"--- */\r\n\r\n\r\n"],[1,"// I can actually halve the size of this,but I'm not doing that unless I have to(it's hard...)\r\n"],[0,"/**\r\n * A fu"]],"start1":103,"start2":103,"length1":24,"length2":120}]],"length":13915,"saved":false}
{"ts":1350403602468,"patch":[[{"diffs":[[0,".\r\n */\r\n"],[-1,"CubieFac"],[1,"RubixStat"],[0,"e.newFac"]],"start1":11704,"start2":11704,"length1":24,"length2":25}]],"length":13916,"saved":false}
{"ts":1350403612465,"patch":[[{"diffs":[[0,"   if ( "],[-1,"CubieFac"],[1,"RubixStat"],[0,"e.newFac"]],"start1":3044,"start2":3044,"length1":24,"length2":25},{"diffs":[[0,"return ("],[-1,"CubieFac"],[1,"RubixStat"],[0,"e.newFac"]],"start1":3106,"start2":3106,"length1":24,"length2":25}]],"length":13918,"saved":false}
{"ts":1350403659627,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    console.log(RubixState.toString(state));\r\n    "],[1,"\r\n"],[0,"retu"]],"start1":8098,"start2":8098,"length1":58,"length2":10}]],"length":13870,"saved":false}
{"ts":1350403660715,"patch":[[{"diffs":[[0,",4);\r\n\r\n"],[1,"    "],[0,"return s"]],"start1":8096,"start2":8096,"length1":16,"length2":20}]],"length":13874,"saved":false}
{"ts":1350403749480,"patch":[[{"diffs":[[0,"te)\r\n{\r\n    "],[1,"state.slice(0);"],[0,"\r\n};\r\n\r\nRubi"]],"start1":8823,"start2":8823,"length1":24,"length2":39}]],"length":13889,"saved":false}
{"ts":1350403753603,"patch":[[{"diffs":[[0,"te)\r\n{\r\n    "],[1,"return "],[0,"state.slice("]],"start1":8823,"start2":8823,"length1":24,"length2":31}]],"length":13896,"saved":false}
{"ts":1350403760292,"patch":[[{"diffs":[[0,"n state."],[1,"cubies."],[0,"slice(0)"]],"start1":8840,"start2":8840,"length1":16,"length2":23}]],"length":13903,"saved":false}
{"ts":1350403773527,"patch":[[{"diffs":[[0,"(state)\r\n{\r\n"],[1,"    var newState = new RubixState();\r\n    \r\n"],[0,"    return s"]],"start1":8819,"start2":8819,"length1":24,"length2":68}]],"length":13947,"saved":false}
{"ts":1350403781083,"patch":[[{"diffs":[[0,"ate();\r\n    "],[1,"newState.cubies = "],[0,"\r\n    return"]],"start1":8861,"start2":8861,"length1":24,"length2":42}]],"length":13965,"saved":false}
{"ts":1350403789526,"patch":[[{"diffs":[[0,"ubies = "],[-1,"\r\n    return "],[0,"state.cu"]],"start1":8883,"start2":8883,"length1":29,"length2":16},{"diffs":[[0,".slice(0);\r\n"],[1,"    return newState;\r\n"],[0,"};\r\n\r\nRubixS"]],"start1":8903,"start2":8903,"length1":24,"length2":46}]],"length":13974,"saved":false}
{"ts":1350403926107,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"RubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n"],[0,"// The l"]],"start1":903,"start2":903,"length1":16,"length2":70},{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.faceValues = ['R','G','Y','B','O','W'];\r\n"],[0,"\r\nRu"]],"start1":8993,"start2":8993,"length1":60,"length2":8}]],"length":13976,"saved":false}
{"ts":1350403958712,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"RubixState.compare = function(state1, state2)\r\n{\r\n    \r\n}\r\n\r\n"],[0,"\r\nRubixS"]],"start1":8989,"start2":8989,"length1":16,"length2":77}]],"length":14037,"saved":false}
{"ts":1350403959778,"patch":[[{"diffs":[[0,"e2)\r\n{\r\n    "],[1,"  "],[0,"\r\n}"],[1,";"],[0,"\r\n\r\n\r\nRubixS"]],"start1":9039,"start2":9039,"length1":27,"length2":30}]],"length":14040,"saved":false}
{"ts":1350403977479,"patch":[[{"diffs":[[0,"e2)\r\n{\r\n    "],[1,"var equal = true;"],[0,"  \r\n};\r\n\r\n\r\n"]],"start1":9039,"start2":9039,"length1":24,"length2":41}]],"length":14057,"saved":false}
{"ts":1350403982411,"patch":[[{"diffs":[[0,"ate."],[-1,"compare"],[1,"isEqual"],[0," = f"]],"start1":9004,"start2":9004,"length1":15,"length2":15}]],"length":14057,"saved":false}
{"ts":1350404025631,"patch":[[{"diffs":[[0," = true;  \r\n"],[1,"    \r\n    for(var index in state1.cubies)\r\n    {\r\n        \r\n    }\r\n"],[0,"};\r\n\r\n\r\nRubi"]],"start1":9060,"start2":9060,"length1":24,"length2":91}]],"length":14124,"saved":false}
{"ts":1350404049020,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"equal = state1.cubies"],[0,"\r\n    }\r\n};\r\n\r\n\r"]],"start1":9114,"start2":9114,"length1":32,"length2":53}]],"length":14145,"saved":false}
{"ts":1350404065059,"patch":[[{"diffs":[[0,"equal = "],[1,"("],[0,"state1.c"]],"start1":9130,"start2":9130,"length1":16,"length2":17},{"diffs":[[0,"1.cubies"],[1,"[index] === state1.cubies[index]);"],[0,"\r\n    }\r"]],"start1":9144,"start2":9144,"length1":16,"length2":50}]],"length":14180,"saved":false}
{"ts":1350404068030,"patch":[[{"diffs":[[0,"x] === state"],[-1,"1"],[1,"2"],[0,".cubies[inde"]],"start1":9157,"start2":9157,"length1":25,"length2":25}]],"length":14180,"saved":false}
{"ts":1350404075198,"patch":[[{"diffs":[[0,"s[index]);\r\n"],[1,"        if(!equal)\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":9176,"start2":9176,"length1":24,"length2":44}]],"length":14200,"saved":false}
{"ts":1350404077925,"patch":[[{"diffs":[[0,"equal)\r\n"],[1,"        {\r\n            \r\n        }\r\n"],[0,"    }\r\n}"]],"start1":9200,"start2":9200,"length1":16,"length2":52}]],"length":14236,"saved":false}
{"ts":1350404082992,"patch":[[{"diffs":[[0," {\r\n            "],[1,"break;    "],[0,"\r\n        }\r\n   "]],"start1":9215,"start2":9215,"length1":32,"length2":42}]],"length":14246,"saved":false}
{"ts":1350404084883,"patch":[[{"diffs":[[0,"s[index]);\r\n"],[1,"        \r\n"],[0,"        if(!"]],"start1":9176,"start2":9176,"length1":24,"length2":34}]],"length":14256,"saved":false}
{"ts":1350404092519,"patch":[[{"diffs":[[0,"  }\r\n    }\r\n"],[1,"    \r\n    return equal;\r\n"],[0,"};\r\n\r\n\r\nRubi"]],"start1":9259,"start2":9259,"length1":24,"length2":49}]],"length":14281,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350408423210,"patch":[[{"diffs":[[0," = n"],[-1,"ew Uint8Array(new ArrayBuffer(48));\r\n "],[1,"ull;"],[0,"   \r"]],"start1":574,"start2":574,"length1":46,"length2":12},{"diffs":[[0,"ate();\r\n    "],[-1,""],[1,"state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n"],[0,"\r\n    /*\r\n  "]],"start1":4487,"start2":4487,"length1":24,"length2":77},{"diffs":[[0,"cubies[3"],[-1,"9"],[1,"7"],[0,"] = Rubi"]],"start1":7417,"start2":7417,"length1":17,"length2":17},{"diffs":[[0,"aces[3]["],[-1,"5"],[1,"3"],[0,"],3);\r\n "]],"start1":7453,"start2":7453,"length1":17,"length2":17},{"diffs":[[0,";\r\n    \r\n    //s"],[-1,"8"],[1,"7"],[0,"\r\n    state.cubi"]],"start1":7466,"start2":7466,"length1":33,"length2":33},{"diffs":[[0,"   state.cubies["],[-1,"26"],[1,"38"],[0,"] = RubixState.c"]],"start1":7486,"start2":7486,"length1":34,"length2":34},{"diffs":[[0,"reateFace(faces["],[-1,"2][7],2"],[1,"5][5],5"],[0,");\r\n    state.cu"]],"start1":7520,"start2":7520,"length1":39,"length2":39},{"diffs":[[0,"   state.cubies["],[-1,"41"],[1,"39"],[0,"] = RubixState.c"]],"start1":7548,"start2":7548,"length1":34,"length2":34},{"diffs":[[0,"reateFace(faces["],[-1,"4][1],4"],[1,"3][5],3"],[0,");\r\n    \r\n    //"]],"start1":7582,"start2":7582,"length1":39,"length2":39},{"diffs":[[0,"aces[4]["],[-1,"5"],[1,"3"],[0,"],4);\r\n "]],"start1":7671,"start2":7671,"length1":17,"length2":17},{"diffs":[[0,"ces["],[-1,"3"],[1,"1"],[0,"][7],"],[-1,"3"],[1,"1"],[0,");\r\n"]],"start1":7734,"start2":7734,"length1":15,"length2":15},{"diffs":[[0,"\r\n        \r\n"],[1,"    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n"],[0,"    //s11\r\n "]],"start1":7887,"start2":7887,"length1":24,"length2":165},{"diffs":[[0,"ubies = "],[1,"new Uint8Array("],[0,"state.cu"]],"start1":8956,"start2":8956,"length1":16,"length2":31},{"diffs":[[0,"ies."],[1,"buffer."],[0,"slice(0)"],[1,");\r\n  \r\n    console.log(\"in copy\");\r\n    console.log(state);\r\n    console.log(newState);\r\n    console.log(\"out of copy\")"],[0,";\r\n "]],"start1":8988,"start2":8988,"length1":16,"length2":143},{"diffs":[[0,"rue;  \r\n    "],[1,"console.log(state1.cubies);\r\n    console.log(state2.cubies);\r\n"],[0,"\r\n    for(va"]],"start1":9225,"start2":9225,"length1":24,"length2":86},{"diffs":[[0,"r index "],[-1,"in"],[1,"= 0, length ="],[0," state1."]],"start1":9311,"start2":9311,"length1":18,"length2":29},{"diffs":[[0,"tate1.cubies"],[1,".length; index < length; index ++"],[0,")\r\n    {\r\n  "]],"start1":9334,"start2":9334,"length1":24,"length2":57},{"diffs":[[0,"      }\r\n    }\r\n"],[-1,"    "],[1,""],[0,"\r\n    return equ"]],"start1":9522,"start2":9522,"length1":36,"length2":32},{"diffs":[[0,"ies["],[-1,"2"],[1,"33"],[0,"]) + "],[-1,"RubixState.colorID(state.cubies[27])"],[1,"'G'"],[0," + R"]],"start1":10535,"start2":10535,"length1":50,"length2":18},{"diffs":[[0,"ID(state.cubies["],[-1,"8"],[1,"35"],[0,"]) +\r\n        Ru"]],"start1":10568,"start2":10568,"length1":33,"length2":34},{"diffs":[[0,"ate.cubies[3"],[-1,"3"],[1,"4"],[0,"]) + '"],[-1,"G"],[1,"Y"],[0,"' + RubixSta"]],"start1":10621,"start2":10621,"length1":32,"length2":32},{"diffs":[[0,"D(state.cubies[3"],[-1,"5"],[1,"6"],[0,"]) +\r\n        Ru"]],"start1":10662,"start2":10662,"length1":33,"length2":33},{"diffs":[[0,"ate.cubies[3"],[-1,"4"],[1,"7"],[0,"]) + '"],[-1,"Y"],[1,"B"],[0,"' + RubixSta"]],"start1":10714,"start2":10714,"length1":32,"length2":32},{"diffs":[[0,"tate.cubies["],[-1,"37"],[1,"14"],[0,"]) + "],[-1,"'B'"],[1,"RubixState.colorID(state.cubies[41])"],[0," + RubixStat"]],"start1":10824,"start2":10824,"length1":34,"length2":67},{"diffs":[[0,"ID(state.cubies["],[-1,"36"],[1,"17"],[0,"]) +\r\n        Ru"]],"start1":10898,"start2":10898,"length1":34,"length2":34},{"diffs":[[0,"D(state.cubies[1"],[-1,"4"],[1,"5"],[0,"]) + RubixState."]],"start1":10947,"start2":10947,"length1":33,"length2":33},{"diffs":[[0,"D(state.cubies[4"],[-1,"1"],[1,"2"],[0,"]) + RubixState."]],"start1":10986,"start2":10986,"length1":33,"length2":33},{"diffs":[[0,".cubies["],[-1,"4"],[0,"45]) + R"]],"start1":11119,"start2":11119,"length1":17,"length2":16},{"diffs":[[0,"ID(state.cubies["],[-1,"0"],[1,"16"],[0,"]) + RubixState."]],"start1":11224,"start2":11224,"length1":33,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"2"],[0,"4"],[1,"3"],[0,"]) + RubixState."]],"start1":11263,"start2":11263,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"3"],[1,"19"],[0,"]) + '\\n' + \r\n  "]],"start1":11302,"start2":11302,"length1":33,"length2":34},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":11325,"start2":11325,"length1":32,"length2":40},{"diffs":[[0,"tate.cubies["],[-1,"26"],[1,"40"],[0,"]) + 'O' + R"]],"start1":11370,"start2":11370,"length1":26,"length2":26},{"diffs":[[0,"ID(state.cubies["],[-1,"19"],[1,"44"],[0,"]) + '\\n' + \r\n  "]],"start1":11411,"start2":11411,"length1":34,"length2":34},{"diffs":[[0,"ies["],[1,"1"],[0,"3"],[-1,"16"],[0,"]) +"]],"start1":11487,"start2":11487,"length1":11,"length2":10},{"diffs":[[0,"ID(state.cubies["],[-1,"30"],[1,"47"],[0,"]) + RubixState."]],"start1":11514,"start2":11514,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"44"],[1,"22"],[0,"]) + '\\n' +\r\n   "]],"start1":11553,"start2":11553,"length1":34,"length2":34},{"diffs":[[0,"       \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":11585,"start2":11585,"length1":32,"length2":40},{"diffs":[[0,"ID(state.cubies["],[-1,"0"],[1,"12"],[0,"]) + RubixState."]],"start1":11626,"start2":11626,"length1":33,"length2":34},{"diffs":[[0,"ies["],[1,"4"],[0,"6"],[-1,"47"],[0,"]) +"]],"start1":11677,"start2":11677,"length1":11,"length2":10},{"diffs":[[0,"D(state.cubies[2"],[-1,"2"],[1,"1"],[0,"]) + '\\n' + \r\n  "]],"start1":11705,"start2":11705,"length1":33,"length2":33},{"diffs":[[0,"ate.cubies[3"],[-1,"4"],[1,"2"],[0,"]) + 'W' + R"]],"start1":11773,"start2":11773,"length1":25,"length2":25},{"diffs":[[0,"ID(state.cubies["],[-1,"21"],[1,"38"],[0,"]) + '\\n' + \r\n  "]],"start1":11813,"start2":11813,"length1":34,"length2":34},{"diffs":[[0," '   ' +"],[-1," '   ' + '   ' +"],[0," RubixSt"]],"start1":11852,"start2":11852,"length1":32,"length2":16},{"diffs":[[0,"tate.cubies["],[-1,"3"],[0,"4]) + '\\n';\r"]],"start1":11958,"start2":11958,"length1":25,"length2":24},{"diffs":[[0,"  \r\n    \r\n};"],[-1,""],[1,"\r\n\r\n"],[0,"\r\n\r\n\r\n/**\r\n "]],"start1":12019,"start2":12019,"length1":24,"length2":28}]],"length":14548,"saved":false}
{"ts":1350408642759,"patch":[[{"diffs":[[0,"RubixState()"],[1,", copy = state.cubies.buffer.slice(0)"],[0,";\r\n    newSt"]],"start1":8927,"start2":8927,"length1":24,"length2":61}]],"length":14585,"saved":false}
{"ts":1350408653217,"patch":[[{"diffs":[[0,"ray("],[-1,"state.cubies.buffer.slice(0)"],[1,"copy"],[0,");\r\n"]],"start1":9012,"start2":9012,"length1":36,"length2":12}]],"length":14561,"saved":false}
{"ts":1350408732857,"patch":[[{"diffs":[[0,"t8Array("],[-1,"copy"],[1,"state.cubies.length"],[0,");\r\n  \r\n"]],"start1":9008,"start2":9008,"length1":20,"length2":35}]],"length":14576,"saved":false}
{"ts":1350408775380,"patch":[[{"diffs":[[0,"ngth);\r\n"],[1,"    \r\n    for(var index = 0, length = newState.length, index < length; index++)\r\n    {\r\n        \r\n    }\r\n"],[0,"  \r\n    "]],"start1":9031,"start2":9031,"length1":16,"length2":121}]],"length":14681,"saved":false}
{"ts":1350408794421,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"newState.cubies[index] = state.cubies[index];"],[0,"\r\n    }\r\n  \r\n   "]],"start1":9119,"start2":9119,"length1":32,"length2":77}]],"length":14726,"saved":false}
{"ts":1350408813733,"patch":[[{"diffs":[[0,"e.length"],[-1,","],[1,";"],[0," index <"]],"start1":9084,"start2":9084,"length1":17,"length2":17}]],"length":14726,"saved":false}
{"ts":1350408890460,"patch":[[{"diffs":[[0,"es[index];\r\n"],[1,"        newState.cubies[index] = 7\r\n"],[0,"    }\r\n  \r\n "]],"start1":9170,"start2":9170,"length1":24,"length2":60}]],"length":14762,"saved":false}
{"ts":1350408891610,"patch":[[{"diffs":[[0,"dex] = 7"],[1,";"],[0,"\r\n    }\r"]],"start1":9208,"start2":9208,"length1":16,"length2":17}]],"length":14763,"saved":false}
{"ts":1350408971822,"patch":[[{"diffs":[[0,"ndex] = "],[-1,"7"],[1,"2"],[0,";\r\n    }"]],"start1":9207,"start2":9207,"length1":17,"length2":17}]],"length":14763,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350409028141,"patch":[[{"diffs":[[0,";  \r"],[-1,"\n    console.log(state1.cubies);\r\n    console.log(state2.cubies);\r"],[0,"\n\r\n "]],"start1":9443,"start2":9443,"length1":74,"length2":8}]],"length":14697,"saved":false}
{"ts":1350409037118,"patch":[[{"diffs":[[0,"ray("],[-1,"state.cubies.length"],[1,"copy"],[0,");\r\n"]],"start1":9012,"start2":9012,"length1":27,"length2":12}]],"length":14682,"saved":false}
{"ts":1350409061431,"patch":[[{"diffs":[[0,"copy);\r\n    "],[1,"/*"],[0,"\r\n    for(va"]],"start1":9016,"start2":9016,"length1":24,"length2":26},{"diffs":[[0," = 2;\r\n    }"],[1,"*/"],[0,"\r\n  \r\n    co"]],"start1":9199,"start2":9199,"length1":24,"length2":26}]],"length":14686,"saved":false}
{"ts":1350409170432,"patch":[[{"diffs":[[0,".slice(0);\r\n"],[1,"    console.log(copy.tostring());\r\n"],[0,"    newState"]],"start1":8967,"start2":8967,"length1":24,"length2":59}]],"length":14721,"saved":false}
{"ts":1350409173118,"patch":[[{"diffs":[[0,"(copy.to"],[-1,"s"],[1,"S"],[0,"tring())"]],"start1":8994,"start2":8994,"length1":17,"length2":17}]],"length":14721,"saved":false}
{"ts":1350409203891,"patch":[[{"diffs":[[0,"copy"],[-1,".toString()"],[1,"[0]"],[0,");\r\n"]],"start1":8995,"start2":8995,"length1":19,"length2":11}]],"length":14713,"saved":false}
{"ts":1350409221947,"patch":[[{"diffs":[[0,"t8Array("],[-1,"copy"],[1,"state.cubies"],[0,");\r\n    "]],"start1":9035,"start2":9035,"length1":20,"length2":28}]],"length":14721,"saved":false}
{"ts":1350409254038,"patch":[[{"diffs":[[0,"bies);\r\n    "],[-1,"/*"],[0,"\r\n    for(va"]],"start1":9051,"start2":9051,"length1":26,"length2":24},{"diffs":[[0,";\r\n    }"],[-1,"*/"],[0,"\r\n  \r\n  "]],"start1":9236,"start2":9236,"length1":18,"length2":16}]],"length":14717,"saved":false}
{"ts":1350409270499,"patch":[[{"diffs":[[0,"    "],[-1,"newState.cubies[index] = "],[1,"console.log("],[0,"stat"]],"start1":9151,"start2":9151,"length1":33,"length2":20},{"diffs":[[0,"te.cubies[index]"],[1,")"],[0,";\r\n        newSt"]],"start1":9170,"start2":9170,"length1":32,"length2":33}]],"length":14705,"saved":false}
{"ts":1350409272927,"patch":[[{"diffs":[[0,");\r\n"],[-1,"        newState.cubies[index] = 2;\r\n"],[0,"    "]],"start1":9186,"start2":9186,"length1":45,"length2":8}]],"length":14668,"saved":false}
{"ts":1350409276563,"patch":[[{"diffs":[[0,"bies);\r\n    "],[1,"    console.log(\"in copy\");\r\n"],[0,"\r\n    for(va"]],"start1":9051,"start2":9051,"length1":24,"length2":53},{"diffs":[[0,"  \r\n"],[-1,"    console.log(\"in copy\");\r\n"],[0,"    "]],"start1":9226,"start2":9226,"length1":37,"length2":8}]],"length":14668,"saved":false}
{"ts":1350409282035,"patch":[[{"diffs":[[0,");\r\n"],[-1,"    console.log(copy[0]);\r\n"],[0,"    "]],"start1":8975,"start2":8975,"length1":35,"length2":8}]],"length":14641,"saved":false}
{"ts":1350409313881,"patch":[[{"diffs":[[0,"ength = "],[-1,"newS"],[1,"s"],[0,"tate.len"]],"start1":9091,"start2":9091,"length1":20,"length2":17}]],"length":14638,"saved":false}
{"ts":1350409333763,"patch":[[{"diffs":[[0,"= state."],[1,"cubies."],[0,"length; "]],"start1":9097,"start2":9097,"length1":16,"length2":23}]],"length":14645,"saved":false}
{"ts":1350409380281,"patch":[[{"diffs":[[0,"console.log("],[-1,"s"],[1,"newS"],[0,"tate.cubies["]],"start1":9161,"start2":9161,"length1":25,"length2":28}]],"length":14648,"saved":false}
{"ts":1350409469558,"patch":[[{"diffs":[[0,"log(newState"],[1,".cubies"],[0,");\r\n    cons"]],"start1":9247,"start2":9247,"length1":24,"length2":31}]],"length":14655,"saved":false}
{"ts":1350409516060,"patch":[[{"diffs":[[0,"e.cubies);\r\n"],[1,"    console.log(newState\r\n"],[0,"    console."]],"start1":9258,"start2":9258,"length1":24,"length2":50}]],"length":14681,"saved":false}
{"ts":1350409529883,"patch":[[{"diffs":[[0,"ole.log("],[1,"RubixState.toString("],[0,"newState"],[1,"));"],[0,"\r\n    co"]],"start1":9278,"start2":9278,"length1":24,"length2":47}]],"length":14704,"saved":false}
{"ts":1350409580522,"patch":[[{"diffs":[[0,"t8Array("],[-1,"state.cubies"],[1,"copy"],[0,");\r\n    "]],"start1":9008,"start2":9008,"length1":28,"length2":20}]],"length":14696,"saved":false}
{"ts":1350409610631,"patch":[[{"diffs":[[0,"\n   "],[-1,"     console.log(\"in copy\");\r\n\r\n    for(var index = 0, length = state.cubies.length; index < length; index++)\r\n    {\r\n        console.log(newState.cubies[index]);\r\n    }\r\n  \r\n    console.log(state);\r\n    console.log(newState.cubies);\r\n    console.log(RubixState.toString(newState));\r\n    console.log(\"out of copy\");"],[0,"\r\n  "]],"start1":9023,"start2":9023,"length1":323,"length2":8}]],"length":14381,"saved":false}
{"ts":1350409864720,"patch":[[{"diffs":[[0,"ceVal])\r\n    {\r\n"],[1,"        console.log(((RubixState.newFaceMap[face][faceVal][rotations] << 5) | colorVal))\r\n"],[0,"        return ("]],"start1":3102,"start2":3102,"length1":32,"length2":122}]],"length":14471,"saved":false}
{"ts":1350409869474,"patch":[[{"diffs":[[0,"lorVal))"],[1,";"],[0,"\r\n      "]],"start1":3198,"start2":3198,"length1":16,"length2":17}]],"length":14472,"saved":false}
{"ts":1350409892673,"patch":[[{"diffs":[[0,"ole.log("],[1,"faceState, "],[0,"((RubixS"]],"start1":3130,"start2":3130,"length1":16,"length2":27}]],"length":14483,"saved":false}
{"ts":1350409933402,"patch":[[{"diffs":[[0,"ole.log("],[1,"ParseInt("],[0,"faceStat"]],"start1":3130,"start2":3130,"length1":16,"length2":25},{"diffs":[[0,"ceState,"],[1,"2),"],[0," ((Rubix"]],"start1":3149,"start2":3149,"length1":16,"length2":19}]],"length":14495,"saved":false}
{"ts":1350409942147,"patch":[[{"diffs":[[0,"ate,2), "],[1,"ParseInt("],[0,"((RubixS"]],"start1":3153,"start2":3153,"length1":16,"length2":25},{"diffs":[[0,"olorVal)"],[1,",2)"],[0,");\r\n    "]],"start1":3229,"start2":3229,"length1":16,"length2":19}]],"length":14507,"saved":false}
{"ts":1350409949022,"patch":[[{"diffs":[[0,"ole.log("],[-1,"P"],[1,"p"],[0,"arseInt("]],"start1":3130,"start2":3130,"length1":17,"length2":17},{"diffs":[[0,"2), "],[-1,"P"],[1,"p"],[0,"arse"]],"start1":3157,"start2":3157,"length1":9,"length2":9}]],"length":14507,"saved":false}
{"ts":1350409970955,"patch":[[{"diffs":[[0,"log("],[-1,"parseInt(faceState,"],[1,"faceState.toString("],[0,"2), "]],"start1":3134,"start2":3134,"length1":27,"length2":27}]],"length":14507,"saved":false}
{"ts":1350409978486,"patch":[[{"diffs":[[0,"2), "],[-1,"parseInt("],[0,"((Ru"]],"start1":3157,"start2":3157,"length1":17,"length2":8},{"diffs":[[0,"olorVal)"],[-1,","],[1,".toString("],[0,"2));\r\n  "]],"start1":3220,"start2":3220,"length1":17,"length2":26}]],"length":14507,"saved":false}
{"ts":1350410019321,"patch":[[{"diffs":[[0,"][rotations] << "],[-1,"5"],[1,"4"],[0,") | colorVal).to"]],"start1":3198,"start2":3198,"length1":33,"length2":33},{"diffs":[[0,"ons] << "],[-1,"5"],[1,"4"],[0,") | colo"]],"start1":3303,"start2":3303,"length1":17,"length2":17}]],"length":14507,"saved":false}
{"ts":1350410087862,"patch":[[{"diffs":[[0,"e & 7;\r\n    "],[1,"console.log(colorVal);"],[0,"\r\n    if ( R"]],"start1":3049,"start2":3049,"length1":24,"length2":46}]],"length":14529,"saved":false}
{"ts":1350410121268,"patch":[[{"diffs":[[0,"ole.log("],[-1,"color"],[1,"face"],[0,"Val);\r\n "]],"start1":3065,"start2":3065,"length1":21,"length2":20}]],"length":14528,"saved":false}
{"ts":1350410558684,"patch":[[{"diffs":[[0,"tions);   \r\n"],[1,"                console.log( RubixState.scratchBuffer[index+cFace])_\r\n"],[0,"        }\r\n "]],"start1":2272,"start2":2272,"length1":24,"length2":94}]],"length":14598,"saved":false}
{"ts":1350410559866,"patch":[[{"diffs":[[0,"ce])"],[-1,"_"],[1,";"],[0,"\r\n  "]],"start1":2347,"start2":2347,"length1":9,"length2":9}]],"length":14598,"saved":false}
{"ts":1350410613346,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"                console.log( RubixState.scratchBuffer[index+cFace]);\r\n"],[0,"    "]],"start1":2280,"start2":2280,"length1":78,"length2":8}]],"length":14528,"saved":false}
{"ts":1350410615756,"patch":[[{"diffs":[[0,"+ offset];\r\n"],[1,"                            console.log( RubixState.scratchBuffer[index+cFace]);\r\n\r\n"],[0,"        }\r\n "]],"start1":2627,"start2":2627,"length1":24,"length2":108}]],"length":14612,"saved":false}
{"ts":1350410621772,"patch":[[{"diffs":[[0,"og( "],[-1,"RubixState.scratchBuffer[index+cFace"],[1,"state.cubies[newIndex + offset"],[0,"]);\r"]],"start1":2676,"start2":2676,"length1":44,"length2":38}]],"length":14606,"saved":false}
{"ts":1350410665638,"patch":[[{"diffs":[[0,"le.log( "],[-1,"state.cubies[newIndex"],[1,"RubixState.scratchBuffer[index * 5"],[0," + offse"]],"start1":2672,"start2":2672,"length1":37,"length2":50}]],"length":14619,"saved":false}
{"ts":1350410685188,"patch":[[{"diffs":[[0,"chBuffer"],[-1,"[index * 5 + offset]"],[0,");\r\n\r\n  "]],"start1":2696,"start2":2696,"length1":36,"length2":16}]],"length":14599,"saved":false}
{"ts":1350410747049,"patch":[[{"diffs":[[0,"cFace;\r\n"],[1,"    var tempArray = new Array(20)\r\n"],[0,"    \r\n  "]],"start1":1952,"start2":1952,"length1":16,"length2":51}]],"length":14634,"saved":false}
{"ts":1350410748236,"patch":[[{"diffs":[[0,"rray(20)"],[1,";"],[0,"\r\n    \r\n"]],"start1":1985,"start2":1985,"length1":16,"length2":17}]],"length":14635,"saved":false}
{"ts":1350410757524,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"            tempArray = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);\r\n"],[0,"            Rubi"]],"start1":2163,"start2":2163,"length1":32,"length2":142}]],"length":14745,"saved":false}
{"ts":1350410776384,"patch":[[{"diffs":[[0,"empArray"],[1,"[cFace]"],[0," = Rubix"]],"start1":2192,"start2":2192,"length1":16,"length2":23}]],"length":14752,"saved":false}
{"ts":1350410791870,"patch":[[{"diffs":[[0,"tchBuffer[index "],[-1,"* 5 "],[0,"+ offset];\r\n    "]],"start1":2760,"start2":2760,"length1":36,"length2":32}]],"length":14748,"saved":false}
{"ts":1350410795028,"patch":[[{"diffs":[[0,"dex "],[-1,"* 5 "],[0,"+ of"]],"start1":3086,"start2":3086,"length1":12,"length2":8}]],"length":14744,"saved":false}
{"ts":1350410834567,"patch":[[{"diffs":[[0,"] = "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":2741,"start2":2741,"length1":32,"length2":17}]],"length":14729,"saved":false}
{"ts":1350410837392,"patch":[[{"diffs":[[0,"t];\r"],[-1,"\n                            console.log( RubixState.scratchBuffer);\r"],[0,"\n\r\n "]],"start1":2768,"start2":2768,"length1":77,"length2":8}]],"length":14660,"saved":false}
{"ts":1350410847400,"patch":[[{"diffs":[[0,"] = "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":2971,"start2":2971,"length1":32,"length2":17}]],"length":14645,"saved":false}
{"ts":1350410853914,"patch":[[{"diffs":[[0,"x < "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,".len"]],"start1":2515,"start2":2515,"length1":32,"length2":17}]],"length":14630,"saved":false}
{"ts":1350410897869,"patch":[[{"diffs":[[0,"otations);\r\n"],[1,"                tempArray[cFace];\r\n"],[0,"            "]],"start1":2284,"start2":2284,"length1":24,"length2":59}]],"length":14665,"saved":false}
{"ts":1350410902929,"patch":[[{"diffs":[[0,"                "],[1,"console.log("],[0,"tempArray[cFace]"]],"start1":2296,"start2":2296,"length1":32,"length2":44},{"diffs":[[0,"Array[cFace]"],[1,")"],[0,";\r\n         "]],"start1":2328,"start2":2328,"length1":24,"length2":25}]],"length":14678,"saved":false}
{"ts":1350410929797,"patch":[[{"diffs":[[0,"y[cFace]"],[1,".toString(2)"],[0,");\r\n    "]],"start1":2332,"start2":2332,"length1":16,"length2":28}]],"length":14690,"saved":false}
{"ts":1350410959250,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(faceState.toString(2), ((RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal).toString(2));\r\n"],[0,"    "]],"start1":3297,"start2":3297,"length1":134,"length2":8}]],"length":14564,"saved":false}
{"ts":1350410969825,"patch":[[{"diffs":[[0,"\n           "],[1,"/*"],[0," RubixState."]],"start1":2355,"start2":2355,"length1":24,"length2":26},{"diffs":[[0,"tations);   "],[1,"*/"],[0,"\r\n        }\r"]],"start1":2485,"start2":2485,"length1":24,"length2":26}]],"length":14568,"saved":false}
{"ts":1350410990587,"patch":[[{"diffs":[[0,"fset];\r\n"],[1,"                            console.log(tempArray[cFace].toString(2));\r\n\r\n"],[0,"\r\n      "]],"start1":2814,"start2":2814,"length1":16,"length2":90}]],"length":14642,"saved":false}
{"ts":1350410997914,"patch":[[{"diffs":[[0,"e.log(tempArray["],[-1,"cFace"],[1,"index + offset"],[0,"].toString(2));\r"]],"start1":2856,"start2":2856,"length1":37,"length2":46}]],"length":14651,"saved":false}
{"ts":1350411045901,"patch":[[{"diffs":[[0,"ole.log("],[-1,"tempArray["],[0,"index + "]],"start1":2854,"start2":2854,"length1":26,"length2":16},{"diffs":[[0,"+ offset"],[-1,"].toString(2)"],[0,");\r\n\r\n\r\n"]],"start1":2868,"start2":2868,"length1":29,"length2":16}]],"length":14628,"saved":false}
{"ts":1350411088414,"patch":[[{"diffs":[[0,"ole.log("],[1,"tempArray["],[0,"index + "]],"start1":2854,"start2":2854,"length1":16,"length2":26},{"diffs":[[0,"+ offset"],[1,"],\"second loop\""],[0,");\r\n\r\n\r\n"]],"start1":2878,"start2":2878,"length1":16,"length2":31}]],"length":14653,"saved":false}
{"ts":1350411117685,"patch":[[{"diffs":[[0,"ole.log("],[-1,"tempArray["],[0,"index + "]],"start1":2854,"start2":2854,"length1":26,"length2":16},{"diffs":[[0,"+ offset"],[-1,"]"],[0,",\"second"]],"start1":2868,"start2":2868,"length1":17,"length2":16}]],"length":14642,"saved":false}
{"ts":1350411156442,"patch":[[{"diffs":[[0,"+ offset];\r\n"],[1,"            console.log(\"before\");\r\n"],[0,"            "]],"start1":2810,"start2":2810,"length1":24,"length2":60}]],"length":14678,"saved":false}
{"ts":1350411196974,"patch":[[{"diffs":[[0,"offset <"],[-1," 3"],[1,"= 2"],[0,"; offset"]],"start1":2714,"start2":2714,"length1":18,"length2":19},{"diffs":[[0,"p\");\r\n\r\n"],[-1,"\r\n"],[0,"        "]],"start1":2925,"start2":2925,"length1":18,"length2":16}]],"length":14677,"saved":false}
{"ts":1350411205097,"patch":[[{"diffs":[[0,"offset <"],[-1,"= 2"],[1," "],[0,"; offset"]],"start1":2714,"start2":2714,"length1":19,"length2":17}]],"length":14675,"saved":false}
{"ts":1350411210550,"patch":[[{"diffs":[[0,"ffset < "],[1,"3"],[0,"; offset"]],"start1":2715,"start2":2715,"length1":16,"length2":17},{"diffs":[[0," loop\");\r\n\r\n"],[1,"\r\n"],[0,"        }\r\n "]],"start1":2920,"start2":2920,"length1":24,"length2":26}]],"length":14678,"saved":false}
{"ts":1350411216667,"patch":[[{"diffs":[[0," index+="],[-1,"2"],[1,"5"],[0,")\r\n    {"]],"start1":2600,"start2":2600,"length1":17,"length2":17}]],"length":14678,"saved":false}
{"ts":1350411242718,"patch":[[{"diffs":[[0,"index < "],[-1,"tempArray"],[1,"indicies"],[0,".length;"]],"start1":2575,"start2":2575,"length1":25,"length2":24}]],"length":14677,"saved":false}
{"ts":1350411248787,"patch":[[{"diffs":[[0," index+="],[-1,"5"],[1,"2"],[0,")\r\n    {"]],"start1":2599,"start2":2599,"length1":17,"length2":17}]],"length":14677,"saved":false}
{"ts":1350411446797,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        for(offset = 0; offset < 3; offset++)\r\n        {\r\n    "],[0,"    "]],"start1":2685,"start2":2685,"length1":70,"length2":8},{"diffs":[[0,"    "],[-1,"console.log(\"before\");\r\n                            console.log(index + offset,\"second loop\");\r\n\r\n\r\n        }"],[0,"\r\n  "]],"start1":2767,"start2":2767,"length1":117,"length2":8}]],"length":14506,"saved":false}
{"ts":1350411456368,"patch":[[{"diffs":[[0,"+ offset];\r\n"],[1,"        state.cubies[newIndex + offset] = tempArray[index + offset];\r\n        state.cubies[newIndex + offset] = tempArray[index + offset];\r\n\r\n\r\n"],[0,"            "]],"start1":2747,"start2":2747,"length1":24,"length2":168}]],"length":14650,"saved":false}
{"ts":1350411469650,"patch":[[{"diffs":[[0,"ies[newIndex"],[-1," + offset]"],[1,"]  "],[0," = tempArray"]],"start1":2706,"start2":2706,"length1":34,"length2":27},{"diffs":[[0,"bies[newIndex + "],[-1,"offset"],[1,"1"],[0,"] = tempArray[in"]],"start1":2768,"start2":2768,"length1":38,"length2":33},{"diffs":[[0,"bies[newIndex + "],[-1,"offset"],[1,"2"],[0,"] = tempArray[in"]],"start1":2833,"start2":2833,"length1":38,"length2":33}]],"length":14633,"saved":false}
{"ts":1350411472691,"patch":[[{"diffs":[[0,"ndex]   "],[1,"  "],[0,"= tempAr"]],"start1":2714,"start2":2714,"length1":16,"length2":18}]],"length":14635,"saved":false}
{"ts":1350411483222,"patch":[[{"diffs":[[0,"pArray[index"],[-1," + offset"],[0,"];\r\n        "]],"start1":2729,"start2":2729,"length1":33,"length2":24},{"diffs":[[0,"ray[index + "],[-1,"offset"],[1,"1"],[0,"];\r\n        "]],"start1":2788,"start2":2788,"length1":30,"length2":25}]],"length":14621,"saved":false}
{"ts":1350411485633,"patch":[[{"diffs":[[0,"index + "],[-1,"offset"],[1,"2"],[0,"];\r\n\r\n\r\n"]],"start1":2852,"start2":2852,"length1":22,"length2":17}]],"length":14616,"saved":false}
{"ts":1350411507918,"patch":[[{"diffs":[[0,"pArray[index"],[1," * 5"],[0,"];\r\n        "]],"start1":2729,"start2":2729,"length1":24,"length2":28},{"diffs":[[0,"Array[index "],[1,"* 5 "],[0,"+ 1];\r\n     "]],"start1":2790,"start2":2790,"length1":24,"length2":28},{"diffs":[[0,"Array[index "],[1,"* 5 "],[0,"+ 2];\r\n\r\n\r\n "]],"start1":2854,"start2":2854,"length1":24,"length2":28}]],"length":14628,"saved":false}
{"ts":1350411534390,"patch":[[{"diffs":[[0," + 2];\r\n"],[-1,"\r\n\r\n"],[0,"        "]],"start1":2869,"start2":2869,"length1":20,"length2":16},{"diffs":[[0,"  \r\n"],[-1,"        for(offset = 0; offset < 2; offset++)\r\n        {\r\n    "],[0,"    "]],"start1":2972,"start2":2972,"length1":70,"length2":8},{"diffs":[[0," + 3];\r\n        "],[-1,"}"],[0,"\r\n    }\r\n};\r\n\r\nR"]],"start1":3042,"start2":3042,"length1":33,"length2":32}]],"length":14561,"saved":false}
{"ts":1350411542772,"patch":[[{"diffs":[[0," + 3];\r\n        "],[1,"state.cubies[newIndex + offset] = tempArray[index + offset + 3];\r\n"],[0,"\r\n    }\r\n};\r\n\r\nR"]],"start1":3042,"start2":3042,"length1":32,"length2":98}]],"length":14627,"saved":false}
{"ts":1350411551958,"patch":[[{"diffs":[[0,"ies[newIndex"],[-1," + offset"],[0,"] = tempArra"]],"start1":2993,"start2":2993,"length1":33,"length2":24},{"diffs":[[0,"Index + "],[-1,"offset"],[1,"1 "],[0,"] = temp"]],"start1":3065,"start2":3065,"length1":22,"length2":18}]],"length":14614,"saved":false}
{"ts":1350411553177,"patch":[[{"diffs":[[0,"ndex + 1"],[-1," "],[0,"] = temp"]],"start1":3066,"start2":3066,"length1":17,"length2":16}]],"length":14613,"saved":false}
{"ts":1350411555516,"patch":[[{"diffs":[[0,"ewIndex]"],[1,"    "],[0," = tempA"]],"start1":2998,"start2":2998,"length1":16,"length2":20}]],"length":14617,"saved":false}
{"ts":1350411583444,"patch":[[{"diffs":[[0,"Array[index "],[-1,"+ offset"],[1,"* 5"],[0," + 3];\r\n    "]],"start1":3017,"start2":3017,"length1":32,"length2":27},{"diffs":[[0,"dex "],[-1,"+ offset + 3"],[1,"* 5 + 4"],[0,"];\r\n"]],"start1":3089,"start2":3089,"length1":20,"length2":15}]],"length":14607,"saved":false}
{"ts":1350411592204,"patch":[[{"diffs":[[0,"            "],[1,"//"],[0,"console.log("]],"start1":2300,"start2":2300,"length1":24,"length2":26}]],"length":14609,"saved":false}
{"ts":1350411595489,"patch":[[{"diffs":[[0,"7;\r\n    "],[1,"//"],[0,"console."]],"start1":3260,"start2":3260,"length1":16,"length2":18}]],"length":14611,"saved":false}
{"ts":1350411661227,"patch":[[{"diffs":[[0," * 5 + 2];\r\n"],[1,"        \r\n"],[0,"            "]],"start1":2867,"start2":2867,"length1":24,"length2":34},{"diffs":[[0," + 4];\r\n"],[1,"        \r\n        for(var i = 0; i M 5; i++)\r\n        {\r\n            \r\n        }"],[0,"\r\n    }\r"]],"start1":3108,"start2":3108,"length1":16,"length2":96}]],"length":14701,"saved":false}
{"ts":1350411664587,"patch":[[{"diffs":[[0," = 0; i "],[-1,"M"],[1,"<"],[0," 5; i++)"]],"start1":3143,"start2":3143,"length1":17,"length2":17}]],"length":14701,"saved":false}
{"ts":1350411682484,"patch":[[{"diffs":[[0," {\r\n            "],[1,"state.cubies[index * 5 + i];"],[0,"\r\n        }\r\n   "]],"start1":3169,"start2":3169,"length1":32,"length2":60}]],"length":14729,"saved":false}
{"ts":1350411691491,"patch":[[{"diffs":[[0," {\r\n            "],[1,"console.log("],[0,"state.cubies[ind"]],"start1":3169,"start2":3169,"length1":32,"length2":44},{"diffs":[[0,"* 5 + i]"],[1,")"],[0,";\r\n     "]],"start1":3216,"start2":3216,"length1":16,"length2":17}]],"length":14742,"saved":false}
{"ts":1350411696362,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"        }\r\n        \r\n        "],[0,"            cons"]],"start1":3157,"start2":3157,"length1":32,"length2":61},{"diffs":[[0,"+ i]);\r\n"],[-1,"        }"],[0,"\r\n    }\r"]],"start1":3249,"start2":3249,"length1":25,"length2":16}]],"length":14762,"saved":false}
{"ts":1350411698228,"patch":[[{"diffs":[[0,"      \r\n"],[-1,"            "],[0,"        "]],"start1":3186,"start2":3186,"length1":28,"length2":16}]],"length":14750,"saved":false}
{"ts":1350411704217,"patch":[[{"diffs":[[0," + 4];\r\n        "],[1,"var temp = \"\";"],[0,"\r\n        for(va"]],"start1":3108,"start2":3108,"length1":32,"length2":46}]],"length":14764,"saved":false}
{"ts":1350411714606,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"            temp+=\",\"+\r\n"],[0,"        }\r\n     "]],"start1":3171,"start2":3171,"length1":32,"length2":56}]],"length":14788,"saved":false}
{"ts":1350411721507,"patch":[[{"diffs":[[0,"mp+=\",\"+"],[1,"state.cubies[index * 5 + i];"],[0,"\r\n      "]],"start1":3201,"start2":3201,"length1":16,"length2":44},{"diffs":[[0,"log("],[-1,"state.cubies[index * 5 + i]"],[0,");\r\n"]],"start1":3276,"start2":3276,"length1":35,"length2":8}]],"length":14789,"saved":false}
{"ts":1350411724975,"patch":[[{"diffs":[[0,"ole.log("],[1,"temp"],[0,");\r\n\r\n  "]],"start1":3272,"start2":3272,"length1":16,"length2":20}]],"length":14793,"saved":false}
{"ts":1350411757260,"patch":[[{"diffs":[[0," = \"\";\r\n"],[1,"        var temp2 = \"\";\r\n"],[0,"        "]],"start1":3132,"start2":3132,"length1":16,"length2":41}]],"length":14818,"saved":false}
{"ts":1350411779059,"patch":[[{"diffs":[[0," 2];"],[-1,"\r\n        \r\n            \r\n        \r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n"],[0,"    "]],"start1":2873,"start2":2873,"length1":109,"length2":8},{"diffs":[[0,".cubies[newIndex"],[1," + 3"],[0,"]     = tempArra"]],"start1":2900,"start2":2900,"length1":32,"length2":36},{"diffs":[[0,"bies[newIndex + "],[-1,"1]"],[1,"4"],[0," = tempArray[ind"]],"start1":2971,"start2":2971,"length1":34,"length2":33}]],"length":14720,"saved":false}
{"ts":1350411781071,"patch":[[{"diffs":[[0,"ndex + 4"],[-1," "],[1,"]"],[0,"= tempAr"]],"start1":2980,"start2":2980,"length1":17,"length2":17}]],"length":14720,"saved":false}
{"ts":1350411784748,"patch":[[{"diffs":[[0,"dex + 3]"],[-1,"    "],[0," = tempA"]],"start1":2913,"start2":2913,"length1":20,"length2":16}]],"length":14716,"saved":false}
{"ts":1350411786039,"patch":[[{"diffs":[[0,"dex + 4]"],[1," "],[0,"= tempAr"]],"start1":2977,"start2":2977,"length1":16,"length2":17}]],"length":14717,"saved":false}
{"ts":1350411839661,"patch":[[{"diffs":[[0," 8];\r\n        \r\n"],[1,"        for( offset =0; offset < 5; offset ++)\r\n        {\r\n"],[0,"        state.cu"]],"start1":2675,"start2":2675,"length1":32,"length2":91},{"diffs":[[0,"Index + "],[-1,"1"],[1,"offset"],[0,"] = temp"]],"start1":2834,"start2":2834,"length1":17,"length2":22}]],"length":14781,"saved":false}
{"ts":1350411848663,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        for( offset =0; offset < 5; offset ++)\r\n        {\r\n"],[0,"    "]],"start1":2687,"start2":2687,"length1":67,"length2":8},{"diffs":[[0,"Index + "],[-1,"offset"],[1,"1"],[0,"] = temp"]],"start1":2775,"start2":2775,"length1":22,"length2":17},{"diffs":[[0," 5 + 2];"],[1,"\r\n        \r\n            \r\n        \r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n"],[0,"        "]],"start1":2869,"start2":2869,"length1":16,"length2":117},{"diffs":[[0,"newIndex"],[-1," + 3]"],[1,"]    "],[0," = tempA"]],"start1":3009,"start2":3009,"length1":21,"length2":21},{"diffs":[[0,"Index + "],[-1,"4"],[1,"1"],[0,"] = temp"]],"start1":3076,"start2":3076,"length1":17,"length2":17}]],"length":14818,"saved":false}
{"ts":1350411852584,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"            \r\n        \r\n"],[0,"    "]],"start1":2885,"start2":2885,"length1":32,"length2":8}]],"length":14794,"saved":false}
{"ts":1350411858254,"patch":[[{"diffs":[[0," * 5 + 4];\r\n"],[1,"        \r\n"],[0,"        var "]],"start1":3080,"start2":3080,"length1":24,"length2":34}]],"length":14804,"saved":false}
{"ts":1350411878871,"patch":[[{"diffs":[[0,"(temp);\r"],[1,"\n        console.log(        state.cubies[newIndex]     = tempArray[index * 5 + 3];\r"],[0,"\n\r\n    }"]],"start1":3290,"start2":3290,"length1":16,"length2":100}]],"length":14888,"saved":false}
{"ts":1350411881556,"patch":[[{"diffs":[[0,"ex] "],[-1,"    = tempArray[index * 5 + 3]"],[0,";\r\n\r"]],"start1":3346,"start2":3346,"length1":38,"length2":8}]],"length":14858,"saved":false}
{"ts":1350411882869,"patch":[[{"diffs":[[0,"wIndex] "],[1,")"],[0,";\r\n\r\n   "]],"start1":3342,"start2":3342,"length1":16,"length2":17}]],"length":14859,"saved":false}
{"ts":1350411885747,"patch":[[{"diffs":[[0,"\";\r\n"],[-1,"        var temp2 = \"\";\r\n"],[0,"    "]],"start1":3122,"start2":3122,"length1":33,"length2":8}]],"length":14834,"saved":false}
{"ts":1350411968221,"patch":[[{"diffs":[[0,"[newIndex]     ="],[1," (state.cubies[newIndex] & 0) |"],[0," tempArray[index"]],"start1":2984,"start2":2984,"length1":32,"length2":63}]],"length":14865,"saved":false}
{"ts":1350411996504,"patch":[[{"diffs":[[0," % 8];\r\n        "],[1,"console.log((state.cubies[newIndex] & 0) | tempArray[index * 5 + 3];)(state.cubies[newIndex] & 0) | tempArray[index * 5 + 3];"],[0,"\r\n        state."]],"start1":2946,"start2":2946,"length1":32,"length2":157}]],"length":14990,"saved":false}
{"ts":1350412004413,"patch":[[{"diffs":[[0,"+ 3]"],[-1,";)(state.cubies[newIndex] & 0) | tempArray[index * 5 + 3]"],[1,")"],[0,";\r\n "]],"start1":3025,"start2":3025,"length1":65,"length2":9}]],"length":14934,"saved":false}
{"ts":1350412030535,"patch":[[{"diffs":[[0,"log("],[-1,"(state.cubies[newIndex] & 0)"],[1,"0"],[0," | t"]],"start1":2970,"start2":2970,"length1":36,"length2":9}]],"length":14907,"saved":false}
{"ts":1350412048965,"patch":[[{"diffs":[[0,"log("],[-1,"0 | "],[0,"temp"]],"start1":2970,"start2":2970,"length1":12,"length2":8}]],"length":14903,"saved":false}
{"ts":1350412073525,"patch":[[{"diffs":[[0,"ole.log("],[-1,"tempArray["],[0,"index * "]],"start1":2966,"start2":2966,"length1":26,"length2":16},{"diffs":[[0," * 5 + 3"],[-1,"]"],[0,");\r\n    "]],"start1":2979,"start2":2979,"length1":17,"length2":16}]],"length":14892,"saved":false}
{"ts":1350412110694,"patch":[[{"diffs":[[0,"og(index * 5"],[1,"/2"],[0," + 3);\r\n    "]],"start1":2971,"start2":2971,"length1":24,"length2":26}]],"length":14894,"saved":false}
{"ts":1350412127013,"patch":[[{"diffs":[[0,"ndex * 5"],[1,"/2 "],[0,"];\r\n    "]],"start1":2739,"start2":2739,"length1":16,"length2":19},{"diffs":[[0,"ndex * 5"],[1,"/2 "],[0," + 1];\r\n"]],"start1":2802,"start2":2802,"length1":16,"length2":19},{"diffs":[[0,"ndex * 5"],[1,"/2 "],[0," + 2];\r\n"]],"start1":2869,"start2":2869,"length1":16,"length2":19},{"diffs":[[0,"ndex * 5"],[1,"/2 "],[0," + 3];\r\n"]],"start1":3081,"start2":3081,"length1":16,"length2":19},{"diffs":[[0,"ndex * 5"],[1,"/2 "],[0," + 4];\r\n"]],"start1":3148,"start2":3148,"length1":16,"length2":19}]],"length":14909,"saved":false}
{"ts":1350412767045,"patch":[[{"diffs":[[0,"mp+=\",\"+"],[1,"typeof "],[0,"state.cu"]],"start1":3262,"start2":3262,"length1":16,"length2":23}]],"length":14916,"saved":false}
{"ts":1350412775624,"patch":[[{"diffs":[[0,"ole.log("],[-1,"        s"],[1,"typeofs "],[0,"tate.cub"]],"start1":3368,"start2":3368,"length1":25,"length2":24}]],"length":14915,"saved":false}
{"ts":1350412778681,"patch":[[{"diffs":[[0,"g(typeof"],[-1,"s"],[0," "],[1,"s"],[0,"tate.cub"]],"start1":3374,"start2":3374,"length1":18,"length2":18}]],"length":14915,"saved":false}
{"ts":1350412833611,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"        console.log(index * 5/2 + 3);\r\n        "],[1,"\r\n"],[0,"stat"]],"start1":2959,"start2":2959,"length1":55,"length2":10}]],"length":14870,"saved":false}
{"ts":1350412835139,"patch":[[{"diffs":[[0," 8];\r\n\r\n"],[1,"        "],[0,"state.cu"]],"start1":2957,"start2":2957,"length1":16,"length2":24}]],"length":14878,"saved":false}
{"ts":1350412839537,"patch":[[{"diffs":[[0,"        "],[-1,"/*"],[1," "],[0," RubixSt"]],"start1":2361,"start2":2361,"length1":18,"length2":17}]],"length":14877,"saved":false}
{"ts":1350412841763,"patch":[[{"diffs":[[0,"ons);   "],[-1,"*/"],[0,"\r\n      "]],"start1":2490,"start2":2490,"length1":18,"length2":16}]],"length":14875,"saved":false}
{"ts":1350412851963,"patch":[[{"diffs":[[0,"]     = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index *"]],"start1":2717,"start2":2717,"length1":25,"length2":40},{"diffs":[[0,"ndex + 1] = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index * 5/2"]],"start1":2791,"start2":2791,"length1":33,"length2":48},{"diffs":[[0,"ndex + 2] = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index * 5/2"]],"start1":2873,"start2":2873,"length1":33,"length2":48},{"diffs":[[0," & 0) | "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index *"]],"start1":3067,"start2":3067,"length1":25,"length2":40},{"diffs":[[0," + 1] = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index *"]],"start1":3149,"start2":3149,"length1":25,"length2":40}]],"length":14950,"saved":false}
{"ts":1350412860542,"patch":[[{"diffs":[[0,"   ="],[-1," (state.cubies[newIndex] & 0) |"],[0," Rub"]],"start1":3039,"start2":3039,"length1":39,"length2":8}]],"length":14919,"saved":false}
{"ts":1350412969534,"patch":[[{"diffs":[[0," % 8];\r\n"],[1,"        console.log(newIndex);"],[0,"\r\n      "]],"start1":2997,"start2":2997,"length1":16,"length2":46}]],"length":14949,"saved":false}
{"ts":1350413016381,"patch":[[{"diffs":[[0," % 8];\r\n        "],[1,"        console.log(newIndex);\r\n"],[0,"\r\n        state."]],"start1":2670,"start2":2670,"length1":32,"length2":64}]],"length":14981,"saved":false}
{"ts":1350413061523,"patch":[[{"diffs":[[0,"console.log("],[-1,"newIndex"],[1,"(index + (2 * rotations)) % 8"],[0,");\r\n\r\n      "]],"start1":2694,"start2":2694,"length1":32,"length2":53}]],"length":15002,"saved":false}
{"ts":1350413116476,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"                console.log((index + (2 * rotations)) % 8);\r\n"],[1,"console.log( state.cubies[newIndex]);"],[0,"\r\n  "]],"start1":2674,"start2":2674,"length1":69,"length2":45}]],"length":14978,"saved":false}
{"ts":1350413150665,"patch":[[{"diffs":[[0,"x * 5/2 ];\r\n"],[1,"        console.log( state.cubies[newIndex]);\r\n\r\n"],[0,"        stat"]],"start1":2783,"start2":2783,"length1":24,"length2":73}]],"length":15027,"saved":false}
{"ts":1350413153782,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"        console.log(newIndex);\r\n"],[0,"    "]],"start1":3079,"start2":3079,"length1":40,"length2":8}]],"length":14995,"saved":false}
{"ts":1350413155072,"patch":[[{"diffs":[[0,"ns)) % 8];\r\n"],[-1,"        "],[1,"\r\n"],[0,"state.cubies"]],"start1":3071,"start2":3071,"length1":32,"length2":26}]],"length":14989,"saved":false}
{"ts":1350413156323,"patch":[[{"diffs":[[0," 8];\r\n\r\n"],[1,"    "],[0,"state.cu"]],"start1":3077,"start2":3077,"length1":16,"length2":20}]],"length":14993,"saved":false}
{"ts":1350413157644,"patch":[[{"diffs":[[0,")) % 8];\r\n\r\n"],[1,"    "],[0,"    state.cu"]],"start1":3073,"start2":3073,"length1":24,"length2":28}]],"length":14997,"saved":false}
{"ts":1350413194895,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"        \r\n        var temp = \"\";\r\n        for(var i = 0; i < 5; i++)\r\n        {\r\n            temp+=\",\"+typeof state.cubies[index * 5 + i];\r\n        }\r\n        \r\n        console.log(temp);\r\n        console.log(typeof state.cubies[newIndex] );\r\n\r\n"],[0,"    "]],"start1":3245,"start2":3245,"length1":253,"length2":8}]],"length":14752,"saved":false}
{"ts":1350413210298,"patch":[[{"diffs":[[0,"ies[newIndex"],[1,"],RubixState.scratchBuffer[index * 5/2 "],[0,"]);\r\n\r\n     "]],"start1":2825,"start2":2825,"length1":24,"length2":63}]],"length":14791,"saved":false}
{"ts":1350413230843,"patch":[[{"diffs":[[0,"ex],"],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":2835,"start2":2835,"length1":32,"length2":17}]],"length":14776,"saved":false}
{"ts":1350413244123,"patch":[[{"diffs":[[0,"wIndex],"],[-1,"tempArray["],[0,"index * "]],"start1":2831,"start2":2831,"length1":26,"length2":16},{"diffs":[[0,"ex * 5/2"],[-1," ]"],[0,");\r\n\r\n  "]],"start1":2842,"start2":2842,"length1":18,"length2":16}]],"length":14764,"saved":false}
{"ts":1350413264312,"patch":[[{"diffs":[[0,"ex * 5/2"],[1,", RubixState.scratchBuffer"],[0,");\r\n\r\n  "]],"start1":2842,"start2":2842,"length1":16,"length2":42}]],"length":14790,"saved":false}
{"ts":1350413288584,"patch":[[{"diffs":[[0,"/2, "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,");\r\n"]],"start1":2848,"start2":2848,"length1":32,"length2":17}]],"length":14775,"saved":false}
{"ts":1350413318662,"patch":[[{"diffs":[[0,"    for("],[1,"index+"],[0,"cFace = "]],"start1":2125,"start2":2125,"length1":16,"length2":22}]],"length":14781,"saved":false}
{"ts":1350413332360,"patch":[[{"diffs":[[0,"    for("],[-1,"index+"],[0,"cFace = "]],"start1":2125,"start2":2125,"length1":22,"length2":16}]],"length":14775,"saved":false}
{"ts":1350413335918,"patch":[[{"diffs":[[0,"pArray[cFace"],[1,"+index"],[0,"] = RubixSta"]],"start1":2194,"start2":2194,"length1":24,"length2":30}]],"length":14781,"saved":false}
{"ts":1350413381420,"patch":[[{"diffs":[[0,"dex "],[-1,"in indicies"],[1," = 0; index < indicies.length; index ++"],[0,")\r\n "]],"start1":2016,"start2":2016,"length1":19,"length2":47}]],"length":14809,"saved":false}
{"ts":1350413418791,"patch":[[{"diffs":[[0,"wIndex],"],[1,"RubixState.scratchBuffer["],[0,"index * "]],"start1":2865,"start2":2865,"length1":16,"length2":41},{"diffs":[[0,"ex * 5/2"],[1,"]"],[0,", tempAr"]],"start1":2901,"start2":2901,"length1":16,"length2":17}]],"length":14835,"saved":false}
{"ts":1350413457040,"patch":[[{"diffs":[[0,"2 : 3;\r\n        "],[1,"console.log(indicies);"],[0,"\r\n        for(cF"]],"start1":2131,"start2":2131,"length1":32,"length2":54}]],"length":14857,"saved":false}
{"ts":1350413510876,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"            console.log(cFace+index);\r\n"],[0,"            temp"]],"start1":2213,"start2":2213,"length1":32,"length2":71}]],"length":14896,"saved":false}
{"ts":1350413547328,"patch":[[{"diffs":[[0,"  = "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":2845,"start2":2845,"length1":32,"length2":17}]],"length":14881,"saved":false}
{"ts":1350413554023,"patch":[[{"diffs":[[0,"] = "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":3006,"start2":3006,"length1":32,"length2":17},{"diffs":[[0,"] = "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":3073,"start2":3073,"length1":32,"length2":17}]],"length":14851,"saved":false}
{"ts":1350413560923,"patch":[[{"diffs":[[0,"  = "],[-1,"RubixState.scratchBuffer"],[1,"tempArray"],[0,"[ind"]],"start1":3217,"start2":3217,"length1":32,"length2":17},{"diffs":[[0," = Rubix"],[-1,"State.scratchBuffer"],[1,"tempArray"],[0,"[index *"]],"start1":3285,"start2":3285,"length1":35,"length2":25}]],"length":14826,"saved":false}
{"ts":1350413573146,"patch":[[{"diffs":[[0," + 1] = "],[-1,"Rubix"],[0,"tempArra"]],"start1":3280,"start2":3280,"length1":21,"length2":16}]],"length":14821,"saved":false}
{"ts":1350413595976,"patch":[[{"diffs":[[0,"ndex]     = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index * 5/2"]],"start1":2837,"start2":2837,"length1":33,"length2":48},{"diffs":[[0,"ndex + 1] = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index * 5/2"]],"start1":3013,"start2":3013,"length1":33,"length2":48},{"diffs":[[0,"ndex + 2] = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index * 5/2"]],"start1":3095,"start2":3095,"length1":33,"length2":48},{"diffs":[[0,"]     = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index *"]],"start1":3258,"start2":3258,"length1":25,"length2":40},{"diffs":[[0," + 1] = "],[-1,"tempArray"],[1,"RubixState.scratchBuffer"],[0,"[index *"]],"start1":3340,"start2":3340,"length1":25,"length2":40}]],"length":14896,"saved":false}
{"ts":1350413620226,"patch":[[{"diffs":[[0,"3;\r\n"],[-1,"        console.log(indicies);\r\n"],[0,"    "]],"start1":2135,"start2":2135,"length1":40,"length2":8}]],"length":14864,"saved":false}
{"ts":1350413658459,"patch":[[{"diffs":[[0,"ndex  = "],[1,"0, scratchIndex ="],[0,"0; index"]],"start1":2015,"start2":2015,"length1":16,"length2":33},{"diffs":[[0,"length; index ++"],[1,","],[0,")\r\n    {\r\n      "]],"start1":2060,"start2":2060,"length1":32,"length2":33}]],"length":14882,"saved":false}
{"ts":1350413664107,"patch":[[{"diffs":[[0,"mpArray["],[-1,"cFace+index"],[1,"scratchIndex ++ "],[0,"] = Rubi"]],"start1":2268,"start2":2268,"length1":27,"length2":32}]],"length":14887,"saved":false}
{"ts":1350413670900,"patch":[[{"diffs":[[0,"fer["],[-1,"index+cFace"],[1,"scratchIndex++"],[0,"] = "]],"start1":2478,"start2":2478,"length1":19,"length2":22}]],"length":14890,"saved":false}
{"ts":1350413675127,"patch":[[{"diffs":[[0,"ndex"],[-1," ++ "],[0,"] = "]],"start1":2284,"start2":2284,"length1":12,"length2":8}]],"length":14886,"saved":false}
{"ts":1350413702215,"patch":[[{"diffs":[[0,"index ++"],[-1,","],[0,")\r\n    {"]],"start1":2068,"start2":2068,"length1":17,"length2":16}]],"length":14885,"saved":false}
{"ts":1350413750383,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"        console.log( state.cubies[newIndex],RubixState.scratchBuffer[index * 5/2], tempArray);\r\n\r\n"],[0,"    "]],"start1":2875,"start2":2875,"length1":106,"length2":8}]],"length":14787,"saved":false}
{"ts":1350413753832,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"console.log( state.cubies[newIndex]);\r\n        "],[1,"\r\n"],[0,"stat"]],"start1":2758,"start2":2758,"length1":55,"length2":10}]],"length":14742,"saved":false}
{"ts":1350413755825,"patch":[[{"diffs":[[0," 8];\r\n\r\n"],[1,"        "],[0,"state.cu"]],"start1":2756,"start2":2756,"length1":16,"length2":24}]],"length":14750,"saved":false}
{"ts":1350413759981,"patch":[[{"diffs":[[0," {\r\n"],[-1,"            console.log(cFace+index);\r\n            tempArray[scratchIndex] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);\r\n                //console.log(tempArray[cFace].toString(2));\r\n"],[0,"    "]],"start1":2210,"start2":2210,"length1":233,"length2":8}]],"length":14525,"saved":false}
{"ts":1350413763075,"patch":[[{"diffs":[[0,"e;\r\n"],[-1,"    var tempArray = new Array(20);\r\n"],[0,"    "]],"start1":1956,"start2":1956,"length1":44,"length2":8}]],"length":14489,"saved":false}
{"ts":1350413765294,"patch":[[{"diffs":[[0,"dex,"],[-1,"offset,"],[0," cFa"]],"start1":1940,"start2":1940,"length1":15,"length2":8}]],"length":14482,"saved":false}
{"ts":1350414040956,"patch":[[{"diffs":[[0," 5/2  + "],[-1,"1"],[1,"2"],[0,"];\r\n    "]],"start1":2643,"start2":2643,"length1":17,"length2":17},{"diffs":[[0,"[index * 5/2  + "],[-1,"2"],[1,"1"],[0,"];\r\n        \r\n  "]],"start1":2717,"start2":2717,"length1":33,"length2":33}]],"length":14482,"saved":false}
{"ts":1350415092923,"patch":[[{"diffs":[[0," 5/2  + "],[-1,"2"],[1,"1"],[0,"];\r\n    "]],"start1":2643,"start2":2643,"length1":17,"length2":17},{"diffs":[[0,"[index * 5/2  + "],[-1,"1"],[0,"];\r\n        \r\n  "]],"start1":2717,"start2":2717,"length1":33,"length2":32}]],"length":14481,"saved":false}
{"ts":1350415094228,"patch":[[{"diffs":[[0," 5/2  + "],[1,"2"],[0,"];\r\n    "]],"start1":2725,"start2":2725,"length1":16,"length2":17}]],"length":14482,"saved":false}
{"ts":1350415118567,"patch":[[{"diffs":[[0," 5/2  + "],[-1,"1"],[1,"2"],[0,"];\r\n    "]],"start1":2643,"start2":2643,"length1":17,"length2":17},{"diffs":[[0,"[index * 5/2  + "],[-1,"2"],[1,"1"],[0,"];\r\n        \r\n  "]],"start1":2717,"start2":2717,"length1":33,"length2":33}]],"length":14482,"saved":false}
{"ts":1350415225489,"patch":[[{"diffs":[[0,"ceVal])\r\n    {\r\n"],[1,"        console.log(faceState, ((RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal));\r\n"],[0,"        return ("]],"start1":3203,"start2":3203,"length1":32,"length2":134}]],"length":14584,"saved":false}
{"ts":1350415238031,"patch":[[{"diffs":[[0,"aceState"],[1,".toStrin(2)"],[0,", ((Rubi"]],"start1":3240,"start2":3240,"length1":16,"length2":27}]],"length":14595,"saved":false}
{"ts":1350415245533,"patch":[[{"diffs":[[0,".toStrin"],[1,"g"],[0,"(2), ((R"]],"start1":3248,"start2":3248,"length1":16,"length2":17},{"diffs":[[0,"olorVal)"],[1,".toString(2)"],[0,");\r\n    "]],"start1":3321,"start2":3321,"length1":16,"length2":28}]],"length":14608,"saved":false}
{"ts":1350415278692,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"            console.log(cubie + cFace);\r\n"],[0,"             Rub"]],"start1":2155,"start2":2155,"length1":32,"length2":73}]],"length":14649,"saved":false}
{"ts":1350415422361,"patch":[[{"diffs":[[0,"ions)) % 8];\r\n\r\n"],[1,"for(offset - 0)\r\n{\r\n}\r\n"],[0,"        state.cu"]],"start1":2521,"start2":2521,"length1":32,"length2":55}]],"length":14672,"saved":false}
{"ts":1350415425786,"patch":[[{"diffs":[[0,"(offset "],[-1,"-"],[1,"="],[0," 0)\r\n{\r\n"]],"start1":2540,"start2":2540,"length1":17,"length2":17}]],"length":14672,"saved":false}
{"ts":1350415510046,"patch":[[{"diffs":[[0,"fset = 0"],[1,"; offset < 3; offset ++"],[0,")\r\n{\r\n}\r"]],"start1":2543,"start2":2543,"length1":16,"length2":39}]],"length":14695,"saved":false}
{"ts":1350415511501,"patch":[[{"diffs":[[0,"; offset"],[-1," "],[0,"++)\r\n{\r\n"]],"start1":2563,"start2":2563,"length1":17,"length2":16}]],"length":14694,"saved":false}
{"ts":1350415515511,"patch":[[{"diffs":[[0," 8];\r\n\r\n"],[1,"    "],[0,"for(offs"]],"start1":2529,"start2":2529,"length1":16,"length2":20},{"diffs":[[0,"set++)\r\n"],[-1,"{\r\n"],[1,"    {\r\n    "],[0,"}\r\n     "]],"start1":2572,"start2":2572,"length1":19,"length2":27}]],"length":14706,"saved":false}
{"ts":1350415516795,"patch":[[{"diffs":[[0,"++)\r\n    {\r\n"],[1,"        \r\n"],[0,"    }\r\n     "]],"start1":2575,"start2":2575,"length1":24,"length2":34}]],"length":14716,"saved":false}
{"ts":1350415519746,"patch":[[{"diffs":[[0,"    for("],[1,"var "],[0,"offset ="]],"start1":2537,"start2":2537,"length1":16,"length2":20}]],"length":14720,"saved":false}
{"ts":1350415527723,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"state.cubies[newIndex] =;"],[0,"\r\n    }\r\n       "]],"start1":2583,"start2":2583,"length1":32,"length2":57}]],"length":14745,"saved":false}
{"ts":1350415529029,"patch":[[{"diffs":[[0,"Index] ="],[1,"0"],[0,";\r\n    }"]],"start1":2615,"start2":2615,"length1":16,"length2":17}]],"length":14746,"saved":false}
{"ts":1350415645281,"patch":[[{"diffs":[[0,"fset++)\r\n    {\r\n"],[1,"        cFace = RubixState.scratchBuffer[index * 5/2 +offset]\r\n"],[0,"        state.cu"]],"start1":2575,"start2":2575,"length1":32,"length2":95}]],"length":14809,"saved":false}
{"ts":1350415651403,"patch":[[{"diffs":[[0,"+offset]"],[1," >>4;"],[0,"\r\n      "]],"start1":2644,"start2":2644,"length1":16,"length2":21}]],"length":14814,"saved":false}
{"ts":1350415658813,"patch":[[{"diffs":[[0,"newIndex"],[1," + cFace"],[0,"] =0;\r\n "]],"start1":2680,"start2":2680,"length1":16,"length2":24}]],"length":14822,"saved":false}
{"ts":1350415667511,"patch":[[{"diffs":[[0,"cFace] ="],[-1,"0"],[1," RubixState.scratchBuffer[index * 5/2 +offset]"],[0,";\r\n    }"]],"start1":2691,"start2":2691,"length1":17,"length2":62}]],"length":14867,"saved":false}
{"ts":1350415675760,"patch":[[{"diffs":[[0,"e] ="],[-1," RubixState.scratchBuffer[index * 5/2 +offset]"],[1,"cFace"],[0,";\r\n "]],"start1":2695,"start2":2695,"length1":54,"length2":13}]],"length":14826,"saved":false}
{"ts":1350415685731,"patch":[[{"diffs":[[0,"et] "],[-1,">>4"],[0,";\r\n "]],"start1":2649,"start2":2649,"length1":11,"length2":8},{"diffs":[[0,"Index + "],[1,"("],[0,"cFace"],[1,">>4"],[0,"] =cFace"]],"start1":2680,"start2":2680,"length1":21,"length2":25}]],"length":14827,"saved":false}
{"ts":1350415687928,"patch":[[{"diffs":[[0,"+ (cFace"],[1,")"],[0,">>4] =cF"]],"start1":2686,"start2":2686,"length1":16,"length2":17}]],"length":14828,"saved":false}
{"ts":1350415693643,"patch":[[{"diffs":[[0,"=cFace;\r\n    }\r\n"],[1,"    /*\r\n"],[0,"        state.cu"]],"start1":2700,"start2":2700,"length1":32,"length2":40},{"diffs":[[0,"2  + 1];\r\n      "],[1,"*/"],[0,"  \r\n        newI"]],"start1":2956,"start2":2956,"length1":32,"length2":34}]],"length":14838,"saved":false}
{"ts":1350415754893,"patch":[[{"diffs":[[0," (cFace)"],[-1,">"],[1," > "],[0,">4] =cFa"]],"start1":2687,"start2":2687,"length1":17,"length2":19}]],"length":14840,"saved":false}
{"ts":1350415756221,"patch":[[{"diffs":[[0,"cFace) >"],[-1," "],[0,">"],[1," "],[0,"4] =cFac"]],"start1":2689,"start2":2689,"length1":18,"length2":18}]],"length":14840,"saved":false}
{"ts":1350415770811,"patch":[[{"diffs":[[0,")) % 8];\r\n\r\n"],[1,"    "],[0,"    for(var "]],"start1":2525,"start2":2525,"length1":24,"length2":28},{"diffs":[[0," offset++)\r\n"],[1,"    "],[0,"    {\r\n     "]],"start1":2576,"start2":2576,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"cFace = "]],"start1":2599,"start2":2599,"length1":16,"length2":20},{"diffs":[[0,"set] ;\r\n        "],[1,"    "],[0,"state.cubies[new"]],"start1":2660,"start2":2660,"length1":32,"length2":36},{"diffs":[[0,"4] =cFace;\r\n"],[1,"    "],[0,"    }\r\n    /"]],"start1":2715,"start2":2715,"length1":24,"length2":28}]],"length":14860,"saved":false}
{"ts":1350415800603,"patch":[[{"diffs":[[0,"+offset]"],[-1," "],[0,";\r\n     "]],"start1":2656,"start2":2656,"length1":17,"length2":16},{"diffs":[[0,"x + "],[-1,"(cFace) >> 4"],[0,"] =c"]],"start1":2699,"start2":2699,"length1":20,"length2":8}]],"length":14847,"saved":false}
{"ts":1350415805898,"patch":[[{"diffs":[[0,"newIndex"],[-1," + "],[0,"] =cFace"]],"start1":2692,"start2":2692,"length1":19,"length2":16}]],"length":14844,"saved":false}
{"ts":1350415810867,"patch":[[{"diffs":[[0,"Index] ="],[1," "],[0,"cFace;\r\n"]],"start1":2695,"start2":2695,"length1":16,"length2":17}]],"length":14845,"saved":false}
{"ts":1350415846335,"patch":[[{"diffs":[[0,"ations)) % 8];\r\n"],[1,"state.cubies[newIndex].subArray(newIndex,3)"],[0,"\r\n        for(va"]],"start1":2519,"start2":2519,"length1":32,"length2":75},{"diffs":[[0," +offset];\r\n"],[1,"            \r\n"],[0,"            "]],"start1":2698,"start2":2698,"length1":24,"length2":38}]],"length":14902,"saved":false}
{"ts":1350415847683,"patch":[[{"diffs":[[0,"Index,3)"],[1,";"],[0,"\r\n      "]],"start1":2570,"start2":2570,"length1":16,"length2":17}]],"length":14903,"saved":false}
{"ts":1350415854729,"patch":[[{"diffs":[[0," % 8];\r\n"],[1,"        "],[0,"state.cu"]],"start1":2527,"start2":2527,"length1":16,"length2":24},{"diffs":[[0,"e.cubies"],[-1,"[newIndex]"],[0,".subArra"]],"start1":2547,"start2":2547,"length1":26,"length2":16}]],"length":14901,"saved":false}
{"ts":1350415856091,"patch":[[{"diffs":[[0,"ns)) % 8];\r\n"],[1,"        \r\n"],[0,"        stat"]],"start1":2523,"start2":2523,"length1":24,"length2":34},{"diffs":[[0,"wIndex,3);\r\n"],[1,"        \r\n"],[0,"        for("]],"start1":2577,"start2":2577,"length1":24,"length2":34}]],"length":14921,"saved":false}
{"ts":1350415865591,"patch":[[{"diffs":[[0," }\r\n"],[-1,"    /*\r\n        state.cubies[newIndex]     = RubixState.scratchBuffer[index * 5/2 ];\r\n        state.cubies[newIndex + 1] = RubixState.scratchBuffer[index * 5/2  + 2];\r\n        state.cubies[newIndex + 2] = RubixState.scratchBuffer[index * 5/2  + 1];\r\n      */  "],[0,"\r\n  "]],"start1":2795,"start2":2795,"length1":268,"length2":8}]],"length":14661,"saved":false}
{"ts":1350415908681,"patch":[[{"diffs":[[0,"ex, cFace;\r\n"],[1,"    var tempArray =[];\r\n"],[0,"    \r\n    fo"]],"start1":1941,"start2":1941,"length1":24,"length2":48}]],"length":14685,"saved":false}
{"ts":1350415915831,"patch":[[{"diffs":[[0,"pArray ="],[-1,"[]"],[1,"new Array(3)"],[0,";\r\n    \r"]],"start1":1964,"start2":1964,"length1":18,"length2":28}]],"length":14695,"saved":false}
{"ts":1350415933325,"patch":[[{"diffs":[[0,"w Array("],[-1,"3"],[1,"6"],[0,");\r\n    "]],"start1":1974,"start2":1974,"length1":17,"length2":17},{"diffs":[[0,"ex,3);\r\n        "],[1,"tempArray["],[0,"\r\n        for(va"]],"start1":2615,"start2":2615,"length1":32,"length2":42}]],"length":14705,"saved":false}
{"ts":1350415935727,"patch":[[{"diffs":[[0,"pArray ="],[1," "],[0,"new Arra"]],"start1":1964,"start2":1964,"length1":16,"length2":17}]],"length":14706,"saved":false}
{"ts":1350415954781,"patch":[[{"diffs":[[0,"bies"],[-1,".subArray(newIndex,3)"],[1,"[]"],[0,";\r\n "]],"start1":2596,"start2":2596,"length1":29,"length2":10}]],"length":14687,"saved":false}
{"ts":1350415980631,"patch":[[{"diffs":[[0,".cubies["],[-1,"]"],[1,"newIndex] & 7"],[0,";\r\n     "]],"start1":2593,"start2":2593,"length1":17,"length2":29}]],"length":14699,"saved":false}
{"ts":1350415991453,"patch":[[{"diffs":[[0,"mpArray["],[1,"state.cubies[newIndex] & 7] = state.cubies[newIndex];"],[0,"\r\n      "]],"start1":2627,"start2":2627,"length1":16,"length2":69}]],"length":14752,"saved":false}
{"ts":1350415995079,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        state.cubies[newIndex] & 7;\r\n"],[0,"    "]],"start1":2576,"start2":2576,"length1":45,"length2":8}]],"length":14715,"saved":false}
{"ts":1350416007821,"patch":[[{"diffs":[[0," & 7] = "],[-1,"state.cubies["],[0,"newIndex"],[-1,"]"],[0,";\r\n     "]],"start1":2620,"start2":2620,"length1":38,"length2":24}]],"length":14701,"saved":false}
{"ts":1350416013578,"patch":[[{"diffs":[[0,"Index;\r\n"],[1,"        tempArray[state.cubies[newIndex] & 7] = newIndex;\r\n\r\n"],[0,"        "]],"start1":2631,"start2":2631,"length1":16,"length2":77}]],"length":14762,"saved":false}
{"ts":1350416016188,"patch":[[{"diffs":[[0,"Index;\r\n"],[1,"        tempArray[state.cubies[newIndex] & 7] = newIndex;\r\n\r\n"],[0,"\r\n      "]],"start1":2690,"start2":2690,"length1":16,"length2":77}]],"length":14823,"saved":false}
{"ts":1350416023543,"patch":[[{"diffs":[[0,".cubies[newIndex"],[1," + 1"],[0,"] & 7] = newInde"]],"start1":2662,"start2":2662,"length1":32,"length2":36},{"diffs":[[0,".cubies[newIndex"],[1," + 1"],[0,"] & 7] = newInde"]],"start1":2725,"start2":2725,"length1":32,"length2":36}]],"length":14831,"saved":false}
{"ts":1350416030463,"patch":[[{"diffs":[[0," & 7] = newIndex"],[1," + 1"],[0,";\r\n        tempA"]],"start1":2683,"start2":2683,"length1":32,"length2":36},{"diffs":[[0,"newIndex"],[1," + 2"],[0,";\r\n\r\n\r\n "]],"start1":2758,"start2":2758,"length1":16,"length2":20}]],"length":14839,"saved":false}
{"ts":1350416032720,"patch":[[{"diffs":[[0,"bies[newIndex + "],[-1,"1"],[1,"2"],[0,"] & 7] = newInde"]],"start1":2732,"start2":2732,"length1":33,"length2":33}]],"length":14839,"saved":false}
{"ts":1350416048572,"patch":[[{"diffs":[[0," % 8];\r\n"],[1,"        tempArray[state.cubies[newIndex] & 7] = newIndex;\r\n        tempArray[state.cubies[newIndex + 1] & 7] = newIndex + 1;"],[0,"\r\n      "]],"start1":3036,"start2":3036,"length1":16,"length2":140}]],"length":14963,"saved":false}
{"ts":1350416050214,"patch":[[{"diffs":[[0,"ations)) % 8];\r\n"],[1,"        \r\n"],[0,"        tempArra"]],"start1":3028,"start2":3028,"length1":32,"length2":42}]],"length":14973,"saved":false}
{"ts":1350416051617,"patch":[[{"diffs":[[0," newIndex + 1;\r\n"],[1,"        \r\n"],[0,"        state.cu"]],"start1":3164,"start2":3164,"length1":32,"length2":42}]],"length":14983,"saved":false}
{"ts":1350416138191,"patch":[[{"diffs":[[0,"ttom\r\n];\r\n\r\n"],[1,"RubixState.colorIndexLookAside =new Array(6);\r\n\r\n"],[0,"/**\r\n * Calc"]],"start1":1321,"start2":1321,"length1":24,"length2":73}]],"length":15032,"saved":false}
{"ts":1350416149036,"patch":[[{"diffs":[[0," % 8];\r\n        "],[1,"RubixState.colorIndexLookAside.length = 0;"],[0,"\r\n        tempAr"]],"start1":2611,"start2":2611,"length1":32,"length2":74}]],"length":15074,"saved":false}
{"ts":1350416155232,"patch":[[{"diffs":[[0,"kAside ="],[-1,"new Array(6)"],[1,"[]"],[0,";\r\n\r\n/**"]],"start1":1357,"start2":1357,"length1":28,"length2":18}]],"length":15064,"saved":false}
{"ts":1350416161234,"patch":[[{"diffs":[[0,"e;\r\n"],[-1,"    var tempArray = new Array(6);\r\n"],[0,"    "]],"start1":1988,"start2":1988,"length1":43,"length2":8}]],"length":15029,"saved":false}
{"ts":1350416166201,"patch":[[{"diffs":[[0,"ations)) % 8];\r\n"],[1,"        \r\n"],[0,"        RubixSta"]],"start1":2558,"start2":2558,"length1":32,"length2":42}]],"length":15039,"saved":false}
{"ts":1350416167569,"patch":[[{"diffs":[[0,"ength = 0;\r\n"],[1,"        \r\n"],[0,"        temp"]],"start1":2624,"start2":2624,"length1":24,"length2":34}]],"length":15049,"saved":false}
{"ts":1350416173260,"patch":[[{"diffs":[[0,"  \r\n        "],[-1,"tempArray"],[1,"RubixState.colorIndexLookAside"],[0,"[state.cubie"]],"start1":2642,"start2":2642,"length1":33,"length2":54},{"diffs":[[0,"x;\r\n        "],[-1,"tempArray"],[1,"RubixState.colorIndexLookAside"],[0,"[state.cubie"]],"start1":2722,"start2":2722,"length1":33,"length2":54},{"diffs":[[0,"1;\r\n        "],[-1,"tempArray"],[1,"RubixState.colorIndexLookAside"],[0,"[state.cubie"]],"start1":2810,"start2":2810,"length1":33,"length2":54}]],"length":15112,"saved":false}
{"ts":1350416186258,"patch":[[{"diffs":[[0,".cubies["],[-1,"newIndex"],[1,"RubixState.colorIndexLookAside[cFace >> 4"],[0,"] = cFac"]],"start1":3067,"start2":3067,"length1":24,"length2":57}]],"length":15145,"saved":false}
{"ts":1350416187822,"patch":[[{"diffs":[[0,"ce >> 4]"],[1,"]"],[0," = cFace"]],"start1":3109,"start2":3109,"length1":16,"length2":17}]],"length":15146,"saved":false}
{"ts":1350416194712,"patch":[[{"diffs":[[0,"  \r\n        "],[-1,"tempArray"],[1,"RubixState.colorIndexLookAside"],[0,"[state.cubie"]],"start1":3213,"start2":3213,"length1":33,"length2":54},{"diffs":[[0,"    "],[-1,"tempArray"],[1,"RubixState.colorIndexLookAside"],[0,"[sta"]],"start1":3301,"start2":3301,"length1":17,"length2":38}]],"length":15188,"saved":false}
{"ts":1350416207902,"patch":[[{"diffs":[[0,"+ 1;\r\n        \r\n"],[1,"        /*\r\n"],[0,"        state.cu"]],"start1":3379,"start2":3379,"length1":32,"length2":44},{"diffs":[[0,"5/2  + 4];\r\n"],[1,"        */\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":3559,"start2":3559,"length1":24,"length2":36}]],"length":15212,"saved":false}
{"ts":1350416209762,"patch":[[{"diffs":[[0,"+ 1;\r\n        \r\n"],[1,"         for(var offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.colorIndexLookAside[cFace >> 4]] = cFace;\r\n        }\r\n"],[0,"        /*\r\n    "]],"start1":3379,"start2":3379,"length1":32,"length2":267}]],"length":15447,"saved":false}
{"ts":1350416212485,"patch":[[{"diffs":[[0,"er[index * 5/2 +"],[1," "],[0,"offset];\r\n      "]],"start1":3500,"start2":3500,"length1":32,"length2":33}]],"length":15448,"saved":false}
{"ts":1350416224366,"patch":[[{"diffs":[[0,"or(var offset = "],[-1,"0"],[1,"3"],[0,"; offset < 3; of"]],"start1":3405,"start2":3405,"length1":33,"length2":33},{"diffs":[[0,"t = 3; offset < "],[-1,"3"],[1,"5"],[0,"; offset++)\r\n   "]],"start1":3417,"start2":3417,"length1":33,"length2":33}]],"length":15448,"saved":false}
{"ts":1350416232409,"patch":[[{"diffs":[[0,"ations)) % 8];\r\n"],[1,"        \r\n                RubixState.colorIndexLookAside.length = 0;\r\n\r\n"],[0,"        \r\n      "]],"start1":3191,"start2":3191,"length1":32,"length2":104}]],"length":15520,"saved":false}
{"ts":1350416233828,"patch":[[{"diffs":[[0,"\r\n        \r\n"],[-1,"        "],[0,"        Rubi"]],"start1":3205,"start2":3205,"length1":32,"length2":24}]],"length":15512,"saved":false}
{"ts":1350416235185,"patch":[[{"diffs":[[0,"h = 0;\r\n"],[-1,"\r\n"],[0,"        "]],"start1":3261,"start2":3261,"length1":18,"length2":16}]],"length":15510,"saved":false}
{"ts":1350416251339,"patch":[[{"diffs":[[0,"Index, cFace"],[1,",offeset"],[0,";\r\n    \r\n   "]],"start1":1977,"start2":1977,"length1":24,"length2":32}]],"length":15518,"saved":false}
{"ts":1350416253168,"patch":[[{"diffs":[[0,"Face,off"],[-1,"e"],[0,"set;\r\n  "]],"start1":1985,"start2":1985,"length1":17,"length2":16}]],"length":15517,"saved":false}
{"ts":1350416257637,"patch":[[{"diffs":[[0,"\r\n\r\n        for("],[-1,"var "],[0,"offset = 0; offs"]],"start1":2909,"start2":2909,"length1":36,"length2":32}]],"length":15513,"saved":false}
{"ts":1350416261054,"patch":[[{"diffs":[[0,"    for("],[-1,"var "],[0,"offset ="]],"start1":3465,"start2":3465,"length1":20,"length2":16}]],"length":15509,"saved":false}
{"ts":1350417189846,"patch":[[{"diffs":[[0," newIndex + 1;\r\n"],[1,"        console.log(RubixState.colorIndexLookAside)\r\n"],[0,"        \r\n      "]],"start1":3434,"start2":3434,"length1":32,"length2":85}]],"length":15562,"saved":false}
{"ts":1350417191202,"patch":[[{"diffs":[[0,"okAside)"],[1,";"],[0,"\r\n      "]],"start1":3493,"start2":3493,"length1":16,"length2":17}]],"length":15563,"saved":false}
{"ts":1350417301942,"patch":[[{"diffs":[[0,"ole.log("],[1,"state.cubies[newIndex] & 7,state.cubies[newIndex+1] & 7"],[0,"RubixSta"]],"start1":3462,"start2":3462,"length1":16,"length2":71}]],"length":15618,"saved":false}
{"ts":1350417312465,"patch":[[{"diffs":[[0,"x+1] & 7"],[1,","],[0,"RubixSta"]],"start1":3517,"start2":3517,"length1":16,"length2":17}]],"length":15619,"saved":false}
{"ts":1350417334401,"patch":[[{"diffs":[[0,"de.length = 0;\r\n"],[1,"        RubixState.colorIndexLookAside.length = 6;\r\n\r\n"],[0,"        \r\n      "]],"start1":3256,"start2":3256,"length1":32,"length2":86}]],"length":15673,"saved":false}
{"ts":1350417341254,"patch":[[{"diffs":[[0,"de.length = 0;\r\n"],[1,"        RubixState.colorIndexLookAside.length = 6;\r\n"],[0,"        \r\n      "]],"start1":2627,"start2":2627,"length1":32,"length2":84}]],"length":15725,"saved":false}
{"ts":1350417454386,"patch":[[{"diffs":[[0,"ookAside"],[1,"[state.cubies[newIndex] & 7],RubixState.colorIndexLookAside[state.cubies[newIndex] & 7]"],[0,");\r\n    "]],"start1":3654,"start2":3654,"length1":16,"length2":103}]],"length":15812,"saved":false}
{"ts":1350417457681,"patch":[[{"diffs":[[0,"dex] & 7"],[1,"+ 1"],[0,"]);\r\n   "]],"start1":3740,"start2":3740,"length1":16,"length2":19}]],"length":15815,"saved":false}
{"ts":1350417474260,"patch":[[{"diffs":[[0,"ndex"],[1,"+1"],[0,"] & 7"],[-1,"+ 1"],[0,"]);\r"]],"start1":3739,"start2":3739,"length1":16,"length2":15}]],"length":15814,"saved":false}
{"ts":1350417883999,"patch":[[{"diffs":[[0,"ole.log("],[1,"newIndex, "],[0,"state.cu"]],"start1":3568,"start2":3568,"length1":16,"length2":26}]],"length":15824,"saved":false}
{"ts":1350417933200,"patch":[[{"diffs":[[0,"5,42,18,"],[-1,"3"],[0,"4"],[1,"2"],[0,",21,46,1"]],"start1":1231,"start2":1231,"length1":18,"length2":18}]],"length":15824,"saved":false}
{"ts":1350417963015,"patch":[[{"diffs":[[0,",42,18,4"],[-1,"2"],[1,"4"],[0,",21,46,1"]],"start1":1232,"start2":1232,"length1":17,"length2":17}]],"length":15824,"saved":false}
{"ts":1350418014831,"patch":[[{"diffs":[[0,"te.color"],[-1,"IndexLookAside"],[1,"Set"],[0," =[];\r\n\r"]],"start1":1341,"start2":1341,"length1":30,"length2":19}]],"length":15813,"saved":false}
{"ts":1350418039078,"patch":[[{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,".length = 0;"]],"start1":2592,"start2":2592,"length1":38,"length2":27},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,".length = 6;"]],"start1":2633,"start2":2633,"length1":38,"length2":27},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,"[state.cubie"]],"start1":2684,"start2":2684,"length1":38,"length2":27},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,"[state.cubie"]],"start1":2753,"start2":2753,"length1":38,"length2":27},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,"[state.cubie"]],"start1":2830,"start2":2830,"length1":38,"length2":27},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,".length = 0;"]],"start1":3218,"start2":3218,"length1":38,"length2":27},{"diffs":[[0,"te.color"],[-1,"IndexLookAside"],[1,"Set"],[0,".length "]],"start1":3263,"start2":3263,"length1":30,"length2":19},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,"[state.cubie"]],"start1":3312,"start2":3312,"length1":38,"length2":27},{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,"[state.cubie"]],"start1":3381,"start2":3381,"length1":38,"length2":27}]],"length":15714,"saved":false}
{"ts":1350418041297,"patch":[[{"diffs":[[0,"1;\r\n"],[-1,"        console.log(newIndex, state.cubies[newIndex] & 7,state.cubies[newIndex+1] & 7,RubixState.colorIndexLookAside[state.cubies[newIndex] & 7],RubixState.colorIndexLookAside[state.cubies[newIndex+1] & 7]);\r\n"],[0,"    "]],"start1":3442,"start2":3442,"length1":217,"length2":8}]],"length":15505,"saved":false}
{"ts":1350418044583,"patch":[[{"diffs":[[0," {\r\n"],[-1,"            console.log(cubie + cFace);\r\n"],[0,"    "]],"start1":2202,"start2":2202,"length1":49,"length2":8}]],"length":15464,"saved":false}
{"ts":1350418047893,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(faceState.toString(2), ((RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal).toString(2));\r\n"],[0,"    "]],"start1":4071,"start2":4071,"length1":134,"length2":8}]],"length":15338,"saved":false}
{"ts":1350418051757,"patch":[[{"diffs":[[0,"7;\r\n"],[-1,"    //console.log(faceVal);\r\n    "],[1,"\r\n"],[0,"if ("]],"start1":3987,"start2":3987,"length1":41,"length2":10}]],"length":15307,"saved":false}
{"ts":1350418053133,"patch":[[{"diffs":[[0,"& 7;\r\n\r\n"],[1,"    "],[0,"if ( Rub"]],"start1":3985,"start2":3985,"length1":16,"length2":20}]],"length":15311,"saved":false}
{"ts":1350418061897,"patch":[[{"diffs":[[0,"xState.color"],[-1,"IndexLookAside"],[1,"Set"],[0,"[cFace >> 4]"]],"start1":3586,"start2":3586,"length1":38,"length2":27}]],"length":15300,"saved":false}
{"ts":1350418067963,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        /*\r\n        state.cubies[newIndex]     = RubixState.scratchBuffer[index * 5/2  + 3];\r\n        state.cubies[newIndex + 1] = RubixState.scratchBuffer[index * 5/2  + 4];\r\n        */\r\n"],[0,"    "]],"start1":3632,"start2":3632,"length1":196,"length2":8}]],"length":15112,"saved":false}
{"ts":1350418080428,"patch":[[{"diffs":[[0,"olor"],[-1,"IndexLookAside"],[1,"Set"],[0,"[cFa"]],"start1":3035,"start2":3035,"length1":22,"length2":11}]],"length":15101,"saved":false}
{"ts":1350418644539,"patch":[[{"diffs":[[0,"      }\r\n    }\r\n"],[1,"        console.log(RubixState.toString(state));\r\n\r\n"],[0,"};\r\n\r\nRubixState"]],"start1":3616,"start2":3616,"length1":32,"length2":84}]],"length":15153,"saved":false}
{"ts":1350418714177,"patch":[[{"diffs":[[0,"ce;\r\n        }\r\n"],[1,"                console.log(RubixState.toString(state));\r\n\r\n"],[0,"    }\r\n        c"]],"start1":3609,"start2":3609,"length1":32,"length2":92}]],"length":15213,"saved":false}
{"ts":1350418715724,"patch":[[{"diffs":[[0,"     }\r\n"],[-1,"        "],[0,"        "]],"start1":3617,"start2":3617,"length1":24,"length2":16}]],"length":15205,"saved":false}
{"ts":1350418751516,"patch":[[{"diffs":[[0,"    "],[-1,"    console.log(RubixState.toString(state));\r\n\r\n    }\r\n        console.log(RubixState.toString(state));\r\n"],[1,"}"],[0,"\r\n};"]],"start1":3625,"start2":3625,"length1":113,"length2":9}]],"length":15101,"saved":false}
{"ts":1350418784187,"patch":[[{"diffs":[[0,"dex+=2)\r\n    {\r\n"],[1,"        console.log(index);\r\n"],[0,"        newIndex"]],"start1":2452,"start2":2452,"length1":32,"length2":61}]],"length":15130,"saved":false}
{"ts":1350418871142,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(index);\r\n        "],[0,""],[1,""],[0,"newI"]],"start1":2472,"start2":2472,"length1":37,"length2":8},{"diffs":[[0,"cubies[1"],[-1,"2"],[1,"8"],[0,"] = Rubi"]],"start1":6424,"start2":6424,"length1":17,"length2":17},{"diffs":[[0,"       \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":10651,"start2":10651,"length1":32,"length2":40},{"diffs":[[0,"ies["],[-1,"29"],[1,"33"],[0,"]) + "],[-1,"RubixState.colorID(state.cubies[5])"],[1,"'G'"],[0," + '"]],"start1":10992,"start2":10992,"length1":50,"length2":18},{"diffs":[[0,".cubies["],[-1,"36"],[1,"17"],[0,"]) +\r\n  "]],"start1":11198,"start2":11198,"length1":18,"length2":18},{"diffs":[[0,"ies["],[-1,"37"],[1,"14"],[0,"]) + "],[-1,"'B'"],[1,"RubixState.colorID(state.cubies[41])"],[0," + R"]],"start1":11250,"start2":11250,"length1":18,"length2":51},{"diffs":[[0," + '\\n' + \r\n"],[-1,"        \r\n"],[0,"        Rubi"]],"start1":11336,"start2":11336,"length1":34,"length2":24},{"diffs":[[0,"ID(state.cubies["],[-1,"14"],[1,"5"],[0,"]) + RubixState."]],"start1":11372,"start2":11372,"length1":34,"length2":33},{"diffs":[[0,"ID(state.cubies["],[-1,"41"],[1,"27"],[0,"]) + RubixState."]],"start1":11410,"start2":11410,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"17"],[1,"8"],[0,"]) +\r\n        Ru"]],"start1":11449,"start2":11449,"length1":34,"length2":33},{"diffs":[[0,"cubies[1"],[-1,"5"],[1,"4"],[0,"]) + Rub"]],"start1":11505,"start2":11505,"length1":17,"length2":17},{"diffs":[[0,"   \r\n       "],[-1," '   ' +"],[0," RubixState."]],"start1":11737,"start2":11737,"length1":32,"length2":24},{"diffs":[[0,".cubies["],[-1,"4"],[0,"3"],[1,"16"],[0,"]) + Rub"]],"start1":11813,"start2":11813,"length1":18,"length2":19},{"diffs":[[0," + \r\n       "],[-1," '   ' +"],[0," RubixState."]],"start1":11981,"start2":11981,"length1":32,"length2":24},{"diffs":[[0,".cubies["],[-1,"13"],[0,"]) + Rub"]],"start1":12018,"start2":12018,"length1":18,"length2":16},{"diffs":[[0,".cubies["],[1,"3"],[0,"47]) + R"]],"start1":12055,"start2":12055,"length1":16,"length2":17},{"diffs":[[0,"\n        '   ' +"],[1," '   ' +"],[0," RubixState.colo"]],"start1":12127,"start2":12127,"length1":32,"length2":40},{"diffs":[[0,"cubies[4"],[-1,"6"],[0,"]) + Rub"]],"start1":12216,"start2":12216,"length1":17,"length2":16},{"diffs":[[0,".cubies["],[-1,"2"],[0,"1]) + '\\"]],"start1":12253,"start2":12253,"length1":17,"length2":16},{"diffs":[[0,"\n        '   ' +"],[1," '   ' +"],[0," RubixState.colo"]],"start1":12384,"start2":12384,"length1":32,"length2":40},{"diffs":[[0,"tate.cubies["],[1,"6"],[0,"1]) + RubixS"]],"start1":12429,"start2":12429,"length1":24,"length2":25}]],"length":15097,"saved":false}
{"ts":1350418919568,"patch":[[{"diffs":[[0,"  state.cubies[1"],[-1,"8"],[1,"2"],[0,"] = RubixState.c"]],"start1":6416,"start2":6416,"length1":33,"length2":33},{"diffs":[[0,"   \r\n       "],[-1," '   ' +"],[0," RubixState."]],"start1":10655,"start2":10655,"length1":32,"length2":24},{"diffs":[[0,".cubies["],[-1,"33"],[1,"29"],[0,"]) + "],[-1,"'G'"],[1,"RubixState.colorID(state.cubies[5])"],[0," + '\\n' "]],"start1":10980,"start2":10980,"length1":26,"length2":58},{"diffs":[[0,".cubies["],[-1,"17"],[1,"36"],[0,"]) +\r\n  "]],"start1":11222,"start2":11222,"length1":18,"length2":18},{"diffs":[[0,"ies["],[-1,"14"],[1,"37"],[0,"]) + "],[-1,"RubixState.colorID(state.cubies[41])"],[1,"'B'"],[0," + R"]],"start1":11274,"start2":11274,"length1":51,"length2":18},{"diffs":[[0,"39]) + '\\n' + \r\n"],[1,"        \r\n"],[0,"        RubixSta"]],"start1":11323,"start2":11323,"length1":32,"length2":42},{"diffs":[[0,"tate.cubies["],[-1,"5"],[1,"14"],[0,"]) + RubixSt"]],"start1":11377,"start2":11377,"length1":25,"length2":26},{"diffs":[[0,"ID(state.cubies["],[-1,"27"],[1,"41"],[0,"]) + RubixState."]],"start1":11412,"start2":11412,"length1":34,"length2":34},{"diffs":[[0,"ID(state.cubies["],[-1,"8"],[1,"17"],[0,"]) +\r\n        Ru"]],"start1":11451,"start2":11451,"length1":33,"length2":34},{"diffs":[[0,"D(state.cubies[1"],[-1,"4"],[1,"5"],[0,"]) + RubixState."]],"start1":11500,"start2":11500,"length1":33,"length2":33},{"diffs":[[0,"       \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":11736,"start2":11736,"length1":32,"length2":40},{"diffs":[[0,"ies["],[1,"4"],[0,"3"],[-1,"16"],[0,"]) +"]],"start1":11828,"start2":11828,"length1":11,"length2":10},{"diffs":[[0,"'\\n' + \r\n       "],[1," '   ' +"],[0," RubixState.colo"]],"start1":11987,"start2":11987,"length1":32,"length2":40},{"diffs":[[0,".cubies["],[1,"13"],[0,"]) + Rub"]],"start1":12036,"start2":12036,"length1":16,"length2":18},{"diffs":[[0,".cubies["],[-1,"3"],[0,"47]) + R"]],"start1":12075,"start2":12075,"length1":17,"length2":16},{"diffs":[[0,"     '   ' +"],[-1," '   ' +"],[0," RubixState."]],"start1":12150,"start2":12150,"length1":32,"length2":24},{"diffs":[[0,"ate.cubies[4"],[1,"6"],[0,"]) + RubixSt"]],"start1":12223,"start2":12223,"length1":24,"length2":25},{"diffs":[[0,".cubies["],[1,"2"],[0,"1]) + '\\"]],"start1":12265,"start2":12265,"length1":16,"length2":17},{"diffs":[[0," '   ' +"],[-1," '   ' +"],[0," RubixSt"]],"start1":12405,"start2":12405,"length1":24,"length2":16},{"diffs":[[0,".cubies["],[-1,"6"],[0,"1]) + Ru"]],"start1":12438,"start2":12438,"length1":17,"length2":16},{"diffs":[[0," 1\r\n        }\r\n    }\r\n};"],[-1,"\r\n\r\n"],[0,""],[1,""]],"start1":15073,"start2":15073,"length1":28,"length2":24}]],"length":15097,"saved":false}
{"ts":1350419049325,"patch":[[{"diffs":[[0,"x + 2;\r\n"],[1,"        console.log(RubixState.colorSet[0]"],[0,"\r\n\r\n    "]],"start1":2846,"start2":2846,"length1":16,"length2":58}]],"length":15139,"saved":false}
{"ts":1350419065793,"patch":[[{"diffs":[[0,"orSet[0]"],[1,",RubixState.colorSet[1],RubixState.colorSet[2],RubixState.colorSet[3],RubixState.colorSet[4]"],[0,"\r\n\r\n    "]],"start1":2888,"start2":2888,"length1":16,"length2":108}]],"length":15231,"saved":false}
{"ts":1350419070270,"patch":[[{"diffs":[[0,"orSet[4]"],[1,",RubixState.colorSet[5]"],[0,"\r\n\r\n    "]],"start1":2980,"start2":2980,"length1":16,"length2":39}]],"length":15254,"saved":false}
{"ts":1350419071692,"patch":[[{"diffs":[[0,"orSet[5]"],[1,");"],[0,"\r\n\r\n    "]],"start1":3003,"start2":3003,"length1":16,"length2":18}]],"length":15256,"saved":false}
{"ts":1350419077809,"patch":[[{"diffs":[[0," newIndex + 1;\r\n"],[1,"                console.log(RubixState.colorSet[0],RubixState.colorSet[1],RubixState.colorSet[2],RubixState.colorSet[3],RubixState.colorSet[4],RubixState.colorSet[5]);\r\n\r\n"],[0,"        \r\n      "]],"start1":3537,"start2":3537,"length1":32,"length2":203}]],"length":15427,"saved":false}
{"ts":1350419107236,"patch":[[{"diffs":[[0,"      }\r\n    }\r\n"],[1,"    console.log(RubixState.toString(state);\r\n"],[0,"};\r\n\r\nRubixState"]],"start1":3946,"start2":3946,"length1":32,"length2":77}]],"length":15472,"saved":false}
{"ts":1350419116344,"patch":[[{"diffs":[[0," }\r\n"],[-1,"    console.log(RubixState.toString(state);\r\n"],[0,"};\r\n"]],"start1":3958,"start2":3958,"length1":53,"length2":8}]],"length":15427,"saved":false}
{"ts":1350419118264,"patch":[[{"diffs":[[0,"      }\r\n    }\r\n"],[1,"    console.log(RubixState.toString(state));\r\n"],[0,"};\r\n\r\nRubixState"]],"start1":3946,"start2":3946,"length1":32,"length2":78}]],"length":15473,"saved":false}
{"ts":1350419345806,"patch":[[{"diffs":[[0,"= 6;\r\n        \r\n"],[1,"        console.log(state.cubies[newIndex] & 7);\r\n"],[0,"        RubixSta"]],"start1":2615,"start2":2615,"length1":32,"length2":82}]],"length":15523,"saved":false}
{"ts":1350419349986,"patch":[[{"diffs":[[0,"dex] & 7"],[1,", newIndex"],[0,");\r\n    "]],"start1":2669,"start2":2669,"length1":16,"length2":26}]],"length":15533,"saved":false}
{"ts":1350419408736,"patch":[[{"diffs":[[0,"wIndex] "],[-1,"& 7"],[1,">>4"],[0,", newInd"]],"start1":2666,"start2":2666,"length1":19,"length2":19}]],"length":15533,"saved":false}
{"ts":1350419411868,"patch":[[{"diffs":[[0,"ndex] >>"],[1," "],[0,"4, newIn"]],"start1":2668,"start2":2668,"length1":16,"length2":17}]],"length":15534,"saved":false}
{"ts":1350419427756,"patch":[[{"diffs":[[0,"ubies[newIndex] "],[-1,"& 7"],[1,">> 4"],[0,"] = newIndex;\r\n "]],"start1":2727,"start2":2727,"length1":35,"length2":36}]],"length":15535,"saved":false}
{"ts":1350419430374,"patch":[[{"diffs":[[0,"s[newIndex + 1] "],[-1,"& 7"],[1,">> 4"],[0,"] = newIndex + 1"]],"start1":2801,"start2":2801,"length1":35,"length2":36}]],"length":15536,"saved":false}
{"ts":1350419432507,"patch":[[{"diffs":[[0,"ex + 2] "],[-1,"& 7"],[1,">> 4"],[0,"] = newI"]],"start1":2887,"start2":2887,"length1":19,"length2":20}]],"length":15537,"saved":false}
{"ts":1350419438645,"patch":[[{"diffs":[[0,"ewIndex]"],[-1," & 7"],[1,">> 4"],[0,"] = newI"]],"start1":3513,"start2":3513,"length1":20,"length2":20},{"diffs":[[0,"ex + 1] "],[-1,"& 7"],[1,">> 4"],[0,"] = newI"]],"start1":3587,"start2":3587,"length1":19,"length2":20}]],"length":15538,"saved":false}
{"ts":1350419471180,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        console.log(state.cubies[newIndex] >> 4, newIndex);\r\n"],[0,"    "]],"start1":2627,"start2":2627,"length1":69,"length2":8}]],"length":15477,"saved":false}
{"ts":1350419473547,"patch":[[{"diffs":[[0," 2;\r"],[-1,"\n        console.log(RubixState.colorSet[0],RubixState.colorSet[1],RubixState.colorSet[2],RubixState.colorSet[3],RubixState.colorSet[4],RubixState.colorSet[5]);\r"],[0,"\n\r\n "]],"start1":2852,"start2":2852,"length1":169,"length2":8}]],"length":15316,"saved":false}
{"ts":1350419476790,"patch":[[{"diffs":[[0," 1;\r"],[-1,"\n                console.log(RubixState.colorSet[0],RubixState.colorSet[1],RubixState.colorSet[2],RubixState.colorSet[3],RubixState.colorSet[4],RubixState.colorSet[5]);\r"],[0,"\n\r\n "]],"start1":3391,"start2":3391,"length1":177,"length2":8}]],"length":15147,"saved":false}
{"ts":1350419479317,"patch":[[{"diffs":[[0," }\r\n"],[-1,"    console.log(RubixState.toString(state));\r\n"],[0,"};\r\n"]],"start1":3632,"start2":3632,"length1":54,"length2":8}]],"length":15101,"saved":false}
{"ts":1350419551888,"patch":[[{"diffs":[[0,"ixState."],[-1,"color"],[1,"face"],[0,"Set =[];"]],"start1":1336,"start2":1336,"length1":21,"length2":20},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set.length = 0;\r"]],"start1":2541,"start2":2541,"length1":37,"length2":36},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set.length = 6;\r"]],"start1":2581,"start2":2581,"length1":37,"length2":36},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set[state.cubies"]],"start1":2631,"start2":2631,"length1":37,"length2":36},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set[state.cubies"]],"start1":2700,"start2":2700,"length1":37,"length2":36},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set[state.cubies"]],"start1":2777,"start2":2777,"length1":37,"length2":36},{"diffs":[[0,"bies[RubixState."],[-1,"color"],[1,"face"],[0,"Set[cFace >> 4]]"]],"start1":3013,"start2":3013,"length1":37,"length2":36},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set.length = 0;\r"]],"start1":3151,"start2":3151,"length1":37,"length2":36},{"diffs":[[0,"ixState."],[-1,"color"],[1,"face"],[0,"Set.leng"]],"start1":3199,"start2":3199,"length1":21,"length2":20},{"diffs":[[0,"     RubixState."],[-1,"color"],[1,"face"],[0,"Set[state.cubies"]],"start1":3243,"start2":3243,"length1":37,"length2":36},{"diffs":[[0," RubixState."],[-1,"color"],[1,"face"],[0,"Set[state.cu"]],"start1":3315,"start2":3315,"length1":29,"length2":28},{"diffs":[[0,"ixState."],[-1,"color"],[1,"face"],[0,"Set[cFac"]],"start1":3567,"start2":3567,"length1":21,"length2":20}]],"length":15089,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350425350163,"patch":[[{"diffs":[[1,"/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n\r\n\r\n// I can actually halve the size of this,but I'm not doing that unless I have to(it's hard...)\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState()\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = null;   \r\n    \r\n}\r\n\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n// The logic behind this still works and only one copy of this need exist.\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\nRubixState.faceSet =[];\r\n\r\n/**\r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    var cubie, size,newIndex, cFace,offset;\r\n    \r\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\r\n    {\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        for(cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    //3,2, 3,2, 3,2, 3,2    \r\n    for (index = 0; index < indicies.length; index+=2)\r\n    {\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        for(offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n\r\n        \r\n         for(offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    var faceVal = Number(faceState >> 4);\r\n    var colorVal = faceState & 7;\r\n\r\n    if ( RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\r\n    }\r\n    else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA -John\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\nRubixState.createWithString = function(text)\r\n{\r\n     var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n\r\n    return state;\r\n};\r\n\r\n//*=face +=color -=unused\r\n//-***-+++ \r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\nRubixState.copy = function(state)\r\n{\r\n    var newState = new RubixState(), copy = state.cubies.buffer.slice(0);\r\n    newState.cubies = new Uint8Array(copy);\r\n   \r\n    return newState;\r\n};\r\n\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n\r\n    for(var index = 0, length = state1.cubies.length; index < length; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);\r\n        \r\n        if(!equal)\r\n        {\r\n            break;    \r\n        }\r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n\r\nRubixState.colorID = function(face)\r\n{\r\n    return RubixState.faceValues[face & 7];\r\n};\r\n\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n * \r\n * There's probably a better way to do this...\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":15089}]],"length":15089,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350425393178,"patch":[[{"diffs":[[0,"};\r\n"],[-1,"\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n// The logic behind this still works and only one copy of this need exist.\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\nRubixState.faceSet =[];\r\n\r\n/**\r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    var cubie, size,newIndex, cFace,offset;\r\n    \r\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\r\n    {\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        for(cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    //3,2, 3,2, 3,2, 3,2    \r\n    for (index = 0; index < indicies.length; index+=2)\r\n    {\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        for(offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n\r\n        \r\n         for(offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    var faceVal = Number(faceState >> 4);\r\n    var colorVal = faceState & 7;\r\n\r\n    if ( RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\r\n    }\r\n    else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA -John\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\nRubixState.createWithString = function(text)\r\n{\r\n     var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n\r\n    return state;\r\n};\r\n\r\n//*=face +=color -=unused\r\n//-***-+++ \r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\nRubixState.copy = function(state)\r\n{\r\n    var newState = new RubixState(), copy = state.cubies.buffer.slice(0);\r\n    newState.cubies = new Uint8Array(copy);\r\n   \r\n    return newState;\r\n};\r\n\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n\r\n    for(var index = 0, length = state1.cubies.length; index < length; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);\r\n        \r\n        if(!equal)\r\n        {\r\n            break;    \r\n        }\r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n\r\nRubixState.colorID = function(face)\r\n{\r\n    return RubixState.faceValues[face & 7];\r\n};\r\n\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n * \r\n * There's probably a better way to do this...\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n\r\n\r\n// I can actually halve the size of this,but I'm not doing that unless I have to(it's hard...)\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState()\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = null;   \r\n    \r\n}\r\n\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n"],[1,"/**\r\n * \r\n */"],[0,"\r\nRu"]],"start1":871,"start2":871,"length1":15097,"length2":21}]],"length":15102,"saved":false}
{"ts":1350425412716,"patch":[[{"diffs":[[0,"};\r\n/**\r\n * "],[1,"The face value map used in tanslating moves to something human readable. "],[0,"\r\n */\r\nRubix"]],"start1":871,"start2":871,"length1":24,"length2":97}]],"length":15175,"saved":false}
{"ts":1350425415701,"patch":[[{"diffs":[[0," 5\r\n};\r\n"],[1,"\r\n"],[0,"/**\r\n * "]],"start1":867,"start2":867,"length1":16,"length2":18}]],"length":15177,"saved":false}
{"ts":1350425452462,"patch":[[{"diffs":[[0,"\n    \r\n}\r\n\r\n"],[1,"/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\n"],[0,"RubixState.s"]],"start1":586,"start2":586,"length1":24,"length2":148}]],"length":15301,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350425516483,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\n"],[0,"Rubi"]],"start1":594,"start2":594,"length1":132,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * The face value map used in tanslating moves to something human readable. \r\n */\r\n"],[0,"Rubi"]],"start1":873,"start2":873,"length1":96,"length2":8},{"diffs":[[0,"00 c01\r\n"],[1," "],[0,"*/\r\nRubi"]],"start1":1818,"start2":1818,"length1":16,"length2":17}]],"length":15090,"saved":false}
{"ts":1350425496211,"patch":[[{"diffs":[[0,"\n\r\n/"],[-1,"/ The logic behind this still works and only one copy of this need exist."],[1,"**\r\n * Defines cubie locations for a side.\r\n */"],[0,"\r\nRu"]],"start1":1140,"start2":1140,"length1":81,"length2":55}]],"length":15275,"saved":false}
{"ts":1350425524548,"patch":[[{"diffs":[[0,"er(20));\r\n\r\n"],[1,"/**\r\n * A scratch array used in face rotations.\r\n */\r\nRubixState.faceSet =[];\r\n\r\n"],[0,"/**\r\n * The "]],"start1":777,"start2":777,"length1":24,"length2":105},{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.faceSet =[];\r\n"],[0,"\r\n/*"]],"start1":1596,"start2":1596,"length1":33,"length2":8}]],"length":15331,"saved":false}
{"ts":1350425554582,"patch":[[{"diffs":[[0,"\n\r\n/**\r\n"],[1," * Handles face rotations. \r\n"],[0," * Calcu"]],"start1":1599,"start2":1599,"length1":16,"length2":45}]],"length":15360,"saved":false}
{"ts":1350425586952,"patch":[[{"diffs":[[0,"00 c01\r\n"],[1," * \r\n * @param state The state that is to be changed.\r\n * @param face The \r\n"],[0,"*/\r\nRubi"]],"start1":2089,"start2":2089,"length1":16,"length2":92}]],"length":15436,"saved":false}
{"ts":1350425596043,"patch":[[{"diffs":[[0,"ace The "],[1,"face that the rotation occurs on."],[0,"\r\n*/\r\nRu"]],"start1":2163,"start2":2163,"length1":16,"length2":49}]],"length":15469,"saved":false}
{"ts":1350425618262,"patch":[[{"diffs":[[0,"rs on.\r\n"],[1," * @param rotations The number of clockwise rotations for the action.\r\n"],[0,"*/\r\nRubi"]],"start1":2198,"start2":2198,"length1":16,"length2":87}]],"length":15540,"saved":false}
{"ts":1350425626340,"patch":[[{"diffs":[[0,"e, size,"],[1," "],[0,"newIndex"]],"start1":2405,"start2":2405,"length1":16,"length2":17}]],"length":15541,"saved":false}
{"ts":1350425641372,"patch":[[{"diffs":[[0,"ndex = 0"],[1,", size = indicies.length"],[0,"; index "]],"start1":2866,"start2":2866,"length1":16,"length2":40}]],"length":15565,"saved":false}
{"ts":1350425645233,"patch":[[{"diffs":[[0,"th; index < "],[-1,"indicies.length"],[1,"size"],[0,"; index+=2)\r"]],"start1":2896,"start2":2896,"length1":39,"length2":28}]],"length":15554,"saved":false}
{"ts":1350425691354,"patch":[[{"diffs":[[0," rotations)\r\n{\r\n"],[1,"    // The inidicies define the rotation behavior.\r\n"],[0,"    var indicies"]],"start1":2322,"start2":2322,"length1":32,"length2":84}]],"length":15606,"saved":false}
{"ts":1350425779429,"patch":[[{"diffs":[[0,"aceSet ="],[1," "],[0,"[];\r\n\r\n/"]],"start1":1345,"start2":1345,"length1":16,"length2":17},{"diffs":[[0,"    if ("],[-1," "],[0,"RubixSta"]],"start1":3777,"start2":3777,"length1":17,"length2":16},{"diffs":[[0," 0, line"],[1," "],[0,"= \" \", l"]],"start1":4316,"start2":4316,"length1":16,"length2":17},{"diffs":[[0," index <"],[1," "],[0,"length; "]],"start1":4357,"start2":4357,"length1":16,"length2":17},{"diffs":[[0,"index*9,"],[1," "],[0,"index*9 "]],"start1":4421,"start2":4421,"length1":16,"length2":17}]],"length":15093,"saved":false}
{"ts":1350425751956,"patch":[[{"diffs":[[0,"ble[face];\r\n"],[1,"    \r\n    /*\r\n     * cubie - holds the cubie index.\r\n     * size - A generic size variable.\r\n     * newIndex - Holds a modified index.\r\n     \r\n    */\r\n"],[0,"    var cubi"]],"start1":2433,"start2":2433,"length1":24,"length2":175}]],"length":15757,"saved":false}
{"ts":1350425786145,"patch":[[{"diffs":[[0,"ndex.\r\n     "],[1,"* cFace - A cubieFace.\r\n     * offset - A generic offset variable."],[0,"\r\n    */\r\n  "]],"start1":2574,"start2":2574,"length1":24,"length2":90}]],"length":15823,"saved":false}
{"ts":1350425803594,"patch":[[{"diffs":[[0,", cFace,"],[1," "],[0,"offset;\r"]],"start1":2691,"start2":2691,"length1":16,"length2":17}]],"length":15824,"saved":false}
{"ts":1350425958823,"patch":[[{"diffs":[[0," offset;\r\n    \r\n"],[1,"    // Iterate over the indicies and calculate values of the rotated cubies.\r\n"],[0,"    for(var inde"]],"start1":2699,"start2":2699,"length1":32,"length2":110},{"diffs":[[0,"    "],[-1,"cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;"],[1,"// Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 4\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        // For the number of faces calculate individual face rotations."],[0,"\r\n  "]],"start1":2881,"start2":2881,"length1":68,"length2":242}]],"length":16076,"saved":false}
{"ts":1350425969143,"patch":[[{"diffs":[[0,"ce rotations"],[1," and add them to our scratch"],[0,".\r\n        f"]],"start1":3106,"start2":3106,"length1":24,"length2":52}]],"length":16104,"saved":false}
{"ts":1350426088194,"patch":[[{"diffs":[[0,"2, 3,2    \r\n"],[1,"    \r\n    // For each cubie shift the face data to the appropriate location in the buffer.\r\n"],[0,"    for (ind"]],"start1":3394,"start2":3394,"length1":24,"length2":116}]],"length":16196,"saved":false}
{"ts":1350426110110,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    //3,2, 3,2, 3,2, 3,2    \r\n    \r\n"],[0,"    "]],"start1":3372,"start2":3372,"length1":44,"length2":8},{"diffs":[[0,"he buffer.\r\n"],[1,"    // This is done in increments of Corner,Side 4 times.\r\n"],[0,"    for (ind"]],"start1":3450,"start2":3450,"length1":24,"length2":83}]],"length":16219,"saved":false}
{"ts":1350426156194,"patch":[[{"diffs":[[0,"dex+=2)\r\n    {\r\n"],[1,"        // Calculate the index of the new cubie index after rotation.\r\n"],[0,"        newIndex"]],"start1":3581,"start2":3581,"length1":32,"length2":103}]],"length":16290,"saved":false}
{"ts":1350426284150,"patch":[[{"diffs":[[0," 8];\r\n        \r\n"],[1,"        // Clear the face set of data.\r\n"],[0,"        RubixSta"]],"start1":3723,"start2":3723,"length1":32,"length2":72},{"diffs":[[0,"= 6;\r\n        \r\n"],[1,"        // Determine the face of each of the new buffer locations and load the \r\n        // new index in the appropriate position. This maps face to memory location.\r\n"],[0,"        RubixSta"]],"start1":3853,"start2":3853,"length1":32,"length2":199}]],"length":16497,"saved":false}
{"ts":1350426303061,"patch":[[{"diffs":[[0,"dex + 2;\r\n\r\n"],[1,"        // Place the cubie face data in the new position.\r\n"],[0,"        for("]],"start1":4249,"start2":4249,"length1":24,"length2":83}]],"length":16556,"saved":false}
{"ts":1350426311401,"patch":[[{"diffs":[[0,"h = 6;\r\n"],[-1,"\r\n"],[0,"        "]],"start1":4687,"start2":4687,"length1":18,"length2":16},{"diffs":[[0,"x + 1;\r\n"],[-1,"\r\n"],[0,"        "]],"start1":4842,"start2":4842,"length1":18,"length2":16}]],"length":16552,"saved":false}
{"ts":1350426318501,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        //See above."],[0,"\r\n        ne"]],"start1":4526,"start2":4526,"length1":24,"length2":54}]],"length":16582,"saved":false}
{"ts":1350426321575,"patch":[[{"diffs":[[0,"      //"],[1," "],[0,"See abov"]],"start1":4550,"start2":4550,"length1":16,"length2":17}]],"length":16583,"saved":false}
{"ts":1350426327915,"patch":[[{"diffs":[[0,"}\r\n    }\r\n};\r\n\r\n"],[1,"/**\r\n * \r\n */\r\n"],[0,"RubixState.rotat"]],"start1":5108,"start2":5108,"length1":32,"length2":47}]],"length":16598,"saved":false}
{"ts":1350426561782,"patch":[[{"diffs":[[0,"\r\n\r\n/**\r\n * "],[1,"Rotates a face with some boolean magic.\r\n * \r\n * @param faceState The Uint8 number representing the cubie face.\r\n * @"],[0,"\r\n */\r\nRubix"]],"start1":5120,"start2":5120,"length1":24,"length2":141}]],"length":16715,"saved":false}
{"ts":1350426663852,"patch":[[{"diffs":[[0,"ue;  \r\n\r\n    for"],[1," "],[0,"(var index = 0, "]],"start1":9841,"start2":9841,"length1":32,"length2":33},{"diffs":[[0," < length; index"],[-1," "],[0,"++)\r\n    {\r\n    "]],"start1":9910,"start2":9910,"length1":33,"length2":32},{"diffs":[[0,"      if"],[1," "],[0,"(!equal)"]],"start1":10016,"start2":10016,"length1":16,"length2":17}]],"length":15094,"saved":false}
{"ts":1350426627987,"patch":[[{"diffs":[[0,"e.\r\n * @"],[1,"param face The face that the rotation is occuring about [0-5].\r\n * @param rotations The number of counterclockwise rotations [1-3]"],[0,"\r\n */\r\nR"]],"start1":5241,"start2":5241,"length1":16,"length2":146}]],"length":16845,"saved":false}
{"ts":1350426630998,"patch":[[{"diffs":[[0,"ns [1-3]"],[1,".\r\n * @"],[0,"\r\n */\r\nR"]],"start1":5371,"start2":5371,"length1":16,"length2":23}]],"length":16852,"saved":false}
{"ts":1350426652019,"patch":[[{"diffs":[[0,"].\r\n * @"],[1,"return A Uint8 with the following bit pattern: "],[0,"\r\n */\r\nR"]],"start1":5378,"start2":5378,"length1":16,"length2":63}]],"length":16899,"saved":false}
{"ts":1350426695455,"patch":[[{"diffs":[[0,"attern: "],[1,"-***-+++ where:\r\n *  - : null \r\n *  + : color\r\n *  * : face"],[0,"\r\n */\r\nR"]],"start1":5425,"start2":5425,"length1":16,"length2":75}]],"length":16958,"saved":false}
{"ts":1350426770701,"patch":[[{"diffs":[[0,"    "],[-1,"var faceVal = Number(faceState >> 4);"],[1,"// Shift right to get the value of the leading for bits.\r\n    var faceVal = Number(faceState >> 4);\r\n    \r\n    // Mask with 00000111 to retrieve the color from the faceState."],[0,"\r\n  "]],"start1":5564,"start2":5564,"length1":45,"length2":182}]],"length":17095,"saved":false}
{"ts":1350426796712,"patch":[[{"diffs":[[0,"ate & 7;\r\n\r\n"],[1,"    // If the mapping of face rotations is valid perform it, else it must be unaffected.\r\n"],[0,"    if ( Rub"]],"start1":5769,"start2":5769,"length1":24,"length2":114}]],"length":17185,"saved":false}
{"ts":1350426807903,"patch":[[{"diffs":[[0,"affected"],[1," at this pahse"],[0,".\r\n    i"]],"start1":5860,"start2":5860,"length1":16,"length2":30}]],"length":17199,"saved":false}
{"ts":1350426811188,"patch":[[{"diffs":[[0,"is p"],[-1,"a"],[0,"h"],[1,"a"],[0,"se.\r"]],"start1":5874,"start2":5874,"length1":10,"length2":10}]],"length":17199,"saved":false}
{"ts":1350426814490,"patch":[[{"diffs":[[0,"must be "],[1,"\r\n    // "],[0,"unaffect"]],"start1":5850,"start2":5850,"length1":16,"length2":25}]],"length":17208,"saved":false}
{"ts":1350426825409,"patch":[[{"diffs":[[0,"orm it, "],[1,"\r\n    // "],[0,"else it "]],"start1":5834,"start2":5834,"length1":16,"length2":25},{"diffs":[[0,"must be "],[-1,"\r\n    // "],[0,"unaffect"]],"start1":5859,"start2":5859,"length1":25,"length2":16}]],"length":17208,"saved":false}
{"ts":1350426845910,"patch":[[{"diffs":[[0," \r\n    }\r\n};\r\n\r\n"],[1,"/**\r\n * Xreates a Rubik cube with the goal state.\r\n */\r\n"],[0,"RubixState.creat"]],"start1":6084,"start2":6084,"length1":32,"length2":88}]],"length":17264,"saved":false}
{"ts":1350426849817,"patch":[[{"diffs":[[0,"\n * "],[-1,"X"],[1,"C"],[0,"reat"]],"start1":6104,"start2":6104,"length1":9,"length2":9}]],"length":17264,"saved":false}
{"ts":1350426885678,"patch":[[{"diffs":[[0,"AHA "],[-1,"-"],[1,"#"],[0,"John"],[1,"Didn'tFeelLikeWritingASeparateOne."],[0,"\r\n  "]],"start1":6218,"start2":6218,"length1":13,"length2":47}]],"length":17298,"saved":false}
{"ts":1350426906676,"patch":[[{"diffs":[[0,"rate"],[-1,"One."],[1,"Initializer"],[0,"\r\n  "]],"start1":6253,"start2":6253,"length1":12,"length2":19}]],"length":17305,"saved":false}
{"ts":1350426958488,"patch":[[{"diffs":[[0,"WWWWW\");\r\n};\r\n\r\n"],[1,"/**\r\n * Creates a Rubik Cube from an upper case String of characters from the alphabet\r\n * {R,G,Y,B,O,W}\r\n */\r\n"],[0,"RubixState.creat"]],"start1":6359,"start2":6359,"length1":32,"length2":143}]],"length":17416,"saved":false}
{"ts":1350427014082,"patch":[[{"diffs":[[0,"aracters"],[1," from a string \r\n *"],[0," from th"]],"start1":6435,"start2":6435,"length1":16,"length2":35},{"diffs":[[0,"alphabet"],[-1,"\r\n *"],[1,":"],[0," {R,G,Y,"]],"start1":6472,"start2":6472,"length1":20,"length2":17},{"diffs":[[0,"Y,B,O,W}"],[1,".\r\n * \r\n * @param text The textual representation of the rubik cube as specified in the \r\n *      Assignment."],[0,"\r\n */\r\nR"]],"start1":6487,"start2":6487,"length1":16,"length2":125}]],"length":17541,"saved":false}
{"ts":1350427028497,"patch":[[{"diffs":[[0," *      "],[-1,"A"],[1,"a"],[0,"ssignmen"]],"start1":6585,"start2":6585,"length1":17,"length2":17},{"diffs":[[0,"nment.\r\n"],[1," * @return A state for the supplied text.\r\n"],[0," */\r\nRub"]],"start1":6598,"start2":6598,"length1":16,"length2":59}]],"length":17584,"saved":false}
{"ts":1350427033882,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1," "],[0,"var face"]],"start1":6699,"start2":6699,"length1":17,"length2":16}]],"length":17583,"saved":false}
{"ts":1350427048455,"patch":[[{"diffs":[[0,"n(text)\r\n{\r\n"],[1,"    // An array to hold the intermediate state.\r\n"],[0,"    var face"]],"start1":6691,"start2":6691,"length1":24,"length2":73}]],"length":17632,"saved":false}
{"ts":1350427126696,"patch":[[{"diffs":[[0,"   }\r\n    \r\n"],[1,"    // Splits the subarrays into Character arrays.\r\n"],[0,"    for(var "]],"start1":7605,"start2":7605,"length1":24,"length2":76}]],"length":17684,"saved":false}
{"ts":1350427140512,"patch":[[{"diffs":[[0,"he s"],[-1,"ubarray"],[1,"tring"],[0,"s into "],[-1,"C"],[1,"c"],[0,"hara"]],"start1":7632,"start2":7632,"length1":23,"length2":21}]],"length":17682,"saved":false}
{"ts":1350427221713,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[-1,"\r\n"],[0,"RubixSta"]],"start1":10107,"start2":10107,"length1":18,"length2":16}]],"length":15092,"saved":false}
{"ts":1350427172905,"patch":[[{"diffs":[[0,"**-+++ \r"],[1,"\n\r\n/**\r\n * Creat\r\n */\r"],[0,"\nRubixSt"]],"start1":11538,"start2":11538,"length1":16,"length2":38}]],"length":17704,"saved":false}
{"ts":1350427215145,"patch":[[{"diffs":[[0," * Creat"],[1,"es a UInt8 face state with the following binary encoding: *  -***-+++ where:\r\n *  - : null \r\n *  + : color\r\n *  * : face"],[0,"\r\n */\r\nR"]],"start1":11554,"start2":11554,"length1":16,"length2":136}]],"length":17824,"saved":false}
{"ts":1350427226078,"patch":[[{"diffs":[[0,"ncoding:"],[-1," * "],[0," -***-++"]],"start1":11611,"start2":11611,"length1":19,"length2":16},{"diffs":[[0,"oding: -***-+++ "],[1,"\r\n * "],[0,"where:\r\n *  - : "]],"start1":11613,"start2":11613,"length1":32,"length2":37}]],"length":17826,"saved":false}
{"ts":1350427252052,"patch":[[{"diffs":[[0,"\r\n *  * : face\r\n"],[1," * \r\n * @param color The color Character that will be encoded to a 3 bit pattern.\r\n"],[0," */\r\nRubixState."]],"start1":11670,"start2":11670,"length1":32,"length2":115}]],"length":17909,"saved":false}
{"ts":1350427255245,"patch":[[{"diffs":[[0,"e color "],[-1,"C"],[1,"c"],[0,"haracter"]],"start1":11709,"start2":11709,"length1":17,"length2":17}]],"length":17909,"saved":false}
{"ts":1350427263815,"patch":[[{"diffs":[[0,"lor The "],[1,"uppercase "],[0,"color ch"]],"start1":11703,"start2":11703,"length1":16,"length2":26},{"diffs":[[0,"ttern.\r\n"],[1," * @param\r\n"],[0," */\r\nRub"]],"start1":11771,"start2":11771,"length1":16,"length2":27}]],"length":17930,"saved":false}
{"ts":1350427282345,"patch":[[{"diffs":[[0,"* @param"],[1," face The face side to be encoded into the state."],[0,"\r\n */\r\nR"]],"start1":11780,"start2":11780,"length1":16,"length2":65}]],"length":17979,"saved":false}
{"ts":1350427323787,"patch":[[{"diffs":[[0," face\r\n * \r\n"],[1," * Please note there are 2 bits per space wasted.\r\n * \r\n"],[0," * @param co"]],"start1":11679,"start2":11679,"length1":24,"length2":80},{"diffs":[[0,"nto the state.\r\n"],[1," * \r\n * @return The encoded face state.\r\n"],[0," */\r\nRubixState."]],"start1":11879,"start2":11879,"length1":32,"length2":73}]],"length":18076,"saved":false}
{"ts":1350427335573,"patch":[[{"diffs":[[0,"d face state"],[1," as a uInt8"],[0,".\r\n */\r\nRubi"]],"start1":11921,"start2":11921,"length1":24,"length2":35}]],"length":18087,"saved":false}
{"ts":1350427338926,"patch":[[{"diffs":[[0,"s a "],[-1,"uI"],[1,"Ui"],[0,"nt8."]],"start1":11935,"start2":11935,"length1":10,"length2":10}]],"length":18087,"saved":false}
{"ts":1350427367036,"patch":[[{"diffs":[[0," 4));   \r\n};\r\n\r\n"],[1,"/**\r\n * Creates a copy of the supplied rubixState object.\r\n */\r\n"],[0,"RubixState.copy "]],"start1":12560,"start2":12560,"length1":32,"length2":96}]],"length":18151,"saved":false}
{"ts":1350427370354,"patch":[[{"diffs":[[0,"upplied "],[-1,"r"],[1,"R"],[0,"ubixStat"]],"start1":12607,"start2":12607,"length1":17,"length2":17}]],"length":18151,"saved":false}
{"ts":1350427398369,"patch":[[{"diffs":[[0,"te object.\r\n"],[1," * @param state The state that is to be copied.\r\n * @return The copied state.\r\n"],[0," */\r\nRubixSt"]],"start1":12623,"start2":12623,"length1":24,"length2":103}]],"length":18230,"saved":false}
{"ts":1350427401605,"patch":[[{"diffs":[[0,"y(copy);"],[-1,"\r\n"],[0,"   \r\n   "]],"start1":12867,"start2":12867,"length1":18,"length2":16}]],"length":18228,"saved":false}
{"ts":1350427405059,"patch":[[{"diffs":[[0,"(copy);   \r\n"],[1,"    \r\n"],[0,"    return n"]],"start1":12868,"start2":12868,"length1":24,"length2":30}]],"length":18234,"saved":false}
{"ts":1350427423879,"patch":[[{"diffs":[[0,"te object.\r\n"],[1," * \r\n"],[0," * @param st"]],"start1":12623,"start2":12623,"length1":24,"length2":29}]],"length":18239,"saved":false}
{"ts":1350427444655,"patch":[[{"diffs":[[0,"ewState;\r\n};\r\n\r\n"],[1,"/**\r\n * The equivalence function for two RubixState objects.\r\n */\r\n"],[0,"RubixState.isEqu"]],"start1":12903,"start2":12903,"length1":32,"length2":99}]],"length":18306,"saved":false}
{"ts":1350427477035,"patch":[[{"diffs":[[0,"e objects.\r\n"],[1," * @param state1 A state to be checked for equivalence.\r\n * @param state2\r\n"],[0," */\r\nRubixSt"]],"start1":12969,"start2":12969,"length1":24,"length2":99}]],"length":18381,"saved":false}
{"ts":1350427481324,"patch":[[{"diffs":[[0,"m state2"],[1," A state to be checked for equivalence."],[0,"\r\n */\r\nR"]],"start1":13046,"start2":13046,"length1":16,"length2":55}]],"length":18420,"saved":false}
{"ts":1350427513021,"patch":[[{"diffs":[[0,"uivalence.\r\n"],[1," * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n"],[0," */\r\nRubixSt"]],"start1":13083,"start2":13083,"length1":24,"length2":104}]],"length":18500,"saved":false}
{"ts":1350427541441,"patch":[[{"diffs":[[0,"rue;  \r\n"],[1,"    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations.\r\n     */"],[0,"\r\n    fo"]],"start1":13247,"start2":13247,"length1":16,"length2":101}]],"length":18585,"saved":false}
{"ts":1350427561311,"patch":[[{"diffs":[[0,".cubies.length; "],[1,"("],[0,"index < length; "]],"start1":13380,"start2":13380,"length1":32,"length2":33},{"diffs":[[0,"dex < length"],[1,")"],[0,"; index ++)\r"]],"start1":13399,"start2":13399,"length1":24,"length2":25}]],"length":18587,"saved":false}
{"ts":1350427566666,"patch":[[{"diffs":[[0," length)"],[1," & equal"],[0,"; index "]],"start1":13404,"start2":13404,"length1":16,"length2":24}]],"length":18595,"saved":false}
{"ts":1350427573491,"patch":[[{"diffs":[[0,"x]);\r\n        \r\n"],[1,"        /*\r\n"],[0,"        if(!equa"]],"start1":13500,"start2":13500,"length1":32,"length2":44},{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        */\r\n"],[0,"    }\r\n\r\n   "]],"start1":13582,"start2":13582,"length1":24,"length2":46}]],"length":18629,"saved":false}
{"ts":1350427610250,"patch":[[{"diffs":[[0,"gth)"],[-1," & equal"],[0,"; in"]],"start1":13408,"start2":13408,"length1":16,"length2":8},{"diffs":[[0,"  \r\n"],[-1,"        /*\r\n"],[0,"    "]],"start1":13504,"start2":13504,"length1":20,"length2":8},{"diffs":[[0," }\r\n"],[-1,"        \r\n        */\r\n"],[0,"    "]],"start1":13570,"start2":13570,"length1":30,"length2":8}]],"length":18587,"saved":false}
{"ts":1350427626242,"patch":[[{"diffs":[[0," length)"],[1," & equal"],[0,"; index "]],"start1":13404,"start2":13404,"length1":16,"length2":24},{"diffs":[[0,"index]);"],[-1,"\r\n"],[0,"        "]],"start1":13496,"start2":13496,"length1":18,"length2":16},{"diffs":[[0,"  \r\n"],[-1,"        if(!equal)\r\n        {\r\n            break;    \r\n        }\r\n"],[0,"    "]],"start1":13510,"start2":13510,"length1":74,"length2":8}]],"length":18527,"saved":false}
{"ts":1350427648077,"patch":[[{"diffs":[[0," abberations"],[1,", leave if a bad state is found"],[0,".\r\n     */\r\n"]],"start1":13318,"start2":13318,"length1":24,"length2":55}]],"length":18558,"saved":false}
{"ts":1350427673747,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"/**\r\n * Retrieve the colorID of a face state.\r\n * \r\n */"],[0,"\r\nRubixS"]],"start1":13571,"start2":13571,"length1":16,"length2":71},{"diffs":[[0,"unction(face"],[1,"State"],[0,")\r\n{\r\n    re"]],"start1":13658,"start2":13658,"length1":24,"length2":29}]],"length":18618,"saved":false}
{"ts":1350427677826,"patch":[[{"diffs":[[0,"ues[face"],[1,"State"],[0," & 7];\r\n"]],"start1":13710,"start2":13710,"length1":16,"length2":21}]],"length":18623,"saved":false}
{"ts":1350427686940,"patch":[[{"diffs":[[0," state.\r\n * "],[1,"@return the color ID."],[0,"\r\n */\r\nRubix"]],"start1":13617,"start2":13617,"length1":24,"length2":45}]],"length":18644,"saved":false}
{"ts":1350427690324,"patch":[[{"diffs":[[0,"@return "],[-1,"t"],[1,"T"],[0,"he color"]],"start1":13629,"start2":13629,"length1":17,"length2":17}]],"length":18644,"saved":false}
{"ts":1350427705128,"patch":[[{"diffs":[[0," a face state.\r\n"],[1," * @param faceState The face state.\r\n"],[0," * @return The c"]],"start1":13610,"start2":13610,"length1":32,"length2":69}]],"length":18681,"saved":false}
{"ts":1350427712286,"patch":[[{"diffs":[[0,"e face state"],[1," to retrieve the color from"],[0,".\r\n * @retur"]],"start1":13648,"start2":13648,"length1":24,"length2":51}]],"length":18708,"saved":false}
{"ts":1350427767780,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"/**\r\n * The to String functionality for a RubixState.\r\n * @param state The state to retrieve a String from.\r\n */\r\n"],[0,"RubixSta"]],"start1":13814,"start2":13814,"length1":16,"length2":130}]],"length":18822,"saved":false}
{"ts":1350427789568,"patch":[[{"diffs":[[0," from.\r\n"],[1," * @return A String for the RubixState object.\r\n"],[0," */\r\nRub"]],"start1":13923,"start2":13923,"length1":16,"length2":64}]],"length":18870,"saved":false}
{"ts":1350427797051,"patch":[[{"diffs":[[0,"s]\r\n"],[-1," * \r\n * There's probably a better way to do this...\r\n"],[0," */\r"]],"start1":16608,"start2":16608,"length1":61,"length2":8}]],"length":18817,"saved":false}
{"ts":1350427808323,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"\r\n\r\n// I can actually halve the size of this,but I'm not doing that unless I have to(it's hard...)\r\n"],[0,"/**\r"]],"start1":107,"start2":107,"length1":108,"length2":8}]],"length":18717,"saved":false}
{"ts":1350428168841,"patch":[[{"diffs":[[0,";\r\n    \r\n    for"],[1," "],[0,"(var index  = 0,"]],"start1":1986,"start2":1986,"length1":32,"length2":33},{"diffs":[[0,"r index "],[-1," "],[0,"= 0, scr"]],"start1":2006,"start2":2006,"length1":17,"length2":16},{"diffs":[[0,"hIndex ="],[1," "],[0,"0; index"]],"start1":2025,"start2":2025,"length1":16,"length2":17},{"diffs":[[0,"cubie >="],[1," "],[0,"24 ? 2 :"]],"start1":2129,"start2":2129,"length1":16,"length2":17},{"diffs":[[0,"     for"],[1," "],[0,"(cFace ="]],"start1":2154,"start2":2154,"length1":16,"length2":17},{"diffs":[[0,";\r\n\r\n        for"],[-1,""],[0,""],[1," "],[0,"(offset = 0; off"]],"start1":2853,"start2":2853,"length1":32,"length2":33},{"diffs":[[0,"ewIndex]"],[-1,""],[0,""],[1," "],[0,">> 4] = "]],"start1":3287,"start2":3287,"length1":16,"length2":17},{"diffs":[[0,"        "],[-1," "],[0,"for"],[1," "],[0,"(offset "]],"start1":3404,"start2":3404,"length1":20,"length2":20}]],"length":15097,"saved":false}
{"ts":1350430236894,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[-1,"\r\n"],[1,"RubixState.findCubie = function(state, cubie)\r\n{\r\n    var cubies = [];\r\n};\r\n\r\nRubixState.cubieMap = {\r\n    0 : [0, 1, 2],\r\n    1 : [],\r\n    2 : [3, 4, 5],\r\n    3 : [],\r\n    4 : [],\r\n    5 : [6, 7, 8],\r\n    6 : [],\r\n    7 : [9, 10, 11],\r\n    8 : [],\r\n    9 : [],\r\n    10 : [],\r\n    11 : [],\r\n    12 : [15, 16, 17],\r\n    13 : [],\r\n    14 : [18, 19, 20],\r\n    15 : [],\r\n    16 : [],\r\n    17 : [12, 13, 14],\r\n    18 : [],\r\n    19 : [21, 22, 23],\r\n    20 : []\r\n};"],[0,"\r\n\r\n/**\r"]],"start1":12580,"start2":12580,"length1":18,"length2":474}]],"length":15553,"saved":false}
{"ts":1350433937284,"patch":[[{"diffs":[[0,"tate"],[-1,", cubie)\r\n{\r\n    var cubies = []"],[1,"1, state2, cubieIndicies)\r\n{\r\n    \r\n}\r\n\r\nRubixState.cubieColorId = function(state, cubie)\r\n{\r\n    var colorIds = [], colorStr = \"\", cubieIndicies = RubixState.cubieMap[cubie], i;\r\n    \r\n    for (i = 0; i < cubieIndicies.length; i++)\r\n    {\r\n        colorIds.push(RubixState.colorID(state.cubies[cubieIndicies[i]]));\r\n    }\r\n    \r\n    colorIds.sort();\r\n    \r\n    for (i = 0; i < cubieIndicies.length; i++)\r\n    {\r\n        colorStr += colorIds[i];\r\n    }\r\n    \r\n    return colorStr"],[0,";\r\n}"]],"start1":12621,"start2":12621,"length1":40,"length2":487},{"diffs":[[0,", 1, 2],"],[1," // c00"],[0,"\r\n    1 "]],"start1":13148,"start2":13148,"length1":16,"length2":23},{"diffs":[[0,", 4, 5],"],[1," // c01"],[0,"\r\n    3 "]],"start1":13188,"start2":13188,"length1":16,"length2":23},{"diffs":[[0,", 7, 8],"],[1," // c02"],[0,"\r\n    6 "]],"start1":13241,"start2":13241,"length1":16,"length2":23},{"diffs":[[0,"10, 11],"],[1," // c03"],[0,"\r\n    8 "]],"start1":13283,"start2":13283,"length1":16,"length2":23},{"diffs":[[0,"16, 17],"],[1," // c05"],[0,"\r\n    13"]],"start1":13368,"start2":13368,"length1":16,"length2":23},{"diffs":[[0,"19, 20],"],[1," // c06"],[0,"\r\n    15"]],"start1":13413,"start2":13413,"length1":16,"length2":23},{"diffs":[[0,"13, 14],"],[1," // c04"],[0,"\r\n    18"]],"start1":13472,"start2":13472,"length1":16,"length2":23},{"diffs":[[0,"22, 23],"],[1," // c07"],[0,"\r\n    20"]],"start1":13517,"start2":13517,"length1":16,"length2":23}]],"length":16056,"saved":false}
{"ts":1350434712433,"patch":[[{"diffs":[[0,"orId"],[-1,"s"],[0," = "],[-1,"[], colorStr = \"\""],[1,"0, faceId = 0"],[0,", cu"]],"start1":12730,"start2":12730,"length1":29,"length2":24},{"diffs":[[0,"    "],[-1,"colorIds.push(RubixState.colorID("],[1,"faceId = "],[0,"stat"]],"start1":12865,"start2":12865,"length1":41,"length2":17},{"diffs":[[0,"[i]]"],[-1,"));\r\n    }"],[1," & 7;"],[0,"\r\n    "],[-1,"\r\n"],[0,"    "]],"start1":12904,"start2":12904,"length1":26,"length2":19},{"diffs":[[0,"orId"],[-1,"s.sort();\r\n    \r\n    for (i = 0; i < cubieIndicies.length; i++)\r\n    {"],[1," << 3;"],[0,"\r\n  "]],"start1":12926,"start2":12926,"length1":78,"length2":14},{"diffs":[[0,"olor"],[-1,"Str +"],[1,"Id "],[0,"= co"]],"start1":12947,"start2":12947,"length1":13,"length2":11},{"diffs":[[0," colorId"],[-1,"s[i]"],[1," | faceId"],[0,";\r\n    }"]],"start1":12955,"start2":12955,"length1":20,"length2":25},{"diffs":[[0,"rn color"],[-1,"Str"],[1,"Id"],[0,";\r\n};\r\n\r"]],"start1":12996,"start2":12996,"length1":19,"length2":18}]],"length":15958,"saved":false}
{"ts":1350434949880,"patch":[[{"diffs":[[0,"rId = 0,"],[1," faceIds = [],"],[0," faceId "]],"start1":12731,"start2":12731,"length1":16,"length2":30},{"diffs":[[0,"h; i++)\r\n    {\r\n"],[1,"        faceIds[i] = state.cubies[cubieIndicies[i]];\r\n    }\r\n    \r\n    faceIds.sort();\r\n    \r\n    for (i = 0; i < faceIds.length; i++)\r\n    {\r\n"],[0,"        faceId ="]],"start1":12859,"start2":12859,"length1":32,"length2":175}]],"length":16115,"saved":false}
{"ts":1350435214278,"patch":[[{"diffs":[[0,"tate"],[-1,"1"],[0,", "],[-1,"s"],[1,"cubie)\r\n{\r\n    for (var i = 0; i < RubixS"],[0,"tate"],[-1,"2, "],[1,"."],[0,"cubie"],[-1,"Indicies)\r\n"],[1,"Map.length; i++)\r\n    "],[0,"{\r\n    "],[1,"  "],[1,"  \r\n    }"],[0,"\r\n}"],[1,";"],[0,"\r\n\r\n"]],"start1":12621,"start2":12621,"length1":45,"length2":105}]],"length":16175,"saved":false}
{"ts":1350435500953,"patch":[[{"diffs":[[0," cubie)\r\n{\r\n"],[1,"    var colorId = RubixState.cubieColorId(state, cubie);\r\n    \r\n"],[0,"    for (var"]],"start1":12626,"start2":12626,"length1":24,"length2":88},{"diffs":[[0,"        "],[-1,"\r\n    }"],[1,"if (RubixState.cubieColorId(state, i) === colorId)\r\n            return i;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";"],[0,"\r\n};\r\n\r\n"]],"start1":12767,"start2":12767,"length1":23,"length2":176}]],"length":16392,"saved":false}
{"ts":1350437109829,"patch":[[{"diffs":[[0,"n equal;\r\n};\r\n\r\n"],[1,"RubixState.hash = function(state)\r\n{\r\n    var hash = 0, faceState, faceVal, colorVal;\r\n    \r\n    for (var i = 0; i < state.cubies.length; i++)\r\n    {\r\n        faceState = state.cubie[i];\r\n        faceVal = Number(faceState >> 4);\r\n        colorVal = faceState & 7;\r\n        \r\n        hash = (hash << 6) | (faceVal | colorVal);\r\n    }\r\n    \r\n    return hash;\r\n};\r\n\r\nRubixState.cubieHash = function(state, index)\r\n{\r\n    // -***-+++ => ...***+++\r\n    var faceState = state.cubie[index];\r\n    var faceVal = Number(faceState >> 4);\r\n    var colorVal = faceState & 7;\r\n    \r\n    return (faceVal << 3) | colorVal;\r\n};\r\n\r\n"],[0,"RubixState.color"]],"start1":10104,"start2":10104,"length1":32,"length2":647},{"diffs":[[0,"  \r\n    \r\n};\r\n\r\n"],[1,"// Tests if the two cubies are equal; both position and orientation.\r\nRubixState.equalCubies = function(state1, cubie1, state2, cubie2)\r\n{\r\n    \r\n};\r\n\r\n"],[0,"RubixState.findC"]],"start1":13187,"start2":13187,"length1":32,"length2":184}]],"length":17159,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350437768688,"patch":[[{"diffs":[[0,"\n    \r\n}\r\n\r\n"],[1,"/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\n"],[0,"RubixState.s"]],"start1":486,"start2":486,"length1":24,"length2":148},{"diffs":[[0,"ttom : 5\r\n};\r\n\r\n"],[1,"/**\r\n * The face value map used in tanslating moves to something human readable. \r\n */\r\n"],[0,"RubixState.faceV"]],"start1":966,"start2":966,"length1":32,"length2":120},{"diffs":[[0,"0 c01\r\n "],[-1," "],[0,""],[1,""],[0,"* \r\n * @"]],"start1":1990,"start2":1990,"length1":17,"length2":16},{"diffs":[[0,".\r\n     "],[-1," "],[0,""],[1,""],[0,"* cFace "]],"start1":2478,"start2":2478,"length1":17,"length2":16},{"diffs":[[0,"r(var index "],[1," "],[0,"= 0, scratch"]],"start1":2699,"start2":2699,"length1":24,"length2":25},{"diffs":[[0,"hIndex ="],[-1," "],[0,"0; index"]],"start1":2723,"start2":2723,"length1":17,"length2":16},{"diffs":[[0,"     for"],[-1," "],[0,""],[1,""],[0,"(cFace ="]],"start1":3052,"start2":3052,"length1":17,"length2":16},{"diffs":[[0," 8];\r\n        \r\n"],[1,"        // Clear the face set of data.\r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n"],[0,"        // Deter"]],"start1":3623,"start2":3623,"length1":32,"length2":162},{"diffs":[[0,"n.\r\n"],[-1,"        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        // Clear the face set of data.\r\n"],[0,"    "]],"start1":3932,"start2":3932,"length1":138,"length2":8},{"diffs":[[0,"ex;\r\n       "],[-1,""],[0,""],[1," "],[0,"RubixState.f"]],"start1":4699,"start2":4699,"length1":24,"length2":25},{"diffs":[[0," 0, line"],[-1," "],[0,"= \" \", l"]],"start1":6758,"start2":6758,"length1":17,"length2":16},{"diffs":[[0,"/ 9; index <"],[-1," "],[0,"length; inde"]],"start1":6794,"start2":6794,"length1":25,"length2":24},{"diffs":[[0,"index*9,"],[-1," "],[0,"index*9 "]],"start1":6861,"start2":6861,"length1":17,"length2":16},{"diffs":[[0,"\n\r\n/"],[-1,"/ Tests if the two cubies "],[1,"**\r\n * The equivalence function for two RubixState objects.\r\n * @param state1 A state to be checked for equivalence.\r\n * @param state2 A state to be checked for equivalence.\r\n * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n */\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    v"],[0,"ar"],[-1,"e"],[0," equal"],[-1,"; both position and orientation.\r\nRubixState.equalCubies"],[1," = true;  \r\n    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\r\n     */\r\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);        \r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\nRubixState.hash = function(state)\r\n{\r\n    var hash = 0, faceState, faceVal, colorVal;\r\n    \r\n    for (var i = 0; i < state.cubies.length; i++)\r\n    {\r\n        // -***-+++ => ...***+++\r\n        faceState = state.cubies[i];\r\n        faceVal = Number(faceState >> 4);\r\n        colorVal = faceState & 7;\r\n        \r\n        // ...***+++ => ...***+++***+++\r\n        hash = (hash << 6) | ((faceVal << 3) | colorVal);\r\n    }\r\n    \r\n    return hash;\r\n};\r\n\r\nRubixState.cubieHash"],[0," = f"]],"start1":12816,"start2":12816,"length1":99,"length2":1135},{"diffs":[[0,"tate"],[-1,"1"],[0,", "],[-1,"cubie1, state2, cubie2)\r\n{\r\n    "],[1,"index)\r\n{\r\n    // -***-+++ => ...***+++\r\n    var faceState = state.cubie[index];\r\n    var faceVal = Number(faceState >> 4);\r\n    var colorVal = faceState & 7;\r\n    \r\n    return (faceVal << 3) | colorVal;\r\n};\r\n\r\n/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];"],[0,"\r\n};"]],"start1":13960,"start2":13960,"length1":43,"length2":456},{"diffs":[[0," cubie\";\r\n};\r\n\r\n"],[1,"/**\r\n * Returns a unique ID to represent the colors of the faces of the specified cubie.\r\n * Disregards orientation.\r\n * @param state the state containing the cubie\r\n * @param cubie the index of the cubie according to the cubieMap\r\n * @return a unique color ID.\r\n */\r\n"],[0,"RubixState.cubie"]],"start1":14759,"start2":14759,"length1":32,"length2":300},{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.cubieMap = {\r\n    0 : [0, 1, 2], // c00\r\n    1 : [],\r\n    2 : [3, 4, 5], // c01\r\n    3 : [],\r\n    4 : [],\r\n    5 : [6, 7, 8], // c02\r\n    6 : [],\r\n    7 : [9, 10, 11], // c03\r\n    8 : [],\r\n    9 : [],\r\n    10 : [],\r\n    11 : [],\r\n    12 : [15, 16, 17], // c05\r\n    13 : [],\r\n    14 : [18, 19, 20], // c06\r\n    15 : [],\r\n    16 : [],\r\n    17 : [12, 13, 14], // c04\r\n    18 : [],\r\n    19 : [21, 22, 23], // c07\r\n    20 : []\r\n};/**\r\n * The equivalence function for two RubixState objects.\r\n * @param state1 A state to be checked for equivalence.\r\n * @param state2 A state to be checked for equivalence.\r\n * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n */\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\r\n     */\r\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);        \r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n"],[0,"/**\r"]],"start1":15545,"start2":15545,"length1":1347,"length2":8},{"diffs":[[0,"\r\n};\r\n\r\n"],[-1,"\r\n"],[1,"RubixState.cubieMap = {\r\n    0 : [0, 1, 2], // c00\r\n    1 : [],\r\n    2 : [3, 4, 5], // c01\r\n    3 : [],\r\n    4 : [],\r\n    5 : [6, 7, 8], // c02\r\n    6 : [],\r\n    7 : [9, 10, 11], // c03\r\n    8 : [],\r\n    9 : [],\r\n    10 : [],\r\n    11 : [],\r\n    12 : [15, 16, 17], // c05\r\n    13 : [],\r\n    14 : [18, 19, 20], // c06\r\n    15 : [],\r\n    16 : [],\r\n    17 : [12, 13, 14], // c04\r\n    18 : [],\r\n    19 : [21, 22, 23], // c07\r\n    20 : []\r\n};"],[0,"\r\n\r\n/**\r"]],"start1":18080,"start2":18080,"length1":18,"length2":452}]],"length":20978,"saved":false}
{"ts":1350437806679,"patch":[[{"diffs":[[0,"r (var i"],[1,"ndex"],[0," = 0; i"],[1,"ndex"],[0," < state"]],"start1":13578,"start2":13578,"length1":23,"length2":31},{"diffs":[[0,"cubies.length; i"],[1,"ndex"],[0,"++)\r\n    {\r\n    "]],"start1":13610,"start2":13610,"length1":32,"length2":36},{"diffs":[[0,"cubies[i"],[1,"ndex"],[0,"];\r\n    "]],"start1":13702,"start2":13702,"length1":16,"length2":20}]],"length":20994,"saved":false}
{"ts":1350437817430,"patch":[[{"diffs":[[0,"r (var i"],[1,"ndex"],[0," = 0; i"],[1,"ndex"],[0," < Rubix"]],"start1":14556,"start2":14556,"length1":23,"length2":31},{"diffs":[[0,"bieMap.length; i"],[1,"ndex"],[0,"++)\r\n    {\r\n    "]],"start1":14595,"start2":14595,"length1":32,"length2":36},{"diffs":[[0,"state, i"],[1,"ndex"],[0,") === co"]],"start1":14663,"start2":14663,"length1":16,"length2":20},{"diffs":[[0,"return i"],[1,"ndex"],[0,";\r\n    }"]],"start1":14703,"start2":14703,"length1":16,"length2":20}]],"length":21014,"saved":false}
{"ts":1350437957870,"patch":[[{"diffs":[[0,"ubie], i"],[1,"ndex"],[0,";\r\n    \r"]],"start1":15216,"start2":15216,"length1":16,"length2":20},{"diffs":[[0,"r (i"],[1,"ndex"],[0," = 0; i"],[1,"ndex"],[0," < cubie"],[-1,"In"],[1,"index"],[0,"dici"]],"start1":15243,"start2":15243,"length1":25,"length2":36},{"diffs":[[0,"cies.length; i++"],[1,"n"],[0,")\r\n    {\r\n      "]],"start1":15277,"start2":15277,"length1":32,"length2":33},{"diffs":[[0,"aceIds[i"],[1,"ndex"],[0,"] = stat"]],"start1":15313,"start2":15313,"length1":16,"length2":20},{"diffs":[[0,"es[cubie"],[-1,"Ind"],[0,"ic"],[1,"n"],[0,"ies[i"],[1,"ndex"],[0,"]];\r\n   "]],"start1":15339,"start2":15339,"length1":26,"length2":28},{"diffs":[[0,"  for (i"],[1,"ndex"],[0," = 0; i"],[1,"ndex"],[0," < faceI"]],"start1":15406,"start2":15406,"length1":23,"length2":31},{"diffs":[[0,"ength; i"],[1,"n"],[0,"++)\r\n   "]],"start1":15441,"start2":15441,"length1":16,"length2":17},{"diffs":[[0,"dicies[i"],[1,"ndex"],[0,"]] & 7;\r"]],"start1":15499,"start2":15499,"length1":16,"length2":20}]],"length":21049,"saved":false}
{"ts":1350437972112,"patch":[[{"diffs":[[0,"h; i"],[1,"ndex"],[0,"++"],[-1,"n"],[0,")\r\n "]],"start1":15287,"start2":15287,"length1":11,"length2":14}]],"length":21052,"saved":false}
{"ts":1350437984640,"patch":[[{"diffs":[[0,"ubie"],[1,"Ind"],[0,"ic"],[-1,"n"],[0,"ies["]],"start1":15346,"start2":15346,"length1":11,"length2":13}]],"length":21054,"saved":false}
{"contributors":["cdcordisco@gmail.com"],"silentsave":false,"ts":1350438370091,"patch":[[{"diffs":[[0,"..***+++***+++\r\n"],[1,"        console.log(((faceVal << 3) | colorVal));\r\n"],[0,"        hash = ("]],"start1":13831,"start2":13831,"length1":32,"length2":83},{"diffs":[[0," < cubie"],[-1,"index"],[1,"In"],[0,"dicies.l"]],"start1":15313,"start2":15313,"length1":21,"length2":18},{"diffs":[[0,"ngth; in"],[1,"dex"],[0,"++)\r\n   "]],"start1":15495,"start2":15495,"length1":16,"length2":19}]],"length":21105,"saved":false}
{"ts":1350438418185,"patch":[[{"diffs":[[0,"ole.log("],[1,"state.cubies[index] + \":\" + "],[0,"((faceVa"]],"start1":13859,"start2":13859,"length1":16,"length2":44}]],"length":21133,"saved":false}
{"ts":1350439368745,"patch":[[{"diffs":[[0,"ar hash = 0,"],[1," hashA = 0, hashB = 0,"],[0," faceState, "]],"start1":13522,"start2":13522,"length1":24,"length2":46},{"diffs":[[0,"x < "],[-1,"state.cubies.length"],[1,"11"],[0,"; in"]],"start1":13622,"start2":13622,"length1":27,"length2":10},{"diffs":[[0,"hash"],[1,"A"],[0," = (hash"],[1,"A"],[0," << "]],"start1":13939,"start2":13939,"length1":16,"length2":18}]],"length":21140,"saved":false}
{"ts":1350439517584,"patch":[[{"diffs":[[0,"olorVal;\r\n    \r\n"],[1,"    // Must split this into 2 parts because bitwise operators are on int32\r\n"],[0,"    for (var ind"]],"start1":13578,"start2":13578,"length1":32,"length2":108},{"diffs":[[0,"ndex < 1"],[-1,"1"],[1,"0"],[0,"; index+"]],"start1":13695,"start2":13695,"length1":17,"length2":17},{"diffs":[[0,"colorVal);\r\n"],[-1,""],[0,"    }\r\n    \r"]],"start1":14056,"start2":14056,"length1":24,"length2":24},{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    for (; index < 20; index++)\r\n    {\r\n        // -***-+++ => ...***+++\r\n        faceState = state.cubies[index];\r\n        faceVal = Number(faceState >> 4);\r\n        colorVal = faceState & 7;\r\n        \r\n        // ...***+++ => ...***+++***+++\r\n        console.log(state.cubies[index] + \":\" + ((faceVal << 3) | colorVal));\r\n        hashB = (hashB << 6) | ((faceVal << 3) | colorVal);\r\n    }\r\n    \r\n    \r\n    \r\n"],[0,"    return hash;"]],"start1":14065,"start2":14065,"length1":32,"length2":442}]],"length":21626,"saved":false}
{"ts":1350439584914,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.hash = function(state)\r\n{\r\n    var hash = 0, hashA = 0, hashB = 0, faceState, faceVal, colorVal;\r\n    \r\n    // Must split this into 2 parts because bitwise operators are on int32\r\n    for (var index = 0; index < 10; index++)\r\n    {\r\n        // -***-+++ => ...***+++\r\n        faceState = state.cubies[index];\r\n        faceVal = Number(faceState >> 4);\r\n        colorVal = faceState & 7;\r\n        \r\n        // ...***+++ => ...***+++***+++\r\n        console.log(state.cubies[index] + \":\" + ((faceVal << 3) | colorVal));\r\n        hashA = (hashA << 6) | ((faceVal << 3) | colorVal);\r\n    }\r\n    \r\n    for (; index < 20; index++)\r\n    {\r\n        // -***-+++ => ...***+++\r\n        faceState = state.cubies[index];\r\n        faceVal = Number(faceState >> 4);\r\n        colorVal = faceState & 7;\r\n        \r\n        // ...***+++ => ...***+++***+++\r\n        console.log(state.cubies[index] + \":\" + ((faceVal << 3) | colorVal));\r\n        hashB = (hashB << 6) | ((faceVal << 3) | colorVal);\r\n    }\r\n    \r\n    \r\n    \r\n    return hash;\r\n};\r\n\r\n"],[0,"Rubi"]],"start1":13475,"start2":13475,"length1":1044,"length2":8}]],"length":20590,"saved":false}
{"ts":1350439674026,"patch":[[{"diffs":[[0,"tion(state, "],[-1,"i"],[1,"cubieI"],[0,"ndex)\r\n{\r\n  "]],"start1":13506,"start2":13506,"length1":25,"length2":30},{"diffs":[[0,"e.cubie["],[-1,"i"],[1,"cubieI"],[0,"ndex];\r\n"]],"start1":13588,"start2":13588,"length1":17,"length2":22}]],"length":20600,"saved":false}
{"ts":1350439694687,"patch":[[{"diffs":[[0,"n equal;\r\n};\r\n\r\n"],[1,"/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n\r\n"],[0,"RubixState.cubie"]],"start1":13463,"start2":13463,"length1":32,"length2":277},{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n"],[0,"Rubi"]],"start1":13980,"start2":13980,"length1":251,"length2":8}]],"length":20602,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350441476186,"patch":[[{"diffs":[[0,"x < "],[-1,"RubixState.cubieMap.length"],[1,"20"],[0,"; in"]],"start1":14126,"start2":14126,"length1":34,"length2":10}]],"length":20578,"saved":false}
{"ts":1350441519882,"patch":[[{"diffs":[[0,"te.cubie"],[1,"s"],[0,"[cubieIn"]],"start1":13832,"start2":13832,"length1":16,"length2":17}]],"length":20579,"saved":false}
{"ts":1350441769789,"patch":[[{"diffs":[[0,"rId "],[-1,"<< 3;\r\n        colorId = colorId"],[1,"= (colorId << 3)"],[0," | f"]],"start1":15062,"start2":15062,"length1":40,"length2":24}]],"length":20563,"saved":false}
{"ts":1350444111449,"patch":[[{"diffs":[[0,"0\r\n    1 : ["],[-1,""],[0,""],[1,"24, 25"],[0,"],\r\n    2 : "]],"start1":17722,"start2":17722,"length1":24,"length2":30},{"diffs":[[0,"1\r\n    3 : ["],[1,"26, 27"],[0,"],\r\n    4 : "]],"start1":17768,"start2":17768,"length1":24,"length2":30},{"diffs":[[0,",\r\n    4 : ["],[1,"28, 29"],[0,"],\r\n    5 : "]],"start1":17787,"start2":17787,"length1":24,"length2":30},{"diffs":[[0,"2\r\n    6 : ["],[-1,""],[0,""],[1,"30, 31"],[0,"],\r\n    7 : "]],"start1":17833,"start2":17833,"length1":24,"length2":30},{"diffs":[[0,"3\r\n    8 : ["],[1,"32, 33"],[0,"],\r\n    9 : "]],"start1":17881,"start2":17881,"length1":24,"length2":30},{"diffs":[[0,",\r\n    9 : ["],[1,"34, 35"],[0,"],\r\n    10 :"]],"start1":17900,"start2":17900,"length1":24,"length2":30},{"diffs":[[0,"\r\n    10 : ["],[1,"36, 37"],[0,"],\r\n    11 :"]],"start1":17920,"start2":17920,"length1":24,"length2":30},{"diffs":[[0,"\r\n    11 : ["],[1,"38, 39"],[0,"],\r\n    12 :"]],"start1":17940,"start2":17940,"length1":24,"length2":30},{"diffs":[[0,"\r\n    13 : ["],[-1,""],[0,""],[1,"42, 43"],[0,"],\r\n    14 :"]],"start1":17991,"start2":17991,"length1":24,"length2":30},{"diffs":[[0,"\r\n    15 : ["],[1,"40, 41"],[0,"],\r\n    16 :"]],"start1":18042,"start2":18042,"length1":24,"length2":30},{"diffs":[[0,"\r\n    16 : ["],[1,"44, 45"],[0,"],\r\n    17 :"]],"start1":18062,"start2":18062,"length1":24,"length2":30},{"diffs":[[0,"  18 : ["],[1,"46, 47"],[0,"],\r\n    "]],"start1":18117,"start2":18117,"length1":16,"length2":22},{"diffs":[[0,"07\r\n"],[-1,"    20 : []\r\n"],[0,"};\r\n"]],"start1":18162,"start2":18162,"length1":21,"length2":8}]],"length":20622,"saved":false}
{"ts":1350444116210,"patch":[[{"diffs":[[0," 22, 23]"],[-1,","],[0," // c07\r"]],"start1":18148,"start2":18148,"length1":17,"length2":16}]],"length":20621,"saved":false}
{"ts":1350446608087,"patch":[[{"diffs":[[0,"ds.sort();\r\n    "],[1,"console.log(faceIds);"],[0,"\r\n    for (index"]],"start1":14913,"start2":14913,"length1":32,"length2":53}]],"length":20642,"saved":false}
{"ts":1350446656451,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(faceIds);"],[0,"\r\n  "]],"start1":14925,"start2":14925,"length1":29,"length2":8}]],"length":20621,"saved":false}
{"ts":1350446735497,"patch":[[{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    if (faceIds.length === 2)\r\n        colorId = colorId << 4;\r\n    \r\n"],[0,"    return color"]],"start1":15091,"start2":15091,"length1":32,"length2":102}]],"length":20691,"saved":false}
{"ts":1350446801279,"patch":[[{"diffs":[[0,"   }\r\n    \r\n"],[1,"    // A corner ID could produce the same as an edge, so vary them by 4 bits\r\n"],[0,"    if (face"]],"start1":15095,"start2":15095,"length1":24,"length2":102}]],"length":20769,"saved":false}
{"ts":1350446822057,"patch":[[{"diffs":[[0,"them by "],[-1,"4"],[1,"9"],[0," bits\r\n "]],"start1":15169,"start2":15169,"length1":17,"length2":17},{"diffs":[[0,"orId << "],[-1,"4"],[1,"9"],[0,";\r\n    \r"]],"start1":15237,"start2":15237,"length1":17,"length2":17}]],"length":20769,"saved":false}
{"ts":1350446863491,"patch":[[{"diffs":[[0,"orId << "],[-1,"9"],[1,"13"],[0,";\r\n    \r"]],"start1":15237,"start2":15237,"length1":17,"length2":18}]],"length":20770,"saved":false}
{"ts":1350446867598,"patch":[[{"diffs":[[0,"them by "],[-1,"9"],[1,"13"],[0," bits\r\n "]],"start1":15169,"start2":15169,"length1":17,"length2":18}]],"length":20771,"saved":false}
{"ts":1350447161365,"patch":[[{"diffs":[[0,"  var faceVal = "],[-1,"Number("],[0,"faceState >> 4);"]],"start1":13858,"start2":13858,"length1":39,"length2":32},{"diffs":[[0,"ceState >> 4"],[-1,")"],[0,";\r\n    var c"]],"start1":13876,"start2":13876,"length1":25,"length2":24}]],"length":20763,"saved":false}
{"ts":1350447221810,"patch":[[{"diffs":[[0,"e & 7;\r\n    "],[1,"console.log(\"HASH:\" + (faceVal << 3) | colorVal);"],[0,"\r\n    return"]],"start1":13918,"start2":13918,"length1":24,"length2":73}]],"length":20812,"saved":false}
{"ts":1350447243154,"patch":[[{"diffs":[[0,"ASH:\" + "],[1,"("],[0,"(faceVal"]],"start1":13944,"start2":13944,"length1":16,"length2":17},{"diffs":[[0,"olorVal)"],[1,")"],[0,";\r\n    r"]],"start1":13971,"start2":13971,"length1":16,"length2":17}]],"length":20814,"saved":false}
{"ts":1350447357092,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\nRubixState.cubieHash = function(state, cubieIndex)\r\n{\r\n    // -***-+++ => ...***+++\r\n    var faceState = state.cubies[cubieIndex];\r\n    var faceVal = faceState >> 4;\r\n    var colorVal = faceState & 7;\r\n    console.log(\"HASH:\" + ((faceVal << 3) | colorVal));\r\n    return (faceVal << 3) | colorVal;\r\n};\r\n\r\n"],[0,"Rubi"]],"start1":13718,"start2":13718,"length1":314,"length2":8},{"diffs":[[0," cubie\";\r\n};\r\n\r\n"],[1,"RubixState.cubieHash = function(state, cubieIndex)\r\n{\r\n    // -***-+++ => ...***+++\r\n    var faceState = state.cubies[cubieIndex];\r\n    var faceVal = faceState >> 4;\r\n    var colorVal = faceState & 7;\r\n    console.log(\"HASH:\" + ((faceVal << 3) | colorVal));\r\n    return (faceVal << 3) | colorVal;\r\n};\r\n\r\n"],[0,"/**\r\n * Returns "]],"start1":14057,"start2":14057,"length1":32,"length2":336}]],"length":20812,"saved":false}
{"ts":1350447509959,"patch":[[{"diffs":[[0,"ubie"],[-1,"Index)\r\n{\r\n    // -***-+++ => ...***+++\r\n    var"],[1,")\r\n{\r\n    var hash = 0, faceState, faceVal, colorVal, cubieIndicies = RubixState.cubieMap[cubie];\r\n    \r\n    // -***-+++ => ...***+++\r\n    \r\n    for (var index = 0; index < cubieIndicies.length; i++)\r\n    {\r\n       "],[0," fac"]],"start1":14113,"start2":14113,"length1":56,"length2":223},{"diffs":[[0,"ndex];\r\n    "],[1," "],[-1,"var"],[1,"  "],[0," faceVal = f"]],"start1":14364,"start2":14364,"length1":27,"length2":27},{"diffs":[[0," >> 4;\r\n    "],[-1,"var"],[1,"   "],[0," colorVal = "]],"start1":14399,"start2":14399,"length1":27,"length2":27},{"diffs":[[0,"State & 7;\r\n"],[1,"    }\r\n    \r\n"],[0,"    console."]],"start1":14430,"start2":14430,"length1":24,"length2":37}]],"length":20992,"saved":false}
{"ts":1350447714725,"patch":[[{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"\r\n    console.log(\"HASH:\" +"],[1,"hash = (hash << 6) |"],[0," ((f"]],"start1":14442,"start2":14442,"length1":42,"length2":32},{"diffs":[[0,"Val)"],[-1,")"],[0,";\r\n    "],[-1,"return (faceVal << 3) | colorVal"],[1,"}\r\n    \r\n    if (cubieIndicies.length === 2)\r\n        hash = hash << 18;\r\n    \r\n    return hash"],[0,";\r\n}"]],"start1":14494,"start2":14494,"length1":48,"length2":110}]],"length":21044,"saved":false}
{"ts":1350447779784,"patch":[[{"diffs":[[0,"cubieInd"],[1,"icies[ind"],[0,"ex];\r\n  "]],"start1":14358,"start2":14358,"length1":16,"length2":25}]],"length":21053,"saved":false}
{"ts":1350447784408,"patch":[[{"diffs":[[0,"ength; i"],[1,"ndex"],[0,"++)\r\n   "]],"start1":14305,"start2":14305,"length1":16,"length2":20}]],"length":21057,"saved":false}
{"ts":1350447790445,"patch":[[{"diffs":[[0,"eIndicies[index]"],[1,"]"],[0,";\r\n        faceV"]],"start1":14366,"start2":14366,"length1":32,"length2":33}]],"length":21058,"saved":false}
{"ts":1350447945521,"patch":[[{"diffs":[[0,"<< 18;\r\n    "],[1,"console.log(hash);"],[0,"\r\n    return"]],"start1":14585,"start2":14585,"length1":24,"length2":42}]],"length":21076,"saved":false}
{"ts":1350447990890,"patch":[[{"diffs":[[0,"  faceVal = "],[1,"Number("],[0,"faceState >>"]],"start1":14392,"start2":14392,"length1":24,"length2":31},{"diffs":[[0,"ate >> 4"],[1,")"],[0,";\r\n     "]],"start1":14417,"start2":14417,"length1":16,"length2":17}]],"length":21084,"saved":false}
{"ts":1350448003180,"patch":[[{"diffs":[[0,"      faceVal = "],[-1,"Number("],[0,"faceState >> 4);"]],"start1":14388,"start2":14388,"length1":39,"length2":32},{"diffs":[[0,"ceState >> 4"],[-1,")"],[0,";\r\n        c"]],"start1":14406,"start2":14406,"length1":25,"length2":24}]],"length":21076,"saved":false}
{"ts":1350448047971,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(hash);"],[0,"\r\n  "]],"start1":14593,"start2":14593,"length1":26,"length2":8}]],"length":21058,"saved":false}
{"ts":1350448208559,"patch":[[{"diffs":[[0,"ate."],[-1,"cubieHash"],[1,"areCubiesEqual"],[0," = f"]],"start1":14080,"start2":14080,"length1":17,"length2":22},{"diffs":[[0,"tate"],[1,"1"],[0,", cubie"],[-1,")\r\n{\r\n    var hash = 0, faceState, faceVal, colorVal, cubieIndicies = RubixState.cubieMap[cubie];\r\n    \r\n    // -***-+++ => ...***+++"],[1,"1, state2, cubie2)\r\n{\r\n    var equal = true, cubieIndex;"],[0,"\r\n  "]],"start1":14111,"start2":14111,"length1":148,"length2":72},{"diffs":[[0,"    "],[-1,"faceState = state.cubies["],[1,"cubieIndex = "],[0,"cubi"]],"start1":14262,"start2":14262,"length1":33,"length2":21},{"diffs":[[0,"icies[index]"],[-1,"]"],[0,";\r\n        f"]],"start1":14287,"start2":14287,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"faceVal = faceState >> 4;\r\n        colorVal = faceState & 7;\r\n        hash = (hash << 6) | ((faceVal << 3) | colorVal);\r\n    }\r\n    \r\n    if (cubieIndicies.length === 2)\r\n        hash = hash << 18;"],[1,"\r\n    }"],[0,"\r\n  "]],"start1":14306,"start2":14306,"length1":205,"length2":15},{"diffs":[[0,"urn "],[-1,"hash"],[1,"equal"],[0,";\r\n}"]],"start1":14332,"start2":14332,"length1":12,"length2":13}]],"length":20785,"saved":false}
{"ts":1350448245623,"patch":[[{"diffs":[[0,", cubieIndex"],[1,", cubieIndicies = RubixState.cubieMap[cubie]"],[0,";\r\n    \r\n   "]],"start1":14166,"start2":14166,"length1":24,"length2":68}]],"length":20829,"saved":false}
{"ts":1350448390082,"patch":[[{"diffs":[[0,"te1,"],[-1," cubie1,"],[0," sta"]],"start1":14113,"start2":14113,"length1":16,"length2":8},{"diffs":[[0,"2, cubie"],[-1,"2"],[0,")\r\n{\r\n  "]],"start1":14123,"start2":14123,"length1":17,"length2":16},{"diffs":[[0," var"],[-1," equal = true,"],[0," cub"]],"start1":14140,"start2":14140,"length1":22,"length2":8},{"diffs":[[0,"ex];\r\n        \r\n"],[1,"        if (state1.cubies[cubieIndex] !== state2.cubies[cubieIndex])\r\n            return false;\r\n"],[0,"    }\r\n    \r\n   "]],"start1":14317,"start2":14317,"length1":32,"length2":129},{"diffs":[[0,"   \r\n    return "],[-1,"equal"],[1,"true"],[0,";\r\n};\r\n\r\n/**\r\n *"]],"start1":14438,"start2":14438,"length1":37,"length2":36}]],"length":20902,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350481131684,"patch":[[{"diffs":[[0,"[index]]"],[1," & 7"],[0,";\r\n    }"]],"start1":15011,"start2":15011,"length1":16,"length2":20},{"diffs":[[0,"cies[index]]"],[-1," & 7"],[0,";\r\n        c"]],"start1":15166,"start2":15166,"length1":28,"length2":24}]],"length":20902,"saved":false}
{"ts":1350481198720,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        faceId = state.cubies[cubieIndicies[index]];\r\n"],[0,"    "]],"start1":15123,"start2":15123,"length1":62,"length2":8},{"diffs":[[0,"| faceId"],[1,"s[index]"],[0,";\r\n    }"]],"start1":15160,"start2":15160,"length1":16,"length2":24}]],"length":20856,"saved":false}
{"ts":1350481290305,"patch":[[{"diffs":[[0," [],"],[-1," faceId = 0,"],[0," cub"]],"start1":14818,"start2":14818,"length1":20,"length2":8},{"diffs":[[0,"\n    }\r\n    "],[1,"console.log(faceIds);"],[0,"\r\n    faceId"]],"start1":15013,"start2":15013,"length1":24,"length2":45}]],"length":20865,"saved":false}
{"ts":1350481381070,"patch":[[{"diffs":[[0,"ds[index];\r\n"],[1,"        console.log(colorId.toString(2));\r\n"],[0,"    }\r\n    \r"]],"start1":15176,"start2":15176,"length1":24,"length2":67}]],"length":20908,"saved":false}
{"ts":1350481512608,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(faceIds);"],[0,"\r\n  "]],"start1":15021,"start2":15021,"length1":29,"length2":8},{"diffs":[[0,"];\r\n"],[-1,"        console.log(colorId.toString(2));\r\n"],[0,"    "]],"start1":15163,"start2":15163,"length1":51,"length2":8}]],"length":20844,"saved":false}
{"ts":1350482593828,"patch":[[{"diffs":[[0,"te & 7];\r\n};\r\n\r\n"],[1,"/**\r\n * Finds the cubie located at the specified cubie of state1 in state2.\r\n */\r\n"],[0,"RubixState.findC"]],"start1":13706,"start2":13706,"length1":32,"length2":114},{"diffs":[[0,"= function(state"],[1,"1"],[0,", cubie"],[1,", state2"],[0,")\r\n{\r\n    var co"]],"start1":13825,"start2":13825,"length1":39,"length2":48}]],"length":20935,"saved":false}
{"ts":1350482744309,"patch":[[{"diffs":[[0,"olorId(state"],[1,"1"],[0,", cubie);\r\n "]],"start1":13898,"start2":13898,"length1":24,"length2":25},{"diffs":[[0,"Id(state"],[1,"2"],[0,", index)"]],"start1":14014,"start2":14014,"length1":16,"length2":17}]],"length":20937,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350512799214,"patch":[[{"diffs":[[0,"aceSet ="],[1," "],[0,"[];\r\n\r\n/"]],"start1":755,"start2":755,"length1":16,"length2":17},{"diffs":[[0,"}\r\n    }\r\n};\r\n\r\n"],[1,"RubixState.verifyState()\r\n{\r\n    \r\n};\r\n\r\n"],[0,"/**\r\n * Rotates "]],"start1":5009,"start2":5009,"length1":32,"length2":73}]],"length":20979,"saved":false}
{"ts":1350512803830,"patch":[[{"diffs":[[0,".verifyState"],[1," =function"],[0,"()\r\n{\r\n    \r"]],"start1":5035,"start2":5035,"length1":24,"length2":34}]],"length":20989,"saved":false}
{"ts":1350512823026,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.verifyState =function()\r\n{\r\n    \r\n};\r\n\r\n"],[0,"/**\r"]],"start1":5021,"start2":5021,"length1":59,"length2":8}]],"length":20938,"saved":false}
{"ts":1350512835825,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"//*=face +=color -=unused\r\n//-***-+++ "],[1,"RubixState.verifyState =function()\r\n{\r\n    \r\n};"],[0,"\r\n\r\n"]],"start1":11404,"start2":11404,"length1":46,"length2":55}]],"length":20947,"saved":false}
{"ts":1350512839584,"patch":[[{"diffs":[[0,"State =function("],[1,"state"],[0,")\r\n{\r\n    \r\n};\r\n"]],"start1":11425,"start2":11425,"length1":32,"length2":37}]],"length":20952,"saved":false}
{"ts":1350512892546,"patch":[[{"diffs":[[0,"yState ="],[1," "],[0,"function"]],"start1":11424,"start2":11424,"length1":16,"length2":17},{"diffs":[[0,"(state)\r\n{\r\n"],[1,"    var corners = 0\r\n    var sides = 0;\r\n"],[0,"    \r\n};\r\n\r\n"]],"start1":11441,"start2":11441,"length1":24,"length2":65}]],"length":20994,"saved":false}
{"ts":1350512894449,"patch":[[{"diffs":[[0,"ners = 0"],[1,";"],[0,"\r\n    va"]],"start1":11464,"start2":11464,"length1":16,"length2":17}]],"length":20995,"saved":false}
{"ts":1350512947640,"patch":[[{"diffs":[[0,"= 0;\r\n    \r\n"],[1,"    for (var index = 0; index < 24; index ++)\r\n    {\r\n        \r\n    }\r\n    \r\n"],[0,"};\r\n\r\n/**\r\n "]],"start1":11489,"start2":11489,"length1":24,"length2":101}]],"length":21072,"saved":false}
{"ts":1350512959139,"patch":[[{"diffs":[[0,"ex < 24; index +"],[-1,"+"],[1,"=3"],[0,")\r\n    {\r\n      "]],"start1":11528,"start2":11528,"length1":33,"length2":34}]],"length":21073,"saved":false}
{"ts":1350513060562,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"(state.cubies[index] & 7) ===  (state.cubies[index + 1] & 7)"],[0,"\r\n    }\r\n    \r\n}"]],"start1":11548,"start2":11548,"length1":32,"length2":92}]],"length":21133,"saved":false}
{"ts":1350513069795,"patch":[[{"diffs":[[0," 1] & 7)"],[1," ||\r\n        "],[0,"\r\n    }\r"]],"start1":11616,"start2":11616,"length1":16,"length2":29}]],"length":21146,"saved":false}
{"ts":1350513094201,"patch":[[{"diffs":[[0," 7) ||\r\n"],[1,"        (state.cubies[index] & 7) ===  (state.cubies[index + 2] & 7)\r\n"],[0,"        "]],"start1":11621,"start2":11621,"length1":16,"length2":86}]],"length":21216,"saved":false}
{"ts":1350513097924,"patch":[[{"diffs":[[0," 2] & 7)"],[1," ||\r\n        (state.cubies[index] & 7) ===  (state.cubies[index + 1] & 7)"],[0,"\r\n      "]],"start1":11689,"start2":11689,"length1":16,"length2":89}]],"length":21289,"saved":false}
{"ts":1350513104871,"patch":[[{"diffs":[[0,"[index] & 7) ==="],[-1," "],[0," (state.cubies[i"]],"start1":11577,"start2":11577,"length1":33,"length2":32},{"diffs":[[0,"[index] & 7) ==="],[-1," "],[0," (state.cubies[i"]],"start1":11649,"start2":11649,"length1":33,"length2":32},{"diffs":[[0,"& 7) ==="],[-1," "],[0," (state."]],"start1":11729,"start2":11729,"length1":17,"length2":16}]],"length":21286,"saved":false}
{"ts":1350513141564,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"if("],[0,"(state.cubies[in"]],"start1":11548,"start2":11548,"length1":32,"length2":35},{"diffs":[[0,"ate.cubies[index"],[1," + 1"],[0,"] & 7) === (stat"]],"start1":11714,"start2":11714,"length1":32,"length2":36},{"diffs":[[0,"index + "],[-1,"1"],[1,"2"],[0,"] & 7)"],[1,")"],[0,"\r\n      "]],"start1":11759,"start2":11759,"length1":23,"length2":24}]],"length":21294,"saved":false}
{"ts":1350513149966,"patch":[[{"diffs":[[0," & 7))\r\n"],[1,"        {\r\n            return false;   \r\n        }\r\n"],[0,"        "]],"start1":11769,"start2":11769,"length1":16,"length2":68}]],"length":21346,"saved":false}
{"ts":1350513186007,"patch":[[{"diffs":[[0,"     }\r\n    "],[1,"}\r\n"],[0,"    \r\n"],[1,"    for (index = 24; index < 48; index +=2)\r\n    {\r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7) ||\r\n        (state.cubies[index] & 7) === (state.cubies[index + 2] & 7) ||\r\n        (state.cubies[index + 1] & 7) === (state.cubies[index + 2] & 7))\r\n        {\r\n            return false;   \r\n        }\r\n"],[0,"    }\r\n    \r"]],"start1":11821,"start2":11821,"length1":30,"length2":358}]],"length":21674,"saved":false}
{"ts":1350513190978,"patch":[[{"diffs":[[0," 7) "],[-1,"||\r\n        (state.cubies[index] & 7) === (state.cubies[index + 2] & 7) ||\r\n        (state.cubies[index + 1] & 7) === (state.cubies[index + 2] & 7)"],[0,")\r\n "]],"start1":11961,"start2":11961,"length1":155,"length2":8}]],"length":21527,"saved":false}
{"ts":1350513209774,"patch":[[{"diffs":[[0,"[4][7],4);\r\n"],[1,"    RubixState.verifyState(state)"],[0,"\r\n    return"]],"start1":11369,"start2":11369,"length1":24,"length2":57},{"diffs":[[0," 1] & 7)"],[-1," "],[0,")\r\n     "]],"start1":11989,"start2":11989,"length1":17,"length2":16}]],"length":21559,"saved":false}
{"ts":1350513211667,"patch":[[{"diffs":[[0,"e(state)"],[1,";"],[0,"\r\n    re"]],"start1":11406,"start2":11406,"length1":16,"length2":17}]],"length":21560,"saved":false}
{"ts":1350513234330,"patch":[[{"diffs":[[0,"[4][7],4);\r\n"],[1,"    \r\n"],[0,"    RubixSta"]],"start1":11369,"start2":11369,"length1":24,"length2":30},{"diffs":[[0,"e(state)"],[-1,";"],[1,"?state:null"],[0,"\r\n    re"]],"start1":11412,"start2":11412,"length1":17,"length2":27}]],"length":21576,"saved":false}
{"ts":1350513236225,"patch":[[{"diffs":[[0,"ate:null"],[1,";"],[0,"\r\n    re"]],"start1":11423,"start2":11423,"length1":16,"length2":17}]],"length":21577,"saved":false}
{"ts":1350513242961,"patch":[[{"diffs":[[0,"ate)"],[-1,"?"],[1," ? "],[0,"state"],[-1,":"],[1," : "],[0,"null"]],"start1":11416,"start2":11416,"length1":15,"length2":19}]],"length":21581,"saved":false}
{"ts":1350513246982,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"return "],[0,"RubixState.v"]],"start1":11379,"start2":11379,"length1":24,"length2":31}]],"length":21588,"saved":false}
{"ts":1350513253209,"patch":[[{"diffs":[[0,"l;\r\n"],[-1,"    return state;\r\n"],[0,"};\r\n"]],"start1":11441,"start2":11441,"length1":27,"length2":8}]],"length":21569,"saved":false}
{"ts":1350513266206,"patch":[[{"diffs":[[0,"   }\r\n    \r\n"],[1,"    return true\r\n    \r\n"],[0,"};\r\n\r\n/**\r\n "]],"start1":12063,"start2":12063,"length1":24,"length2":47}]],"length":21592,"saved":false}
{"ts":1350513268070,"patch":[[{"diffs":[[0,"urn true"],[1,";"],[0,"\r\n    \r\n"]],"start1":12082,"start2":12082,"length1":16,"length2":17}]],"length":21593,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350514170394,"patch":[[{"diffs":[[0,"e;\r\n    \r\n};\r\n\r\n"],[1,"RubixState.findCornerPermutations = function()\r\n\r\n"],[0,"/**\r\n * Creates "]],"start1":12089,"start2":12089,"length1":32,"length2":82}]],"length":21643,"saved":false}
{"ts":1350514185048,"patch":[[{"diffs":[[0,"unction("],[1,"f1, f2, f3"],[0,")\r\n\r\n/**"]],"start1":12142,"start2":12142,"length1":16,"length2":26}]],"length":21653,"saved":false}
{"ts":1350514186956,"patch":[[{"diffs":[[0," f2, f3)"],[1,";"],[0,"\r\n\r\n/**\r"]],"start1":12153,"start2":12153,"length1":16,"length2":17}]],"length":21654,"saved":false}
{"ts":1350514212433,"patch":[[{"diffs":[[0,", f2, f3"],[1,", cubeFace1, cubeFace2, cubFace3"],[0,");\r\n\r\n/*"]],"start1":12152,"start2":12152,"length1":16,"length2":48}]],"length":21686,"saved":false}
{"ts":1350514585049,"patch":[[{"diffs":[[0,"ubFace3)"],[1,"\r\n{\r\n    \r\n}"],[0,";\r\n\r\n/**"]],"start1":12185,"start2":12185,"length1":16,"length2":28}]],"length":21698,"saved":false}
{"ts":1350514627429,"patch":[[{"diffs":[[0,",'O','W'];\r\n"],[1,"RubixState.goalState = RubixState.createWithGoalState();"],[0,"\r\n/**\r\n * De"]],"start1":1111,"start2":1111,"length1":24,"length2":80}]],"length":21754,"saved":false}
{"ts":1350514629360,"patch":[[{"diffs":[[0,",'W'];\r\n"],[1,"\r\n"],[0,"RubixSta"]],"start1":1115,"start2":1115,"length1":16,"length2":18},{"diffs":[[0,"ate();\r\n"],[1,"\r\n"],[0,"/**\r\n * "]],"start1":1175,"start2":1175,"length1":16,"length2":18}]],"length":21758,"saved":false}
{"ts":1350514801598,"patch":[[{"diffs":[[0," null;\r\n};\r\n"],[1,"/*"],[0,"\r\nRubixState"]],"start1":11497,"start2":11497,"length1":24,"length2":26},{"diffs":[[0," true;\r\n    \r\n};"],[1,"*/"],[0,"\r\n\r\nRubixState.f"]],"start1":12147,"start2":12147,"length1":32,"length2":34}]],"length":21762,"saved":false}
{"ts":1350514810757,"patch":[[{"diffs":[[0,"l;\r\n};\r\n"],[-1,"/*"],[0,"\r\nRubixS"]],"start1":11501,"start2":11501,"length1":18,"length2":16},{"diffs":[[0,"    \r\n};"],[-1,"*/"],[0,"\r\n\r\nRubi"]],"start1":12153,"start2":12153,"length1":18,"length2":16}]],"length":21758,"saved":false}
{"ts":1350514821119,"patch":[[{"diffs":[[0,"O','W'];\r\n\r\n"],[1,"/*"],[0,"RubixState.g"]],"start1":1113,"start2":1113,"length1":24,"length2":26},{"diffs":[[0,"State();"],[1,"*/"],[0,"\r\n\r\n/**\r"]],"start1":1175,"start2":1175,"length1":16,"length2":18}]],"length":21762,"saved":false}
{"ts":1350515144049,"patch":[[{"diffs":[[0," : null;\r\n};\r\n\r\n"],[1,"\r\n"],[0,"RubixState.verif"]],"start1":11499,"start2":11499,"length1":32,"length2":34},{"diffs":[[0,"tion(state)\r\n{\r\n"],[1,"    \r\n    \r\n    \r\n"],[0,"    var corners "]],"start1":11546,"start2":11546,"length1":32,"length2":50}]],"length":21782,"saved":false}
{"ts":1350515167667,"patch":[[{"diffs":[[0,"tate)\r\n{"],[-1,"\r\n    \r\n    \r\n "],[0,"   \r\n   "]],"start1":11552,"start2":11552,"length1":31,"length2":16}]],"length":21767,"saved":false}
{"ts":1350515178862,"patch":[[{"diffs":[[0,"ixState."],[-1,"verifyState"],[1,"parityCheck"],[0,"(state) "]],"start1":11465,"start2":11465,"length1":27,"length2":27},{"diffs":[[0,"l;\r\n};\r\n\r\n\r\n"],[1,"\r\n"],[0,"RubixState.v"]],"start1":11505,"start2":11505,"length1":24,"length2":26}]],"length":21769,"saved":false}
{"ts":1350515226309,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"[\r\n    [\r\n        [ ],\r\n        [ ]"],[0,"\r\n\r\nRubi"]],"start1":11507,"start2":11507,"length1":16,"length2":51}]],"length":21804,"saved":false}
{"ts":1350515254403,"patch":[[{"diffs":[[0,"\n\r\n["],[-1,"\r\n    [\r\n        [ ],\r\n        [ "],[1,"[[0],[1],[2"],[0,"]\r\n\r"]],"start1":11512,"start2":11512,"length1":41,"length2":19}]],"length":21782,"saved":false}
{"ts":1350515266393,"patch":[[{"diffs":[[0,",[1],[2]"],[1,"]]"],[0,"\r\n\r\nRubi"]],"start1":11520,"start2":11520,"length1":16,"length2":18}]],"length":21784,"saved":false}
{"ts":1350515278026,"patch":[[{"diffs":[[0,",[1],[2]"],[1,",[3],[4],[5]"],[0,"]]\r\n\r\nRu"]],"start1":11520,"start2":11520,"length1":16,"length2":28}]],"length":21796,"saved":false}
{"ts":1350515280325,"patch":[[{"diffs":[[0,"4],[5]]]"],[1,";"],[0,"\r\n\r\nRubi"]],"start1":11534,"start2":11534,"length1":16,"length2":17}]],"length":21797,"saved":false}
{"ts":1350515736734,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"[[[0],[1],[2],[3],[4],[5]]"],[1,"RubixState.cubieParityMap=\r\n[\r\n    \r\n    "],[0,"];\r\n"]],"start1":11511,"start2":11511,"length1":34,"length2":49}]],"length":21812,"saved":false}
{"ts":1350515738648,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    "],[0,"];\r\n\r\nRu"]],"start1":11544,"start2":11544,"length1":20,"length2":16}]],"length":21808,"saved":false}
{"ts":1350515753663,"patch":[[{"diffs":[[0,"p=\r\n"],[-1,"["],[1,"{"],[0,"\r\n    \r\n"],[-1,"]"],[1,"}"],[0,";\r\n\r"]],"start1":11539,"start2":11539,"length1":18,"length2":18}]],"length":21808,"saved":false}
{"ts":1350515762602,"patch":[[{"diffs":[[0,"tyMap=\r\n{\r\n "],[1,"3:{};"],[0,"   \r\n};\r\n\r\nR"]],"start1":11535,"start2":11535,"length1":24,"length2":29}]],"length":21813,"saved":false}
{"ts":1350515780724,"patch":[[{"diffs":[[0,"ap=\r\n{\r\n"],[1,"    //RYG\r\n   "],[0," 3:{};  "]],"start1":11538,"start2":11538,"length1":16,"length2":30}]],"length":21827,"saved":false}
{"ts":1350515786584,"patch":[[{"diffs":[[0,"    3:{}"],[-1,";"],[0,"   \r\n};\r"]],"start1":11557,"start2":11557,"length1":17,"length2":16}]],"length":21826,"saved":false}
{"ts":1350515813381,"patch":[[{"diffs":[[0,"    3:{}"],[-1,"   "],[1,",\r\n    //RYB\r\n    5:{},\r\n    //RWB\r\n    8:{}"],[0,"\r\n};\r\n\r\n"]],"start1":11557,"start2":11557,"length1":19,"length2":60}]],"length":21867,"saved":false}
{"ts":1350517997153,"patch":[[{"diffs":[[0,"    8:{}"],[1,",\r\n    6:{}"],[0,"\r\n};\r\n\r\n"]],"start1":11601,"start2":11601,"length1":16,"length2":27}]],"length":21878,"saved":false}
{"ts":1350518020108,"patch":[[{"diffs":[[0,"\n    8:{},\r\n"],[1,"    //RGW\r\n"],[0,"    6:{}\r\n};"]],"start1":11600,"start2":11600,"length1":24,"length2":35}]],"length":21889,"saved":false}
{"ts":1350518056143,"patch":[[{"diffs":[[0,"    6:{}"],[1,",\r\n   //OYG\r\n   7:{},"],[0,"\r\n};\r\n\r\n"]],"start1":11623,"start2":11623,"length1":16,"length2":37}]],"length":21910,"saved":false}
{"ts":1350518065281,"patch":[[{"diffs":[[0,"\n   "],[1," "],[0,"//OYG\r\n"],[1," "],[0,"   7"]],"start1":11633,"start2":11633,"length1":15,"length2":17}]],"length":21912,"saved":false}
{"ts":1350518093425,"patch":[[{"diffs":[[0," 7:{},\r\n"],[1,"    11:{},\r\n    10:{},\r\n    9:{}\r\n"],[0,"};\r\n\r\nRu"]],"start1":11648,"start2":11648,"length1":16,"length2":50}]],"length":21946,"saved":false}
{"ts":1350518150945,"patch":[[{"diffs":[[0,"\n    7:{},\r\n"],[1,"    //OWB\r\n"],[0,"    11:{},\r\n"]],"start1":11644,"start2":11644,"length1":24,"length2":35},{"diffs":[[0,"},\r\n    "],[1," "],[1,"//OYB\r\n    9:{},\r\n    //OWG\r\n    "],[0,"10:{},\r\n"]],"start1":11675,"start2":11675,"length1":16,"length2":50},{"diffs":[[0,"{},\r\n   "],[-1," 9:{}"],[0,"\r\n};\r\n\r\n"]],"start1":11720,"start2":11720,"length1":21,"length2":16}]],"length":21986,"saved":false}
{"ts":1350518153533,"patch":[[{"diffs":[[0,"   11:{}"],[-1,","],[0,"\r\n     /"]],"start1":11668,"start2":11668,"length1":17,"length2":16}]],"length":21985,"saved":false}
{"ts":1350518156999,"patch":[[{"diffs":[[0,"},\r\n"],[-1,"    //OWB\r\n    11:{}\r\n"],[0,"    "]],"start1":11652,"start2":11652,"length1":30,"length2":8},{"diffs":[[0,"10:{},\r\n"],[1,"    //OWB\r\n    11:{}\r\n"],[0,"   \r\n};\r"]],"start1":11694,"start2":11694,"length1":16,"length2":38}]],"length":21985,"saved":false}
{"ts":1350518160299,"patch":[[{"diffs":[[0,"},\r\n    "],[-1," "],[0,"//OYB\r\n "]],"start1":11652,"start2":11652,"length1":17,"length2":16}]],"length":21984,"saved":false}
{"ts":1350518182099,"patch":[[{"diffs":[[0,"    "],[-1,"//RWB\r\n    8:{},"],[0,"\r\n  "]],"start1":11590,"start2":11590,"length1":24,"length2":8},{"diffs":[[0,"\n    7:{},\r\n"],[1,"    //RWB\r\n    8:{},\r\n"],[0,"    //OYB\r\n "]],"start1":11628,"start2":11628,"length1":24,"length2":46}]],"length":21990,"saved":false}
{"ts":1350518184530,"patch":[[{"diffs":[[0," 5:{},\r\n"],[-1,"    \r\n"],[0,"    //RG"]],"start1":11582,"start2":11582,"length1":22,"length2":16}]],"length":21984,"saved":false}
{"ts":1350518193568,"patch":[[{"diffs":[[0,"   11:{}"],[-1,"\r\n"],[0,"   \r\n};\r"]],"start1":11713,"start2":11713,"length1":18,"length2":16}]],"length":21982,"saved":false}
{"ts":1350518687000,"patch":[[{"diffs":[[0,"\r\n    3:"],[1,"function()"],[0,"{},\r\n   "]],"start1":11555,"start2":11555,"length1":16,"length2":26}]],"length":21992,"saved":false}
{"ts":1350518695361,"patch":[[{"diffs":[[0,"unction("],[1,"f1,f2,f3"],[0,"){},\r\n  "]],"start1":11564,"start2":11564,"length1":16,"length2":24}]],"length":22000,"saved":false}
{"ts":1350518717448,"patch":[[{"diffs":[[0,"\r\n    5:"],[1,"function(f1,f2,f3)"],[0,"{},\r\n   "]],"start1":11595,"start2":11595,"length1":16,"length2":34},{"diffs":[[0,"\r\n    6:"],[1,"function(f1,f2,f3)"],[0,"{},\r\n   "]],"start1":11635,"start2":11635,"length1":16,"length2":34},{"diffs":[[0,"\r\n    7:"],[1,"function(f1,f2,f3)"],[0,"{},\r\n   "]],"start1":11675,"start2":11675,"length1":16,"length2":34},{"diffs":[[0,"\r\n    8:"],[1,"function(f1,f2,f3)"],[0,"{},\r\n   "]],"start1":11715,"start2":11715,"length1":16,"length2":34},{"diffs":[[0,"\r\n    9:"],[1,"function(f1,f2,f3)"],[0,"{},\r\n   "]],"start1":11755,"start2":11755,"length1":16,"length2":34},{"diffs":[[0,"\n    10:"],[1,"function(f1,f2,f3)"],[0,"{},\r\n   "]],"start1":11796,"start2":11796,"length1":16,"length2":34},{"diffs":[[0,"\n    11:"],[1,"function(f1,f2,f3)"],[0,"{}   \r\n}"]],"start1":11837,"start2":11837,"length1":16,"length2":34}]],"length":22126,"saved":false}
{"ts":1350518759508,"patch":[[{"diffs":[[0,"3:function(f"],[-1,"1,f2,f3){"],[1,"aces){\r\n            \r\n    "],[0,"},\r\n    //RY"]],"start1":11561,"start2":11561,"length1":33,"length2":50}]],"length":22143,"saved":false}
{"ts":1350518787218,"patch":[[{"diffs":[[0,"aces){\r\n        "],[1,"for (var index in faces)"],[0,"    \r\n    },\r\n  "]],"start1":11573,"start2":11573,"length1":32,"length2":56}]],"length":22167,"saved":false}
{"ts":1350518793769,"patch":[[{"diffs":[[0,"n faces)"],[1,"\r\n"],[0,"    "],[1,"    {\r\n            \r\n        }"],[0,"\r\n    },"]],"start1":11605,"start2":11605,"length1":20,"length2":52}]],"length":22199,"saved":false}
{"ts":1350518804515,"patch":[[{"diffs":[[0," {\r\n            "],[1,"faces[index]    "],[0,"\r\n        }\r\n   "]],"start1":11622,"start2":11622,"length1":32,"length2":48}]],"length":22215,"saved":false}
{"ts":1350518818423,"patch":[[{"diffs":[[0,"            "],[1,"switch("],[0,"faces[index]"]],"start1":11626,"start2":11626,"length1":24,"length2":31},{"diffs":[[0,"[index] "],[-1,"   "],[1,"& 7)"],[0,"\r\n      "]],"start1":11650,"start2":11650,"length1":19,"length2":20}]],"length":22223,"saved":false}
{"ts":1350518835146,"patch":[[{"diffs":[[0,"aces){\r\n"],[1,"        var numbers = 0;\r\n"],[0,"        "]],"start1":11573,"start2":11573,"length1":16,"length2":42}]],"length":22249,"saved":false}
{"ts":1350518841083,"patch":[[{"diffs":[[0,"ex] & 7)"],[1,";"],[0,"\r\n      "]],"start1":11680,"start2":11680,"length1":16,"length2":17}]],"length":22250,"saved":false}
{"ts":1350518846561,"patch":[[{"diffs":[[0,"ex] & 7)"],[-1,";"],[1,"\r\n            {\r\n                \r\n            }"],[0,"\r\n      "]],"start1":11680,"start2":11680,"length1":17,"length2":64}]],"length":22297,"saved":false}
{"ts":1350518863246,"patch":[[{"diffs":[[0,"                "],[1,"0:\r\n                    0\r\n                    break;"],[0,"\r\n            }\r"]],"start1":11705,"start2":11705,"length1":32,"length2":85}]],"length":22350,"saved":false}
{"ts":1350518878681,"patch":[[{"diffs":[[0,"        "],[-1,"0"],[1,"numbers = numbers << 2;"],[0,"\r\n      "]],"start1":11737,"start2":11737,"length1":17,"length2":39}]],"length":22372,"saved":false}
{"ts":1350518908348,"patch":[[{"diffs":[[0," : null;\r\n};\r\n\r\n"],[1,"function(faces){\r\n        var numbers = 0;\r\n        for (var index in faces)\r\n        {\r\n            switch(faces[index] & 7)\r\n            {\r\n                0:\r\n                    numbers = numbers << 2;\r\n                    break;\r\n                2:\r\n                    numbers\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n"],[0,"RubixState.cubie"]],"start1":11499,"start2":11499,"length1":32,"length2":369},{"diffs":[[0,"        break;\r\n"],[1,"                2:\r\n                    numbers\r\n                \r\n"],[0,"            }\r\n "]],"start1":12119,"start2":12119,"length1":32,"length2":99}]],"length":22776,"saved":false}
{"ts":1350518918375,"patch":[[{"diffs":[[0,"\n    }\r\n"],[1,"/*"],[0,"\r\nRubixS"]],"start1":11842,"start2":11842,"length1":16,"length2":18},{"diffs":[[0,"f3){}   \r\n};"],[1,"*/"],[0,"\r\n\r\nRubixSta"]],"start1":12512,"start2":12512,"length1":24,"length2":26}]],"length":22780,"saved":false}
{"ts":1350518939161,"patch":[[{"diffs":[[0,"}\r\n    }"],[1,";"],[0,"\r\n/*\r\nRu"]],"start1":11840,"start2":11840,"length1":16,"length2":17}]],"length":22781,"saved":false}
{"ts":1350519050209,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"/*\r\n"],[0,"function"]],"start1":11507,"start2":11507,"length1":16,"length2":20},{"diffs":[[0,"    };\r\n"],[-1,"/*"],[0,"\r\nRubixS"]],"start1":11847,"start2":11847,"length1":18,"length2":16}]],"length":22783,"saved":false}
{"ts":1350519076996,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"\r\n\r\n"],[0,"/*\r\nfunc"]],"start1":11507,"start2":11507,"length1":16,"length2":20}]],"length":22787,"saved":false}
{"ts":1350519438679,"patch":[[{"diffs":[[0,"er(48));\r\n\r\n"],[1,"[0,2,1,0,1,2,0,1,2,0,2,1,1,0,2,2,0,1,1,0,2,1.2,0]\r\n"],[0,"    /*\r\n    "]],"start1":7812,"start2":7812,"length1":24,"length2":75}]],"length":22838,"saved":false}
{"ts":1350519444223,"patch":[[{"diffs":[[0,"1.2,0]\r\n"],[1,"[]\r\n"],[0,"    /*\r\n"]],"start1":7867,"start2":7867,"length1":16,"length2":20}]],"length":22842,"saved":false}
{"ts":1350519691279,"patch":[[{"diffs":[[0,".2,0]\r\n["],[1,"1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0 "],[0,"]\r\n    /"]],"start1":7868,"start2":7868,"length1":16,"length2":75}]],"length":22901,"saved":false}
{"ts":1350519695234,"patch":[[{"diffs":[[0,",1,0,2,1"],[-1,"."],[1,","],[0,"2,0]\r\n[1"]],"start1":7860,"start2":7860,"length1":17,"length2":17},{"diffs":[[0,"0,1, 1,0"],[-1," "],[0,"]\r\n    /"]],"start1":7926,"start2":7926,"length1":17,"length2":16}]],"length":22900,"saved":false}
{"ts":1350519715184,"patch":[[{"diffs":[[0,"2,1,"],[1," "],[0,"0,1,2,"],[1," "],[0,"0,1,2,"],[1," "],[0,"0,2,1,"],[1," "],[0,"1,0,2,"],[1," "],[0,"2,0,1,"],[1," "],[0,"1,0,2,"],[1," "],[0,"1,2,0"],[-1,"]\r\n["],[1,", "],[0,"1,0,"]],"start1":7827,"start2":7827,"length1":53,"length2":58}]],"length":22905,"saved":false}
{"ts":1350519717902,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"[0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0]\r\n"],[0,"    "]],"start1":7820,"start2":7820,"length1":126,"length2":8}]],"length":22787,"saved":false}
{"ts":1350519739815,"patch":[[{"diffs":[[0,"et = [];\r\n\r\n"],[1,"RubixState.permutationReference = [0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0];\r\n\r\n"],[0,"/**\r\n * The "]],"start1":759,"start2":759,"length1":24,"length2":179}]],"length":22942,"saved":false}
{"ts":1350519781113,"patch":[[{"diffs":[[0,"var "],[-1,"corners = 0;\r\n    var sides = 0"],[1,"faceArray = new Array(6)"],[0,";\r\n "]],"start1":12744,"start2":12744,"length1":39,"length2":32}]],"length":22935,"saved":false}
{"ts":1350519829748,"patch":[[{"diffs":[[0,"ex +=3)\r\n    {\r\n"],[1,"        RubixState.permutationReference[index]\r\n        \r\n"],[0,"        if((stat"]],"start1":12820,"start2":12820,"length1":32,"length2":90}]],"length":22993,"saved":false}
{"ts":1350519831709,"patch":[[{"diffs":[[0,"e[index]"],[1,";"],[0,"\r\n      "]],"start1":12874,"start2":12874,"length1":16,"length2":17}]],"length":22994,"saved":false}
{"ts":1350519907101,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.permutationReference = [0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0];\r\n"],[1,"c"],[0,"\r\n/*"]],"start1":767,"start2":767,"length1":161,"length2":9}]],"length":22842,"saved":false}
{"ts":1350519918960,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"c\r\n"],[0,"/**\r"]],"start1":767,"start2":767,"length1":11,"length2":8}]],"length":22839,"saved":false}
{"ts":1350519923698,"patch":[[{"diffs":[[0," \r\n};*/\r"],[1,"\n[0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0]\r"],[0,"\n\r\nRubix"]],"start1":12526,"start2":12526,"length1":16,"length2":134}]],"length":22957,"saved":false}
{"ts":1350519927434,"patch":[[{"diffs":[[0,"et = [];\r\n\r\n"],[1,"\r\n"],[0,"/**\r\n * The "]],"start1":759,"start2":759,"length1":24,"length2":26},{"diffs":[[0,";*/\r"],[-1,"\n[0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0]\r"],[0,"\n\r\nR"]],"start1":12532,"start2":12532,"length1":126,"length2":8}]],"length":22841,"saved":false}
{"ts":1350519936344,"patch":[[{"diffs":[[0,"  \r\n};*/\r\n\r\n"],[1,"RubixState.permutationReference = [0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0];\r\n\r\n"],[0,"RubixState.v"]],"start1":12527,"start2":12527,"length1":24,"length2":179}]],"length":22996,"saved":false}
{"ts":1350519985976,"patch":[[{"diffs":[[0,"  3:"],[-1,"function(faces){\r\n        var numbers = 0;\r\n        for (var index in faces)\r\n        {\r\n            switch(faces[index] & 7)\r\n            {\r\n                0:\r\n                    numbers = numbers << 2;\r\n                    break;\r\n                2:\r\n                    numbers\r\n                \r\n            }\r\n        }\r\n    },\r\n    //RYB\r\n    5:function(f1,f2,f3){},\r\n    //RGW\r\n    6:function(f1,f2,f3){}"],[1,",\r\n    //RYB\r\n    5:,\r\n    //RGW\r\n    6:"],[0,",\r\n "]],"start1":11907,"start2":11907,"length1":421,"length2":48}]],"length":22623,"saved":false}
{"ts":1350519989923,"patch":[[{"diffs":[[0,"\r\n    7:"],[-1,"function(f1,f2,f3){}"],[0,",\r\n    /"]],"start1":11963,"start2":11963,"length1":36,"length2":16}]],"length":22603,"saved":false}
{"ts":1350519995227,"patch":[[{"diffs":[[0,"\r\n    8:"],[-1,"function(f1,f2,f3){}"],[0,",\r\n    /"]],"start1":11983,"start2":11983,"length1":36,"length2":16}]],"length":22583,"saved":false}
{"ts":1350520009053,"patch":[[{"diffs":[[0,"\r\n    9:"],[-1,"function(f1,f2,f3){}"],[0,",\r\n    /"]],"start1":12003,"start2":12003,"length1":36,"length2":16},{"diffs":[[0,"\n    10:"],[-1,"function(f1,f2,f3){}"],[0,",\r\n    /"]],"start1":12024,"start2":12024,"length1":36,"length2":16},{"diffs":[[0," 11:"],[-1,"function(f1,f2,f3){}"],[0,"   \r"]],"start1":12049,"start2":12049,"length1":28,"length2":8}]],"length":22523,"saved":false}
{"ts":1350520067415,"patch":[[{"diffs":[[0,"erence[index];\r\n"],[1,"        switch(){    \r\n         //RYG\r\n            3:,\r\n            //RYB\r\n            5:,\r\n            //RGW\r\n            6:,\r\n            //OYG\r\n            7:,\r\n            //RWB\r\n            8:,\r\n            //OYB\r\n            9:,\r\n            //OWG\r\n            10:,\r\n            //OWB\r\n            11:   \r\n            \r\n            default:\r\n                console.log(\"An invalid cubie has been discovered!\");\r\n        }\r\n"],[0,"        \r\n      "]],"start1":12398,"start2":12398,"length1":32,"length2":462}]],"length":22953,"saved":false}
{"ts":1350520078765,"patch":[[{"diffs":[[0," \r\n         "],[1,"   "],[0,"//RYG\r\n     "]],"start1":12434,"start2":12434,"length1":24,"length2":27}]],"length":22956,"saved":false}
{"ts":1350520089722,"patch":[[{"diffs":[[0," switch("],[1,"(state.cubies[index] & 7)"],[0,"){    \r\n"]],"start1":12421,"start2":12421,"length1":16,"length2":41}]],"length":22981,"saved":false}
{"ts":1350520092512,"patch":[[{"diffs":[[0,"ex] & 7)"],[1," + "],[0,"){    \r\n"]],"start1":12446,"start2":12446,"length1":16,"length2":19}]],"length":22984,"saved":false}
{"ts":1350520105041,"patch":[[{"diffs":[[0," & 7) + "],[1,"(state.cubies[index + 1] & 7)"],[0,"){    \r\n"]],"start1":12449,"start2":12449,"length1":16,"length2":45}]],"length":23013,"saved":false}
{"ts":1350520115346,"patch":[[{"diffs":[[0,"index + 1] &"],[1," 7) + (state.cubies[index + 1] &"],[0," 7)){    \r\n "]],"start1":12471,"start2":12471,"length1":24,"length2":56}]],"length":23045,"saved":false}
{"ts":1350520136738,"patch":[[{"diffs":[[0,"s[index] & 7) + "],[1,"\r\n            "],[0,"(state.cubies[in"]],"start1":12441,"start2":12441,"length1":32,"length2":46},{"diffs":[[0," & 7) + "],[1,"\r\n            "],[0,"(state.c"]],"start1":12495,"start2":12495,"length1":16,"length2":30}]],"length":23073,"saved":false}
{"ts":1350520153874,"patch":[[{"diffs":[[0,"          3:"],[-1,","],[0,"\r\n"],[1,""],[0,"            "]],"start1":12575,"start2":12575,"length1":27,"length2":26},{"diffs":[[0,"          5:"],[-1,","],[0,"\r\n          "]],"start1":12610,"start2":12610,"length1":25,"length2":24},{"diffs":[[0,"          6:"],[-1,","],[0,"\r\n          "]],"start1":12645,"start2":12645,"length1":25,"length2":24},{"diffs":[[0,"          7:"],[-1,","],[0,"\r\n          "]],"start1":12680,"start2":12680,"length1":25,"length2":24},{"diffs":[[0,"          8:"],[-1,","],[0,"\r\n          "]],"start1":12715,"start2":12715,"length1":25,"length2":24},{"diffs":[[0,"          9:"],[-1,","],[0,"\r\n          "]],"start1":12750,"start2":12750,"length1":25,"length2":24},{"diffs":[[0,"     //OWG\r\n"],[1,""],[0,"            "]],"start1":12771,"start2":12771,"length1":24,"length2":24},{"diffs":[[0,"         10:"],[-1,","],[0,"\r\n          "]],"start1":12786,"start2":12786,"length1":25,"length2":24}]],"length":23066,"saved":false}
{"ts":1350520160555,"patch":[[{"diffs":[[0,"        "],[1,"case "],[0,"3:\r\n    "]],"start1":12577,"start2":12577,"length1":16,"length2":21}]],"length":23071,"saved":false}
{"ts":1350520163119,"patch":[[{"diffs":[[0,"        "],[1,"case "],[0,"5:\r\n    "]],"start1":12617,"start2":12617,"length1":16,"length2":21}]],"length":23076,"saved":false}
{"ts":1350520165289,"patch":[[{"diffs":[[0,"        "],[1,"case "],[0,"6:\r\n    "]],"start1":12657,"start2":12657,"length1":16,"length2":21}]],"length":23081,"saved":false}
{"ts":1350520167674,"patch":[[{"diffs":[[0,"        "],[1,"case "],[0,"7:\r\n    "]],"start1":12697,"start2":12697,"length1":16,"length2":21}]],"length":23086,"saved":false}
{"ts":1350520170576,"patch":[[{"diffs":[[0,"        "],[1,"case "],[0,"8:\r\n    "]],"start1":12737,"start2":12737,"length1":16,"length2":21}]],"length":23091,"saved":false}
{"ts":1350520178758,"patch":[[{"diffs":[[0,"        "],[1,"case "],[0,"9:\r\n    "]],"start1":12777,"start2":12777,"length1":16,"length2":21},{"diffs":[[0,"        "],[1,"case "],[0,"10:\r\n   "]],"start1":12817,"start2":12817,"length1":16,"length2":21},{"diffs":[[0,"            "],[1,"case "],[0,"11:   \r\n    "]],"start1":12854,"start2":12854,"length1":24,"length2":29}]],"length":23106,"saved":false}
{"ts":1350520189803,"patch":[[{"diffs":[[0,"covered!"],[1," Bad corner combination"],[0,"\");\r\n   "]],"start1":12973,"start2":12973,"length1":16,"length2":39}]],"length":23129,"saved":false}
{"ts":1350520205384,"patch":[[{"diffs":[[0,"bination"],[1,"!"],[0,"\");\r\n   "]],"start1":12996,"start2":12996,"length1":16,"length2":17}]],"length":23130,"saved":false}
{"ts":1350520238633,"patch":[[{"diffs":[[0,"ination!"],[-1,"\""],[1," For corner:\" index / 3"],[0,");\r\n    "]],"start1":12997,"start2":12997,"length1":17,"length2":39}]],"length":23152,"saved":false}
{"ts":1350520242072,"patch":[[{"diffs":[[0,"corner:\""],[1,"+ "],[0," index /"]],"start1":13010,"start2":13010,"length1":16,"length2":18}]],"length":23154,"saved":false}
{"ts":1350520247768,"patch":[[{"diffs":[[0," corner "],[1,"\"+\r\n                \""],[0,"combinat"]],"start1":12985,"start2":12985,"length1":16,"length2":37}]],"length":23175,"saved":false}
{"ts":1350520259989,"patch":[[{"diffs":[[0,"corner \""],[1," "],[0,"+\r\n     "]],"start1":12986,"start2":12986,"length1":16,"length2":17}]],"length":23176,"saved":false}
{"ts":1350520267482,"patch":[[{"diffs":[[0,"ndex / 3);\r\n"],[1,"                return false;\r\n"],[0,"        }\r\n "]],"start1":13044,"start2":13044,"length1":24,"length2":55}]],"length":23207,"saved":false}
{"ts":1350520272111,"patch":[[{"diffs":[[0,"ase 11:   \r\n"],[1,"                break;\r\n"],[0,"            "]],"start1":12867,"start2":12867,"length1":24,"length2":48}]],"length":23231,"saved":false}
{"ts":1350520286048,"patch":[[{"diffs":[[0,"ase 3:\r\n"],[1,"                break;\r\n"],[0,"        "]],"start1":12586,"start2":12586,"length1":16,"length2":40},{"diffs":[[0,"ase 5:\r\n"],[1,"                break;\r\n"],[0,"        "]],"start1":12650,"start2":12650,"length1":16,"length2":40},{"diffs":[[0,"ase 6:\r\n"],[1,"                break;\r\n"],[0,"        "]],"start1":12714,"start2":12714,"length1":16,"length2":40},{"diffs":[[0,"ase 7:\r\n"],[1,"                break;\r\n"],[0,"        "]],"start1":12778,"start2":12778,"length1":16,"length2":40},{"diffs":[[0,"ase 8:\r\n"],[1,"                break;\r\n"],[0,"        "]],"start1":12842,"start2":12842,"length1":16,"length2":40},{"diffs":[[0,"ase 9:\r\n"],[1,"                break;\r\n"],[0,"        "]],"start1":12906,"start2":12906,"length1":16,"length2":40},{"diffs":[[0,"  case 10:\r\n"],[1,"                break;\r\n"],[0,"            "]],"start1":12967,"start2":12967,"length1":24,"length2":48}]],"length":23399,"saved":false}
{"ts":1350520339581,"patch":[[{"diffs":[[0,"ase 3:\r\n"],[1,"                RubixState.updateFaceCheck([(state.cubies[index] & 7)\r\n"],[0,"        "]],"start1":12586,"start2":12586,"length1":16,"length2":87}]],"length":23470,"saved":false}
{"ts":1350520353583,"patch":[[{"diffs":[[0,"rray(6);\r\n    \r\n"],[1,"    updateFaceCheck = function()\r\n    {\r\n        \r\n    }\r\n    \r\n"],[0,"    for (var ind"]],"start1":12294,"start2":12294,"length1":32,"length2":96}]],"length":23534,"saved":false}
{"ts":1350520358010,"patch":[[{"diffs":[[0,"  \r\n    "],[1,"var "],[0,"updateFa"]],"start1":12306,"start2":12306,"length1":16,"length2":20}]],"length":23538,"saved":false}
{"ts":1350520374131,"patch":[[{"diffs":[[0,"e.cubies[index +"],[-1," "],[1,"2"],[0,"1] & 7)){    \r\n "]],"start1":12590,"start2":12590,"length1":33,"length2":33},{"diffs":[[0,"bies[index] & 7)"],[1,", "],[0,"\r\n              "]],"start1":12715,"start2":12715,"length1":32,"length2":34}]],"length":23540,"saved":false}
{"ts":1350520376323,"patch":[[{"diffs":[[0,"[index +"],[1," "],[0,"2"],[-1,"1"],[0,"] & 7)){"]],"start1":12598,"start2":12598,"length1":18,"length2":18}]],"length":23540,"saved":false}
{"ts":1350520385537,"patch":[[{"diffs":[[0,"] & 7), "],[1,"(state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)"],[0,"\r\n      "]],"start1":12725,"start2":12725,"length1":16,"length2":76}]],"length":23600,"saved":false}
{"ts":1350520388724,"patch":[[{"diffs":[[0,"ex + 2] & 7)"],[1,")"],[0,"\r\n          "]],"start1":12781,"start2":12781,"length1":24,"length2":25}]],"length":23601,"saved":false}
{"ts":1350520391396,"patch":[[{"diffs":[[0,"[index + 2] & 7)"],[-1,")"],[1,"]"],[0,"\r\n              "]],"start1":12777,"start2":12777,"length1":33,"length2":33}]],"length":23601,"saved":false}
{"ts":1350520427903,"patch":[[{"diffs":[[0,"2] & 7)]"],[1,",[0,2,1],[0,2,1]"],[0,"\r\n      "]],"start1":12786,"start2":12786,"length1":16,"length2":32}]],"length":23617,"saved":false}
{"ts":1350520429984,"patch":[[{"diffs":[[0,",[0,2,1]"],[1,");"],[0,"\r\n      "]],"start1":12802,"start2":12802,"length1":16,"length2":18}]],"length":23619,"saved":false}
{"ts":1350520433865,"patch":[[{"diffs":[[0,"2] & 7)]"],[1,"\r\n                "],[0,",[0,2,1]"]],"start1":12786,"start2":12786,"length1":16,"length2":34}]],"length":23637,"saved":false}
{"ts":1350520438147,"patch":[[{"diffs":[[0,"2] & 7)]"],[1,","],[0,"\r\n      "]],"start1":12786,"start2":12786,"length1":16,"length2":17},{"diffs":[[0,"        "],[-1,","],[0,"[0,2,1],"]],"start1":12805,"start2":12805,"length1":17,"length2":16}]],"length":23637,"saved":false}
{"ts":1350520474571,"patch":[[{"diffs":[[0,"unction("],[1,"currentCubie, baseCubie, faceValue"],[0,")\r\n    {"]],"start1":12337,"start2":12337,"length1":16,"length2":50}]],"length":23671,"saved":false}
{"ts":1350520486415,"patch":[[{"diffs":[[0,"ie, base"],[-1,"Cubie"],[1,"Face_Color"],[0,", faceVa"]],"start1":12355,"start2":12355,"length1":21,"length2":26}]],"length":23676,"saved":false}
{"ts":1350520500060,"patch":[[{"diffs":[[0,"    "],[-1,"break;\r\n            //RGW\r\n            case 6:\r\n                break;\r\n            //OYG\r\n            case 7:\r\n                break;\r\n            //RWB\r\n            case 8:"],[1,"RubixState.updateFaceCheck([(state.cubies[index] & 7), (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                [0,2,1],[0,2,1]);\r\n                break;\r\n            //RGW\r\n            case 6:\r\n                RubixState.updateFaceCheck([(state.cubies[index] & 7), (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                [0,2,1],[0,2,1]);\r\n                break;\r\n            //OYG\r\n            case 7:\r\n                RubixState.updateFaceCheck([(state.cubies[index] & 7), (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                [0,2,1],[0,2,1]);\r\n                break;\r\n            //RWB\r\n            case 8:\r\n                RubixState.updateFaceCheck([(state.cubies[index] & 7), (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                [0,2,1],[0,2,1]);"],[0,"\r\n  "]],"start1":12947,"start2":12947,"length1":182,"length2":862}]],"length":24356,"saved":false}
{"ts":1350520541225,"patch":[[{"diffs":[[0," \r\n    }\r\n    \r\n"],[1,"     /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    \r\n"],[0,"    for (var ind"]],"start1":12401,"start2":12401,"length1":32,"length2":361}]],"length":24685,"saved":false}
{"ts":1350520543978,"patch":[[{"diffs":[[0,"\n        \r\n    }"],[1,";"],[0,"\r\n    \r\n     /*\r"]],"start1":12393,"start2":12393,"length1":32,"length2":33}]],"length":24686,"saved":false}
{"ts":1350520624709,"patch":[[{"diffs":[[0,"            "],[-1,"[0,2,1],"],[0,"[0,2,1]);\r\n "]],"start1":13170,"start2":13170,"length1":32,"length2":24},{"diffs":[[0,"         [0,"],[-1,"2,1],[0,2,1"],[1,"3,2"],[0,"]);\r\n       "]],"start1":13399,"start2":13399,"length1":35,"length2":27}]],"length":24670,"saved":false}
{"ts":1350520632733,"patch":[[{"diffs":[[0,"ie, "],[-1,"baseFace_Color, faceValu"],[1,"fac"],[0,"e)\r\n"]],"start1":12355,"start2":12355,"length1":32,"length2":11}]],"length":24649,"saved":false}
{"ts":1350520636810,"patch":[[{"diffs":[[0,"ie, face"],[1,"Color"],[0,")\r\n    {"]],"start1":12355,"start2":12355,"length1":16,"length2":21}]],"length":24654,"saved":false}
{"ts":1350520644970,"patch":[[{"diffs":[[0,"            "],[-1,"[0,2,1],"],[0,"[0,2,1]);\r\n "]],"start1":13606,"start2":13606,"length1":32,"length2":24}]],"length":24646,"saved":false}
{"ts":1350520705586,"patch":[[{"diffs":[[0,"             [0,"],[-1,"2,1"],[1,"1,5"],[0,"]);\r\n           "]],"start1":13605,"start2":13605,"length1":35,"length2":35}]],"length":24646,"saved":false}
{"ts":1350520716446,"patch":[[{"diffs":[[0,"es[index] & 7), "],[1,"\r\n                "],[0,"(state.cubies[in"]],"start1":13522,"start2":13522,"length1":32,"length2":50}]],"length":24664,"saved":false}
{"ts":1350520727204,"patch":[[{"diffs":[[0,"es[index] & 7), "],[1,"\r\n                "],[0,"(state.cubies[in"]],"start1":13070,"start2":13070,"length1":32,"length2":50},{"diffs":[[0,"es[index] & 7), "],[1,"\r\n                "],[0,"(state.cubies[in"]],"start1":13314,"start2":13314,"length1":32,"length2":50}]],"length":24700,"saved":false}
{"ts":1350520752437,"patch":[[{"diffs":[[0,"es[index] & 7), "],[1,"\r\n                "],[0,"(state.cubies[in"]],"start1":13802,"start2":13802,"length1":32,"length2":50},{"diffs":[[0,"           ["],[-1,"0,2,1],[0,2,1"],[1,"4,1,2"],[0,"]);\r\n       "]],"start1":13905,"start2":13905,"length1":37,"length2":29}]],"length":24710,"saved":false}
{"ts":1350520756271,"patch":[[{"diffs":[[0,"         //O"],[-1,"Y"],[0,"G"],[1,"Y"],[0,"\r\n          "]],"start1":13710,"start2":13710,"length1":26,"length2":26}]],"length":24710,"saved":false}
{"ts":1350520760625,"patch":[[{"diffs":[[0,"    "],[-1,"[0,2,1],"],[0,"[0,2"]],"start1":14138,"start2":14138,"length1":16,"length2":8}]],"length":24702,"saved":false}
{"ts":1350520781192,"patch":[[{"diffs":[[0,"             [0,"],[-1,"2,1"],[1,"5,3"],[0,"]);\r\n           "]],"start1":14129,"start2":14129,"length1":35,"length2":35}]],"length":24702,"saved":false}
{"ts":1350520790789,"patch":[[{"diffs":[[0,"es[index] & 7), "],[1,"\r\n                "],[0,"(state.cubies[in"]],"start1":14046,"start2":14046,"length1":32,"length2":50}]],"length":24720,"saved":false}
{"ts":1350520796005,"patch":[[{"diffs":[[0,"ase 9:\r\n"],[1,"                RubixState.updateFaceCheck([(state.cubies[index] & 7), \r\n                (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                [0,5,3]);\r\n"],[0,"        "]],"start1":14227,"start2":14227,"length1":16,"length2":196}]],"length":24900,"saved":false}
{"ts":1350520815086,"patch":[[{"diffs":[[0,"               ["],[-1,"0,5"],[1,"4,2"],[0,",3]);\r\n         "]],"start1":14389,"start2":14389,"length1":35,"length2":35}]],"length":24900,"saved":false}
{"ts":1350520819524,"patch":[[{"diffs":[[0,"  case 10:\r\n"],[1,"                RubixState.updateFaceCheck([(state.cubies[index] & 7), \r\n                (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                [0,5,3]);\r\n"],[0,"            "]],"start1":14468,"start2":14468,"length1":24,"length2":204}]],"length":25080,"saved":false}
{"ts":1350520844031,"patch":[[{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":14553,"start2":14553,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"[0,5,3"],[1,"    [4,5,1"],[0,"]);\r\n           "]],"start1":14637,"start2":14637,"length1":38,"length2":42}]],"length":25088,"saved":false}
{"ts":1350520861906,"patch":[[{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":13088,"start2":13088,"length1":32,"length2":36},{"diffs":[[0,"ex + 2] & 7)],\r\n"],[1,"    "],[0,"                "]],"start1":13156,"start2":13156,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":13340,"start2":13340,"length1":32,"length2":36},{"diffs":[[0,"ex + 2] & 7)],\r\n"],[1,"    "],[0,"                "]],"start1":13408,"start2":13408,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":13592,"start2":13592,"length1":32,"length2":36},{"diffs":[[0,"ex + 2] & 7)],\r\n"],[1,"    "],[0,"                "]],"start1":13660,"start2":13660,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":13844,"start2":13844,"length1":32,"length2":36},{"diffs":[[0,"ex + 2] & 7)],\r\n"],[1,"    "],[0,"                "]],"start1":13912,"start2":13912,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":14096,"start2":14096,"length1":32,"length2":36},{"diffs":[[0,"ex + 2] & 7)],\r\n"],[1,"    "],[0,"                "]],"start1":14164,"start2":14164,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"(state.cubies[in"]],"start1":14348,"start2":14348,"length1":32,"length2":36},{"diffs":[[0,"ex + 2] & 7)],\r\n"],[1,"    "],[0,"                "]],"start1":14416,"start2":14416,"length1":32,"length2":36}]],"length":25136,"saved":false}
{"ts":1350520868830,"patch":[[{"diffs":[[0,"break;\r\n"],[-1,"            \r\n"],[0,"        "]],"start1":14800,"start2":14800,"length1":30,"length2":16}]],"length":25122,"saved":false}
{"ts":1350520871351,"patch":[[{"diffs":[[0,"se 11:  "],[1,"\r\n               "],[0," \r\n     "]],"start1":14773,"start2":14773,"length1":16,"length2":33}]],"length":25139,"saved":false}
{"ts":1350520893549,"patch":[[{"diffs":[[0,"                "],[1,"RubixState.updateFaceCheck([(state.cubies[index] & 7), \r\n                    (state.cubies[index + 1] & 7), (state.cubies[index + 2] & 7)],\r\n                    [4,3,5]);"],[0,"\r\n              "]],"start1":14783,"start2":14783,"length1":32,"length2":202}]],"length":25309,"saved":false}
{"ts":1350520898578,"patch":[[{"diffs":[[0,"         //O"],[-1,"W"],[0,"B"],[1,"W"],[0,"\r\n          "]],"start1":14743,"start2":14743,"length1":26,"length2":26}]],"length":25309,"saved":false}
{"ts":1350520929019,"patch":[[{"diffs":[[0,"         //R"],[-1,"Y"],[0,"B"],[1,"Y"],[0,"\r\n          "]],"start1":13230,"start2":13230,"length1":26,"length2":26}]],"length":25309,"saved":false}
{"ts":1350520947729,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"     /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    \r\n"],[0,"    "]],"start1":12398,"start2":12398,"length1":337,"length2":8},{"diffs":[[0,"   }\r\n        \r\n"],[1,"        \r\n"],[0,"        if((stat"]],"start1":14865,"start2":14865,"length1":32,"length2":42}]],"length":24990,"saved":false}
{"ts":1350520959232,"patch":[[{"diffs":[[0,"var face"],[-1,"Array"],[1,"s"],[0," = new A"]],"start1":12273,"start2":12273,"length1":21,"length2":17},{"diffs":[[0," {\r\n        "],[1,"faces"],[0,"\r\n    };\r\n  "]],"start1":12370,"start2":12370,"length1":24,"length2":29}]],"length":24991,"saved":false}
{"ts":1350520973571,"patch":[[{"diffs":[[0,"   faces"],[1," += currentCubie[index]"],[0,"\r\n    };"]],"start1":12379,"start2":12379,"length1":16,"length2":39}]],"length":25014,"saved":false}
{"ts":1350520989973,"patch":[[{"diffs":[[0,"eColor)\r\n    {\r\n"],[1,"        for(var index in currentCubie)\r\n"],[0,"        faces +="]],"start1":12358,"start2":12358,"length1":32,"length2":72}]],"length":25054,"saved":false}
{"ts":1350521010772,"patch":[[{"diffs":[[0,"aces += "],[1,"faceColor.indexOf("],[0,"currentC"]],"start1":12423,"start2":12423,"length1":16,"length2":34},{"diffs":[[0,"e[index]"],[1,");"],[0,"\r\n    };"]],"start1":12460,"start2":12460,"length1":16,"length2":18}]],"length":25074,"saved":false}
{"ts":1350521031637,"patch":[[{"diffs":[[0,"Cubie)\r\n"],[1,"        {\r\n    "],[0,"        "]],"start1":12406,"start2":12406,"length1":16,"length2":31},{"diffs":[[0,"e[index]);\r\n"],[1,"        }\r\n"],[0,"    };\r\n    "]],"start1":12475,"start2":12475,"length1":24,"length2":35}]],"length":25100,"saved":false}
{"ts":1350521045961,"patch":[[{"diffs":[[0,"eColor)\r\n    {\r\n"],[1,"        var tempFace = 0;\r\n"],[0,"        for(var "]],"start1":12358,"start2":12358,"length1":32,"length2":59}]],"length":25127,"saved":false}
{"ts":1350521062697,"patch":[[{"diffs":[[0,"ie)\r\n        {\r\n"],[1,"            tempFace = faceColor.indexOf(currentCubie[index])\r\n"],[0,"            face"]],"start1":12436,"start2":12436,"length1":32,"length2":95}]],"length":25190,"saved":false}
{"ts":1350521065889,"patch":[[{"diffs":[[0,"ubie[index])"],[1,";"],[0,"\r\n          "]],"start1":12501,"start2":12501,"length1":24,"length2":25}]],"length":25191,"saved":false}
{"ts":1350521091022,"patch":[[{"diffs":[[0,"entCubie"],[1,"s"],[0,", faceCo"]],"start1":12345,"start2":12345,"length1":16,"length2":17},{"diffs":[[0,"s, faceColor"],[1,"s"],[0,")\r\n    {\r\n  "]],"start1":12353,"start2":12353,"length1":24,"length2":25},{"diffs":[[0,"entCubie"],[1,"s"],[0,")\r\n     "]],"start1":12432,"start2":12432,"length1":16,"length2":17},{"diffs":[[0,"Face = faceColor"],[1,"s"],[0,".indexOf(current"]],"start1":12471,"start2":12471,"length1":32,"length2":33},{"diffs":[[0,"xOf(currentCubie"],[1,"s"],[0,"[index]);\r\n     "]],"start1":12493,"start2":12493,"length1":32,"length2":33},{"diffs":[[0,"   faces"],[1,"[face"],[0," += face"]],"start1":12530,"start2":12530,"length1":16,"length2":21},{"diffs":[[0,"aceColor"],[1,"s"],[0,".indexOf"]],"start1":12548,"start2":12548,"length1":16,"length2":17},{"diffs":[[0,"entCubie"],[1,"s"],[0,"[index])"]],"start1":12570,"start2":12570,"length1":16,"length2":17}]],"length":25203,"saved":false}
{"ts":1350521119763,"patch":[[{"diffs":[[0,"    var "],[-1,"tempFace"],[1,"faceIndex"],[0," = 0;\r\n "]],"start1":12380,"start2":12380,"length1":24,"length2":25},{"diffs":[[0,"ces[face"],[1,"["],[0," += face"]],"start1":12536,"start2":12536,"length1":16,"length2":17}]],"length":25205,"saved":false}
{"ts":1350521122653,"patch":[[{"diffs":[[0,"    "],[-1,"tempFace"],[1,"faceIndex"],[0," = f"]],"start1":12464,"start2":12464,"length1":16,"length2":17}]],"length":25206,"saved":false}
{"ts":1350521144646,"patch":[[{"diffs":[[0,"es[face["],[1,"faceIndex]]"],[0," += face"]],"start1":12538,"start2":12538,"length1":16,"length2":27}]],"length":25217,"saved":false}
{"ts":1350521148570,"patch":[[{"diffs":[[0,"ces[face"],[1,"s"],[0,"[faceInd"]],"start1":12537,"start2":12537,"length1":16,"length2":17}]],"length":25218,"saved":false}
{"ts":1350521153804,"patch":[[{"diffs":[[0,"  faces[face"],[1,"Color"],[0,"s[faceIndex]"]],"start1":12533,"start2":12533,"length1":24,"length2":29}]],"length":25223,"saved":false}
{"ts":1350521161582,"patch":[[{"diffs":[[0,"face"],[-1,"Colors.indexOf(currentCubies[index])"],[1,"Index"],[0,";\r\n "]],"start1":12567,"start2":12567,"length1":44,"length2":13}]],"length":25192,"saved":false}
{"ts":1350521176614,"patch":[[{"diffs":[[0,"     }\r\n        "],[1,"console.log(faces);"],[0,"\r\n        \r\n    "]],"start1":15065,"start2":15065,"length1":32,"length2":51}]],"length":25211,"saved":false}
{"ts":1350521211836,"patch":[[{"diffs":[[0,"ate."],[-1,"parityCheck"],[1,"ververifyState()"],[0,"(sta"]],"start1":11471,"start2":11471,"length1":19,"length2":24}]],"length":25216,"saved":false}
{"ts":1350521215605,"patch":[[{"diffs":[[0,"ixState."],[-1,"ver"],[0,"verifySt"]],"start1":11467,"start2":11467,"length1":19,"length2":16}]],"length":25213,"saved":false}
{"ts":1350521255495,"patch":[[{"diffs":[[0,"ate("],[-1,")("],[0,"stat"]],"start1":11483,"start2":11483,"length1":10,"length2":8}]],"length":25211,"saved":false}
{"ts":1350521275523,"patch":[[{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":12892,"start2":12892,"length1":35,"length2":24}]],"length":25200,"saved":false}
{"ts":1350521288926,"patch":[[{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":13133,"start2":13133,"length1":35,"length2":24},{"diffs":[[0,"[index] & 7), \r\n"],[1,""],[0,"                "]],"start1":13175,"start2":13175,"length1":32,"length2":32},{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":13374,"start2":13374,"length1":35,"length2":24},{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":13615,"start2":13615,"length1":35,"length2":24},{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":13856,"start2":13856,"length1":35,"length2":24},{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":14097,"start2":14097,"length1":35,"length2":24},{"diffs":[[0,"            "],[-1,"RubixState."],[0,"updateFaceCh"]],"start1":14339,"start2":14339,"length1":35,"length2":24},{"diffs":[[0,"case 11:  \r\n"],[1,""],[0,"            "]],"start1":14567,"start2":14567,"length1":24,"length2":24},{"diffs":[[0,"        "],[-1,"RubixState."],[0,"updateFa"]],"start1":14587,"start2":14587,"length1":27,"length2":16}]],"length":25123,"saved":false}
{"ts":1350522811157,"patch":[[{"diffs":[[0,"s = "],[-1,"new Array(6)"],[1,"[0,0,0,0,0,0]"],[0,";\r\n "]],"start1":12281,"start2":12281,"length1":20,"length2":21},{"diffs":[[0,"og(faces);\r\n"],[1,"        faces = [0,0,0,0,0,0];\r\n"],[0,"        \r\n  "]],"start1":15003,"start2":15003,"length1":24,"length2":56}]],"length":25156,"saved":false}
{"ts":1350522843496,"patch":[[{"diffs":[[0,"ndex / 3"],[1," +\" \" +((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7) + \r\n            (state.cubies[index + 2] & 7))"],[0,");\r\n    "]],"start1":14932,"start2":14932,"length1":16,"length2":142}]],"length":25282,"saved":false}
{"ts":1350522920879,"patch":[[{"diffs":[[0,"  case 1"],[-1,"1"],[1,"2"],[0,":  \r\n   "]],"start1":14566,"start2":14566,"length1":17,"length2":17}]],"length":25282,"saved":false}
{"ts":1350522952116,"patch":[[{"diffs":[[0,");\r\n"],[-1,"        faces = [0,0,0,0,0,0];\r\n"],[0,"    "]],"start1":15137,"start2":15137,"length1":40,"length2":8},{"diffs":[[0,"\n    }\r\n    "],[1,"        faces = [0,0,0,0,0,0];\r\n"],[0,"\r\n    for (i"]],"start1":15423,"start2":15423,"length1":24,"length2":56}]],"length":25282,"saved":false}
{"ts":1350522981423,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        console.log(faces);\r\n"],[0,"    "]],"start1":15108,"start2":15108,"length1":37,"length2":8},{"diffs":[[0,"    }\r\n    }"],[1,"       \r\n    console.log(faces);\r\n"],[0,"\r\n          "]],"start1":15388,"start2":15388,"length1":24,"length2":58}]],"length":25287,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350523552475,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":14597,"start2":14597,"length1":33,"length2":32},{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":14616,"start2":14616,"length1":37,"length2":32}]],"length":25281,"saved":false}
{"ts":1350523559986,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":14640,"start2":14640,"length1":33,"length2":32},{"diffs":[[0,"s[index + 1]"],[-1," & 7)"],[0,", "],[-1,"("],[0,"state.cubies"]],"start1":14667,"start2":14667,"length1":32,"length2":26},{"diffs":[[0,"ubies[index + 2]"],[-1," & 7)"],[0,"],\r\n            "]],"start1":14688,"start2":14688,"length1":37,"length2":32}]],"length":25269,"saved":false}
{"ts":1350523577603,"patch":[[{"diffs":[[0,"s[index]"],[1," & 7"],[0,");\r\n    "]],"start1":12512,"start2":12512,"length1":16,"length2":20}]],"length":25273,"saved":false}
{"ts":1350523599601,"patch":[[{"diffs":[[0,"ces["],[-1,"faceColors[faceIndex]"],[0,"] +="]],"start1":12542,"start2":12542,"length1":29,"length2":8}]],"length":25252,"saved":false}
{"ts":1350523607475,"patch":[[{"diffs":[[0,"  faces["],[1,"currentCubies[index] >> 4"],[0,"] += fac"]],"start1":12538,"start2":12538,"length1":16,"length2":41}]],"length":25277,"saved":false}
{"ts":1350523617230,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":14410,"start2":14410,"length1":33,"length2":32},{"diffs":[[0,"ubies[index + 1]"],[-1," & 7)"],[0,", (state.cubies["]],"start1":14433,"start2":14433,"length1":37,"length2":32}]],"length":25271,"saved":false}
{"ts":1350523621770,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":14361,"start2":14361,"length1":33,"length2":32},{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":14380,"start2":14380,"length1":37,"length2":32}]],"length":25265,"saved":false}
{"ts":1350523626944,"patch":[[{"diffs":[[0,"ex + 1],"],[-1," ("],[0,"state.cu"]],"start1":14436,"start2":14436,"length1":18,"length2":16},{"diffs":[[0,"ubies[index + 2]"],[-1," & 7)"],[0,"],\r\n            "]],"start1":14451,"start2":14451,"length1":37,"length2":32}]],"length":25258,"saved":false}
{"ts":1350523634468,"patch":[[{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":14139,"start2":14139,"length1":37,"length2":32},{"diffs":[[0,"bies[index + 1] "],[-1,"& 7)"],[0,", (state.cubies["]],"start1":14188,"start2":14188,"length1":36,"length2":32}]],"length":25249,"saved":false}
{"ts":1350523636723,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":14119,"start2":14119,"length1":33,"length2":32}]],"length":25248,"saved":false}
{"ts":1350523638851,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":14162,"start2":14162,"length1":33,"length2":32}]],"length":25247,"saved":false}
{"ts":1350523640984,"patch":[[{"diffs":[[0,"ubies[index + 2]"],[-1," & 7)"],[0,"],\r\n            "]],"start1":14212,"start2":14212,"length1":37,"length2":32}]],"length":25242,"saved":false}
{"ts":1350523646249,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":13927,"start2":13927,"length1":33,"length2":32},{"diffs":[[0,"ubies[index + 1]"],[-1," & 7)"],[0,", (state.cubies["]],"start1":13950,"start2":13950,"length1":37,"length2":32}]],"length":25236,"saved":false}
{"ts":1350523651116,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":13878,"start2":13878,"length1":33,"length2":32},{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":13897,"start2":13897,"length1":37,"length2":32}]],"length":25230,"saved":false}
{"ts":1350523654772,"patch":[[{"diffs":[[0,"ubies[index + 2]"],[-1," & 7)"],[0,"],\r\n            "]],"start1":13970,"start2":13970,"length1":37,"length2":32}]],"length":25225,"saved":false}
{"ts":1350523659804,"patch":[[{"diffs":[[0,"x + 1], "],[-1,"("],[0,"state.cu"]],"start1":13954,"start2":13954,"length1":17,"length2":16},{"diffs":[[0," + 1] , "],[-1,"("],[0,"state.cu"]],"start1":14178,"start2":14178,"length1":17,"length2":16}]],"length":25223,"saved":false}
{"ts":1350523663281,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":13686,"start2":13686,"length1":33,"length2":32}]],"length":25222,"saved":false}
{"ts":1350523666062,"patch":[[{"diffs":[[0,"ubies[index + 1]"],[-1," & 7)"],[0,", (state.cubies["]],"start1":13709,"start2":13709,"length1":37,"length2":32}]],"length":25217,"saved":false}
{"ts":1350523668186,"patch":[[{"diffs":[[0,"s[index + 2] & 7"],[-1,")"],[0,"],\r\n            "]],"start1":13739,"start2":13739,"length1":33,"length2":32}]],"length":25216,"saved":false}
{"ts":1350523670363,"patch":[[{"diffs":[[0,"dex + 2]"],[-1," & 7"],[0,"],\r\n    "]],"start1":13743,"start2":13743,"length1":20,"length2":16}]],"length":25212,"saved":false}
{"ts":1350523672486,"patch":[[{"diffs":[[0,"x + 1], "],[-1,"("],[0,"state.cu"]],"start1":13719,"start2":13719,"length1":17,"length2":16}]],"length":25211,"saved":false}
{"ts":1350523674796,"patch":[[{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":13657,"start2":13657,"length1":37,"length2":32}]],"length":25206,"saved":false}
{"ts":1350523677110,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":13637,"start2":13637,"length1":33,"length2":32}]],"length":25205,"saved":false}
{"ts":1350523683467,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":13445,"start2":13445,"length1":33,"length2":32},{"diffs":[[0,"ubies[index + 1]"],[-1," & 7)"],[0,", (state.cubies["]],"start1":13468,"start2":13468,"length1":37,"length2":32}]],"length":25199,"saved":false}
{"ts":1350523685592,"patch":[[{"diffs":[[0,"x + 1], "],[-1,"("],[0,"state.cu"]],"start1":13478,"start2":13478,"length1":17,"length2":16}]],"length":25198,"saved":false}
{"ts":1350523687949,"patch":[[{"diffs":[[0,"ubies[index + 2]"],[-1," & 7)"],[0,"],\r\n            "]],"start1":13493,"start2":13493,"length1":37,"length2":32}]],"length":25193,"saved":false}
{"ts":1350523690041,"patch":[[{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":13416,"start2":13416,"length1":37,"length2":32}]],"length":25188,"saved":false}
{"ts":1350523692162,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":13396,"start2":13396,"length1":33,"length2":32}]],"length":25187,"saved":false}
{"ts":1350523696374,"patch":[[{"diffs":[[0,"pdateFaceCheck(["],[-1,"("],[0,"state.cubies[ind"]],"start1":13155,"start2":13155,"length1":33,"length2":32}]],"length":25186,"saved":false}
{"ts":1350523699909,"patch":[[{"diffs":[[0,"te.cubies[index]"],[-1," & 7)"],[0,", \r\n            "]],"start1":13174,"start2":13174,"length1":37,"length2":32}]],"length":25181,"saved":false}
{"ts":1350523703356,"patch":[[{"diffs":[[0,"index + 1] & 7),"],[-1," ("],[0,"state.cubies[ind"]],"start1":13228,"start2":13228,"length1":34,"length2":32},{"diffs":[[0,"ubies[index + 2]"],[-1," & 7)"],[0,"],\r\n            "]],"start1":13251,"start2":13251,"length1":37,"length2":32}]],"length":25174,"saved":false}
{"ts":1350523707295,"patch":[[{"diffs":[[0,"dex + 1]"],[-1," & 7)"],[0,",state.c"]],"start1":13230,"start2":13230,"length1":21,"length2":16}]],"length":25169,"saved":false}
{"ts":1350523709391,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":13198,"start2":13198,"length1":33,"length2":32}]],"length":25168,"saved":false}
{"ts":1350523712710,"patch":[[{"diffs":[[0,"                "],[-1,"("],[0,"state.cubies[ind"]],"start1":12963,"start2":12963,"length1":33,"length2":32},{"diffs":[[0,"ex + 2] "],[-1,"& 7)"],[0,"],\r\n    "]],"start1":13026,"start2":13026,"length1":20,"length2":16}]],"length":25163,"saved":false}
{"ts":1350523714868,"patch":[[{"diffs":[[0,"dex + 2]"],[-1," "],[0,"],\r\n    "]],"start1":13025,"start2":13025,"length1":17,"length2":16}]],"length":25162,"saved":false}
{"ts":1350523717015,"patch":[[{"diffs":[[0,"+ 1]"],[-1," & 7)"],[0,", "],[-1,"("],[0,"stat"]],"start1":12998,"start2":12998,"length1":16,"length2":10}]],"length":25156,"saved":false}
{"ts":1350523719108,"patch":[[{"diffs":[[0,"[index] "],[-1,"& 7)"],[0,", \r\n    "]],"start1":12943,"start2":12943,"length1":20,"length2":16}]],"length":25152,"saved":false}
{"ts":1350523721180,"patch":[[{"diffs":[[0,"s[index]"],[-1," "],[0,", \r\n    "]],"start1":12942,"start2":12942,"length1":17,"length2":16}]],"length":25151,"saved":false}
{"ts":1350523723328,"patch":[[{"diffs":[[0,"eCheck(["],[-1,"("],[0,"state.cu"]],"start1":12922,"start2":12922,"length1":17,"length2":16}]],"length":25150,"saved":false}
{"ts":1350523781355,"patch":[[{"diffs":[[0,"es)\r\n        {\r\n"],[1,"            console.log(currentCubies,faceColors,faces);\r\n"],[0,"            face"]],"start1":12441,"start2":12441,"length1":32,"length2":90}]],"length":25208,"saved":false}
{"ts":1350523789038,"patch":[[{"diffs":[[0," {\r\n"],[-1,"            console.log(currentCubies,faceColors,faces);\r\n"],[0,"    "]],"start1":12453,"start2":12453,"length1":66,"length2":8},{"diffs":[[0," += faceIndex;\r\n"],[1,"                        console.log(currentCubies,faceColors,faces);\r\n\r\n"],[0,"        }\r\n    }"]],"start1":12572,"start2":12572,"length1":32,"length2":104}]],"length":25222,"saved":false}
{"ts":1350523851550,"patch":[[{"diffs":[[0,"Colors,faces"],[1,"[currentCubies[index] >> 4]"],[0,");\r\n\r\n      "]],"start1":12642,"start2":12642,"length1":24,"length2":51}]],"length":25249,"saved":false}
{"ts":1350524545460,"patch":[[{"diffs":[[0,"og(faces);\r\n"],[1,"    if(((faces[0]+faces[4]) % 3) + ((faces[1] + faces[3]) % 3)"],[0,"\r\n          "]],"start1":15384,"start2":15384,"length1":24,"length2":86}]],"length":25311,"saved":false}
{"ts":1350524570422,"patch":[[{"diffs":[[0,"3]) % 3)"],[1," + ((faces[2] + faces[5]) % 3) === 0)\r\n    {\r\n        \r\n    }"],[0,"\r\n      "]],"start1":15450,"start2":15450,"length1":16,"length2":77}]],"length":25372,"saved":false}
{"ts":1350524591674,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"console.log(\"corners look good!\");"],[0,"\r\n    }\r\n       "]],"start1":15496,"start2":15496,"length1":32,"length2":66}]],"length":25406,"saved":false}
{"ts":1350524626851,"patch":[[{"diffs":[[0,"ood!\");\r\n    }\r\n"],[1,"    else\r\n    {\r\n        \r\n    }\r\n"],[0,"            face"]],"start1":15539,"start2":15539,"length1":32,"length2":66}]],"length":25440,"saved":false}
{"ts":1350524645999,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"console.log(\"A corner has a bad orientation, unsolvable...\")    "],[0,"\r\n    }\r\n       "]],"start1":15564,"start2":15564,"length1":32,"length2":96}]],"length":25504,"saved":false}
{"ts":1350524666177,"patch":[[{"diffs":[[0,"on, "],[-1,"unsolvable.."],[1,"sorry this state is unsolvable for the assumed goal state"],[0,".\") "]],"start1":15621,"start2":15621,"length1":20,"length2":65}]],"length":25549,"saved":false}
{"ts":1350524668937,"patch":[[{"diffs":[[0,"state.\")"],[-1,"    "],[1,";"],[0,"\r\n    }\r"]],"start1":15677,"start2":15677,"length1":20,"length2":17}]],"length":25546,"saved":false}
{"ts":1350524674588,"patch":[[{"diffs":[[0," state.\");\r\n"],[1,"        return false\r\n"],[0,"    }\r\n     "]],"start1":15676,"start2":15676,"length1":24,"length2":46}]],"length":25568,"saved":false}
{"ts":1350525183480,"patch":[[{"diffs":[[0,"rn false"],[1,";"],[0,"\r\n    }\r"]],"start1":15700,"start2":15700,"length1":16,"length2":17}]],"length":25569,"saved":false}
{"ts":1350525192962,"patch":[[{"diffs":[[0,"]) % 3) "],[-1,"="],[1,"!"],[0,"== 0)\r\n "]],"start1":15481,"start2":15481,"length1":17,"length2":17}]],"length":25569,"saved":false}
{"ts":1350525209331,"patch":[[{"diffs":[[0,"og(\""],[1,"A "],[0,"corner"],[-1,"s look good!\")"],[1," has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\r\n        return false"],[0,";\r\n "]],"start1":15521,"start2":15521,"length1":28,"length2":123}]],"length":25664,"saved":false}
{"ts":1350525219784,"patch":[[{"diffs":[[0," }\r\n"],[-1,"    else\r\n    {\r\n        console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\r\n        return false;\r\n"],[0,"    "]],"start1":15646,"start2":15646,"length1":164,"length2":8}]],"length":25508,"saved":false}
{"ts":1350525221957,"patch":[[{"diffs":[[0,"og(faces);\r\n"],[1,"    \r\n"],[0,"    if(((fac"]],"start1":15384,"start2":15384,"length1":24,"length2":30}]],"length":25514,"saved":false}
{"ts":1350525224113,"patch":[[{"diffs":[[0,"\n    }\r\n    "],[-1,"}"],[0,"\r\n          "]],"start1":15648,"start2":15648,"length1":25,"length2":24}]],"length":25513,"saved":false}
{"ts":1350525226132,"patch":[[{"diffs":[[0,"   }\r\n    \r\n"],[-1,"        "],[0,"    faces = "]],"start1":15650,"start2":15650,"length1":32,"length2":24}]],"length":25505,"saved":false}
{"ts":1350525518616,"patch":[[{"diffs":[[0,"\r\n    };\r\n    \r\n"],[1,"    // Does vorner cubie parity checks. \r\n"],[0,"    for (var ind"]],"start1":12696,"start2":12696,"length1":32,"length2":74}]],"length":25547,"saved":false}
{"ts":1350525520708,"patch":[[{"diffs":[[0,"// Does "],[-1,"v"],[1,"c"],[0,"orner cu"]],"start1":12716,"start2":12716,"length1":17,"length2":17}]],"length":25547,"saved":false}
{"ts":1350525534729,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        RubixState.permutationReference[index];\r\n"],[0,"    "]],"start1":12805,"start2":12805,"length1":57,"length2":8}]],"length":25498,"saved":false}
{"ts":1350525616380,"patch":[[{"diffs":[[0," \r\n    /"],[-1,"/"],[1,"*\r\n     *"],[0," Does co"]],"start1":12709,"start2":12709,"length1":17,"length2":25},{"diffs":[[0,"y checks. \r\n"],[1,"     * Each corner face is assigned a number derived from the assumed original position of the cubie color configuration in the original cube.\r\n     */\r\n"],[0,"    for (var"]],"start1":12750,"start2":12750,"length1":24,"length2":177}]],"length":25659,"saved":false}
{"ts":1350525668053,"patch":[[{"diffs":[[0,"riginal "],[1,"\r\n     * "],[0,"position"]],"start1":12833,"start2":12833,"length1":16,"length2":25},{"diffs":[[0,"al cube."],[1," All faces for Red and Orange are assigned 0 for the purpose of this calculation."],[0,"\r\n     *"]],"start1":12905,"start2":12905,"length1":16,"length2":97}]],"length":25749,"saved":false}
{"ts":1350525673999,"patch":[[{"diffs":[[0,"};\r\n    \r\n    /*"],[1,"*"],[0,"\r\n     * Does co"]],"start1":12702,"start2":12702,"length1":32,"length2":33}]],"length":25750,"saved":false}
{"ts":1350525812274,"patch":[[{"diffs":[[0,"y checks. \r\n"],[1,"     * \r\n"],[0,"     * Each "]],"start1":12751,"start2":12751,"length1":24,"length2":33},{"diffs":[[0,"l faces "],[1,"\r\n     * "],[0,"for Red "]],"start1":12926,"start2":12926,"length1":16,"length2":25},{"diffs":[[0,"lculation.\r\n"],[1,"     * After assigning these zeroes each cubie face is assigned a number while moving\r\n     * clockwise from the numbered faces. For example the RBY cubie is assigned as R-0 B-1 Y-2.\r\n     * This is repeated for all colors and the result is as follows.\r\n     *    0-0\r\n     *    ---\r\n     *    0-0\r\n"],[0,"     */\r\n   "]],"start1":13003,"start2":13003,"length1":24,"length2":323}]],"length":26067,"saved":false}
{"ts":1350525840899,"patch":[[{"diffs":[[0,"*    0-0\r\n     *"],[-1,"/"],[1,"  -  -  -\r\n     * ---------\r\n     *  -  -  -\r\n     */ "],[0,"\r\n    for (var i"]],"start1":13304,"start2":13304,"length1":33,"length2":86}]],"length":26120,"saved":false}
{"ts":1350525860269,"patch":[[{"diffs":[[0,"*  -  -  -\r\n"],[1,"     *     -\r\n     *    ---\r\n     *     -\r\n     *     -\r\n     *    ---\r\n     *     -\r\n"],[0,"     */ \r\n  "]],"start1":13354,"start2":13354,"length1":24,"length2":110}]],"length":26206,"saved":false}
{"ts":1350525893461,"patch":[[{"diffs":[[0,"ows.\r\n     *    "],[1," "],[0,"0-0\r\n     *    -"]],"start1":13263,"start2":13263,"length1":32,"length2":33},{"diffs":[[0,"     0-0\r\n     *"],[1," "],[0,"    ---\r\n     * "]],"start1":13275,"start2":13275,"length1":32,"length2":33},{"diffs":[[0," ---\r\n     *"],[1," "],[0,"    0-0\r\n   "]],"start1":13295,"start2":13295,"length1":24,"length2":25},{"diffs":[[0,"  0-0\r\n     *  -"],[-1,"  -"],[1,"2 1- "],[0,"  -\r\n     * ----"]],"start1":13310,"start2":13310,"length1":35,"length2":37},{"diffs":[[0,"   * ---"],[1," "],[0,"---"],[1," "],[0,"---\r\n   "]],"start1":13338,"start2":13338,"length1":19,"length2":21},{"diffs":[[0,"  *  -  "],[-1,"-"],[1," - "],[0,"  -\r\n   "]],"start1":13359,"start2":13359,"length1":17,"length2":19},{"diffs":[[0,"  -\r\n     *     "],[1," "],[0,"-\r\n     *    ---"]],"start1":13370,"start2":13370,"length1":32,"length2":33},{"diffs":[[0,"*      -\r\n     *"],[1," "],[0,"    ---\r\n     * "]],"start1":13380,"start2":13380,"length1":32,"length2":33},{"diffs":[[0,"---\r\n     *     "],[1," "],[0,"-\r\n     *     -\r"]],"start1":13401,"start2":13401,"length1":32,"length2":33},{"diffs":[[0,"*      -\r\n     *"],[1," "],[0,"     -\r\n     *  "]],"start1":13411,"start2":13411,"length1":32,"length2":33},{"diffs":[[0,"\r\n     *    "],[1," "],[0,"---\r\n     * "]],"start1":13434,"start2":13434,"length1":24,"length2":25},{"diffs":[[0," ---\r\n     *"],[1," "],[0,"     -\r\n    "]],"start1":13446,"start2":13446,"length1":24,"length2":25}]],"length":26221,"saved":false}
{"ts":1350525903510,"patch":[[{"diffs":[[0,"*  -2 1-"],[-1," "],[1,"2"],[0,"  -\r\n   "]],"start1":13322,"start2":13322,"length1":17,"length2":17},{"diffs":[[0,"  *  -  "],[-1," - "],[1,"2-1"],[0,"  -\r\n   "]],"start1":13359,"start2":13359,"length1":19,"length2":19}]],"length":26221,"saved":false}
{"ts":1350525940616,"patch":[[{"diffs":[[0,"  -\r\n     *     "],[-1," -"],[1,"0-0"],[0,"\r\n     *     ---"]],"start1":13370,"start2":13370,"length1":34,"length2":35},{"diffs":[[0,"---\r\n     *     "],[-1," -"],[1,"0-0"],[0,"\r\n     *      -\r"]],"start1":13402,"start2":13402,"length1":34,"length2":35},{"diffs":[[0,"0-0\r\n     *     "],[-1," -"],[1,"1-2"],[0,"\r\n     *     ---"]],"start1":13418,"start2":13418,"length1":34,"length2":35},{"diffs":[[0,"  *     "],[-1," -"],[1,"2-1"],[0,"\r\n     *"]],"start1":13458,"start2":13458,"length1":18,"length2":19}]],"length":26225,"saved":false}
{"ts":1350525960632,"patch":[[{"diffs":[[0,"  * "],[-1," "],[1,"1"],[0,"-2 1-2 "],[-1," "],[1,"1"],[0,"-\r\n "]],"start1":13320,"start2":13320,"length1":17,"length2":17},{"diffs":[[0,"  * "],[-1," - "],[1,"2-1"],[0," 2-1 "],[-1," -"],[1,"2-1"],[0,"\r\n  "]],"start1":13359,"start2":13359,"length1":18,"length2":19}]],"length":26226,"saved":false}
{"ts":1350525964852,"patch":[[{"diffs":[[0,"2 1-2 1-"],[1,"2"],[0,"\r\n     *"]],"start1":13326,"start2":13326,"length1":16,"length2":17}]],"length":26227,"saved":false}
{"ts":1350526010078,"patch":[[{"diffs":[[0,"s follows.\r\n"],[1,"     * \r\n"],[0,"     *     0"]],"start1":13257,"start2":13257,"length1":24,"length2":33}]],"length":26236,"saved":false}
{"ts":1350526057683,"patch":[[{"diffs":[[0," *     2-1\r\n"],[1,"     * \r\n     * Opposing sides regardless of legal moves will always add up to some multiple of 3\r\n     * allowing us to check corner parity.\r\n"],[0,"     */ \r\n  "]],"start1":13470,"start2":13470,"length1":24,"length2":167}]],"length":26379,"saved":false}
{"ts":1350526117535,"patch":[[{"diffs":[[0," parity."],[1," This parity calculation method indicates that the corners may exist in any one of 3 cube permutaions"],[0,"\r\n     *"]],"start1":13615,"start2":13615,"length1":16,"length2":117}]],"length":26480,"saved":false}
{"ts":1350526148560,"patch":[[{"diffs":[[0,"dicates "],[1,"\r\n     * "],[0,"that the"]],"start1":13657,"start2":13657,"length1":16,"length2":25},{"diffs":[[0," permuta"],[1,"t"],[0,"ions\r\n  "]],"start1":13721,"start2":13721,"length1":16,"length2":17}]],"length":26490,"saved":false}
{"ts":1350526152676,"patch":[[{"diffs":[[0,"utations"],[1,"."],[0,"\r\n     *"]],"start1":13726,"start2":13726,"length1":16,"length2":17}]],"length":26491,"saved":false}
{"ts":1350526321826,"patch":[[{"diffs":[[0,"ty. "],[-1,"This parity calculation method indicates \r\n     * that the corners may exist in any one of 3 cube permutation"],[1,"logically this indicates that only 1/3 of\r\n     * possible cubie configurations are possible with legal move"],[0,"s.\r\n"]],"start1":13620,"start2":13620,"length1":117,"length2":116}]],"length":26490,"saved":false}
{"ts":1350526326170,"patch":[[{"diffs":[[0,"parity. "],[-1,"l"],[0,"ogically"]],"start1":13616,"start2":13616,"length1":17,"length2":16}]],"length":26489,"saved":false}
{"ts":1350526344654,"patch":[[{"diffs":[[0,"parity. "],[1,"L"],[0,"ogically"]],"start1":13616,"start2":13616,"length1":16,"length2":17},{"diffs":[[0,"/ 3 "],[-1,"+\" \" +((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7) + \r\n            (state.cubies[index + 2] & 7))"],[0,");\r\n"]],"start1":15884,"start2":15884,"length1":133,"length2":8}]],"length":26365,"saved":false}
{"ts":1350526593987,"patch":[[{"diffs":[[0,"        "],[1,"    "],[0,"\"combina"]],"start1":15841,"start2":15841,"length1":16,"length2":20}]],"length":26369,"saved":false}
{"ts":1350526613103,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"    "],[0,"if((state.cubies"]],"start1":15940,"start2":15940,"length1":32,"length2":36},{"diffs":[[0,"x + 1] & 7) ||\r\n"],[1,"    "],[0,"        (state.c"]],"start1":16011,"start2":16011,"length1":32,"length2":36}]],"length":26377,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350528116894,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\r\n/*\r\nfunction(faces){\r\n        var numbers = 0;\r\n        for (var index in faces)\r\n        {\r\n            switch(faces[index] & 7)\r\n            {\r\n                0:\r\n                    numbers = numbers << 2;\r\n                    break;\r\n                2:\r\n                    numbers\r\n                \r\n            }\r\n        }\r\n    };\r\n\r\nRubixState.cubieParityMap=\r\n{\r\n    //RYG\r\n    3:,\r\n    //RYB\r\n    5:,\r\n    //RGW\r\n    6:,\r\n    //OYG\r\n    7:,\r\n    //RWB\r\n    8:,\r\n    //OYB\r\n    9:,\r\n    //OWG\r\n    10:,\r\n    //OWB\r\n    11:   \r\n};*/\r\n\r\n"],[1,"//"],[0,"Rubi"]],"start1":11513,"start2":11513,"length1":557,"length2":10},{"diffs":[[0," corner "],[-1,""],[0,""],[1,"cubie "],[0,"\" +\r\n   "]],"start1":15273,"start2":15273,"length1":16,"length2":22},{"diffs":[[0,"  \r\n        "],[-1,"    "],[0,"if((state.cu"]],"start1":15403,"start2":15403,"length1":28,"length2":24},{"diffs":[[0," 7) ||\r\n    "],[-1,"    "],[1,"\t\t"],[0,"(state.cubie"]],"start1":15550,"start2":15550,"length1":28,"length2":26},{"diffs":[[0,"7))\r\n        {\r\n"],[1,"\t\t\tconsole.log(\"Corner Cubie:\" + index/3 + \" had duplicate colors.\");\r\n"],[0,"            retu"]],"start1":15625,"start2":15625,"length1":32,"length2":103},{"diffs":[[0,"\r\n\r\n"],[-1,"    for (index = 24; index < 48; index +=2)\r\n    {"],[1,"\t/**\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     * -1- -0- -1-\r\n     * 0-0 1-1 0-0\r\n     * -1- -0- -1-\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     *     -0-\r\n     *     1-1\r\n     *     -0-\r\n\t\r\n\t*/\r\n    for (index = 24; index < 48; index +=2)\r\n    {\r\n\t\tswitch()\r\n\t\t{\r\n\t\t\t//RG\r\n\t\t\tcase 1:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [0,1]);\r\n\t\t\t\tbreak;\r\n\t\t\t//RY\r\n\t\t\tcase 2:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [2,1]);\r\n\t\t\t\tbreak;\r\n\t\t\t//RB, YG\r\n\t\t\tcase 3:\r\n\t\t\t\tif(([state.cubies[index] & 7) === 0 | ([state.cubies[index] & 7) === 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[0,3]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,2]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//RW, OG, YB\r\n\t\t\tcase 5:\r\n\t\t\t\t//RW\r\n\t\t\t\tif(([state.cubies[index] & 7) === 0 | ([state.cubies[index] & 7) === 5)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[5,0]);\r\n\t\t\t\t}\r\n\t\t\t\t//OG\r\n\t\t\t\telse if (([state.cubies[index] & 7) === 4 | ([state.cubies[index] & 7) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[4,1]);\r\n\t\t\t\t}\r\n\t\t\t\t//YB\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[3,2]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OY, WG\r\n\t\t\tcase 6:\r\n\t\t\t\tif(([state.cubies[index] & 7) === 2 | ([state.cubies[index] & 7) === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[2,4]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,5]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OB\r\n\t\t\tcase 7:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[4,3]);\r\n\t\t\t\tbreak;\r\n\t\t\t//WB\r\n\t\t\tcase 8:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[3,5]);\r\n\t\t\t\tbreak;\r\n\t\t\t//OW\r\n\t\t\tcase 9:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[5,4]);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\r\n                    \"combination! For side:\"+  (index - 24) / 2);\r\n                return false;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(faces);\r\n\r\n\t"],[0,"\r\n  "]],"start1":16084,"start2":16084,"length1":58,"length2":2434},{"diffs":[[0,"7))\r\n        {\r\n"],[1,"\t\t\tconsole.log(\"Side Cubie:\" + (index-24) / 2+ \" had duplicate colors.\"); \r\n"],[0,"            retu"]],"start1":18584,"start2":18584,"length1":32,"length2":108},{"diffs":[[0,"rn true;"],[-1,"\r\n "],[0,""],[1,""],[0,"   \r\n};\r"]],"start1":18738,"start2":18738,"length1":19,"length2":16}]],"length":28350,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350528251925,"patch":[[{"diffs":[[0,"\tswitch("],[1,"(state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7)"],[0,")\r\n\t\t{\r\n"]],"start1":16359,"start2":16359,"length1":16,"length2":87}]],"length":28421,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350528317016,"patch":[[{"diffs":[[1,"/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState()\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = null;   \r\n    \r\n}\r\n\r\n/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * A scratch array used in face rotations.\r\n */\r\nRubixState.faceSet = [];\r\n\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\n/**\r\n * The face value map used in tanslating moves to something human readable. \r\n */\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n/*RubixState.goalState = RubixState.createWithGoalState();*/\r\n\r\n/**\r\n * Defines cubie locations for a side.\r\n */\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\n\r\n/**\r\n * Handles face rotations. \r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n * \r\n * @param state The state that is to be changed.\r\n * @param face The face that the rotation occurs on.\r\n * @param rotations The number of clockwise rotations for the action.\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    // The inidicies define the rotation behavior.\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    \r\n    /*\r\n     * cubie - holds the cubie index.\r\n     * size - A generic size variable.\r\n     * newIndex - Holds a modified index.\r\n     * cFace - A cubieFace.\r\n     * offset - A generic offset variable.\r\n    */\r\n    var cubie, size, newIndex, cFace, offset;\r\n    \r\n    // Iterate over the indicies and calculate values of the rotated cubies.\r\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\r\n    {\r\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 4\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        // For the number of faces calculate individual face rotations and add them to our scratch.\r\n        for(cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    // For each cubie shift the face data to the appropriate location in the buffer.\r\n    // This is done in increments of Corner,Side 4 times.\r\n    for (index = 0, size = indicies.length; index < size; index+=2)\r\n    {\r\n        // Calculate the index of the new cubie index after rotation.\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        // Clear the face set of data.\r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        // Determine the face of each of the new buffer locations and load the \r\n        // new index in the appropriate position. This maps face to memory location.\r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        // Place the cubie face data in the new position.\r\n        for(offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n        \r\n        // See above.\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        \r\n         for(offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Rotates a face with some boolean magic.\r\n * \r\n * @param faceState The Uint8 number representing the cubie face.\r\n * @param face The face that the rotation is occuring about [0-5].\r\n * @param rotations The number of counterclockwise rotations [1-3].\r\n * @return A Uint8 with the following bit pattern: -***-+++ where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n */\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    // Shift right to get the value of the leading for bits.\r\n    var faceVal = Number(faceState >> 4);\r\n    \r\n    // Mask with 00000111 to retrieve the color from the faceState.\r\n    var colorVal = faceState & 7;\r\n\r\n    // If the mapping of face rotations is valid perform it, \r\n    // else it must be unaffected at this phase.\r\n    if ( RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\r\n    }\r\n    else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\n/**\r\n * Creates a Rubik cube with the goal state.\r\n */\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA #JohnDidn'tFeelLikeWritingASeparateInitializer\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\n/**\r\n * Creates a Rubik Cube from an upper case String of characters from a string \r\n * from the alphabet: {R,G,Y,B,O,W}.\r\n * \r\n * @param text The textual representation of the rubik cube as specified in the \r\n *      assignment.\r\n * @return A state for the supplied text.\r\n */\r\nRubixState.createWithString = function(text)\r\n{\r\n    // An array to hold the intermediate state.\r\n    var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    // Splits the strings into character arrays.\r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n    \r\n    return RubixState.verifyState(state) ? state : null;\r\n};\r\n\r\n//RubixState.permutationReference = [0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0];\r\n\r\nRubixState.verifyState = function(state)\r\n{   \r\n    var faces = [0,0,0,0,0,0];\r\n    \r\n    var updateFaceCheck = function(currentCubies, faceColors)\r\n    {\r\n        var faceIndex = 0;\r\n        for(var index in currentCubies)\r\n        {\r\n            faceIndex = faceColors.indexOf(currentCubies[index] & 7);\r\n            faces[currentCubies[index] >> 4] += faceIndex;\r\n                        console.log(currentCubies,faceColors,faces[currentCubies[index] >> 4]);\r\n\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Does corner cubie parity checks. \r\n     * \r\n     * Each corner face is assigned a number derived from the assumed original \r\n     * position of the cubie color configuration in the original cube. All faces \r\n     * for Red and Orange are assigned 0 for the purpose of this calculation.\r\n     * After assigning these zeroes each cubie face is assigned a number while moving\r\n     * clockwise from the numbered faces. For example the RBY cubie is assigned as R-0 B-1 Y-2.\r\n     * This is repeated for all colors and the result is as follows.\r\n     * \r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     * 1-2 1-2 1-2\r\n     * --- --- ---\r\n     * 2-1 2-1 2-1\r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     *     1-2\r\n     *     ---\r\n     *     2-1\r\n     * \r\n     * Opposing sides regardless of legal moves will always add up to some multiple of 3\r\n     * allowing us to check corner parity. Logically this indicates that only 1/3 of\r\n     * possible cubie configurations are possible with legal moves.\r\n     */ \r\n    for (var index = 0; index < 24; index +=3)\r\n    {\r\n        switch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7) + \r\n            (state.cubies[index + 2] & 7)){    \r\n            //RYG\r\n            case 3:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,2,1]);\r\n                break;\r\n            //RBY\r\n            case 5:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [0,3,2]);\r\n                break;\r\n            //RGW\r\n            case 6:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,1,5]);\r\n                break;\r\n            //OGY\r\n            case 7:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,1,2]);\r\n                break;\r\n            //RWB\r\n            case 8:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,5,3]);\r\n                break;\r\n            //OYB\r\n            case 9:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1] , state.cubies[index + 2]],\r\n                    [4,2,3]);\r\n                break;\r\n            //OWG\r\n            case 10:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [4,5,1]);\r\n                break;\r\n            //OBW\r\n            case 12:  \r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,3,5]);\r\n                break;\r\n            default:\r\n                console.log(\"An invalid cubie has been discovered! Bad corner cubie \" +\r\n                    \"combination! For corner:\"+  index / 3 );\r\n                return false;\r\n        }\r\n        \r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7) ||\r\n            (state.cubies[index] & 7) === (state.cubies[index + 2] & 7) ||\r\n    \t\t(state.cubies[index + 1] & 7) === (state.cubies[index + 2] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Corner Cubie:\" + index/3 + \" had duplicate colors.\");\r\n            return false;   \r\n        }\r\n    }       \r\n    console.log(faces);\r\n    \r\n    if(((faces[0]+faces[4]) % 3) + ((faces[1] + faces[3]) % 3) + ((faces[2] + faces[5]) % 3) !== 0)\r\n    {\r\n        console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\r\n        return false;\r\n    }\r\n    \r\n    faces = [0,0,0,0,0,0];\r\n\r\n\t/**\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     * -1- -0- -1-\r\n     * 0-0 1-1 0-0\r\n     * -1- -0- -1-\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     *     -0-\r\n     *     1-1\r\n     *     -0-\r\n\t\r\n\t*/\r\n    for (index = 24; index < 48; index +=2)\r\n    {\r\n\t\tswitch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7))\r\n\t\t{\r\n\t\t\t//RG\r\n\t\t\tcase 1:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [0,1]);\r\n\t\t\t\tbreak;\r\n\t\t\t//RY\r\n\t\t\tcase 2:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [2,1]);\r\n\t\t\t\tbreak;\r\n\t\t\t//RB, YG\r\n\t\t\tcase 3:\r\n\t\t\t\t/*if( ([state.cubies[index] & 7) === 0 || ([state.cubies[index] & 7) === 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[0,3]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,2]);\r\n\t\t\t\t}*/\r\n\t\t\t\tbreak;\r\n\t\t\t//RW, OG, YB\r\n\t\t\tcase 5:\r\n\t\t\t\t//RW\r\n\t\t\t\tif (([state.cubies[index] & 7) === 0 || ([state.cubies[index] & 7) === 5)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[5,0]);\r\n\t\t\t\t}\r\n\t\t\t\t//OG\r\n\t\t\t\telse if (([state.cubies[index] & 7) === 4 || ([state.cubies[index] & 7) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[4,1]);\r\n\t\t\t\t}\r\n\t\t\t\t//YB\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[3,2]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OY, WG\r\n\t\t\tcase 6:\r\n\t\t\t\tif(([state.cubies[index] & 7) === 2 || ([state.cubies[index] & 7) === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[2,4]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,5]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OB\r\n\t\t\tcase 7:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[4,3]);\r\n\t\t\t\tbreak;\r\n\t\t\t//WB\r\n\t\t\tcase 8:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[3,5]);\r\n\t\t\t\tbreak;\r\n\t\t\t//OW\r\n\t\t\tcase 9:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[5,4]);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\r\n                    \"combination! For side:\"+  (index - 24) / 2);\r\n                return false;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(faces);\r\n\r\n\t\r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Side Cubie:\" + (index-24) / 2+ \" had duplicate colors.\"); \r\n            return false;   \r\n        }\r\n    }\r\n    \r\n    return true;   \r\n};\r\n\r\nRubixState.findCornerPermutations = function(f1, f2, f3, cubeFace1, cubeFace2, cubFace3)\r\n{\r\n    \r\n};\r\n\r\n/**\r\n * Creates a UInt8 face state with the following binary encoding: -***-+++ \r\n * where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n * \r\n * Please note there are 2 bits per space wasted.\r\n * \r\n * @param color The uppercase color character that will be encoded to a 3 bit pattern.\r\n * @param face The face side to be encoded into the state.\r\n * \r\n * @return The encoded face state as a Uint8.\r\n */\r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\n/**\r\n * Creates a copy of the supplied RubixState object.\r\n * \r\n * @param state The state that is to be copied.\r\n * @return The copied state.\r\n */\r\nRubixState.copy = function(state)\r\n{\r\n    var newState = new RubixState(), copy = state.cubies.buffer.slice(0);\r\n    newState.cubies = new Uint8Array(copy);   \r\n    \r\n    return newState;\r\n};\r\n\r\n/**\r\n * The equivalence function for two RubixState objects.\r\n * @param state1 A state to be checked for equivalence.\r\n * @param state2 A state to be checked for equivalence.\r\n * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n */\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\r\n     */\r\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);        \r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n/**\r\n * Finds the cubie located at the specified cubie of state1 in state2.\r\n */\r\nRubixState.findCubie = function(state1, cubie, state2)\r\n{\r\n    var colorId = RubixState.cubieColorId(state1, cubie);\r\n    \r\n    for (var index = 0; index < 20; index++)\r\n    {\r\n        if (RubixState.cubieColorId(state2, index) === colorId)\r\n            return index;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";\r\n};\r\n\r\nRubixState.areCubiesEqual = function(state1, state2, cubie)\r\n{\r\n    var cubieIndex, cubieIndicies = RubixState.cubieMap[cubie];\r\n    \r\n    for (var index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        cubieIndex = cubieIndicies[index];\r\n        \r\n        if (state1.cubies[cubieIndex] !== state2.cubies[cubieIndex])\r\n            return false;\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n/**\r\n * Returns a unique ID to represent the colors of the faces of the specified cubie.\r\n * Disregards orientation.\r\n * @param state the state containing the cubie\r\n * @param cubie the index of the cubie according to the cubieMap\r\n * @return a unique color ID.\r\n */\r\nRubixState.cubieColorId = function(state, cubie)\r\n{\r\n    var colorId = 0, faceIds = [], cubieIndicies = RubixState.cubieMap[cubie], index;\r\n    \r\n    for (index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        faceIds[index] = state.cubies[cubieIndicies[index]] & 7;\r\n    }\r\n    \r\n    faceIds.sort();\r\n    \r\n    for (index = 0; index < faceIds.length; index++)\r\n    {\r\n        colorId = (colorId << 3) | faceIds[index];\r\n    }\r\n    \r\n    // A corner ID could produce the same as an edge, so vary them by 13 bits\r\n    if (faceIds.length === 2)\r\n        colorId = colorId << 13;\r\n    \r\n    return colorId;\r\n};\r\n\r\n/**\r\n * The to String functionality for a RubixState.\r\n * @param state The state to retrieve a String from.\r\n * @return A String for the RubixState object.\r\n */\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\nRubixState.cubieMap = {\r\n    0 : [0, 1, 2], // c00\r\n    1 : [24, 25],\r\n    2 : [3, 4, 5], // c01\r\n    3 : [26, 27],\r\n    4 : [28, 29],\r\n    5 : [6, 7, 8], // c02\r\n    6 : [30, 31],\r\n    7 : [9, 10, 11], // c03\r\n    8 : [32, 33],\r\n    9 : [34, 35],\r\n    10 : [36, 37],\r\n    11 : [38, 39],\r\n    12 : [15, 16, 17], // c05\r\n    13 : [42, 43],\r\n    14 : [18, 19, 20], // c06\r\n    15 : [40, 41],\r\n    16 : [44, 45],\r\n    17 : [12, 13, 14], // c04\r\n    18 : [46, 47],\r\n    19 : [21, 22, 23] // c07\r\n};\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":28431}]],"length":28431,"saved":false}
{"contributors":["jfdbear1@gmail.com"],"silentsave":false,"ts":1350528360528,"patch":[[{"diffs":[[0,"3:\r\n\t\t\t\t"],[-1,"/*"],[1,"("],[0,"if( ([st"]],"start1":16773,"start2":16773,"length1":18,"length2":17},{"diffs":[[0,";\r\n\t\t\t\t}"],[-1,"*/"],[1,")"],[0,"\r\n\t\t\t\tbr"]],"start1":17071,"start2":17071,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t\t\tif"],[-1," "],[0,"(([state"]],"start1":17131,"start2":17131,"length1":17,"length2":16}]],"length":28428,"saved":false}
{"ts":1350528365114,"patch":[[{"diffs":[[0,";\r\n\t\t\t\t}"],[-1,")"],[0,"\r\n\t\t\t\tbr"]],"start1":17071,"start2":17071,"length1":17,"length2":16}]],"length":28427,"saved":false}
{"ts":1350528369557,"patch":[[{"diffs":[[0,"3:\r\n\t\t\t\t"],[-1,"("],[0,"if( ([st"]],"start1":16773,"start2":16773,"length1":17,"length2":16}]],"length":28426,"saved":false}
{"ts":1350528374016,"patch":[[{"diffs":[[0,"] & 7) === 0 || "],[1,"\r\n                    "],[0,"([state.cubies[i"]],"start1":16805,"start2":16805,"length1":32,"length2":54}]],"length":28448,"saved":false}
{"ts":1350528378633,"patch":[[{"diffs":[[0,"7) === 0 || "],[1,"\r\n                    "],[0,"([state.cubi"]],"start1":17184,"start2":17184,"length1":24,"length2":46}]],"length":28470,"saved":false}
{"ts":1350528383731,"patch":[[{"diffs":[[0,"7) === 4 || "],[1,"\r\n                    "],[0,"([state.cubi"]],"start1":17407,"start2":17407,"length1":24,"length2":46}]],"length":28492,"saved":false}
{"ts":1350528391114,"patch":[[{"diffs":[[0,"== 2 || "],[1,"\r\n                    "],[0,"([state."]],"start1":17782,"start2":17782,"length1":16,"length2":38}]],"length":28514,"saved":false}
{"ts":1350528408964,"patch":[[{"diffs":[[0,"3:\r\n\t\t\t\t"],[1,"function(){"],[0,"if( ([st"]],"start1":16773,"start2":16773,"length1":16,"length2":27},{"diffs":[[0,"\t\t[1,2]);\r\n\t\t\t\t}"],[1,"}()"],[0,"\r\n\t\t\t\tbreak;\r\n\t\t"]],"start1":17095,"start2":17095,"length1":32,"length2":35}]],"length":28528,"saved":false}
{"ts":1350528415976,"patch":[[{"diffs":[[0,"\t\t\t\t"],[-1,"function(){"],[0,"if( "]],"start1":16777,"start2":16777,"length1":19,"length2":8},{"diffs":[[0,"\t\t\t}"],[-1,"}()"],[0,"\r\n\t\t"]],"start1":17096,"start2":17096,"length1":11,"length2":8}]],"length":28514,"saved":false}
{"ts":1350528420426,"patch":[[{"diffs":[[0,"                "],[-1,"    "],[0,"([state.cubies[i"]],"start1":17792,"start2":17792,"length1":36,"length2":32}]],"length":28510,"saved":false}
{"ts":1350528426847,"patch":[[{"diffs":[[0,"ase 6:\r\n\t\t\t\tif(("],[-1,"["],[0,"state.cubies[ind"]],"start1":17739,"start2":17739,"length1":33,"length2":32},{"diffs":[[0,"                "],[1,"    "],[0,"("],[-1,"["],[0,"state.cubies[ind"]],"start1":17791,"start2":17791,"length1":34,"length2":37}]],"length":28512,"saved":false}
{"ts":1350528434500,"patch":[[{"diffs":[[0,"\t\t\tif( ("],[-1,"["],[0,"state.cu"]],"start1":16778,"start2":16778,"length1":17,"length2":16},{"diffs":[[0,"               ("],[-1,"["],[0,"state.cubies[ind"]],"start1":16827,"start2":16827,"length1":33,"length2":32}]],"length":28510,"saved":false}
{"ts":1350528441062,"patch":[[{"diffs":[[0,"\t\t\t\tif(("],[-1,"["],[0,"state.cu"]],"start1":17151,"start2":17151,"length1":17,"length2":16},{"diffs":[[0,"               ("],[-1,"["],[0,"state.cubies[ind"]],"start1":17200,"start2":17200,"length1":33,"length2":32}]],"length":28508,"saved":false}
{"ts":1350528451861,"patch":[[{"diffs":[[0,"se if (("],[-1,"["],[0,"state.cu"]],"start1":17372,"start2":17372,"length1":17,"length2":16},{"diffs":[[0,"       ("],[-1,"["],[0,"state.cu"]],"start1":17429,"start2":17429,"length1":17,"length2":16}]],"length":28506,"saved":false}
{"ts":1350528513062,"patch":[[{"diffs":[[0,"\t\t\t[5,0]);\r\n"],[1,"                        console.log(\"after\"\r\n"],[0,"\t\t\t\t}\r\n\t\t\t\t/"]],"start1":17337,"start2":17337,"length1":24,"length2":69}]],"length":28551,"saved":false}
{"ts":1350528517624,"patch":[[{"diffs":[[0,"(\"after\""],[1,");"],[0,"\r\n\t\t\t\t}\r"]],"start1":17384,"start2":17384,"length1":16,"length2":18}]],"length":28553,"saved":false}
{"ts":1350528553407,"patch":[[{"diffs":[[0," === 5)\r\n\t\t\t\t{\r\n"],[1,"                    console.log(\"before\");\r\n\r\n"],[0,"\t\t\t\t\tupdateFaceC"]],"start1":17240,"start2":17240,"length1":32,"length2":78}]],"length":28599,"saved":false}
{"ts":1350528596443,"patch":[[{"diffs":[[0,"dex] & 7);\r\n"],[1,"            \r\n"],[0,"            "]],"start1":11969,"start2":11969,"length1":24,"length2":38},{"diffs":[[0,"Index;\r\n"],[-1,"            "],[0,"        "]],"start1":12047,"start2":12047,"length1":28,"length2":16},{"diffs":[[0,"eColors,"],[1,"faceIndex,"],[0,"faces[cu"]],"start1":12096,"start2":12096,"length1":16,"length2":26}]],"length":28611,"saved":false}
{"ts":1350528629500,"patch":[[{"diffs":[[0,"eColors,"],[1,"currentCubies[index]&7,"],[0,"faceInde"]],"start1":12096,"start2":12096,"length1":16,"length2":39}]],"length":28634,"saved":false}
{"ts":1350528768541,"patch":[[{"diffs":[[0,"eColors,"],[1,"("],[0,"currentC"]],"start1":12096,"start2":12096,"length1":16,"length2":17},{"diffs":[[0,"dex]"],[-1,"&7"],[1," & 7)"],[0,",fac"]],"start1":12121,"start2":12121,"length1":10,"length2":13}]],"length":28638,"saved":false}
{"ts":1350528786903,"patch":[[{"diffs":[[0,"ndex] >>"],[1," 4],[currentCubies[index] >>"],[0," 4]);\r\n\r"]],"start1":12162,"start2":12162,"length1":16,"length2":44}]],"length":28666,"saved":false}
{"ts":1350528793810,"patch":[[{"diffs":[[0,"] >> 4],"],[-1,"["],[1,"("],[0,"currentC"]],"start1":12166,"start2":12166,"length1":17,"length2":17},{"diffs":[[0,"ex] >> 4"],[-1,"]"],[1,")"],[0,");\r\n\r\n  "]],"start1":12192,"start2":12192,"length1":17,"length2":17}]],"length":28666,"saved":false}
{"ts":1350528859956,"patch":[[{"diffs":[[0,"ase 2:\r\n"],[1,"                console.log(\"before RY\");\r\n"],[0,"\t\t\t\tupda"]],"start1":16679,"start2":16679,"length1":16,"length2":59},{"diffs":[[0,"   [2,1]);\r\n"],[1,"                    console.log(\"After RY:\" + faces[0]);\r\n"],[0,"\t\t\t\tbreak;\r\n"]],"start1":16838,"start2":16838,"length1":24,"length2":82}]],"length":28767,"saved":false}
{"ts":1350528864519,"patch":[[{"diffs":[[0,"fore RY\""],[1,"+ faces[0]"],[0,");\r\n\t\t\t\t"]],"start1":16718,"start2":16718,"length1":16,"length2":26}]],"length":28777,"saved":false}
{"ts":1350528874837,"patch":[[{"diffs":[[0,"                "],[-1,"    "],[0,"console.log(\"bef"]],"start1":17434,"start2":17434,"length1":36,"length2":32},{"diffs":[[0,"(\"before"],[-1,"\""],[1," RW\"+ faces[0]"],[0,");\r\n\r\n\t\t"]],"start1":17461,"start2":17461,"length1":17,"length2":30}]],"length":28786,"saved":false}
{"ts":1350528879953,"patch":[[{"diffs":[[0,"            "],[-1,"        "],[0,"console.log("]],"start1":17586,"start2":17586,"length1":32,"length2":24},{"diffs":[[0,"g(\"after"],[-1,"\""],[1," RY\"+ faces[0]"],[0,");\r\n\t\t\t\t"]],"start1":17608,"start2":17608,"length1":17,"length2":30}]],"length":28791,"saved":false}
{"ts":1350528884645,"patch":[[{"diffs":[[0,"\"after R"],[-1,"Y"],[1,"W"],[0,"\"+ faces"]],"start1":17610,"start2":17610,"length1":17,"length2":17}]],"length":28791,"saved":false}
{"ts":1350528891232,"patch":[[{"diffs":[[0,"\n\t\t\r"],[-1,"\n\t\tconsole.log(faces);\r"],[0,"\n\r\n\t"]],"start1":18924,"start2":18924,"length1":31,"length2":8},{"diffs":[[0,"  }\r\n    }\r\n    "],[1,"    \tconsole.log(faces);\r\n"],[0,"\r\n    return tru"]],"start1":19130,"start2":19130,"length1":32,"length2":58}]],"length":28794,"saved":false}
{"ts":1350529014917,"patch":[[{"diffs":[[0,");\r\n            "],[1,"caonsole.log(faceColors[0]);"],[0,"\r\n            fa"]],"start1":11977,"start2":11977,"length1":32,"length2":60}]],"length":28822,"saved":false}
{"ts":1350529019458,"patch":[[{"diffs":[[0,"       c"],[-1,"a"],[0,"onsole.l"]],"start1":11986,"start2":11986,"length1":17,"length2":16}]],"length":28821,"saved":false}
{"ts":1350529051771,"patch":[[{"diffs":[[0,"     [2,"],[-1,"1"],[1,"0"],[0,"]);\r\n   "]],"start1":16873,"start2":16873,"length1":17,"length2":17}]],"length":28821,"saved":false}
{"ts":1350529069598,"patch":[[{"diffs":[[0,"2:\r\n"],[-1,"                console.log(\"before RY\"+ faces[0]);\r\n"],[0,"\t\t\t\t"]],"start1":16710,"start2":16710,"length1":61,"length2":8},{"diffs":[[0,");\r\n"],[-1,"                    console.log(\"After RY:\" + faces[0]);\r\n"],[0,"\t\t\t\t"]],"start1":16830,"start2":16830,"length1":66,"length2":8},{"diffs":[[0,"\t{\r\n"],[-1,"                console.log(\"before RW\"+ faces[0]);\r\n\r\n"],[0,"\t\t\t\t"]],"start1":17346,"start2":17346,"length1":63,"length2":8},{"diffs":[[0,");\r\n"],[-1,"                console.log(\"after RW\"+ faces[0]);\r\n"],[0,"\t\t\t\t"]],"start1":17439,"start2":17439,"length1":60,"length2":8}]],"length":28603,"saved":false}
{"ts":1350529084311,"patch":[[{"diffs":[[0,");\r\n"],[-1,"            console.log(faceColors[0]);\r\n"],[0,"    "]],"start1":11977,"start2":11977,"length1":49,"length2":8},{"diffs":[[0,"x;\r\n"],[-1,"            console.log(currentCubies,faceColors,(currentCubies[index] & 7),faceIndex,faces[currentCubies[index] >> 4],(currentCubies[index] >> 4));\r\n\r\n"],[0,"    "]],"start1":12037,"start2":12037,"length1":160,"length2":8}]],"length":28410,"saved":false}
{"ts":1350529416571,"patch":[[{"diffs":[[0,"     -0-"],[-1,"\r\n"],[0,"\t\r\n\t*/\r\n"]],"start1":16189,"start2":16189,"length1":18,"length2":16}]],"length":28408,"saved":false}
{"ts":1350529433552,"patch":[[{"diffs":[[0,"ceColors"],[1,", isSide"],[0,")\r\n    {"]],"start1":11812,"start2":11812,"length1":16,"length2":24}]],"length":28416,"saved":false}
{"ts":1350529443580,"patch":[[{"diffs":[[0,"Index = 0;\r\n"],[1,"        if(isSide)\r\n"],[0,"        for("]],"start1":11854,"start2":11854,"length1":24,"length2":44}]],"length":28436,"saved":false}
{"ts":1350529460933,"patch":[[{"diffs":[[0,"     if("],[1,"!"],[0,"isSide)\r"]],"start1":11869,"start2":11869,"length1":16,"length2":17},{"diffs":[[0,"f(!isSide)\r\n"],[1,"    "],[0,"        for("]],"start1":11875,"start2":11875,"length1":24,"length2":28},{"diffs":[[0,"entCubies)\r\n"],[1,"    "],[0,"        {\r\n "]],"start1":11920,"start2":11920,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"faceIndex = "]],"start1":11947,"start2":11947,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"faces[curren"]],"start1":12022,"start2":12022,"length1":24,"length2":28},{"diffs":[[0,"x;\r\n        "],[1," "],[-1,"}"],[1,"   }\r\n        else"],[0,"\r\n    };\r\n  "]],"start1":12082,"start2":12082,"length1":25,"length2":43}]],"length":28471,"saved":false}
{"ts":1350529465528,"patch":[[{"diffs":[[0,"  else\r\n"],[1,"        {\r\n            \r\n        }\r\n"],[0,"    };\r\n"]],"start1":12107,"start2":12107,"length1":16,"length2":52}]],"length":28507,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350583578084,"patch":[[{"diffs":[[0,"aceSet = [];\r\n\r\n"],[1,"/**\r\n * An array used in calculating pairity for edges in on a rubix cube.\r\n */\r\nRubixState.edgeWindows = [[24,30],[27,41],[34,36],[29,45],[43,47],[32,38]];\r\n"],[0,"\r\n/**\r\n * The cu"]],"start1":755,"start2":755,"length1":32,"length2":190},{"diffs":[[0,"ction(text)\r\n{\r\n"],[1,"    \r\n    if(text.length !=  54) \r\n    {\r\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\r\n            \" faces!\");\r\n        return null;\r\n    }\r\n    \r\n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\r\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\r\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\r\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\r\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\r\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\r\n    \r\n    if(error !== \"\")\r\n    {\r\n        console.log(error);\r\n        return null;\r\n    }\r\n    \r\n"],[0,"    // An array "]],"start1":6812,"start2":6812,"length1":32,"length2":831},{"diffs":[[0,"it('');\r\n    }\r\n"],[1,"    \r\n    // Check the center cubies before advancing.\r\n    for(index = 0; index < faces.length; index ++)\r\n    {\r\n        if(RubixState.faceValues[index] !== faces[index][4])\r\n        {\r\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\r\n                 \" is wrong!\");\r\n            return null;\r\n        }\r\n    }\r\n"],[0,"        \r\n    va"]],"start1":8663,"start2":8663,"length1":32,"length2":386},{"diffs":[[0,"\n\r\n/"],[-1,"/RubixState.permutationReference = [0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0];\r\n\r\nRubixState.verifyState = function(state)\r\n{   \r\n    var faces = [0,0,0,0,0,0];\r\n    "],[1,"**\r\n * Verifies the supplied state. Should only be called on creation!\r\n * @param state the state to verify.\r\n * @return true if valid false if not.\r\n */\r\nRubixState.verifyState = function(state)\r\n{   \r\n    var faces = [0,0,0,0,0,0];\r\n    var faceWindow = 0;\r\n    \r\n    // A magical face checker that actually does what's described below."],[0,"\r\n  "]],"start1":12825,"start2":12825,"length1":248,"length2":346},{"diffs":[[0,"Colors, "],[-1,"isSi"],[1,"bufferIn"],[0,"de"],[1,"x"],[0,")\r\n    {"]],"start1":13223,"start2":13223,"length1":22,"length2":27},{"diffs":[[0,"if(!"],[-1,"isSide)"],[1,"bufferIndex)\r\n        {"],[0,"\r\n  "]],"start1":13288,"start2":13288,"length1":15,"length2":31},{"diffs":[[0,"\n            }\r\n"],[1,"        }\r\n"],[0,"        else\r\n  "]],"start1":13515,"start2":13515,"length1":32,"length2":43},{"diffs":[[0,"    "],[-1,"    {\r\n            \r\n        "],[1,"\t{\r\n\t\t\tfor(var index = 0; index <currentCubies.length; index ++)\r\n            {\r\n                faceIndex = faceColors.indexOf(currentCubies[index] & 7);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(RubixState.edgeWindows[currentCubies[index] >> 4].indexOf(bufferIndex +index) !=-1)\r\n                {\r\n\t\t\t\t\tfaceWindow += faceIndex;\r\n                }\r\n            }\r\n\t\t"],[0,"}\r\n "]],"start1":13556,"start2":13556,"length1":37,"length2":351},{"diffs":[[0,"  \r\n"],[-1,"    console.log(faces);\r\n"],[0,"    "]],"start1":17518,"start2":17518,"length1":33,"length2":8},{"diffs":[[0,"  \r\n"],[-1,"    faces = [0,0,0,0,0,0];\r\n\r\n\t/**"],[1,"\r\n\t/**\r\n     * Performs the edge parity check.\r\n     * \r\n     * Arbitrarily assigns fixed windows to a solved cube alternating horizontal and vertical as follows:\r\n     * "],[0,"\r\n  "]],"start1":17784,"start2":17784,"length1":42,"length2":179},{"diffs":[[0,"  -0-\t\r\n"],[1,"     * After assigning these windows, the algorithm then determines what the original value of the \r\n     * side face was and adds it to the window sum (if the face is in a position\r\n     * that was originally assigned a 1). If the sum mod 2 is zero the cube is valid\r\n     * for our goal state, this means that the total number of reachable corner\r\n     * states is effectively halved.\r\n"],[0,"\t*/\r\n   "]],"start1":18158,"start2":18158,"length1":16,"length2":404},{"diffs":[[0,"           [0,1]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\tbreak;\r\n"]],"start1":18820,"start2":18820,"length1":32,"length2":38},{"diffs":[[0,"   [2,0]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t"]],"start1":18987,"start2":18987,"length1":16,"length2":22},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[0,3]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\te"]],"start1":19221,"start2":19221,"length1":32,"length2":38},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[1,2]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\tb"]],"start1":19344,"start2":19344,"length1":32,"length2":38},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[5,0]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\t/"]],"start1":19606,"start2":19606,"length1":32,"length2":38},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[4,1]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\t/"]],"start1":19833,"start2":19833,"length1":32,"length2":38},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[3,2]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\tb"]],"start1":19966,"start2":19966,"length1":32,"length2":38},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[2,4]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\te"]],"start1":20214,"start2":20214,"length1":32,"length2":38},{"diffs":[[0,"]],\r\n\t\t\t\t\t\t[1,5]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\t}\r\n\t\t\t\tb"]],"start1":20337,"start2":20337,"length1":32,"length2":38},{"diffs":[[0,"1]],\r\n\t\t\t\t\t[4,3]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\tbreak;\r\n"]],"start1":20473,"start2":20473,"length1":32,"length2":38},{"diffs":[[0,"1]],\r\n\t\t\t\t\t[3,5]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\tbreak;\r\n"]],"start1":20602,"start2":20602,"length1":32,"length2":38},{"diffs":[[0,"1]],\r\n\t\t\t\t\t[5,4]"],[-1,""],[1,",index"],[0,");\r\n\t\t\t\tbreak;\r\n"]],"start1":20731,"start2":20731,"length1":32,"length2":38},{"diffs":[[0,"\n\t\t}"],[-1,"\r\n\t\t\r\n\r\n\t"],[1,"\t\r\n       \r\n        "],[0,"\r\n  "]],"start1":20959,"start2":20959,"length1":17,"length2":28},{"diffs":[[0,"    "],[-1,"    \tconsole.log(faces);"],[1,"if(faceWindow % 2 === 1)\r\n    {\r\n        console.log(\"One of your side cubies have been flipped, please look into this.\");\r\n        return false;\r\n    }"],[0,"\r\n\r\n"]],"start1":21193,"start2":21193,"length1":32,"length2":160},{"diffs":[[0,"\r\n\r\n"],[-1,"/**\r\n * The to String functionality for a RubixState.\r\n * @param state The state to retrieve a String from.\r\n * @return A String for the RubixState object.\r\n */\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\nRubixState.cubieMap = {\r\n    0 : [0, 1, 2], // c00\r\n    1 : [24, 25],\r\n    2 : [3, 4, 5], // c01\r\n    3 : [26, 27],\r\n    4 : [28, 29],\r\n    5 : [6, 7, 8], // c02\r\n    6 : [30, 31],\r\n    7 : [9, 10, 11], // c03\r\n    8 : [32, 33],\r\n    9 : [34, 35],\r\n    10 : [36, 37],\r\n    11 : [38, 39],\r\n    12 : [15, 16, 17], // c05\r\n    13 : [42, 43],\r\n    14 : [18, 19, 20], // c06\r\n    15 : [40, 41],\r\n    16 : [44, 45],\r\n    17 : [12, 13, 14], // c04\r\n    18 : [46, 47],\r\n    19 : [21, 22, 23] // c07\r\n};\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState()\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = null;   \r\n    \r\n}\r\n\r\n/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * A scratch array used in face rotations.\r\n */\r\nRubixState.faceSet = [];\r\n\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\n/**\r\n * The face value map used in tanslating moves to something human readable. \r\n */\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n/*RubixState.goalState = RubixState.createWithGoalState();*/\r\n\r\n/**\r\n * Defines cubie locations for a side.\r\n */\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\n\r\n/**\r\n * Handles face rotations. \r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n * \r\n * @param state The state that is to be changed.\r\n * @param face The face that the rotation occurs on.\r\n * @param rotations The number of clockwise rotations for the action.\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    // The inidicies define the rotation behavior.\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    \r\n    /*\r\n     * cubie - holds the cubie index.\r\n     * size - A generic size variable.\r\n     * newIndex - Holds a modified index.\r\n     * cFace - A cubieFace.\r\n     * offset - A generic offset variable.\r\n    */\r\n    var cubie, size, newIndex, cFace, offset;\r\n    \r\n    // Iterate over the indicies and calculate values of the rotated cubies.\r\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\r\n    {\r\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 4\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        // For the number of faces calculate individual face rotations and add them to our scratch.\r\n        for(cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    // For each cubie shift the face data to the appropriate location in the buffer.\r\n    // This is done in increments of Corner,Side 4 times.\r\n    for (index = 0, size = indicies.length; index < size; index+=2)\r\n    {\r\n        // Calculate the index of the new cubie index after rotation.\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        // Clear the face set of data.\r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        // Determine the face of each of the new buffer locations and load the \r\n        // new index in the appropriate position. This maps face to memory location.\r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        // Place the cubie face data in the new position.\r\n        for(offset = 0; offset < 3; offset"],[1,"RubixState.hash = function(state, cubies)\r\n{\r\n    var hash = 0, faceIndicies, face, index, jndex;\r\n    \r\n    for (index = 0; index < cubies.length; index"],[0,"++)\r"]],"start1":25482,"start2":25482,"length1":9824,"length2":161},{"diffs":[[0,"; index++)\r\n    "],[-1,"    "],[0,"{\r\n            c"]],"start1":25632,"start2":25632,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"    cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n        \r\n        // See above.\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        \r\n         for(offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Rotates a face with some boolean magic.\r\n * \r\n * @param faceState The Uint8 number representing the cubie face.\r\n * @param face The face that the rotation is occuring about [0-5].\r\n * @param rotations The number of counterclockwise rotations [1-3].\r\n * @return A Uint8 with the following bit pattern: -***-+++ where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n */\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    // Shift right to get the value of the leading for bits.\r\n    var faceVal = Number(faceState >> 4);\r\n    \r\n    // Mask with 00000111 to retrieve the color from the faceState.\r\n    var colorVal = faceState & 7;\r\n\r\n    // If the mapping of face rotations is valid perform it, \r\n    // else it must be unaffected at this phase.\r\n    if ( RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal"],[1,"faceIndicies = RubixState.cubieMap[cubies[index]];\r\n        console.log(faceIndicies)"],[0,";\r\n    "],[-1,"}\r\n"],[0,"    "],[-1,"else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\n/**\r\n * Creates a Rubik cube with the goal state.\r\n */\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA #JohnDidn'tFeelLikeWritingASeparateInitializer\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\n/**\r\n * Creates a Rubik Cube from an upper case String of characters from a string \r\n * from the alphabet: {R,G,Y,B,O,W}.\r\n * \r\n * @param text The textual representation of the rubik cube as specified in the \r\n *      assignment.\r\n * @return A state for the supplied text.\r\n */\r\nRubixState.createWithString = function(text)\r\n{\r\n    // An array to hold the intermediate state.\r\n    var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; i"],[1,"\r\n        for (jndex = 0; j"],[0,"ndex <"],[-1,"length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    // Splits the strings into character arrays.\r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n    \r\n    return RubixState.verifyState(state) ? state : null;\r\n};\r\n\r\n//RubixState.permutationReference = [0,2,1, 0,1,2, 0,1,2, 0,2,1, 1,0,2, 2,0,1, 1,0,2, 1,2,0, 1,0, 0,1, 0,1, 1,0, 1,0, 0,1, 1,0, 1,0, 0,1, 0,1, 0,1, 1,0];\r\n\r\nRubixState.verifyState = function(state)\r\n{   \r\n    var faces = [0,0,0,0,0,0];\r\n    \r\n    var updateFaceCheck = function(currentCubies, faceColors)\r\n    {\r\n        var faceIndex = 0;\r\n        for(var index in currentCubies)\r\n        {\r\n            faceIndex = faceColors.indexOf(currentCubies[index] & 7);\r\n            faces[currentCubies[index] >> 4] += faceIndex;\r\n                        console.log(currentCubies,faceColors,faces[currentCubies[index] >> 4]);\r\n\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Does corner cubie parity checks. \r\n     * \r\n     * Each corner face is assigned a number derived from the assumed original \r\n     * position of the cubie color configuration in the original cube. All faces \r\n     * for Red and Orange are assigned 0 for the purpose of this calculation.\r\n     * After assigning these zeroes each cubie face is assigned a number while moving\r\n     * clockwise from the numbered faces. For example the RBY cubie is assigned as R-0 B-1 Y-2.\r\n     * This is repeated for all colors and the result is as follows.\r\n     * \r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     * 1-2 1-2 1-2\r\n     * --- --- ---\r\n     * 2-1 2-1 2-1\r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     *     1-2\r\n     *     ---\r\n     *     2-1\r\n     * \r\n     * Opposing sides regardless of legal moves will always add up to some multiple of 3\r\n     * allowing us to check corner parity. Logically this indicates that only 1/3 of\r\n     * possible cubie configurations are possible with legal moves.\r\n     */ \r\n    for (var index = 0; index < 24; index +=3)\r\n    {\r\n        switch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7) + \r\n            (state.cubies[index + 2] & 7)){    \r\n            //RYG\r\n            case 3:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,2,1]);\r\n                break;\r\n            //RBY\r\n            case 5:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [0,3,2]);\r\n                break;\r\n            //RGW\r\n            case 6:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,1,5]);\r\n                break;\r\n            //OGY\r\n            case 7:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,1,2]);\r\n                break;\r\n            //RWB\r\n            case 8:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,5,3]);\r\n                break;\r\n            //OYB\r\n            case 9:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1] , state.cubies[index + 2]],\r\n                    [4,2,3]);\r\n                break;\r\n            //OWG\r\n            case 10:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [4,5,1]);\r\n                break;\r\n            //OBW\r\n            case 12:  \r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,3,5]);\r\n                break;\r\n            default:\r\n                console.log(\"An invalid cubie has been discovered! Bad corner cubie \" +\r\n                    \"combination! For corner:\"+  index / 3 );\r\n                return false;\r\n        }\r\n        \r\n        if((state.cubies[index] & 7) =="],[1," faceIndicies.length; jndex++)\r\n        {\r\n            face "],[0,"= "],[-1,"("],[0,"stat"]],"start1":25655,"start2":25655,"length1":11104,"length2":199},{"diffs":[[0,"ies["],[-1,"index + 1] & 7) ||\r\n            (state.cubies[index] & 7) === (state.cubies[index + 2] & 7) ||\r\n    \t\t(state.cubies[index + 1] & 7) === (state.cubies[index + 2] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Corner Cubie:\" + index/3 + \" had duplicate colors.\");\r\n            return false;"],[1,"jndex];\r\n         "],[0,"   \r"]],"start1":25859,"start2":25859,"length1":283,"length2":26},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"}       \r\n    console.log(faces);\r\n    \r\n    if(((faces[0]+faces[4]) % 3) + ((faces[1] + faces[3]) % 3) + ((faces[2] + faces[5]) % 3) !== 0)\r\n    {\r\n        console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\r\n        return false;\r\n    }\r\n    \r\n    faces = [0,0,0,0,0,0];\r\n\r\n\t/**\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     * -1- -0- -1-\r\n     * 0-0 1-1 0-0\r\n     * -1- -0- -1-\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     *     -0-\r\n     *     1-1\r\n     *     -0-\r\n\t\r\n\t*/\r\n    for (index = 24; index < 48; index +=2)\r\n    {\r\n\t\tswitch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7))\r\n\t\t{\r\n\t\t\t//RG\r\n\t\t\tcase 1:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [0,1]);\r\n\t\t\t\tbreak;\r\n\t\t\t//RY\r\n\t\t\tcase 2:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [2,1]);\r\n\t\t\t\tbreak;\r\n\t\t\t//RB, YG\r\n\t\t\tcase 3:\r\n\t\t\t\tif(([state.cubies[index] & 7) === 0 | ([state.cubies[index] & 7) === 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[0,3]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,2]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//RW, OG, YB\r\n\t\t\tcase 5:\r\n\t\t\t\t//RW\r\n\t\t\t\tif(([state.cubies[index] & 7) === 0 | ([state.cubies[index] & 7) === 5)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[5,0]);\r\n\t\t\t\t}\r\n\t\t\t\t//OG\r\n\t\t\t\telse if (([state.cubies[index] & 7) === 4 | ([state.cubies[index] & 7) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[4,1]);\r\n\t\t\t\t}\r\n\t\t\t\t//YB\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[3,2]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OY, WG\r\n\t\t\tcase 6:\r\n\t\t\t\tif(([state.cubies[index] & 7) === 2 | ([state.cubies[index] & 7) === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[2,4]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,5]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OB\r\n\t\t\tcase 7:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[4,3]);\r\n\t\t\t\tbreak;\r\n\t\t\t//WB\r\n\t\t\tcase 8:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[3,5]);\r\n\t\t\t\tbreak;\r\n\t\t\t//OW\r\n\t\t\tcase 9:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[5,4]);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\r\n                    \"combination! For side:\"+  (index - 24) / 2);\r\n                return false;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(faces);\r\n\r\n\t\r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Side Cubie:\" + (index-24) / 2+ \" had duplicate colors.\"); \r\n            return false;   \r\n        }\r\n    }\r\n    \r\n    return true;   \r\n};\r\n\r\nRubixState.findCornerPermutations = function(f1, f2, f3, cubeFace1, cubeFace2, cubFace3)\r\n{\r\n    \r\n};\r\n\r\n/**\r\n * Creates a UInt8 face state with the following binary encoding: -***-+++ \r\n * where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n * \r\n * Please note there are 2 bits per space wasted.\r\n * \r\n * @param color The uppercase color character that will be encoded to a 3 bit pattern.\r\n * @param face The face side to be encoded into the state.\r\n * \r\n * @return The encoded face state as a Uint8.\r\n */\r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\n/**\r\n * Creates a copy of the supplied RubixState object.\r\n * \r\n * @param state The state that is to be copied.\r\n * @return The copied state.\r\n */\r\nRubixState.copy = function(state)\r\n{\r\n    var newState = new RubixState(), copy = state.cubies.buffer.slice(0);\r\n    newState.cubies = new Uint8Array(copy);   \r\n    \r\n    return newState;\r\n};\r\n\r\n/**\r\n * The equivalence function for two RubixState objects.\r\n * @param state1 A state to be checked for equivalence.\r\n * @param state2 A state to be checked for equivalence.\r\n * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n */\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\r\n     */\r\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);        \r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n/**\r\n * Finds the cubie located at the specified cubie of state1 in state2.\r\n */\r\nRubixState.findCubie = function(state1, cubie, state2)\r\n{\r\n    var colorId = RubixState.cubieColorId(state1, cubie);\r\n    \r\n    for (var index = 0; index < 20; index++)\r\n    {\r\n        if (RubixState.cubieColorId(state2, index) === colorId)\r\n            return index;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";\r\n};\r\n\r\nRubixState.areCubiesEqual = function(state1, state2, cubie)\r\n{\r\n    var cubieIndex, cubieIndicies = RubixState.cubieMap[cubie];\r\n    \r\n    for (var index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        cubieIndex = cubieIndicies[index];\r\n        \r\n        if (state1.cubies[cubieIndex] !== state2.cubies[cubieIndex])\r\n            return false;\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n/**\r\n * Returns a unique ID to represent the colors of the faces of the specified cubie.\r\n * Disregards orientation.\r\n * @param state the state containing the cubie\r\n * @param cubie the index of the cubie according to the cubieMap\r\n * @return a unique color ID.\r\n */\r\nRubixState.cubieColorId = function(state, cubie)\r\n{\r\n    var colorId = 0, faceIds = [], cubieIndicies = RubixState.cubieMap[cubie], index;\r\n    \r\n    for (index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        faceIds[index] = state.cubies[cubieIndicies[index]] & 7;\r\n    }\r\n    \r\n    faceIds.sort();\r\n    \r\n    for (index = 0; index < faceIds.length; index++)\r\n    {\r\n        colorId = (colorId << 3) | faceIds[index];\r\n    }\r\n    \r\n    // A corner ID could produce the same as an edge, so vary them by 13 bits\r\n    if (faceIds.length === 2)\r\n        colorId = colorId << 13;\r\n    \r\n    return colorId"],[1,"hash = (hash << 3) | (face & 7);\r\n        }\r\n    }\r\n    \r\n    return hash"],[0,";\r\n}"]],"start1":25890,"start2":25890,"length1":7183,"length2":85},{"diffs":[[0,"   \r\n    \r\n}"],[-1,""],[1,";\r\n\r\nRubixState.corners = [0, 2, 5, 7, 12, 14, 17, 19];\r\nRubixState.edgesTop = [9, 10, 13, 15, 16, 18];\r\nRubixState.edgesBottom = [1, 3, 4, 6, 8, 11]"],[0,";\r\n\r\nRubixSt"]],"start1":28502,"start2":28502,"length1":24,"length2":173}]],"length":31616,"saved":false}
{"ts":1350583752386,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"        console.log(faceIndicies);\r\n"],[0,"    "]],"start1":25707,"start2":25707,"length1":44,"length2":8}]],"length":31580,"saved":false}
{"ts":1350583989912,"patch":[[{"diffs":[[0,"ies["],[1,"faceIndicies["],[0,"jndex]"],[1,"]"],[0,";\r\n "]],"start1":25823,"start2":25823,"length1":14,"length2":28}]],"length":31594,"saved":false}
{"ts":1350584609330,"patch":[[{"diffs":[[0,"dex]];\r\n        "],[1,"console.log(faceIndicies);"],[0,"\r\n        for (j"]],"start1":25703,"start2":25703,"length1":32,"length2":58}]],"length":31620,"saved":false}
{"ts":1350584783592,"patch":[[{"diffs":[[0,"];\r\n"],[-1,"        console.log(faceIndicies);\r\n"],[0,"    "]],"start1":25707,"start2":25707,"length1":44,"length2":8},{"diffs":[[0," | (face & 7);\r\n"],[1,"            \r\n            console.log(hash.toString(2));\r\n"],[0,"        }\r\n    }"]],"start1":25884,"start2":25884,"length1":32,"length2":90}]],"length":31642,"saved":false}
{"ts":1350585381629,"patch":[[{"diffs":[[0,"= (hash "],[-1,"<< 3) | "],[1,"* 8) + Number"],[0,"(face & "]],"start1":25871,"start2":25871,"length1":24,"length2":29}]],"length":31647,"saved":false}
{"ts":1350585412512,"patch":[[{"diffs":[[0," * 8) + "],[-1,"Number"],[0,"(face & "]],"start1":25878,"start2":25878,"length1":22,"length2":16}]],"length":31641,"saved":false}
{"ts":1350587729946,"patch":[[{"diffs":[[0,"\r\n            \r\n"],[1,"            // Muliplying by 8 is same as shifting 3 left; need to keep the numbers\r\n            // 64-bit as JS converts to 32-bit when using bitwise operators.\r\n"],[0,"            hash"]],"start1":25838,"start2":25838,"length1":32,"length2":195}]],"length":31804,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350659335705,"patch":[[{"diffs":[[0,"ate.hash"],[1,"Code"],[0," = funct"]],"start1":25493,"start2":25493,"length1":16,"length2":20}]],"length":31808,"saved":false}
{"ts":1350659788238,"patch":[[{"diffs":[[0,");\r\n"],[-1,"            \r\n            console.log(hash.toString(2));\r\n"],[0,"    "]],"start1":26062,"start2":26062,"length1":66,"length2":8}]],"length":31750,"saved":false}
{"ts":1350669018612,"patch":[[{"diffs":[[0,"}\r\n    }\r\n    \r\n"],[1,"    console.log(hash);\r\n    \r\n"],[0,"    return hash;"]],"start1":26074,"start2":26074,"length1":32,"length2":62}]],"length":31780,"saved":false}
{"ts":1350669035957,"patch":[[{"diffs":[[0,"log(hash"],[1,".toString(2)"],[0,");\r\n    "]],"start1":26102,"start2":26102,"length1":16,"length2":28}]],"length":31792,"saved":false}
{"ts":1350669050116,"patch":[[{"diffs":[[0,"tring(2)"],[1,".length"],[0,");\r\n    "]],"start1":26114,"start2":26114,"length1":16,"length2":23}]],"length":31799,"saved":false}
{"ts":1350669078260,"patch":[[{"diffs":[[0,"tring(2)"],[-1,".length"],[0,");\r\n    "]],"start1":26114,"start2":26114,"length1":23,"length2":16}]],"length":31792,"saved":false}
{"ts":1350669350527,"patch":[[{"diffs":[[0,", 17, 19];\r\n"],[1,"RubixState.corners7 = [0, 2, 5, 7, 12, 14, 17];\r\n"],[0,"RubixState.e"]],"start1":28735,"start2":28735,"length1":24,"length2":73}]],"length":31841,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350672900772,"patch":[[{"diffs":[[0,"rue;  \r\n    "],[1,"if(typeof state1 === "],[0,"\r\n    /**\r\n "]],"start1":23183,"start2":23183,"length1":24,"length2":45}]],"length":31862,"saved":false}
{"ts":1350672903137,"patch":[[{"diffs":[[0,"te1 === "],[1,"\" "],[0,"\r\n    /*"]],"start1":23208,"start2":23208,"length1":16,"length2":18}]],"length":31864,"saved":false}
{"ts":1350672929062,"patch":[[{"diffs":[[0," if("],[-1,"typeof state1 === \" "],[1,"state1.cubies)\r\n    {\r\n        \r\n    }"],[0,"\r\n  "]],"start1":23194,"start2":23194,"length1":28,"length2":46}]],"length":31882,"saved":false}
{"ts":1350672950040,"patch":[[{"diffs":[[0," = true;  \r\n"],[1,"    var s1 = state1;\r\n    var s2 = state2;\r\n"],[0,"    if(state"]],"start1":23179,"start2":23179,"length1":24,"length2":68},{"diffs":[[0,"\n    {\r\n        "],[1,"    "],[0,"\r\n    }\r\n    /**"]],"start1":23257,"start2":23257,"length1":32,"length2":36}]],"length":31930,"saved":false}
{"ts":1350672957446,"patch":[[{"diffs":[[0," {\r\n        "],[-1,"    "],[1,"s1 = s1.cubies;"],[0,"\r\n    }\r\n   "]],"start1":23261,"start2":23261,"length1":28,"length2":39}]],"length":31941,"saved":false}
{"ts":1350672972263,"patch":[[{"diffs":[[0,"es;\r\n    }\r\n"],[1,"    \r\n    if(s2.cubies)\r\n    {\r\n        s2 = s2.cubies;\r\n    }\r\n"],[0,"    /**\r\n   "]],"start1":23285,"start2":23285,"length1":24,"length2":88}]],"length":32005,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350751276188,"patch":[[{"diffs":[[0,"    "],[-1,"var s1 = state1;\r\n    var s2 = state2;\r\n    if(state1.cubies)\r\n    {\r\n        s1 = s1.cubies;\r\n    }\r\n    \r\n    if(s2.cubies)\r\n    {\r\n        s2 = s2.cubies;\r\n    }"],[0,"\r\n  "]],"start1":23191,"start2":23191,"length1":172,"length2":8},{"diffs":[[0,"  \r\n"],[-1,"    console.log(hash.toString(2));\r\n    \r\n"],[0,"    "]],"start1":26086,"start2":26086,"length1":50,"length2":8}]],"length":31799,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350831895202,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"RubixState.findCornerPermutations = function(f1, f2, f3, cubeFace1, cubeFace2, cubFace3)\r\n{\r\n    \r\n};\r\n"],[0,"\r\n/*"]],"start1":21376,"start2":21376,"length1":111,"length2":8}]],"length":31696,"saved":false}
{"ts":1350831942306,"patch":[[{"diffs":[[0,"tate)\r\n{\r\n  "],[1,"/*"],[0,"  var newSta"]],"start1":22585,"start2":22585,"length1":24,"length2":26},{"diffs":[[0,"ay(copy);   "],[1,"*/"],[0,"\r\n    \r\n    "]],"start1":22706,"start2":22706,"length1":24,"length2":26},{"diffs":[[0,"turn new"],[1," Rubix"],[0,"State"],[1,"()"],[0,";\r\n};\r\n\r"]],"start1":22734,"start2":22734,"length1":21,"length2":29}]],"length":31708,"saved":false}
{"ts":1350831950413,"patch":[[{"diffs":[[0," RubixState("],[1,"state.cubies.buffer.slice(0)"],[0,");\r\n};\r\n\r\n/*"]],"start1":22742,"start2":22742,"length1":24,"length2":52}]],"length":31736,"saved":false}
{"ts":1350831957956,"patch":[[{"diffs":[[0,"ixState("],[1,"buffer"],[0,")\r\n{\r\n  "]],"start1":266,"start2":266,"length1":16,"length2":22}]],"length":31742,"saved":false}
{"ts":1350831987784,"patch":[[{"diffs":[[0,"ubies = "],[-1,"null;"],[1,"buffer ? new Uint8Array(buffer) : null;\r\n    \r\n "],[0,"   \r\n   "]],"start1":475,"start2":475,"length1":21,"length2":64}]],"length":31785,"saved":false}
{"ts":1350831998476,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"  /*  var newState = new RubixState(), copy = state.cubies.buffer.slice(0);\r\n    newState.cubies = new Uint8Array(copy);   */\r\n    \r\n"],[0,"    "]],"start1":22640,"start2":22640,"length1":141,"length2":8}]],"length":31652,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350843328875,"patch":[[{"diffs":[[0,"l;\r\n"],[-1,"    \r\n    \r\n    \r\n"],[0,"}\r\n\r"]],"start1":520,"start2":520,"length1":26,"length2":8}]],"length":31634,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350875809363,"patch":[[{"diffs":[[0,"ice(0));\r\n};\r\n\r\n"],[1,"RubixState.copyInto = function (baseState, copiedState)\r\n{\r\n    if(copiedState) \r\n    {\r\n        for(var index in baseState)\r\n        {\r\n            copiedState.cubies[index] = baseState.cubies[index];    \r\n        }\r\n        \r\n        return copiedState;\r\n    }\r\n    else\r\n    {\r\n        return RubixState.copy(baseState);\r\n    }\r\n};\r\n\r\n"],[0,"/**\r\n * The equi"]],"start1":22674,"start2":22674,"length1":32,"length2":370}]],"length":31972,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350877140705,"patch":[[{"diffs":[[0,"dex ++)\r\n    {\r\n"],[1,"        console.log(equal, te1.cubies[index], te1.cubies[index]);\r\n"],[0,"        equal = "]],"start1":23564,"start2":23564,"length1":32,"length2":99}]],"length":32039,"saved":false}
{"ts":1350877145629,"patch":[[{"diffs":[[0,"index], "],[1,"sta"],[0,"te"],[-1,"1"],[1,"2"],[0,".cubies["]],"start1":23618,"start2":23618,"length1":19,"length2":22}]],"length":32042,"saved":false}
{"ts":1350877149669,"patch":[[{"diffs":[[0,"(equal, "],[1,"sta"],[0,"te1.cubi"]],"start1":23599,"start2":23599,"length1":16,"length2":19}]],"length":32045,"saved":false}
{"ts":1350877152242,"patch":[[{"diffs":[[0,"    "],[-1,"console.log("],[0,"equal"],[-1,","],[0," "],[1,"= ("],[0,"stat"]],"start1":23584,"start2":23584,"length1":27,"length2":17},{"diffs":[[0,"s[index]"],[-1,","],[1," ==="],[0," state2."]],"start1":23609,"start2":23609,"length1":17,"length2":20},{"diffs":[[0,"index]);"],[-1,"\r\n"],[0,"        "],[1,"\r\n                console.log("],[0,"equal"],[1,","],[0," "],[-1,"= ("],[0,"state1.c"]],"start1":23636,"start2":23636,"length1":35,"length2":61},{"diffs":[[0,"e1.cubies[index]"],[-1," ==="],[1,","],[0," state2.cubies[i"]],"start1":23693,"start2":23693,"length1":36,"length2":33},{"diffs":[[0,"ies[index]);"],[-1,"        "],[1,"\r\n"],[0,"\r\n    }\r\n\r\n "]],"start1":23721,"start2":23721,"length1":32,"length2":26}]],"length":32055,"saved":false}
{"ts":1350877281015,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"                console.log(equal, state1.cubies[index], state2.cubies[index]);\r\n\r\n"],[0,"    "]],"start1":23650,"start2":23650,"length1":91,"length2":8}]],"length":31972,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350877883802,"patch":[[{"diffs":[[0,"copy"],[-1,"Into"],[1,"AndRotate"],[0," = f"]],"start1":22701,"start2":22701,"length1":12,"length2":17}]],"length":31977,"saved":false}
{"ts":1350877907861,"patch":[[{"diffs":[[0,"   }\r\n        \r\n"],[1,"        RubixState.rotate(copiedState, )\r\n"],[0,"        return c"]],"start1":22907,"start2":22907,"length1":32,"length2":74}]],"length":32019,"saved":false}
{"ts":1350877915276,"patch":[[{"diffs":[[0," copiedState"],[1,",actions"],[0,")\r\n{\r\n    if"]],"start1":22737,"start2":22737,"length1":24,"length2":32}]],"length":32027,"saved":false}
{"ts":1350877954824,"patch":[[{"diffs":[[0,"edState,"],[1," actions[0],actions[1]"],[0," )\r\n    "]],"start1":22961,"start2":22961,"length1":16,"length2":38}]],"length":32049,"saved":false}
{"ts":1350877957538,"patch":[[{"diffs":[[0,"tions[1]"],[-1," "],[1,";"],[0,")\r\n     "]],"start1":22983,"start2":22983,"length1":17,"length2":17}]],"length":32049,"saved":false}
{"ts":1350877960221,"patch":[[{"diffs":[[0,"s[1]"],[-1,";"],[0,")"],[1,";"],[0,"\r\n  "]],"start1":22987,"start2":22987,"length1":10,"length2":10}]],"length":32049,"saved":false}
{"ts":1350877974601,"patch":[[{"diffs":[[0,"       \r\n       "],[1,"\r\n    }\r\n    else\r\n    {\r\n        copiedState = RubixState.copy(baseState);\r\n    }\r\n    "],[0," RubixState.rota"]],"start1":22922,"start2":22922,"length1":32,"length2":120},{"diffs":[[0,"e;\r\n"],[-1,"    }\r\n    else\r\n    {\r\n        return RubixState.copy(baseState);\r\n    }\r\n"],[0,"};\r\n"]],"start1":23108,"start2":23108,"length1":83,"length2":8}]],"length":32062,"saved":false}
{"ts":1350877980639,"patch":[[{"diffs":[[0,"\n    }\r\n    "],[-1," "],[0,"RubixState.r"]],"start1":23014,"start2":23014,"length1":25,"length2":24},{"diffs":[[0,"tions[1]);\r\n"],[-1,"    "],[0,"    return c"]],"start1":23070,"start2":23070,"length1":28,"length2":24}]],"length":32057,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350879861644,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        \r\n       \r\n"],[0,"    "]],"start1":22917,"start2":22917,"length1":27,"length2":8}]],"length":32038,"saved":false}
{"ts":1350879878744,"patch":[[{"diffs":[[0,"ndex]);     "],[1,"\r\n"],[0,"   "],[1,"     console.log(state2.cubies[index]);"],[0,"\r\n    }\r\n\r\n "]],"start1":23703,"start2":23703,"length1":27,"length2":68}]],"length":32079,"saved":false}
{"ts":1350879907630,"patch":[[{"diffs":[[0,"[index])"],[-1,";\r\n"],[1,",state2.cubies[index]);"],[0,"    }\r\n\r"]],"start1":23750,"start2":23750,"length1":19,"length2":39}]],"length":32099,"saved":false}
{"ts":1350879913978,"patch":[[{"diffs":[[0,"le.log(state"],[-1,"2"],[1,"1"],[0,".cubies[inde"]],"start1":23730,"start2":23730,"length1":25,"length2":25}]],"length":32099,"saved":false}
{"ts":1350879922127,"patch":[[{"diffs":[[0,"index]);    "],[1,"\r\n        "],[0,"}\r\n\r\n    ret"]],"start1":23773,"start2":23773,"length1":24,"length2":34}]],"length":32109,"saved":false}
{"ts":1350879925463,"patch":[[{"diffs":[[0,"s[index]"],[-1,")"],[0,",state2."]],"start1":23749,"start2":23749,"length1":17,"length2":16}]],"length":32108,"saved":false}
{"ts":1350880112246,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        console.log(state1.cubies[index],state2.cubies[index]);    \r\n"],[0,"    "]],"start1":23713,"start2":23713,"length1":77,"length2":8}]],"length":32039,"saved":false}
{"ts":1350880117780,"patch":[[{"diffs":[[0,"ex]);     \r\n"],[-1,"    "],[0,"    }\r\n\r\n   "]],"start1":23705,"start2":23705,"length1":28,"length2":24}]],"length":32035,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350880393463,"patch":[[{"diffs":[[1,"/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState(buffer)\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = buffer ? new Uint8Array(buffer) : null;\r\n}\r\n\r\n/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * A scratch array used in face rotations.\r\n */\r\nRubixState.faceSet = [];\r\n\r\n/**\r\n * An array used in calculating pairity for edges in on a rubix cube.\r\n */\r\nRubixState.edgeWindows = [[24,30],[27,41],[34,36],[29,45],[43,47],[32,38]];\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\n/**\r\n * The face value map used in tanslating moves to something human readable. \r\n */\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n/*RubixState.goalState = RubixState.createWithGoalState();*/\r\n\r\n/**\r\n * Defines cubie locations for a side.\r\n */\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\n\r\n/**\r\n * Handles face rotations. \r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n * \r\n * @param state The state that is to be changed.\r\n * @param face The face that the rotation occurs on.\r\n * @param rotations The number of clockwise rotations for the action.\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    // The inidicies define the rotation behavior.\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    \r\n    /*\r\n     * cubie - holds the cubie index.\r\n     * size - A generic size variable.\r\n     * newIndex - Holds a modified index.\r\n     * cFace - A cubieFace.\r\n     * offset - A generic offset variable.\r\n    */\r\n    var cubie, size, newIndex, cFace, offset;\r\n    \r\n    // Iterate over the indicies and calculate values of the rotated cubies.\r\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\r\n    {\r\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 4\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        // For the number of faces calculate individual face rotations and add them to our scratch.\r\n        for(cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    // For each cubie shift the face data to the appropriate location in the buffer.\r\n    // This is done in increments of Corner,Side 4 times.\r\n    for (index = 0, size = indicies.length; index < size; index+=2)\r\n    {\r\n        // Calculate the index of the new cubie index after rotation.\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        // Clear the face set of data.\r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        // Determine the face of each of the new buffer locations and load the \r\n        // new index in the appropriate position. This maps face to memory location.\r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        // Place the cubie face data in the new position.\r\n        for(offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n        \r\n        // See above.\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        \r\n         for(offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Rotates a face with some boolean magic.\r\n * \r\n * @param faceState The Uint8 number representing the cubie face.\r\n * @param face The face that the rotation is occuring about [0-5].\r\n * @param rotations The number of counterclockwise rotations [1-3].\r\n * @return A Uint8 with the following bit pattern: -***-+++ where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n */\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    // Shift right to get the value of the leading for bits.\r\n    var faceVal = Number(faceState >> 4);\r\n    \r\n    // Mask with 00000111 to retrieve the color from the faceState.\r\n    var colorVal = faceState & 7;\r\n\r\n    // If the mapping of face rotations is valid perform it, \r\n    // else it must be unaffected at this phase.\r\n    if ( RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\r\n    }\r\n    else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\n/**\r\n * Creates a Rubik cube with the goal state.\r\n */\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA #JohnDidn'tFeelLikeWritingASeparateInitializer\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\n/**\r\n * Creates a Rubik Cube from an upper case String of characters from a string \r\n * from the alphabet: {R,G,Y,B,O,W}.\r\n * \r\n * @param text The textual representation of the rubik cube as specified in the \r\n *      assignment.\r\n * @return A state for the supplied text.\r\n */\r\nRubixState.createWithString = function(text)\r\n{\r\n    \r\n    if(text.length !=  54) \r\n    {\r\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\r\n            \" faces!\");\r\n        return null;\r\n    }\r\n    \r\n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\r\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\r\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\r\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\r\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\r\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\r\n    \r\n    if(error !== \"\")\r\n    {\r\n        console.log(error);\r\n        return null;\r\n    }\r\n    \r\n    // An array to hold the intermediate state.\r\n    var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    // Splits the strings into character arrays.\r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n    \r\n    // Check the center cubies before advancing.\r\n    for(index = 0; index < faces.length; index ++)\r\n    {\r\n        if(RubixState.faceValues[index] !== faces[index][4])\r\n        {\r\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\r\n                 \" is wrong!\");\r\n            return null;\r\n        }\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n    \r\n    return RubixState.verifyState(state) ? state : null;\r\n};\r\n\r\n/**\r\n * Verifies the supplied state. Should only be called on creation!\r\n * @param state the state to verify.\r\n * @return true if valid false if not.\r\n */\r\nRubixState.verifyState = function(state)\r\n{   \r\n    var faces = [0,0,0,0,0,0];\r\n    var faceWindow = 0;\r\n    \r\n    // A magical face checker that actually does what's described below.\r\n    var updateFaceCheck = function(currentCubies, faceColors, bufferIndex)\r\n    {\r\n        var faceIndex = 0;\r\n        if(!bufferIndex)\r\n        {\r\n            for(var index in currentCubies)\r\n            {\r\n                faceIndex = faceColors.indexOf(currentCubies[index] & 7);\r\n                faces[currentCubies[index] >> 4] += faceIndex;\r\n            }\r\n        }\r\n        else\r\n    \t{\r\n\t\t\tfor(var index = 0; index <currentCubies.length; index ++)\r\n            {\r\n                faceIndex = faceColors.indexOf(currentCubies[index] & 7);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(RubixState.edgeWindows[currentCubies[index] >> 4].indexOf(bufferIndex +index) !=-1)\r\n                {\r\n\t\t\t\t\tfaceWindow += faceIndex;\r\n                }\r\n            }\r\n\t\t}\r\n    };\r\n    \r\n    /**\r\n     * Does corner cubie parity checks. \r\n     * \r\n     * Each corner face is assigned a number derived from the assumed original \r\n     * position of the cubie color configuration in the original cube. All faces \r\n     * for Red and Orange are assigned 0 for the purpose of this calculation.\r\n     * After assigning these zeroes each cubie face is assigned a number while moving\r\n     * clockwise from the numbered faces. For example the RBY cubie is assigned as R-0 B-1 Y-2.\r\n     * This is repeated for all colors and the result is as follows.\r\n     * \r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     * 1-2 1-2 1-2\r\n     * --- --- ---\r\n     * 2-1 2-1 2-1\r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     *     1-2\r\n     *     ---\r\n     *     2-1\r\n     * \r\n     * Opposing sides regardless of legal moves will always add up to some multiple of 3\r\n     * allowing us to check corner parity. Logically this indicates that only 1/3 of\r\n     * possible cubie configurations are possible with legal moves.\r\n     */ \r\n    for (var index = 0; index < 24; index +=3)\r\n    {\r\n        switch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7) + \r\n            (state.cubies[index + 2] & 7)){    \r\n            //RYG\r\n            case 3:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,2,1]);\r\n                break;\r\n            //RBY\r\n            case 5:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [0,3,2]);\r\n                break;\r\n            //RGW\r\n            case 6:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,1,5]);\r\n                break;\r\n            //OGY\r\n            case 7:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,1,2]);\r\n                break;\r\n            //RWB\r\n            case 8:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,5,3]);\r\n                break;\r\n            //OYB\r\n            case 9:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1] , state.cubies[index + 2]],\r\n                    [4,2,3]);\r\n                break;\r\n            //OWG\r\n            case 10:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [4,5,1]);\r\n                break;\r\n            //OBW\r\n            case 12:  \r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,3,5]);\r\n                break;\r\n            default:\r\n                console.log(\"An invalid cubie has been discovered! Bad corner cubie \" +\r\n                    \"combination! For corner:\"+  index / 3 );\r\n                return false;\r\n        }\r\n        \r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7) ||\r\n            (state.cubies[index] & 7) === (state.cubies[index + 2] & 7) ||\r\n    \t\t(state.cubies[index + 1] & 7) === (state.cubies[index + 2] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Corner Cubie:\" + index/3 + \" had duplicate colors.\");\r\n            return false;   \r\n        }\r\n    }       \r\n    \r\n    if(((faces[0]+faces[4]) % 3) + ((faces[1] + faces[3]) % 3) + ((faces[2] + faces[5]) % 3) !== 0)\r\n    {\r\n        console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\r\n        return false;\r\n    }\r\n    \r\n\r\n\t/**\r\n     * Performs the edge parity check.\r\n     * \r\n     * Arbitrarily assigns fixed windows to a solved cube alternating horizontal and vertical as follows:\r\n     * \r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     * -1- -0- -1-\r\n     * 0-0 1-1 0-0\r\n     * -1- -0- -1-\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     *     -0-\r\n     *     1-1\r\n     *     -0-\t\r\n     * After assigning these windows, the algorithm then determines what the original value of the \r\n     * side face was and adds it to the window sum (if the face is in a position\r\n     * that was originally assigned a 1). If the sum mod 2 is zero the cube is valid\r\n     * for our goal state, this means that the total number of reachable corner\r\n     * states is effectively halved.\r\n\t*/\r\n    for (index = 24; index < 48; index +=2)\r\n    {\r\n\t\tswitch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7))\r\n\t\t{\r\n\t\t\t//RG\r\n\t\t\tcase 1:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [0,1],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//RY\r\n\t\t\tcase 2:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [2,0],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//RB, YG\r\n\t\t\tcase 3:\r\n\t\t\t\tif( (state.cubies[index] & 7) === 0 || \r\n                    (state.cubies[index] & 7) === 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[0,3],index);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,2],index);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//RW, OG, YB\r\n\t\t\tcase 5:\r\n\t\t\t\t//RW\r\n\t\t\t\tif((state.cubies[index] & 7) === 0 || \r\n                    (state.cubies[index] & 7) === 5)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[5,0],index);\r\n\t\t\t\t}\r\n\t\t\t\t//OG\r\n\t\t\t\telse if ((state.cubies[index] & 7) === 4 || \r\n                    (state.cubies[index] & 7) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[4,1],index);\r\n\t\t\t\t}\r\n\t\t\t\t//YB\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[3,2],index);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OY, WG\r\n\t\t\tcase 6:\r\n\t\t\t\tif((state.cubies[index] & 7) === 2 || \r\n                    (state.cubies[index] & 7) === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[2,4],index);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,5],index);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OB\r\n\t\t\tcase 7:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[4,3],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//WB\r\n\t\t\tcase 8:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[3,5],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//OW\r\n\t\t\tcase 9:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[5,4],index);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\r\n                    \"combination! For side:\"+  (index - 24) / 2);\r\n                return false;\r\n\t\t\t\r\n\t\t}\t\r\n       \r\n        \r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Side Cubie:\" + (index-24) / 2+ \" had duplicate colors.\"); \r\n            return false;   \r\n        }\r\n    }\r\n    if(faceWindow % 2 === 1)\r\n    {\r\n        console.log(\"One of your side cubies have been flipped, please look into this.\");\r\n        return false;\r\n    }\r\n\r\n    return true;   \r\n};\r\n\r\n\r\n/**\r\n * Creates a UInt8 face state with the following binary encoding: -***-+++ \r\n * where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n * \r\n * Please note there are 2 bits per space wasted.\r\n * \r\n * @param color The uppercase color character that will be encoded to a 3 bit pattern.\r\n * @param face The face side to be encoded into the state.\r\n * \r\n * @return The encoded face state as a Uint8.\r\n */\r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\n/**\r\n * Creates a copy of the supplied RubixState object.\r\n * \r\n * @param state The state that is to be copied.\r\n * @return The copied state.\r\n */\r\nRubixState.copy = function(state)\r\n{\r\n    return new RubixState(state.cubies.buffer.slice(0));\r\n};\r\n\r\nRubixState.copyAndRotate = function (baseState, copiedState,actions)\r\n{\r\n    if(copiedState) \r\n    {\r\n        for(var index in baseState)\r\n        {\r\n            copiedState.cubies[index] = baseState.cubies[index];    \r\n        }\r\n    }\r\n    else\r\n    {\r\n        copiedState = RubixState.copy(baseState);\r\n    }\r\n    \r\n    RubixState.rotate(copiedState, actions[0],actions[1]);\r\n    \r\n    return copiedState;\r\n};\r\n\r\n/**\r\n * The equivalence function for two RubixState objects.\r\n * @param state1 A state to be checked for equivalence.\r\n * @param state2 A state to be checked for equivalence.\r\n * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n */\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\r\n     */\r\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);     \r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n/**\r\n * Finds the cubie located at the specified cubie of state1 in state2.\r\n */\r\nRubixState.findCubie = function(state1, cubie, state2)\r\n{\r\n    var colorId = RubixState.cubieColorId(state1, cubie);\r\n    \r\n    for (var index = 0; index < 20; index++)\r\n    {\r\n        if (RubixState.cubieColorId(state2, index) === colorId)\r\n            return index;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";\r\n};\r\n\r\nRubixState.areCubiesEqual = function(state1, state2, cubie)\r\n{\r\n    var cubieIndex, cubieIndicies = RubixState.cubieMap[cubie];\r\n    \r\n    for (var index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        cubieIndex = cubieIndicies[index];\r\n        \r\n        if (state1.cubies[cubieIndex] !== state2.cubies[cubieIndex])\r\n            return false;\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n/**\r\n * Returns a unique ID to represent the colors of the faces of the specified cubie.\r\n * Disregards orientation.\r\n * @param state the state containing the cubie\r\n * @param cubie the index of the cubie according to the cubieMap\r\n * @return a unique color ID.\r\n */\r\nRubixState.cubieColorId = function(state, cubie)\r\n{\r\n    var colorId = 0, faceIds = [], cubieIndicies = RubixState.cubieMap[cubie], index;\r\n    \r\n    for (index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        faceIds[index] = state.cubies[cubieIndicies[index]] & 7;\r\n    }\r\n    \r\n    faceIds.sort();\r\n    \r\n    for (index = 0; index < faceIds.length; index++)\r\n    {\r\n        colorId = (colorId << 3) | faceIds[index];\r\n    }\r\n    \r\n    // A corner ID could produce the same as an edge, so vary them by 13 bits\r\n    if (faceIds.length === 2)\r\n        colorId = colorId << 13;\r\n    \r\n    return colorId;\r\n};\r\n\r\nRubixState.hashCode = function(state, cubies)\r\n{\r\n    var hash = 0, faceIndicies, face, index, jndex;\r\n    \r\n    for (index = 0; index < cubies.length; index++)\r\n    {\r\n        faceIndicies = RubixState.cubieMap[cubies[index]];\r\n        for (jndex = 0; jndex < faceIndicies.length; jndex++)\r\n        {\r\n            face = state.cubies[faceIndicies[jndex]];\r\n            \r\n            // Muliplying by 8 is same as shifting 3 left; need to keep the numbers\r\n            // 64-bit as JS converts to 32-bit when using bitwise operators.\r\n            hash = (hash * 8) + (face & 7);\r\n        }\r\n    }\r\n    \r\n    return hash;\r\n};\r\n\r\n/**\r\n * The to String functionality for a RubixState.\r\n * @param state The state to retrieve a String from.\r\n * @return A String for the RubixState object.\r\n */\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\nRubixState.corners = [0, 2, 5, 7, 12, 14, 17, 19];\r\nRubixState.corners7 = [0, 2, 5, 7, 12, 14, 17];\r\nRubixState.edgesTop = [9, 10, 13, 15, 16, 18];\r\nRubixState.edgesBottom = [1, 3, 4, 6, 8, 11];\r\n\r\nRubixState.cubieMap = {\r\n    0 : [0, 1, 2], // c00\r\n    1 : [24, 25],\r\n    2 : [3, 4, 5], // c01\r\n    3 : [26, 27],\r\n    4 : [28, 29],\r\n    5 : [6, 7, 8], // c02\r\n    6 : [30, 31],\r\n    7 : [9, 10, 11], // c03\r\n    8 : [32, 33],\r\n    9 : [34, 35],\r\n    10 : [36, 37],\r\n    11 : [38, 39],\r\n    12 : [15, 16, 17], // c05\r\n    13 : [42, 43],\r\n    14 : [18, 19, 20], // c06\r\n    15 : [40, 41],\r\n    16 : [44, 45],\r\n    17 : [12, 13, 14], // c04\r\n    18 : [46, 47],\r\n    19 : [21, 22, 23] // c07\r\n};\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":32047}]],"length":32047,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350880402303,"patch":[[{"diffs":[[0,"ctions)\r\n{\r\n"],[1,"    /*\r\n"],[0,"    if(copie"]],"start1":22751,"start2":22751,"length1":24,"length2":32},{"diffs":[[0," else\r\n    {"],[1,"*/"],[0,"\r\n        co"]],"start1":22939,"start2":22939,"length1":24,"length2":26}]],"length":32057,"saved":false}
{"ts":1350880405037,"patch":[[{"diffs":[[0,"aseState);\r\n    "],[1,"//"],[0,"}\r\n    \r\n    Rub"]],"start1":22994,"start2":22994,"length1":32,"length2":34}]],"length":32059,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350882450915,"patch":[[{"diffs":[[0,"ns)\r\n{\r\n    "],[-1,"/*"],[0,"\r\n    if(cop"]],"start1":22755,"start2":22755,"length1":26,"length2":24},{"diffs":[[0,"\r\n};"],[-1,"/* ----------\r\n   rubixCube.js\r\n   \r\n   Represents the Rubik's cube as a JavaScript object.\r\n   ---------- */\r\n/**\r\n * A full representation of a single Rubik's cube state.\r\n * @return a default Rubik's state (i.e. an array of 20 undefined cubies)\r\n */\r\nfunction RubixState(buffer)\r\n{\r\n    //*=face +=color -=unused\r\n    //-***-+++ 2 unused bits per face 2*20 = 40 40/8 = 5 bytes wasted per state. \r\n    // (48 bytes total [plus some overhead], pretty damn good).\r\n    this.cubies = buffer ? new Uint8Array(buffer) : null;\r\n}\r\n\r\n/**\r\n * The scratch buffer for rotations. This reduces the number of times we have to \r\n * create a temporary buffer.\r\n */\r\nRubixState.scratchBuffer = new Uint8Array(new ArrayBuffer(20));\r\n\r\n/**\r\n * A scratch array used in face rotations.\r\n */\r\nRubixState.faceSet = [];\r\n\r\n/**\r\n * An array used in calculating pairity for edges in on a rubix cube.\r\n */\r\nRubixState.edgeWindows = [[24,30],[27,41],[34,36],[29,45],[43,47],[32,38]];\r\n\r\n/**\r\n * The cube's faces. They match the rotation map below for cubie face rotations.\r\n */\r\nRubixState.faces = {\r\n    back : 0,\r\n    left : 1,\r\n    top : 2,\r\n    right : 3,\r\n    front : 4,\r\n    bottom : 5\r\n};\r\n\r\n/**\r\n * The face value map used in tanslating moves to something human readable. \r\n */\r\nRubixState.faceValues = ['R','G','Y','B','O','W'];\r\n\r\n/*RubixState.goalState = RubixState.createWithGoalState();*/\r\n\r\n/**\r\n * Defines cubie locations for a side.\r\n */\r\nRubixState.sideLookUpTable = [\r\n    [ 0,24, 3,28, 9,30, 6,26], // red, back\r\n    [ 0,26, 6,34,15,40,12,32], // green, left\r\n    [ 6, 30,9,36,18,42,15,34], // yellow, top\r\n    [ 9,28, 3,38,21,44,18,36], // blue, right\r\n    [15,42,18,44,21,46,12,40], // orange, front    \r\n    [12,46,21,38, 3,24, 0,32]  // white, bottom\r\n];\r\n\r\n\r\n/**\r\n * Handles face rotations. \r\n * Calculations to reach each cubie\r\n * \r\n * f(c) = c*3 +  0\r\n * f(s) = s*2 + 24\r\n * \r\n *             c00 s00 c01\r\n *             s01  R  s02\r\n *             c02 s03 c03\r\n * c00 s01 c02 c02 s03 c03 c03 s02 c01\r\n * s04  G  s05 s05  Y  s06 s06  B  s07\r\n * c04 s08 c05 c05 s09 c06 c06 s10 c07\r\n *             c05 s09 c06 \r\n *             s08  O  s10 \r\n *             c04 s11 c07\r\n *             c04 s11 c07\r\n *             s04  W  s07\r\n *             c00 s00 c01\r\n * \r\n * @param state The state that is to be changed.\r\n * @param face The face that the rotation occurs on.\r\n * @param rotations The number of clockwise rotations for the action.\r\n*/\r\nRubixState.rotate = function(state, face, rotations)\r\n{\r\n    // The inidicies define the rotation behavior.\r\n    var indicies =  RubixState.sideLookUpTable[face];\r\n    \r\n    /*\r\n     * cubie - holds the cubie index.\r\n     * size - A generic size variable.\r\n     * newIndex - Holds a modified index.\r\n     * cFace - A cubieFace.\r\n     * offset - A generic offset variable.\r\n    */\r\n    var cubie, size, newIndex, cFace, offset;\r\n    \r\n    // Iterate over the indicies and calculate values of the rotated cubies.\r\n    for(var index  = 0, scratchIndex =0; index < indicies.length; index ++)\r\n    {\r\n        // Keep track of the cubie location. If it is a side (loc >= 24) size is 2 else 4\r\n        cubie = indicies[index];\r\n        size = cubie >=24 ? 2 : 3;\r\n        \r\n        // For the number of faces calculate individual face rotations and add them to our scratch.\r\n        for(cFace = 0; cFace < size; cFace++)\r\n        {\r\n             RubixState.scratchBuffer[scratchIndex++] = RubixState.rotateFace(\r\n                state.cubies[cubie+cFace], face, rotations);   \r\n        }\r\n    }\r\n    \r\n    // For each cubie shift the face data to the appropriate location in the buffer.\r\n    // This is done in increments of Corner,Side 4 times.\r\n    for (index = 0, size = indicies.length; index < size; index+=2)\r\n    {\r\n        // Calculate the index of the new cubie index after rotation.\r\n        newIndex = indicies[(index + (2 * rotations)) % 8];\r\n        \r\n        // Clear the face set of data.\r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        // Determine the face of each of the new buffer locations and load the \r\n        // new index in the appropriate position. This maps face to memory location.\r\n        RubixState.faceSet[state.cubies[newIndex] >> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        RubixState.faceSet[state.cubies[newIndex + 2] >> 4] = newIndex + 2;\r\n\r\n        // Place the cubie face data in the new position.\r\n        for(offset = 0; offset < 3; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 +offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n        \r\n        // See above.\r\n        newIndex = indicies[(index + 1 + (2 * rotations)) % 8];\r\n        \r\n        RubixState.faceSet.length = 0;\r\n        RubixState.faceSet.length = 6;\r\n        \r\n        RubixState.faceSet[state.cubies[newIndex]>> 4] = newIndex;\r\n        RubixState.faceSet[state.cubies[newIndex + 1] >> 4] = newIndex + 1;\r\n        \r\n         for(offset = 3; offset < 5; offset++)\r\n        {\r\n            cFace = RubixState.scratchBuffer[index * 5/2 + offset];\r\n            \r\n            state.cubies[RubixState.faceSet[cFace >> 4]] = cFace;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Rotates a face with some boolean magic.\r\n * \r\n * @param faceState The Uint8 number representing the cubie face.\r\n * @param face The face that the rotation is occuring about [0-5].\r\n * @param rotations The number of counterclockwise rotations [1-3].\r\n * @return A Uint8 with the following bit pattern: -***-+++ where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n */\r\nRubixState.rotateFace = function(faceState, face, rotations)\r\n{\r\n    // Shift right to get the value of the leading for bits.\r\n    var faceVal = Number(faceState >> 4);\r\n    \r\n    // Mask with 00000111 to retrieve the color from the faceState.\r\n    var colorVal = faceState & 7;\r\n\r\n    // If the mapping of face rotations is valid perform it, \r\n    // else it must be unaffected at this phase.\r\n    if ( RubixState.newFaceMap[face][faceVal])\r\n    {\r\n        return (RubixState.newFaceMap[face][faceVal][rotations] << 4) | colorVal;\r\n    }\r\n    else \r\n    {\r\n        return faceState;   \r\n    }\r\n};\r\n\r\n/**\r\n * Creates a Rubik cube with the goal state.\r\n */\r\nRubixState.createWithGoalState = function()\r\n{\r\n    // HAHAHAHAHA #JohnDidn'tFeelLikeWritingASeparateInitializer\r\n    return RubixState.createWithString(\"RRRRRRRRRGGGYYYBBBGGGYYYBBBGGGYYYBBBOOOOOOOOOWWWWWWWWW\");\r\n};\r\n\r\n/**\r\n * Creates a Rubik Cube from an upper case String of characters from a string \r\n * from the alphabet: {R,G,Y,B,O,W}.\r\n * \r\n * @param text The textual representation of the rubik cube as specified in the \r\n *      assignment.\r\n * @return A state for the supplied text.\r\n */\r\nRubixState.createWithString = function(text)\r\n{\r\n    \r\n    if(text.length !=  54) \r\n    {\r\n        console.log(\"Your rubik's cube doesn't contain the right number of cubie\" +\r\n            \" faces!\");\r\n        return null;\r\n    }\r\n    \r\n    var error = (text.match(/R/g)||[]).length !== 9 ? \"Incorrect number of Rs\\n\" : \"\";\r\n    error += (text.match(/G/g)||[]).length !== 9 ? \"Incorrect number of Gs\\n\" : \"\";\r\n    error += (text.match(/Y/g)||[]).length !== 9 ? \"Incorrect number of Ys\\n\" : \"\";\r\n    error += (text.match(/B/g)||[]).length !== 9 ? \"Incorrect number of Bs\\n\" : \"\";\r\n    error += (text.match(/O/g)||[]).length !== 9 ? \"Incorrect number of Os\\n\" : \"\";\r\n    error += (text.match(/W/g)||[]).length !== 9 ? \"Incorrect number of Ws\\n\" : \"\";\r\n    \r\n    if(error !== \"\")\r\n    {\r\n        console.log(error);\r\n        return null;\r\n    }\r\n    \r\n    // An array to hold the intermediate state.\r\n    var faces = [];\r\n    \r\n    // Iterate over the input string to organize our data.\r\n    for(var index = 0, line= \" \", length = text.length / 9; index <length; index++)\r\n    {\r\n        line = text.substring(index*9,index*9 + 9);\r\n        \r\n        // Switch on indices in a manner befitting of a boss.\r\n        switch(index)\r\n        {\r\n            case 1:\r\n                faces.push(line.substring(0,3));\r\n                faces.push(line.substring(3,6));\r\n                faces.push(line.substring(6,9));\r\n                break;\r\n            case 2 :\r\n            case 3 :\r\n                faces[1] += line.substring(0,3);\r\n                faces[2] += line.substring(3,6);\r\n                faces[3] += line.substring(6,9);\r\n                break;\r\n            default:\r\n                faces.push(line);\r\n                break;\r\n        }        \r\n    }\r\n    \r\n    // Splits the strings into character arrays.\r\n    for(var face in faces)\r\n    {\r\n        faces[face] = faces[face].split('');\r\n    }\r\n    \r\n    // Check the center cubies before advancing.\r\n    for(index = 0; index < faces.length; index ++)\r\n    {\r\n        if(RubixState.faceValues[index] !== faces[index][4])\r\n        {\r\n            console.log(\"Your \" + RubixState.faceValues[index] + \" face center cubie\" +\r\n                 \" is wrong!\");\r\n            return null;\r\n        }\r\n    }\r\n        \r\n    var state = new RubixState();\r\n    state.cubies = new Uint8Array(new ArrayBuffer(48));\r\n\r\n    /*\r\n             00 24 03\r\n             26 -R 28\r\n             06 30 09\r\n    02 27 08 07 31 10 11 29 05\r\n    33 -G 35 34 -Y 36 37 -B 39\r\n    14 41 17 15 42 18 20 45 23\r\n             16 43 19\r\n             40 -O 44\r\n             13 47 22\r\n             12 46 21\r\n             32 -W 38\r\n             01 25 04   \r\n    */\r\n    //c0\r\n    state.cubies[0]  = RubixState.createFace(faces[0][0],0);\r\n    state.cubies[1]  = RubixState.createFace(faces[5][6],5);\r\n    state.cubies[2]  = RubixState.createFace(faces[1][0],1);\r\n    \r\n    //c1\r\n    state.cubies[3]  = RubixState.createFace(faces[0][2],0);\r\n    state.cubies[4]  = RubixState.createFace(faces[5][8],5);\r\n    state.cubies[5]  = RubixState.createFace(faces[3][2],3);\r\n    \r\n    //c2\r\n    state.cubies[6]  = RubixState.createFace(faces[0][6],0);\r\n    state.cubies[7]  = RubixState.createFace(faces[2][0],2);\r\n    state.cubies[8]  = RubixState.createFace(faces[1][2],1);\r\n    \r\n    //c3\r\n    state.cubies[9]  = RubixState.createFace(faces[0][8],0);\r\n    state.cubies[10] = RubixState.createFace(faces[2][2],2);\r\n    state.cubies[11] = RubixState.createFace(faces[3][0],3);\r\n    \r\n    //c4\r\n    state.cubies[12] = RubixState.createFace(faces[5][0],5);\r\n    state.cubies[13] = RubixState.createFace(faces[4][6],4);\r\n    state.cubies[14] = RubixState.createFace(faces[1][6],1);\r\n    \r\n    //c5\r\n    state.cubies[15] = RubixState.createFace(faces[2][6],2);\r\n    state.cubies[16] = RubixState.createFace(faces[4][0],4);\r\n    state.cubies[17] = RubixState.createFace(faces[1][8],1);\r\n    \r\n    //c6\r\n    state.cubies[18] = RubixState.createFace(faces[2][8],2);\r\n    state.cubies[19] = RubixState.createFace(faces[4][2],4);\r\n    state.cubies[20] = RubixState.createFace(faces[3][6],3);   \r\n    \r\n    //c7\r\n    state.cubies[21] = RubixState.createFace(faces[5][2],5);\r\n    state.cubies[22] = RubixState.createFace(faces[4][8],4);\r\n    state.cubies[23] = RubixState.createFace(faces[3][8],3);\r\n    \r\n    //s0\r\n    state.cubies[24] = RubixState.createFace(faces[0][1],0);\r\n    state.cubies[25] = RubixState.createFace(faces[5][7],5);\r\n    \r\n    //s1\r\n    state.cubies[26] = RubixState.createFace(faces[0][3],0);\r\n    state.cubies[27] = RubixState.createFace(faces[1][1],1);\r\n    \r\n    //s2\r\n    state.cubies[28] = RubixState.createFace(faces[0][5],0);\r\n    state.cubies[29] = RubixState.createFace(faces[3][1],3);\r\n    \r\n    //s3\r\n    state.cubies[30] = RubixState.createFace(faces[0][7],0);\r\n    state.cubies[31] = RubixState.createFace(faces[2][1],2);\r\n    \r\n    //s4\r\n    state.cubies[32] = RubixState.createFace(faces[5][3],5);\r\n    state.cubies[33] = RubixState.createFace(faces[1][3],1);\r\n    \r\n    //s5\r\n    state.cubies[34] = RubixState.createFace(faces[2][3],2);\r\n    state.cubies[35] = RubixState.createFace(faces[1][5],1);\r\n    \r\n    //s6\r\n    state.cubies[36] = RubixState.createFace(faces[2][5],2);\r\n    state.cubies[37] = RubixState.createFace(faces[3][3],3);\r\n    \r\n    //s7\r\n    state.cubies[38] = RubixState.createFace(faces[5][5],5);\r\n    state.cubies[39] = RubixState.createFace(faces[3][5],3);\r\n    \r\n    //s8\r\n    state.cubies[40] = RubixState.createFace(faces[4][3],4);\r\n    state.cubies[41] = RubixState.createFace(faces[1][7],1);\r\n    \r\n    //s9\r\n    state.cubies[42] = RubixState.createFace(faces[2][7],2);\r\n    state.cubies[43] = RubixState.createFace(faces[4][1],4);\r\n        \r\n    //s10\r\n    state.cubies[44] = RubixState.createFace(faces[4][5],4);\r\n    state.cubies[45] = RubixState.createFace(faces[3][7],3);\r\n    \r\n    //s11\r\n    state.cubies[46] = RubixState.createFace(faces[5][1],5);\r\n    state.cubies[47] = RubixState.createFace(faces[4][7],4);\r\n    \r\n    return RubixState.verifyState(state) ? state : null;\r\n};\r\n\r\n/**\r\n * Verifies the supplied state. Should only be called on creation!\r\n * @param state the state to verify.\r\n * @return true if valid false if not.\r\n */\r\nRubixState.verifyState = function(state)\r\n{   \r\n    var faces = [0,0,0,0,0,0];\r\n    var faceWindow = 0;\r\n    \r\n    // A magical face checker that actually does what's described below.\r\n    var updateFaceCheck = function(currentCubies, faceColors, bufferIndex)\r\n    {\r\n        var faceIndex = 0;\r\n        if(!bufferIndex)\r\n        {\r\n            for(var index in currentCubies)\r\n            {\r\n                faceIndex = faceColors.indexOf(currentCubies[index] & 7);\r\n                faces[currentCubies[index] >> 4] += faceIndex;\r\n            }\r\n        }\r\n        else\r\n    \t{\r\n\t\t\tfor(var index = 0; index <currentCubies.length; index ++)\r\n            {\r\n                faceIndex = faceColors.indexOf(currentCubies[index] & 7);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(RubixState.edgeWindows[currentCubies[index] >> 4].indexOf(bufferIndex +index) !=-1)\r\n                {\r\n\t\t\t\t\tfaceWindow += faceIndex;\r\n                }\r\n            }\r\n\t\t}\r\n    };\r\n    \r\n    /**\r\n     * Does corner cubie parity checks. \r\n     * \r\n     * Each corner face is assigned a number derived from the assumed original \r\n     * position of the cubie color configuration in the original cube. All faces \r\n     * for Red and Orange are assigned 0 for the purpose of this calculation.\r\n     * After assigning these zeroes each cubie face is assigned a number while moving\r\n     * clockwise from the numbered faces. For example the RBY cubie is assigned as R-0 B-1 Y-2.\r\n     * This is repeated for all colors and the result is as follows.\r\n     * \r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     * 1-2 1-2 1-2\r\n     * --- --- ---\r\n     * 2-1 2-1 2-1\r\n     *     0-0\r\n     *     ---\r\n     *     0-0\r\n     *     1-2\r\n     *     ---\r\n     *     2-1\r\n     * \r\n     * Opposing sides regardless of legal moves will always add up to some multiple of 3\r\n     * allowing us to check corner parity. Logically this indicates that only 1/3 of\r\n     * possible cubie configurations are possible with legal moves.\r\n     */ \r\n    for (var index = 0; index < 24; index +=3)\r\n    {\r\n        switch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7) + \r\n            (state.cubies[index + 2] & 7)){    \r\n            //RYG\r\n            case 3:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,2,1]);\r\n                break;\r\n            //RBY\r\n            case 5:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [0,3,2]);\r\n                break;\r\n            //RGW\r\n            case 6:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,1,5]);\r\n                break;\r\n            //OGY\r\n            case 7:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,1,2]);\r\n                break;\r\n            //RWB\r\n            case 8:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [0,5,3]);\r\n                break;\r\n            //OYB\r\n            case 9:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1] , state.cubies[index + 2]],\r\n                    [4,2,3]);\r\n                break;\r\n            //OWG\r\n            case 10:\r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1],state.cubies[index + 2]],\r\n                    [4,5,1]);\r\n                break;\r\n            //OBW\r\n            case 12:  \r\n                updateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1], state.cubies[index + 2]],\r\n                    [4,3,5]);\r\n                break;\r\n            default:\r\n                console.log(\"An invalid cubie has been discovered! Bad corner cubie \" +\r\n                    \"combination! For corner:\"+  index / 3 );\r\n                return false;\r\n        }\r\n        \r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7) ||\r\n            (state.cubies[index] & 7) === (state.cubies[index + 2] & 7) ||\r\n    \t\t(state.cubies[index + 1] & 7) === (state.cubies[index + 2] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Corner Cubie:\" + index/3 + \" had duplicate colors.\");\r\n            return false;   \r\n        }\r\n    }       \r\n    \r\n    if(((faces[0]+faces[4]) % 3) + ((faces[1] + faces[3]) % 3) + ((faces[2] + faces[5]) % 3) !== 0)\r\n    {\r\n        console.log(\"A corner has a bad orientation, sorry this state is unsolvable for the assumed goal state.\");\r\n        return false;\r\n    }\r\n    \r\n\r\n\t/**\r\n     * Performs the edge parity check.\r\n     * \r\n     * Arbitrarily assigns fixed windows to a solved cube alternating horizontal and vertical as follows:\r\n     * \r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     * -1- -0- -1-\r\n     * 0-0 1-1 0-0\r\n     * -1- -0- -1-\r\n     *     -1-\r\n     *     0-0\r\n     *     -1-\r\n     *     -0-\r\n     *     1-1\r\n     *     -0-\t\r\n     * After assigning these windows, the algorithm then determines what the original value of the \r\n     * side face was and adds it to the window sum (if the face is in a position\r\n     * that was originally assigned a 1). If the sum mod 2 is zero the cube is valid\r\n     * for our goal state, this means that the total number of reachable corner\r\n     * states is effectively halved.\r\n\t*/\r\n    for (index = 24; index < 48; index +=2)\r\n    {\r\n\t\tswitch((state.cubies[index] & 7) + \r\n            (state.cubies[index + 1] & 7))\r\n\t\t{\r\n\t\t\t//RG\r\n\t\t\tcase 1:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [0,1],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//RY\r\n\t\t\tcase 2:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n                    state.cubies[index + 1]],\r\n                    [2,0],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//RB, YG\r\n\t\t\tcase 3:\r\n\t\t\t\tif( (state.cubies[index] & 7) === 0 || \r\n                    (state.cubies[index] & 7) === 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[0,3],index);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,2],index);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//RW, OG, YB\r\n\t\t\tcase 5:\r\n\t\t\t\t//RW\r\n\t\t\t\tif((state.cubies[index] & 7) === 0 || \r\n                    (state.cubies[index] & 7) === 5)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[5,0],index);\r\n\t\t\t\t}\r\n\t\t\t\t//OG\r\n\t\t\t\telse if ((state.cubies[index] & 7) === 4 || \r\n                    (state.cubies[index] & 7) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[4,1],index);\r\n\t\t\t\t}\r\n\t\t\t\t//YB\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[3,2],index);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OY, WG\r\n\t\t\tcase 6:\r\n\t\t\t\tif((state.cubies[index] & 7) === 2 || \r\n                    (state.cubies[index] & 7) === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[2,4],index);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t\t[1,5],index);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//OB\r\n\t\t\tcase 7:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[4,3],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//WB\r\n\t\t\tcase 8:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[3,5],index);\r\n\t\t\t\tbreak;\r\n\t\t\t//OW\r\n\t\t\tcase 9:\r\n\t\t\t\tupdateFaceCheck([state.cubies[index], \r\n\t\t\t\t\tstate.cubies[index + 1]],\r\n\t\t\t\t\t[5,4],index);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"An invalid cubie has been discovered! Bad side cubie \" +\r\n                    \"combination! For side:\"+  (index - 24) / 2);\r\n                return false;\r\n\t\t\t\r\n\t\t}\t\r\n       \r\n        \r\n        if((state.cubies[index] & 7) === (state.cubies[index + 1] & 7))\r\n        {\r\n\t\t\tconsole.log(\"Side Cubie:\" + (index-24) / 2+ \" had duplicate colors.\"); \r\n            return false;   \r\n        }\r\n    }\r\n    if(faceWindow % 2 === 1)\r\n    {\r\n        console.log(\"One of your side cubies have been flipped, please look into this.\");\r\n        return false;\r\n    }\r\n\r\n    return true;   \r\n};\r\n\r\n\r\n/**\r\n * Creates a UInt8 face state with the following binary encoding: -***-+++ \r\n * where:\r\n *  - : null \r\n *  + : color\r\n *  * : face\r\n * \r\n * Please note there are 2 bits per space wasted.\r\n * \r\n * @param color The uppercase color character that will be encoded to a 3 bit pattern.\r\n * @param face The face side to be encoded into the state.\r\n * \r\n * @return The encoded face state as a Uint8.\r\n */\r\nRubixState.createFace = function(color, face)\r\n{\r\n    var tempElement = 0;\r\n    var toAdd = 0;\r\n    \r\n    switch (color)\r\n    {\r\n        case 'R':\r\n            toAdd = 0;\r\n            break;\r\n        case 'G':\r\n            toAdd = 1;\r\n            break;\r\n        case 'Y':\r\n            toAdd = 2;\r\n            break;\r\n        case 'B':\r\n            toAdd = 3;\r\n            break;\r\n        case 'O':\r\n            toAdd = 4;\r\n            break;\r\n        case 'W':\r\n            toAdd = 5;\r\n            break;\r\n        default:\r\n            break;        \r\n    }\r\n    \r\n    return tempElement | (toAdd | (face << 4));   \r\n};\r\n\r\n/**\r\n * Creates a copy of the supplied RubixState object.\r\n * \r\n * @param state The state that is to be copied.\r\n * @return The copied state.\r\n */\r\nRubixState.copy = function(state)\r\n{\r\n    return new RubixState(state.cubies.buffer.slice(0));\r\n};\r\n\r\nRubixState.copyAndRotate = function (baseState, copiedState,actions)\r\n{\r\n    if(copiedState) \r\n    {\r\n        for(var index in baseState)\r\n        {\r\n            copiedState.cubies[index] = baseState.cubies[index];    \r\n        }\r\n    }\r\n    else\r\n    {\r\n        copiedState = RubixState.copy(baseState);\r\n    }\r\n    RubixState.rotate(copiedState, actions[0],actions[1]);\r\n    return copiedState;\r\n};\r\n\r\n/**\r\n * The equivalence function for two RubixState objects.\r\n * @param state1 A state to be checked for equivalence.\r\n * @param state2 A state to be checked for equivalence.\r\n * @return true: All faces are equivalent, false: Any state is non equivalent.\r\n */\r\nRubixState.isEqual = function(state1, state2)\r\n{\r\n    var equal = true;  \r\n    \r\n    /**\r\n     * Iterate over the cubie buffer to find any abberations, leave if a bad state is found.\r\n     */\r\n    for(var index = 0, length = state1.cubies.length; (index < length) & equal; index ++)\r\n    {\r\n        equal = (state1.cubies[index] === state2.cubies[index]);     \r\n    }\r\n\r\n    return equal;\r\n};\r\n\r\n/**\r\n * Retrieve the colorID of a face state.\r\n * @param faceState The face state to retrieve the color from.\r\n * @return The color ID.\r\n */\r\nRubixState.colorID = function(faceState)\r\n{\r\n    return RubixState.faceValues[faceState & 7];\r\n};\r\n\r\n/**\r\n * Finds the cubie located at the specified cubie of state1 in state2.\r\n */\r\nRubixState.findCubie = function(state1, cubie, state2)\r\n{\r\n    var colorId = RubixState.cubieColorId(state1, cubie);\r\n    \r\n    for (var index = 0; index < 20; index++)\r\n    {\r\n        if (RubixState.cubieColorId(state2, index) === colorId)\r\n            return index;\r\n    }\r\n    \r\n    // Should not get here.\r\n    throw \"Cubie not found: Invalid cubie\";\r\n};\r\n\r\nRubixState.areCubiesEqual = function(state1, state2, cubie)\r\n{\r\n    var cubieIndex, cubieIndicies = RubixState.cubieMap[cubie];\r\n    \r\n    for (var index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        cubieIndex = cubieIndicies[index];\r\n        \r\n        if (state1.cubies[cubieIndex] !== state2.cubies[cubieIndex])\r\n            return false;\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n/**\r\n * Returns a unique ID to represent the colors of the faces of the specified cubie.\r\n * Disregards orientation.\r\n * @param state the state containing the cubie\r\n * @param cubie the index of the cubie according to the cubieMap\r\n * @return a unique color ID.\r\n */\r\nRubixState.cubieColorId = function(state, cubie)\r\n{\r\n    var colorId = 0, faceIds = [], cubieIndicies = RubixState.cubieMap[cubie], index;\r\n    \r\n    for (index = 0; index < cubieIndicies.length; index++)\r\n    {\r\n        faceIds[index] = state.cubies[cubieIndicies[index]] & 7;\r\n    }\r\n    \r\n    faceIds.sort();\r\n    \r\n    for (index = 0; index < faceIds.length; index++)\r\n    {\r\n        colorId = (colorId << 3) | faceIds[index];\r\n    }\r\n    \r\n    // A corner ID could produce the same as an edge, so vary them by 13 bits\r\n    if (faceIds.length === 2)\r\n        colorId = colorId << 13;\r\n    \r\n    return colorId;\r\n};\r\n\r\nRubixState.hashCode = function(state, cubies)\r\n{\r\n    var hash = 0, faceIndicies, face, index, jndex;\r\n    \r\n    for (index = 0; index < cubies.length; index++)\r\n    {\r\n        faceIndicies = RubixState.cubieMap[cubies[index]];\r\n        for (jndex = 0; jndex < faceIndicies.length; jndex++)\r\n        {\r\n            face = state.cubies[faceIndicies[jndex]];\r\n            \r\n            // Muliplying by 8 is same as shifting 3 left; need to keep the numbers\r\n            // 64-bit as JS converts to 32-bit when using bitwise operators.\r\n            hash = (hash * 8) + (face & 7);\r\n        }\r\n    }\r\n    \r\n    return hash;\r\n};\r\n\r\n/**\r\n * The to String functionality for a RubixState.\r\n * @param state The state to retrieve a String from.\r\n * @return A String for the RubixState object.\r\n */\r\nRubixState.toString = function(state)\r\n{\r\n    var output = '   ' + RubixState.colorID(state.cubies[0]) + RubixState.colorID(state.cubies[24]) + RubixState.colorID(state.cubies[3]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[26]) + 'R' + RubixState.colorID(state.cubies[28]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[6]) + RubixState.colorID(state.cubies[30]) + RubixState.colorID(state.cubies[9]) + '\\n' +\r\n        \r\n        RubixState.colorID(state.cubies[2]) + RubixState.colorID(state.cubies[27]) + RubixState.colorID(state.cubies[8]) +\r\n        RubixState.colorID(state.cubies[7]) + RubixState.colorID(state.cubies[31]) + RubixState.colorID(state.cubies[10]) +\r\n        RubixState.colorID(state.cubies[11]) + RubixState.colorID(state.cubies[29]) + RubixState.colorID(state.cubies[5]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[33]) + 'G' + RubixState.colorID(state.cubies[35]) +\r\n        RubixState.colorID(state.cubies[34]) + 'Y' + RubixState.colorID(state.cubies[36]) +\r\n        RubixState.colorID(state.cubies[37]) + 'B' + RubixState.colorID(state.cubies[39]) + '\\n' + \r\n        \r\n        RubixState.colorID(state.cubies[14]) + RubixState.colorID(state.cubies[41]) + RubixState.colorID(state.cubies[17]) +\r\n        RubixState.colorID(state.cubies[15]) + RubixState.colorID(state.cubies[42]) + RubixState.colorID(state.cubies[18]) +\r\n        RubixState.colorID(state.cubies[20]) + RubixState.colorID(state.cubies[45]) + RubixState.colorID(state.cubies[23]) + '\\n' + \r\n        \r\n        '   ' + RubixState.colorID(state.cubies[16]) + RubixState.colorID(state.cubies[43]) + RubixState.colorID(state.cubies[19]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[40]) + 'O' + RubixState.colorID(state.cubies[44]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[13]) + RubixState.colorID(state.cubies[47]) + RubixState.colorID(state.cubies[22]) + '\\n' +\r\n        \r\n        '   ' + RubixState.colorID(state.cubies[12]) + RubixState.colorID(state.cubies[46]) + RubixState.colorID(state.cubies[21]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[32]) + 'W' + RubixState.colorID(state.cubies[38]) + '\\n' + \r\n        '   ' + RubixState.colorID(state.cubies[1]) + RubixState.colorID(state.cubies[25]) + RubixState.colorID(state.cubies[4]) + '\\n';\r\n        \r\n    return output;\r\n        \r\n    \r\n};\r\n\r\nRubixState.corners = [0, 2, 5, 7, 12, 14, 17, 19];\r\nRubixState.corners7 = [0, 2, 5, 7, 12, 14, 17];\r\nRubixState.edgesTop = [9, 10, 13, 15, 16, 18];\r\nRubixState.edgesBottom = [1, 3, 4, 6, 8, 11];\r\n\r\nRubixState.cubieMap = {\r\n    0 : [0, 1, 2], // c00\r\n    1 : [24, 25],\r\n    2 : [3, 4, 5], // c01\r\n    3 : [26, 27],\r\n    4 : [28, 29],\r\n    5 : [6, 7, 8], // c02\r\n    6 : [30, 31],\r\n    7 : [9, 10, 11], // c03\r\n    8 : [32, 33],\r\n    9 : [34, 35],\r\n    10 : [36, 37],\r\n    11 : [38, 39],\r\n    12 : [15, 16, 17], // c05\r\n    13 : [42, 43],\r\n    14 : [18, 19, 20], // c06\r\n    15 : [40, 41],\r\n    16 : [44, 45],\r\n    17 : [12, 13, 14], // c04\r\n    18 : [46, 47],\r\n    19 : [21, 22, 23] // c07\r\n};\r\n\r\n/**\r\n * Given the cube's rotating face, a cubie face's current face, and 1 to 3 rotations, this map\r\n * defines the new face for a cubie face. \r\n * \r\n * Usage: CubieFace.newFaceMap[rotating face][current cubie face's face][number of rotations]\r\n */\r\nRubixState.newFaceMap = {\r\n    0 : {\r\n        1 : {\r\n            1 : 5,\r\n            2 : 3,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 1,\r\n            2 : 5,\r\n            3 : 3\r\n        },\r\n        3 : {\r\n            1 : 2,\r\n            2 : 1,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 3,\r\n            2 : 2,\r\n            3 : 1\r\n        }\r\n    },\r\n    1 : {\r\n        0 : {\r\n            1 : 2,\r\n            2 : 4,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 4,\r\n            2 : 5,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 5,\r\n            2 : 0,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 0,\r\n            2 : 2,\r\n            3 : 4\r\n        }\r\n    },\r\n    2 : {\r\n        0 : {\r\n            1 : 3,\r\n            2 : 4,\r\n            3 : 1\r\n        },\r\n        1 : {\r\n            1 : 0,\r\n            2 : 3,\r\n            3 : 4\r\n        },\r\n        3 : {\r\n            1 : 4,\r\n            2 : 1,\r\n            3 : 0\r\n        },\r\n        4 : {\r\n            1 : 1,\r\n            2 : 0,\r\n            3 : 3\r\n        }\r\n    },\r\n    3 : {\r\n        0 : {\r\n            1 : 5,\r\n            2 : 4,\r\n            3 : 2\r\n        },\r\n        2 : {\r\n            1 : 0,\r\n            2 : 5,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 2,\r\n            2 : 0,\r\n            3 : 5\r\n        },\r\n        5 : {\r\n            1 : 4,\r\n            2 : 2,\r\n            3 : 0\r\n        }\r\n    },\r\n    4 : {\r\n        1 : {\r\n            1 : 2,\r\n            2 : 3,\r\n            3 : 5\r\n        },\r\n        2 : {\r\n            1 : 3,\r\n            2 : 5,\r\n            3 : 1\r\n        },\r\n        3 : {\r\n            1 : 5,\r\n            2 : 1,\r\n            3 : 2\r\n        },\r\n        5 : {\r\n            1 : 1,\r\n            2 : 2,\r\n            3 : 3\r\n        }\r\n    },\r\n    5 : {\r\n        0 : {\r\n            1 : 1,\r\n            2 : 4,\r\n            3 : 3\r\n        },\r\n        1 : {\r\n            1 : 4,\r\n            2 : 3,\r\n            3 : 0\r\n        },\r\n        3 : {\r\n            1 : 0,\r\n            2 : 1,\r\n            3 : 4\r\n        },\r\n        4 : {\r\n            1 : 3,\r\n            2 : 0,\r\n            3 : 1\r\n        }\r\n    }\r\n};"]],"start1":32053,"start2":32053,"length1":32039,"length2":4}]],"length":32057,"saved":false}
{"ts":1350882453775,"patch":[[{"diffs":[[0,"e\r\n    {"],[-1,"*/"],[0,"\r\n      "]],"start1":22941,"start2":22941,"length1":18,"length2":16}]],"length":32055,"saved":false}
{"ts":1350882456693,"patch":[[{"diffs":[[0,");\r\n    "],[-1,"//"],[0,"}\r\n    \r"]],"start1":22998,"start2":22998,"length1":18,"length2":16}]],"length":32053,"saved":false}
{"ts":1350882481981,"patch":[[{"diffs":[[0,"te)\r\n        {\r\n"],[1,"            console.log(\"before\", copiedState.cubies[index]);\r\n"],[0,"            copi"]],"start1":22830,"start2":22830,"length1":32,"length2":95}]],"length":32116,"saved":false}
{"ts":1350882493171,"patch":[[{"diffs":[[0,"index]; "],[1,"\r\n"],[0,"   "],[1,"                     console.log(\"after\", copiedState.cubies[index]);\r\n"],[0,"\r\n      "]],"start1":22966,"start2":22966,"length1":19,"length2":92}]],"length":32189,"saved":false}
{"ts":1350882566885,"patch":[[{"diffs":[[0,"efore\", "],[-1,"copied"],[1,"base"],[0,"State.cu"]],"start1":22872,"start2":22872,"length1":22,"length2":20},{"diffs":[[0,"after\", "],[-1,"copied"],[1,"base"],[0,"State.cu"]],"start1":23011,"start2":23011,"length1":22,"length2":20}]],"length":32185,"saved":false}
{"ts":1350882635114,"patch":[[{"diffs":[[0,"ctions)\r\n{\r\n    "],[1,"console.log(baseState.cubies);"],[0,"\r\n    if(copiedS"]],"start1":22751,"start2":22751,"length1":32,"length2":62}]],"length":32215,"saved":false}
{"ts":1350882677854,"patch":[[{"diffs":[[0,"e.cubies"],[1,".buffer.slice(0)"],[0,");\r\n    "]],"start1":22787,"start2":22787,"length1":16,"length2":32}]],"length":32231,"saved":false}
{"ts":1350882692858,"patch":[[{"diffs":[[0,"log("],[-1,"baseState.cubies.buffer.slice(0));"],[0,"\r\n  "]],"start1":22775,"start2":22775,"length1":42,"length2":8},{"diffs":[[0,"State) \r\n    {\r\n"],[1,"        /*\r\n"],[0,"        for(var "]],"start1":22794,"start2":22794,"length1":32,"length2":44},{"diffs":[[0,"]);\r\n\r\n        }"],[1,"*/"],[0,"\r\n    }\r\n    els"]],"start1":23065,"start2":23065,"length1":32,"length2":34}]],"length":32211,"saved":false}
{"ts":1350882697812,"patch":[[{"diffs":[[0,"State) \r\n    {\r\n"],[1,"        baseState.cubies.buffer.slice(0);\r\n"],[0,"        /*\r\n    "]],"start1":22794,"start2":22794,"length1":32,"length2":75}]],"length":32254,"saved":false}
{"ts":1350882703914,"patch":[[{"diffs":[[0,"\n{\r\n"],[-1,"    console.log(\r\n"],[0,"    "]],"start1":22759,"start2":22759,"length1":26,"length2":8}]],"length":32236,"saved":false}
{"ts":1350882712979,"patch":[[{"diffs":[[0,"\n       "],[1," copiedState.cubies ="],[0," baseSta"]],"start1":22791,"start2":22791,"length1":16,"length2":37}]],"length":32257,"saved":false}
{"ts":1350882752046,"patch":[[{"diffs":[[0,"e.cubies"],[-1," = "],[1,".set("],[0,"baseStat"]],"start1":22810,"start2":22810,"length1":19,"length2":21},{"diffs":[[0,"slice(0)"],[-1,";"],[1,");\r\n        "],[0,"\r\n      "]],"start1":22847,"start2":22847,"length1":17,"length2":28}]],"length":32270,"saved":false}
{"ts":1350882835582,"patch":[[{"diffs":[[0,"bies"],[-1,".set"],[1," = Uint8Array"],[0,"(bas"]],"start1":22814,"start2":22814,"length1":12,"length2":21}]],"length":32279,"saved":false}
{"ts":1350882850531,"patch":[[{"diffs":[[0,"cubies ="],[1," new"],[0," Uint8Ar"]],"start1":22812,"start2":22812,"length1":16,"length2":20}]],"length":32283,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350884704259,"patch":[[{"diffs":[[0,"piedState.cubies"],[-1," = "],[1,".set(baseState.cubies);\r\n        //"],[0,"new Uint8Array(b"]],"start1":22802,"start2":22802,"length1":35,"length2":67}]],"length":32315,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350884874969,"patch":[[{"diffs":[[0,"   {\r\n        co"],[1,"nsole.log(\"init\"\r\n        co"],[0,"piedState.cubies"]],"start1":22786,"start2":22786,"length1":32,"length2":60},{"diffs":[[0,"es);"],[-1,"\r\n        //new Uint8Array(baseState.cubies.buffer.slice(0));\r\n        \r\n        /*\r\n        for(var index in baseState)\r\n        {\r\n            console.log(\"before\", baseState.cubies[index]);\r\n            copiedState.cubies[index] = baseState.cubies[index]; \r\n                        console.log(\"after\", baseState.cubies[index]);\r\n\r\n        }*/"],[0,"\r\n  "]],"start1":22865,"start2":22865,"length1":354,"length2":8}]],"length":31997,"saved":false}
{"ts":1350884878058,"patch":[[{"diffs":[[0,"g(\"init\""],[1,");"],[0,"\r\n      "]],"start1":22810,"start2":22810,"length1":16,"length2":18}]],"length":31999,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350884975681,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(\"init\");\r\n"],[0,"    "]],"start1":22788,"start2":22788,"length1":38,"length2":8}]],"length":31969,"saved":false}
{"ts":1350885006337,"patch":[[{"diffs":[[0,"State) \r\n    {\r\n"],[1,"        console.log(copiedState);\r\n"],[0,"        copiedSt"]],"start1":22776,"start2":22776,"length1":32,"length2":67}]],"length":32004,"saved":false}
{"ts":1350885014975,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"before\",m"],[0,"copiedSt"]],"start1":22804,"start2":22804,"length1":16,"length2":26}]],"length":32014,"saved":false}
{"ts":1350885018874,"patch":[[{"diffs":[[0,"before\","],[-1,"m"],[0,"copiedSt"]],"start1":22813,"start2":22813,"length1":17,"length2":16},{"diffs":[[0,"e.cubies);\r\n"],[1,"        \r\n"],[0,"    }\r\n    e"]],"start1":22875,"start2":22875,"length1":24,"length2":34}]],"length":32023,"saved":false}
{"ts":1350885021862,"patch":[[{"diffs":[[0,"bies);\r\n        "],[1,"        console.log(\"afe\",copiedState);\r\n"],[0,"\r\n    }\r\n    els"]],"start1":22879,"start2":22879,"length1":32,"length2":73}]],"length":32064,"saved":false}
{"ts":1350885024962,"patch":[[{"diffs":[[0,".log(\"af"],[-1,"e"],[1,"ter"],[0,"\",copied"]],"start1":22910,"start2":22910,"length1":17,"length2":19}]],"length":32066,"saved":false}
{"ts":1350885106169,"patch":[[{"diffs":[[0,",copiedState"],[1,".cupies"],[0,");\r\n\r\n    }\r"]],"start1":22922,"start2":22922,"length1":24,"length2":31}]],"length":32073,"saved":false}
{"ts":1350885109117,"patch":[[{"diffs":[[0,"State.cu"],[-1,"p"],[1,"b"],[0,"ies);\r\n\r"]],"start1":22929,"start2":22929,"length1":17,"length2":17}]],"length":32073,"saved":false}
{"ts":1350885114341,"patch":[[{"diffs":[[0,",copiedState"],[1,".cubies"],[0,");\r\n        "]],"start1":22820,"start2":22820,"length1":24,"length2":31}]],"length":32080,"saved":false}
{"ts":1350885448529,"patch":[[{"diffs":[[0,"piedState.cubies"],[1,"[0]"],[0,");\r\n        copi"]],"start1":22823,"start2":22823,"length1":32,"length2":35},{"diffs":[[0,"State.cubies"],[1,"[0]"],[0,");\r\n\r\n    }\r"]],"start1":22939,"start2":22939,"length1":24,"length2":27}]],"length":32086,"saved":false}
{"ts":1350885566246,"patch":[[{"diffs":[[0,"s);\r"],[-1,"\n                console.log(\"after\",copiedState.cubies[0]);\r"],[0,"\n\r\n "]],"start1":22892,"start2":22892,"length1":69,"length2":8}]],"length":32025,"saved":false}
{"ts":1350885569213,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(\"before\",copiedState.cubies[0]);\r\n"],[0,"    "]],"start1":22788,"start2":22788,"length1":62,"length2":8},{"diffs":[[0,"e.cubies);\r\n"],[-1,"\r\n"],[0,"    }\r\n    e"]],"start1":22831,"start2":22831,"length1":26,"length2":24}]],"length":31969,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350908525003,"patch":[[{"diffs":[[0," 0; index < "],[-1,"cubieIndicies"],[1,"RubixState.cubieMap[cubie]"],[0,".length; ind"]],"start1":24527,"start2":24527,"length1":37,"length2":50}]],"length":31982,"saved":false}
{"ts":1350908540134,"patch":[[{"diffs":[[0,"Index = "],[-1,"cubieIndicies"],[1,"RubixState.cubieMap[cubie]"],[0,"[index];"]],"start1":24604,"start2":24604,"length1":29,"length2":42}]],"length":31995,"saved":false}
{"ts":1350908563483,"patch":[[{"diffs":[[0," {\r\n        "],[1,"//"],[0,"cubieIndex ="]],"start1":24587,"start2":24587,"length1":24,"length2":26},{"diffs":[[0,"x = "],[-1,"RubixState.cubieMap[cubie]"],[1,"cubieIndicies"],[0,"[ind"]],"start1":24610,"start2":24610,"length1":34,"length2":21},{"diffs":[[0,".cubies["],[-1,"cubieI"],[1,"RubixState.cubieMap[cubie][i"],[0,"ndex]"],[1,"]"],[0," !== sta"]],"start1":24665,"start2":24665,"length1":27,"length2":50},{"diffs":[[0,"ies["],[-1,"cubieI"],[1,"RubixState.cubieMap[cubie][i"],[0,"ndex]"],[1,"]"],[0,")\r\n "]],"start1":24722,"start2":24722,"length1":19,"length2":42}]],"length":32030,"saved":false}
{"ts":1350908567696,"patch":[[{"diffs":[[0,"ie)\r\n{\r\n    "],[1,"//"],[0,"var cubieInd"]],"start1":24428,"start2":24428,"length1":24,"length2":26}]],"length":32032,"saved":false}
{"ts":1350908574570,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"//"],[0,"var cubi"]],"start1":24432,"start2":24432,"length1":18,"length2":16},{"diffs":[[0,"x < "],[-1,"RubixState.cubieMap[cubie]"],[1,"cubieIndicies"],[0,".len"]],"start1":24535,"start2":24535,"length1":34,"length2":21},{"diffs":[[0,"        "],[-1,"//"],[0,"cubieInd"]],"start1":24578,"start2":24578,"length1":18,"length2":16},{"diffs":[[0,"ies["],[-1,"RubixState.cubieMap[cubie][i"],[1,"cubieI"],[0,"ndex]"],[-1,"]"],[0," !=="]],"start1":24654,"start2":24654,"length1":42,"length2":19},{"diffs":[[0,"ies["],[-1,"RubixState.cubieMap[cubie][i"],[1,"cubieI"],[0,"ndex]"],[-1,"]"],[0,")\r\n "]],"start1":24684,"start2":24684,"length1":42,"length2":19}]],"length":31969,"saved":false}
{"ts":1350921599203,"patch":[[{"diffs":[[0,"edState,"],[1,"f"],[0,"ac"],[-1,"tion"],[1,"e, rot"],[0,"s)\r\n{\r\n "]],"start1":22742,"start2":22742,"length1":22,"length2":25}]],"length":31972,"saved":false}
{"ts":1350921602958,"patch":[[{"diffs":[[0,"edState,"],[1," "],[0,"face, ro"]],"start1":22742,"start2":22742,"length1":16,"length2":17},{"diffs":[[0,"te, "],[1,"f"],[0,"ac"],[-1,"tions[0]"],[1,"e"],[0,",act"]],"start1":22966,"start2":22966,"length1":18,"length2":12}]],"length":31967,"saved":false}
{"ts":1350921608431,"patch":[[{"diffs":[[0,"ace,"],[-1,"actions[1]"],[1," rots"],[0,");\r\n"]],"start1":22971,"start2":22971,"length1":18,"length2":13}]],"length":31962,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350947370424,"patch":[[{"diffs":[[0," - : null \r\n"],[-1," *  + : color\r\n"],[0," *  * : face"]],"start1":5609,"start2":5609,"length1":39,"length2":24}]],"length":31947,"saved":false}
